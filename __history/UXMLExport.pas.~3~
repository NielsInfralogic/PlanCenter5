unit UXMLExport;

Interface

uses
  SysUtils, Classes,inifiles, xmldom, XMLIntf, msxmldom, XMLDoc,ActiveX,
  Dialogs,
  NativeXml,
  StrUtils,
  System.NetEncoding;
type
  TDataModuleXML = class(TDataModule)
    XMLDocument1: TXMLDocument;
    SaveDialog1: TSaveDialog;
  private
  public
    { Public declarations }
    Function maketransxmls(xmlfilename : string; XMLPublicationID :Integer):boolean;
    Function TransferplantoAXML:boolean;
    Function getfromdatabase(publicationid : Longint;
                             pubdate       : Tdatetime;
                             Pressid       : Longint;
                             NotIneditionid : Longint):boolean;

    Function makexmls(xmlfilename : string ):boolean;
  end;

var
  DataModuleXML: TDataModuleXML;




  NEditiondata : longint;
  Editiondata : array[1..200] of  record
                                   presstime         : Tdatetime;
                                   Edition           : Longint;
                                   Anyplates         : boolean;
                                   Numberofcopies    : Longint;
                                   NPages : Longint;
                                   PressSectionNumber : Integer;
                                   Pages : Array[1..200] of record
                                                              pagina         : Longint;   //3
                                                              pageindex      : Longint;   //4
                                                              pagename       : string;    //6
                                                              Priority          : Longint;
                                                              Section        : Longint;   //7
                                                              Unique         : Longint;   //9 1=X 0 =''
                                                              Planedpagename : string;    //10
                                                              NColors        : Longint;
                                                              miscstring2    : String;
                                                              pageID         : Longint;
                                                              masterpageid   : Longint;
                                                              Colors         : array[1..5] of record
                                                                                                colorid : Longint;
                                                                                                active  : Longint;
                                                                                              end;
                                                              Pagetype       : Longint;   //12 0 normal 1 panorama 2 anti
                                                              copyseparationset         : Longint;
                                                              mastercopyseparationset   : longint;
                                                              Masteredition             : Longint;
                                                              Approved       : Longint;
                                                              Hold           : Longint;
                                                              Version        : Longint;
                                                              iplf           : Longint;
                                                              IPl            : Longint;
                                                              IP             : Longint;
                                                            end;


                                   Nplates : longint;
                                   plates  : array[1..100] of record
                                                                Front : Longint;
                                                                Npages : Longint;
                                                                templatelistid    : Longint;
                                                                SortingPosition : String;
                                                                PressTower      : String;
                                                                PressZone       : String;
                                                                PressHighLow    : String;
                                                                miscstring3     : String;
                                                                Pages : Array[1..16] of record
                                                                                          posX : Longint;
                                                                                          posY : Longint;
                                                                                          pageindex : Longint;
                                                                                          pageid : Longint;
                                                                                          masterpageid : Longint;
                                                                                          copyseparationset : Longint;
                                                                                          sectionid : Longint;
                                                                                          pagina : Longint;
                                                                                          pagename : String;
                                                                                          iplf           : Longint;
                                                                                          IPl            : Longint;
                                                                                          IP             : Longint;
                                                                                        end;
                                                                NColors        : Longint;
                                                                Colors         : array[1..5] of record
                                                                                                  colorid : Longint;
                                                                                                  active  : Longint;
                                                                                                  Ncopies        : Longint;
                                                                                                  Cylinder : string;
                                                                                                  Copies         : array[1..4] of record

                                                                                                                                    miscstring2 : String;
                                                                                                                                    miscstring3 : String;
                                                                                                                                    High : String;
                                                                                                                                    SortingPosition : String;
                                                                                                                                  end;

                                                                                                end;

                                                              end;


                                 end;



implementation

uses forms, Umain,udata,utypes,DateUtils,UPlanframe, Uloadpressplan,
  UApplyplan, Usettings, ULoadstbplan, UUtils;

{$R *.dfm}



Function TDataModuleXML.getfromdatabase(publicationid : Longint;
                                        pubdate       : Tdatetime;
                                        Pressid       : Longint;
                                        NotIneditionid : Longint):boolean;
Var
  I,Ied,ied2,dbl1,Ipage,ipage2,ColorIfound,Icolor,x,y,iplate : Longint;
  pubdatestr : string;
  Publicationexists : Boolean;
  T : String;
  aktcopyseparationset,aktcopyflatseparationset,akteditionid,aktsectionid,aktpageindex : Longint;
  aktpagenumber : Longint;
  Pacross,Pdown,Ppos : Longint;
Begin
  Pacross := 1;
  Pdown := 1;
  aktpagenumber := 0;
  NEditiondata := 0;
  pubdatestr    := DataM1.makedatastr('',pubdate);
  result := false;
  Publicationexists := false;
  DataM1.Query1.SQL.Clear;
  DataM1.Query1.SQL.add('Select Distinct pressid,editionid,sectionid,pageindex,colorid,Pagination,pagename,UniquePage,PlanPageName,Pagetype,active,copyseparationset,mastercopyseparationset,miscstring2 ');
  DataM1.Query1.SQL.add(' ,max(hold),min(approved),min(version),min(presstime)');
  DataM1.Query1.SQL.add(' from pagetable WITH (NOLOCK) ');

  DataM1.Query1.SQL.add('where publicationid = ' + inttostr(publicationid) );
  DataM1.Query1.SQL.add('and '+ pubdatestr);
  IF Pressid > -1 then
    DataM1.Query1.SQL.add('and pressid = '+ inttostr(Pressid));
  DataM1.Query1.SQL.add('and editionid <> '+ inttostr(NotIneditionid));
  DataM1.Query1.SQL.add('and copynumber = 1');
  DataM1.Query1.SQL.add('and pagetype < 3 ');
  DataM1.Query1.SQL.add('group by pressid,editionid,sectionid,pageindex,colorid,Pagination,pagename,UniquePage,PlanPageName,Pagetype,active,copyseparationset,mastercopyseparationset,miscstring2 ');
  DataM1.Query1.SQL.add('order by pressid,editionid,sectionid,pageindex,colorid');

  IF Prefs.debug then datam1.Query1.sql.SaveToFile(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'+'XMLPage.sql');

  DataM1.Query1.open;

  akteditionid := -1;
  aktsectionid := -1;
  aktpageindex := -1;
  While not DataM1.Query1.eof do
  begin
    Publicationexists := true;
    IF (akteditionid <> DataM1.Query1.fieldbyname('editionid').asinteger) or
       (aktsectionid <> DataM1.Query1.fieldbyname('sectionid').asinteger) or
       (aktpageindex <> DataM1.Query1.fieldbyname('pageindex').asinteger) then
    begin
      IF (akteditionid <> DataM1.Query1.fieldbyname('editionid').asinteger) then
      begin
        akteditionid := DataM1.Query1.fieldbyname('editionid').asinteger;
        Inc(NEditiondata);
        Editiondata[NEditiondata].NPages := 0;
        Editiondata[NEditiondata].Edition := akteditionid;
        Editiondata[NEditiondata].Nplates :=0;
        Editiondata[NEditiondata].presstime := DataM1.Query1.fieldS[17].AsDateTime;
        IF Editiondata[NEditiondata].presstime < encodedate(2000,1,1) then
          Editiondata[NEditiondata].presstime := now;
      end;

      IF (aktsectionid <> DataM1.Query1.fieldbyname('sectionid').asinteger) then
      begin
        aktsectionid := DataM1.Query1.fieldbyname('sectionid').asinteger;
      end;

      IF (aktpageindex <> DataM1.Query1.fieldbyname('pageindex').asinteger) then
      Begin
        aktpageindex := DataM1.Query1.fieldbyname('pageindex').asinteger;
      end;
      Inc(aktpagenumber);
      Inc(Editiondata[NEditiondata].NPages);

      Editiondata[NEditiondata].Pages[Editiondata[NEditiondata].NPages].pagina := DataM1.Query1.fieldbyname('Pagination').asinteger;
      Editiondata[NEditiondata].Pages[Editiondata[NEditiondata].NPages].pageindex := DataM1.Query1.fieldbyname('pageindex').asinteger;
      Editiondata[NEditiondata].Pages[Editiondata[NEditiondata].NPages].pagename := DataM1.Query1.fieldbyname('pagename').asstring;
      Editiondata[NEditiondata].Pages[Editiondata[NEditiondata].NPages].Section := DataM1.Query1.fieldbyname('sectionid').asinteger;
      Editiondata[NEditiondata].Pages[Editiondata[NEditiondata].NPages].Unique := DataM1.Query1.fieldbyname('UniquePage').asinteger;
      Editiondata[NEditiondata].Pages[Editiondata[NEditiondata].NPages].Planedpagename := DataM1.Query1.fieldbyname('PlanPageName').asstring;
      Editiondata[NEditiondata].Pages[Editiondata[NEditiondata].NPages].miscstring2 := DataM1.Query1.fieldbyname('miscstring2').asstring;
      Editiondata[NEditiondata].Pages[Editiondata[NEditiondata].NPages].NColors := 0;
      Editiondata[NEditiondata].Pages[Editiondata[NEditiondata].NPages].Pagetype := DataM1.Query1.fieldbyname('Pagetype').asinteger;
      Editiondata[NEditiondata].Pages[Editiondata[NEditiondata].NPages].copyseparationset := DataM1.Query1.fieldbyname('copyseparationset').asinteger;
      Editiondata[NEditiondata].Pages[Editiondata[NEditiondata].NPages].mastercopyseparationset := DataM1.Query1.fieldbyname('mastercopyseparationset').asinteger;

      Editiondata[NEditiondata].Pages[Editiondata[NEditiondata].NPages].Approved := DataM1.Query1.fields[15].asinteger;
      Editiondata[NEditiondata].Pages[Editiondata[NEditiondata].NPages].Hold := DataM1.Query1.fields[14].asinteger;
      Editiondata[NEditiondata].Pages[Editiondata[NEditiondata].NPages].Version := DataM1.Query1.fields[16].asinteger;
    end;
    Inc(Editiondata[NEditiondata].Pages[Editiondata[NEditiondata].NPages].NColors);
    Editiondata[NEditiondata].Pages[Editiondata[NEditiondata].NPages].Colors[Editiondata[NEditiondata].Pages[Editiondata[NEditiondata].NPages].NColors].colorid :=
      DataM1.Query1.fieldbyname('colorid').asinteger;
    Editiondata[NEditiondata].Pages[Editiondata[NEditiondata].NPages].Colors[Editiondata[NEditiondata].Pages[Editiondata[NEditiondata].NPages].NColors].active :=
      DataM1.Query1.fieldbyname('active').asinteger;
    DataM1.Query1.next;
  end;
  DataM1.Query1.close;

  For Ied := 1 to NEditiondata do
  begin
    DataM1.Query1.SQL.Clear;
    DataM1.Query1.SQL.add('Select distinct PressSectionNumber,pressrunid,sheetnumber,sheetside,copyflatseparationset,Copynumber,flatseparationset,pagepositions,copyseparationset,');
    DataM1.Query1.SQL.add('TemplateID,colorid,flatseparation,MiscString3,SortingPosition,PressTower,PressZone,PressHighLow from pagetable WITH (NOLOCK)');
    DataM1.Query1.SQL.add('where publicationid = ' + inttostr(publicationid) );
    DataM1.Query1.SQL.add('and '+ pubdatestr);
    IF Pressid > -1 then
      DataM1.Query1.SQL.add('and pressid = '+ inttostr(Pressid));
    DataM1.Query1.SQL.add('and editionid = '+ inttostr(Editiondata[Ied].Edition));
    //DataM1.Query1.SQL.add('and copynumber = 1');
    DataM1.Query1.SQL.add('order by PressSectionNumber,pressrunid,sheetnumber,sheetside,copyflatseparationset,Copynumber,flatseparationset,pagepositions,flatseparation');
    DataM1.Query1.open;
    aktcopyflatseparationset := -1;
    Editiondata[Ied].Nplates := 0;
    While not DataM1.Query1.eof do
    begin
      IF aktcopyflatseparationset <> DataM1.Query1.fieldbyname('copyflatseparationset').asinteger then
      begin
        Inc(Editiondata[Ied].Nplates);
        aktcopyflatseparationset := DataM1.Query1.fieldbyname('copyflatseparationset').asinteger;
        Editiondata[Ied].plates[Editiondata[Ied].Nplates].Npages := 0;
        Editiondata[Ied].plates[Editiondata[Ied].Nplates].Front := DataM1.Query1.fieldbyname('sheetside').asinteger;
        Editiondata[Ied].plates[Editiondata[Ied].Nplates].templatelistid :=
          inittypes.gettemplatenumberfromID(DataM1.Query1.fieldbyname('TemplateID').asinteger);

        Pacross := PlatetemplateArray[Editiondata[Ied].plates[Editiondata[Ied].Nplates].templatelistid].PagesAcross;
        pdown   := PlatetemplateArray[Editiondata[Ied].plates[Editiondata[Ied].Nplates].templatelistid].PagesDown;
        Editiondata[Ied].plates[Editiondata[Ied].Nplates].NColors := 0;


        Editiondata[Ied].plates[Editiondata[Ied].Nplates].SortingPosition
          := DataM1.Query1.fieldbyname('SortingPosition').asString;
        Editiondata[Ied].plates[Editiondata[Ied].Nplates].PressTower
          := DataM1.Query1.fieldbyname('PressTower').asString;
        Editiondata[Ied].plates[Editiondata[Ied].Nplates].PressZone
          := DataM1.Query1.fieldbyname('PressZone').asString;
        Editiondata[Ied].plates[Editiondata[Ied].Nplates].PressHighLow
          := DataM1.Query1.fieldbyname('PressHighLow').asString;

        aktcopyseparationset := -1;
      end;

      Ppos := strtoint(DataM1.Query1.fieldbyname('pagepositions').asstring);
      X := Ppos Mod Pacross;
      IF x = 0 then x := Pacross;
      Y := ((Ppos-1) div Pacross)+1;

      Editiondata[Ied].plates[Editiondata[Ied].Nplates].Pages[Ppos].posX := x;
      Editiondata[Ied].plates[Editiondata[Ied].Nplates].Pages[Ppos].posY := Y;
      Editiondata[Ied].plates[Editiondata[Ied].Nplates].Pages[Ppos].copyseparationset :=
        DataM1.Query1.fieldbyname('copyseparationset').asinteger;
      Editiondata[Ied].plates[Editiondata[Ied].Nplates].Npages := Pdown * Pacross;
      ColorIfound := -1;
      for icolor := 1 to Editiondata[Ied].plates[Editiondata[Ied].Nplates].NColors do
      begin
        IF Editiondata[Ied].plates[Editiondata[Ied].Nplates].Colors[icolor].colorid = DataM1.Query1.fieldbyname('ColorID').asinteger then
        begin
          ColorIfound := icolor;
          break;
        end;
      end;
      IF ColorIfound = -1 then
      Begin
        Inc(Editiondata[Ied].plates[Editiondata[Ied].Nplates].NColors);
        ColorIfound := Editiondata[Ied].plates[Editiondata[Ied].Nplates].NColors;
      end;

      Editiondata[Ied].plates[Editiondata[Ied].Nplates].Colors[ColorIfound].colorid := DataM1.Query1.fieldbyname('ColorID').asinteger;
      Editiondata[Ied].plates[Editiondata[Ied].Nplates].Colors[ColorIfound].Ncopies := DataM1.Query1.fieldbyname('Copynumber').asinteger;
      Editiondata[Ied].plates[Editiondata[Ied].Nplates].Colors[ColorIfound].copies[DataM1.Query1.fieldbyname('Copynumber').asinteger].miscstring3 :=
        DataM1.Query1.fieldbyname('miscstring3').asstring;
      T := DataM1.Query1.fieldbyname('miscstring3').asstring;
      dbl1 := pos(';',T);
      Delete(T,dbl1,100);
      Editiondata[Ied].plates[Editiondata[Ied].Nplates].Colors[ColorIfound].copies[DataM1.Query1.fieldbyname('Copynumber').asinteger].miscstring3 := T;



      DataM1.Query1.next;
    End;
  end;


  For Ied := 1 to NEditiondata do
  begin
    For ipage := 1 to Editiondata[Ied].Npages do
    begin
      if Editiondata[Ied].pages[ipage].mastercopyseparationset <> Editiondata[Ied].pages[ipage].copyseparationset then
      begin
        Editiondata[Ied].pages[ipage].Masteredition := -1;
        For Ied2 := 1 to NEditiondata do
        begin
          IF ied2 <> ied then
          begin
            For ipage2 := 1 to Editiondata[Ied2].Npages do
            begin
              if Editiondata[Ied].pages[ipage].mastercopyseparationset = Editiondata[Ied2].pages[ipage2].copyseparationset then
              begin
                Editiondata[Ied].pages[ipage].Masteredition := ied2;
                break;
              end;
            End;
          End;
          IF Editiondata[Ied].pages[ipage].Masteredition <> -1 then
            break;
        End;
      end;
    End;
  End;


  For Ied := 1 to NEditiondata do
  begin
    for iplate := 1 to Editiondata[Ied].Nplates do
    begin
      For ipage := 1 to Editiondata[Ied].plates[iplate].Npages do
      begin
        for ipage2 := 1 to Editiondata[Ied].NPages do
        begin
          IF Editiondata[Ied].plates[iplate].Pages[ipage].copyseparationset = Editiondata[Ied].pages[ipage2].copyseparationset then
          begin
            Editiondata[Ied].plates[iplate].Pages[ipage].pageindex := ipage2;
            break;
          end;
        end;
        IF Editiondata[Ied].plates[iplate].Pages[ipage].pageindex <= 0 then
          beep;
      end;



    end;
  end;


end;


Function TDataModuleXML.makexmls(xmlfilename : string):boolean;

Var
  pressesnodes,Pressnode,Plannode,publicationnode,issuesnode,issuenode : IXMLNode;
  editionsnode,editionnode,Sectionsnode,sectionnode,pagesnode,pagenode : IXMLNode;
  Separationsnode,Separationnode : IXMLNode;
  sheetsnode,sheetnode,SheetFrontItemsNode,SheetFrontItemNode : IXMLNode;
  PressCylindersnode,PressCylindernode : IXMLNode;

  icpy,Ied,ipage,masterpageid,ic,ipl,isec : longint;

  FrontBacktext,aktplan,aktedition,aktsection,plateidstr : string;
  StackI : Longint;
  produceedition : boolean;
  aktdatestr : string;
  aktdatetd : tdatetime;
  ds,ms,ys,T,savename : String;
  I : Longint;
begin
  try
    icpy  := 1;

    CoInitialize(Nil);


    result := false;
    StackI := 1;
    XMLDocument1.Active := true;
    XMLDocument1.XML.Clear;

    XMLDocument1.Encoding := 'ISO-8859-1';
    XMLDocument1.Version := '1.0';

    Plannode := XMLDocument1.AddChild('Plan','http://tempuri.org/ImportCenter.xsd');

    ds := inttostr(dayof(XMLPubdate));
    ms := inttostr(monthof(XMLPubdate));
    ys := inttostr(yearof(XMLPubdate));

    aktdatetd := XMLPubdate;

    Plannode.SetAttribute('version','1');
    Plannode.SetAttribute('UpdateTime',formatdatetime('YYYY-MM-DD',now)+'T'+formatdatetime('HH-NN-SS',now));
    Plannode.SetAttribute('Sender','ImportPlugin.dll');

    publicationnode := Plannode.AddChild('Publication');
    publicationnode.SetAttribute('PubDate',formatdatetime('YYYY-MM-DD',XMLPubdate));
    publicationnode.SetAttribute('Name',tnames1.publicationidtoname(XMLPublicationID) );
    publicationnode.SetAttribute('WeekReference',0);

    ied := 0;
    aktplan := 'uyoiwqouiwkj';
    issuesnode := publicationnode.AddChild('Issues');
    issuenode := issuesnode.AddChild('Issue');
    issuenode.SetAttribute('Name','Main');
    editionsnode := issuenode.AddChild('Editions');
    aktedition := '';
    aktsection := 'A';

    For ied := 1 to NEditiondata do
    begin
      aktedition := tnames1.editionIDtoname(Editiondata[ied].Edition);

      editionnode := editionsnode.AddChild('Edition');
      editionnode.SetAttribute('Name',aktedition);

      pressesnodes := editionnode.AddChild('IntendedPresses');
      Pressnode  := pressesnodes.AddChild('IntendedPress');
      Pressnode.SetAttribute('Name',tnames1.pressnameIDtoname(XMLPressID));
      Pressnode.SetAttribute('Copies',10000);

      Pressnode.SetAttribute('PlateCopies',Editiondata[ied].Numberofcopies);
      Pressnode.SetAttribute('PostalUrl',''); //xyz.se/file.txt"
      Pressnode.SetAttribute('Presstime',formatdatetime('YYYY-MM-DD',Editiondata[ied].presstime)+'T'+formatdatetime('HH-NN-SS',Editiondata[ied].presstime));

      Sectionsnode := editionnode.AddChild('Sections');

      sectionnode := Sectionsnode.AddChild('Section');
      sectionnode.SetAttribute('Name',aktsection);

      pagesnode := Sectionnode.AddChild('Pages');
      for ipage := 1 to Editiondata[ied].NPages do
      begin
        pagenode := Pagesnode.AddChild('Page');
        pagenode.SetAttribute('Name',Editiondata[ied].Pages[ipage].pagename);
        pagenode.SetAttribute('FileName',Editiondata[ied].Pages[ipage].Planedpagename);
        pagenode.SetAttribute('PageID',Editiondata[ied].Pages[ipage].copyseparationset);

        pagenode.SetAttribute('PageType',Editiondata[ied].Pages[ipage].Pagetype);
        pagenode.SetAttribute('Pagination',Editiondata[ied].Pages[ipage].pagina);
        pagenode.SetAttribute('PageIndex',Editiondata[ied].Pages[ipage].pageindex);
        //pagenode.SetAttribute('Comment',Pagedata[ipage].platetext);

        if Editiondata[ied].Pages[ipage].copyseparationset=Editiondata[ied].Pages[ipage].mastercopyseparationset then
          pagenode.SetAttribute('Unique','true')
        else
          pagenode.SetAttribute('Unique','false');
        pagenode.SetAttribute('MasterPageID',Editiondata[ied].Pages[ipage].mastercopyseparationset);
        masterpageid := Editiondata[ied].Pages[ipage].mastercopyseparationset;
        IF Editiondata[ied].Pages[ipage].copyseparationset <> Editiondata[ied].Pages[ipage].mastercopyseparationset then
          pagenode.SetAttribute('MasterEdition',tnames1.editionIDtoname(Editiondata[Editiondata[ied].Pages[ipage].Masteredition].Edition))
        else
          pagenode.SetAttribute('MasterEdition',tnames1.editionIDtoname(Editiondata[ied].Edition));

        pagenode.SetAttribute('Approved',Editiondata[ied].Pages[ipage].Approved);
        pagenode.SetAttribute('Hold',Editiondata[ied].Pages[ipage].Hold);
        pagenode.SetAttribute('Priority',Editiondata[ied].Pages[ipage].Priority);
        pagenode.SetAttribute('Version',Editiondata[ied].Pages[ipage].Version);

        Separationsnode := Pagenode.AddChild('Separations');

        for ic := 1 to Editiondata[ied].Pages[ipage].NColors do
        begin
          Separationnode := Separationsnode.AddChild('Separation');
          Separationnode.SetAttribute('Name', tnames1.ColornameIDtoname(Editiondata[ied].Pages[ipage].Colors[ic].colorid) );
        end;
      end;


      sheetsnode := editionnode.AddChild('Sheets');
      for ipl := 1 to Editiondata[ied].Nplates do
      begin
        IF true then
        begin
          IF ipl mod 2 = 1 then
          begin
            sheetnode := sheetsnode.AddChild('Sheet');
            sheetnode.SetAttribute('Template',PlatetemplateArray[Editiondata[ied].plates[ipl].templatelistid].TemplateName);
            sheetnode.SetAttribute('PressSectionNumber',IntToStr(Editiondata[ied].PressSectionNumber));

          End;

          if Editiondata[ied].plates[ipl].Front = 0 then
          Begin
            FrontBacktext := 'Front';
          End
          else
            FrontBacktext := 'Back';


          //Todo
          sheetnode.SetAttribute('MarkGroups','0');
          sheetnode.SetAttribute('PagesOnPlate',PlatetemplateArray[Editiondata[ied].plates[ipl].templatelistid].NupOnplate);


          SheetFrontItemsNode := sheetnode.AddChild('Sheet'+FrontBacktext+'Items');
          SheetFrontItemsNode.SetAttribute('SortingPosition',Editiondata[ied].plates[ipl].SortingPosition);
          SheetFrontItemsNode.SetAttribute('PressTower',Editiondata[ied].plates[ipl].PressTower);
          SheetFrontItemsNode.SetAttribute('PressZone',Editiondata[ied].plates[ipl].PressZone);
          SheetFrontItemsNode.SetAttribute('PressHighLow',Editiondata[ied].plates[ipl].PressHighLow);

          SheetFrontItemsNode.SetAttribute('ActiveCopies',Editiondata[ied].plates[ipl].Colors[1].Ncopies);


          For ipage := 1 to Editiondata[ied].plates[ipl].Npages do
          begin
            SheetFrontItemNode := SheetFrontItemsNode.AddChild('Sheet'+FrontBacktext+'Item');
            SheetFrontItemNode.SetAttribute('PageName',Editiondata[ied].pages[Editiondata[ied].plates[ipl].pages[ipage].pageindex].pagename);
            SheetFrontItemNode.SetAttribute('PageID',Editiondata[ied].plates[ipl].Pages[ipage].copyseparationset);
            SheetFrontItemNode.SetAttribute('MasterPageID',Editiondata[ied].pages[Editiondata[ied].plates[ipl].pages[ipage].pageindex].mastercopyseparationset);
            SheetFrontItemNode.SetAttribute('Section',tnames1.sectionIDtoname(Editiondata[ied].pages[Editiondata[ied].plates[ipl].pages[ipage].pageindex].Section));
            SheetFrontItemNode.SetAttribute('PosX',Editiondata[ied].plates[ipl].Pages[ipage].posX);
            SheetFrontItemNode.SetAttribute('PosY',Editiondata[ied].plates[ipl].Pages[ipage].posY);
          End;

          PressCylindersnode := SheetFrontItemsNode.AddChild('PressCylinders'+FrontBacktext);

          for ic := 1 to Editiondata[ied].plates[ipl].NColors do
          begin
            PressCylindernode := PressCylindersnode.AddChild('PressCylinder'+FrontBacktext);
            PressCylindernode.SetAttribute('Name','');
            PressCylindernode.SetAttribute('Color',tnames1.ColornameIDtoname(Editiondata[ied].plates[ipl].Colors[ic].colorid));
            PressCylindernode.SetAttribute('FormID',Editiondata[ied].pages[Editiondata[ied].plates[ipl].pages[1].pageindex].miscstring2);


            // icpy??
            plateidstr := Editiondata[ied].plates[ipl].Colors[ic].Copies[icpy].miscstring3;


            PressCylindernode.SetAttribute('PlateID',plateidstr);
          end;
        end;
      end;


    End;


    if Prefs.ImportCenterInputPath <> '' then
    begin
      savename := Includetrailingbackslash(Prefs.ImportCenterInputPath) + tnames1.publicationidtoname(XMLPublicationID)+'_'+ formatdatetime('YYYY-MM-DD',XMLPubdate)+'.xml';
      deletefile(savename);
      XMLDocument1.SaveToFile(savename);
    end;

    SaveDialog1.FileName := tnames1.publicationidtoname(XMLPublicationID)+'_'+ formatdatetime('YYYY-MM-DD',XMLPubdate)+'.xml';

    IF SaveDialog1.execute then
    begin
      deletefile(SaveDialog1.FileName);
      XMLDocument1.SaveToFile(SaveDialog1.FileName);
    end;


    result := true;

  finally
    XMLDocument1.Active := false;
  End;
end;

Function TDataModuleXML.MakeTransXmls(xmlfilename : string; XMLPublicationID :Integer):boolean;

Var
  pressesnodes,Pressnode,Plannode,publicationnode,issuesnode,issuenode : IXMLNode;
  editionsnode,editionnode,Sectionsnode,sectionnode,pagesnode,pagenode : IXMLNode;
  Separationsnode,Separationnode : IXMLNode;
  sheetsnode,sheetnode,SheetFrontItemsNode,SheetFrontItemNode : IXMLNode;
  PressCylindersnode,PressCylindernode : IXMLNode;

  icpy,Ied,ipage,masterpageid,ic,ipl,isec : longint;

  FrontBacktext,aktplan,aktedition,aktsection,plateidstr : string;
  Aktsecionid,StackI : Longint;
  produceedition,Foundsec : boolean;
  aktdatestr : string;
  aktdatetd : tdatetime;
  ds,ms,ys,T,sortstr,savename : String;
  I : Longint;

  Nsections,isecs,dbl1 : Longint;
  Sections : Array[1..10] of longint;
  ADoc: TNativeXml;
  plannodeX, publicationnodeX, issuesnodeX,issuenodeX,editionsnodeX,editionnodeX,
  pressesnodeX,pressnodeX,sectionsnodeX,sectionnodeX,PagesnodeX,PagenodeX, SeparationsnodeX, SeparationnodeX,
  SheetsnodeX,SheetnodeX, SheetFrontItemsNodeX, SheetFrontItemNodeX, PressCylindersnodeX, PressCylindernodeX :   TXmlNode;

  platecopies : Longint;
begin
  try

      if (XMLPressID = 3) then
        platecopies := Formloadstbplan.UpDownCopies.Position
      else
        platecopies := Formloadpressplan.UpDownCopies.Position;

    CoInitialize(Nil);

    result := false;
    StackI := 1;

   // ADoc := TNativeXml.CreateName('Plan');
   // plannodeX := ADoc.Root;
    //plannodeX.AttributeAdd('xmlns', 'http://tempuri.org/ImportCenter.xsd');




    ADoc.ExternalEncoding := seUTF8;

    //XMLDocument1 := TXMLDocument.Create(nil);
    XMLDocument1.Active := False;
    XMLDocument1.XML.Clear;
    XMLDocument1.XML.Text := '';
    XMLDocument1.Active := true;

    XMLDocument1.Encoding := 'utf-8';; //'ISO-8859-1';
    XMLDocument1.Version := '1.0';

    Plannode := XMLDocument1.AddChild('Plan','http://tempuri.org/ImportCenter.xsd');




    ds := inttostr(dayof(XMLPubdate));
    ms := inttostr(monthof(XMLPubdate));
    ys := inttostr(yearof(XMLPubdate));

    aktdatetd := XMLPubdate;

    if (XMLPublicationID=0) then
    begin

      if (XMLPressID = 3) then
        XMLPublicationID := tnames1.publicationnametoid(Formloadstbplan.ComboBoxpublication.Text)
      else
        XMLPublicationID := tnames1.publicationnametoid(Formloadpressplan.ComboBoxpublication.Text);
    end;

    Plannode.SetAttribute('Plantype','1');

    Plannode.SetAttribute('Version','1');
    Plannode.SetAttribute('UpdateTime',formatdatetime('YYYY-MM-DD',now)+'T'+formatdatetime('HH-NN-SS',now));
    Plannode.SetAttribute('Sender','PlanCenter');
    Plannode.SetAttribute('Planmode','Add');

    //plannodeX.AttributeAdd('Plantype', 'PressPlan');
   // plannodeX.AttributeAdd('Planmode', 'Add');
   // plannodeX.AttributeAdd('Version', '1');
   // plannodeX.AttributeAdd('UpdateTime', formatdatetime('YYYY-MM-DD',now)+'T'+formatdatetime('HH-NN-SS',now));
   // plannodeX.AttributeAdd('Sender','PlanCenter');

    publicationnode := Plannode.AddChild('Publication');
    publicationnode.SetAttribute('PubDate',formatdatetime('YYYY-MM-DD',XMLPubdate));
    publicationnode.SetAttribute('Name',TNetEncoding.HTML.Encode(tnames1.publicationidtoname(XMLPublicationID)) );
    publicationnode.SetAttribute('WeekReference',0);

   // publicationnodeX := plannodeX.NodeNew('Publication');
    //publicationnodeX.AttributeAdd('PubDate',formatdatetime('YYYY-MM-DD',XMLPubdate));
   // publicationnodeX.AttributeAdd('Name',TNetEncoding.HTML.Encode(tnames1.publicationidtoname(XMLPublicationID) ));
    //publicationnodeX.AttributeAdd('WeekReference','0');

   // issuesnodeX := publicationnodeX.NodeNew('Issues');
   // issuenodeX := issuesnodeX.NodeNew('Issue');
   // issuenodeX.AttributeAdd('Name','Main');
   // editionsnodeX := issuenodeX.NodeNew('Editions');


    ied := 0;
    aktplan := 'uyoiwqouiwkj';
    issuesnode := publicationnode.AddChild('Issues');
    issuenode := issuesnode.AddChild('Issue');
    issuenode.SetAttribute('Name','Main');
    editionsnode := issuenode.AddChild('Editions');

    aktedition := '';
    aktsection := '1';
    Aktsecionid := -1;


   /// editionnodeX := editionsnodeX.NodeNew('Edition');


    For ied := 1 to NEditiondata do
    begin

      if (aktedition <>  tnames1.editionIDtoname(Editiondata[ied].Edition)) then
      begin
       editionnode := editionsnode.AddChild('Edition');
      editionnode.SetAttribute('Name',tnames1.editionIDtoname(Editiondata[ied].Edition));

        //editionnodeX := editionsnodeX.NodeNew('Edition');
        //editionnodeX.AttributeAdd('Name',tnames1.editionIDtoname(Editiondata[ied].Edition));

        pressesnodes := editionnode.AddChild('IntendedPresses');
        Pressnode  := pressesnodes.AddChild('IntendedPress');
        Pressnode.SetAttribute('Name',tnames1.pressnameIDtoname(XMLPressID));
        Pressnode.SetAttribute('Copies',10000);

        if (XMLPressID = 3) then
         Pressnode.SetAttribute('PlateCopies',Formloadstbplan.UpDownCopies.Position)
       else
          Pressnode.SetAttribute('PlateCopies',Formloadpressplan.UpDownCopies.Position);

        Pressnode.SetAttribute('PostalUrl',''); //xyz.se/file.txt"
        Pressnode.SetAttribute('Presstime',formatdatetime('YYYY-MM-DD',Editiondata[ied].presstime)+'T'+formatdatetime('HH-NN-SS',Editiondata[ied].presstime));

       // pressesnodeX := editionnodeX.NodeNew('IntendedPresses');
        //PressnodeX  := pressesnodeX.NodeNew('IntendedPress');
        //PressnodeX.AttributeAdd('Name',tnames1.pressnameIDtoname(XMLPressID));
        //PressnodeX.AttributeAdd('Copies','10000');
       // PressnodeX.AttributeAdd('PlateCopies',IntToStr(platecopies));
        //PressnodeX.AttributeAdd('PostalUrl','');
        //PressnodeX.AttributeAdd('Presstime',formatdatetime('YYYY-MM-DD',Editiondata[ied].presstime)+'T'+formatdatetime('HH-NN-SS',Editiondata[ied].presstime));

        aktedition := tnames1.editionIDtoname(Editiondata[ied].Edition);

        Sectionsnode := editionnode.AddChild('Sections');

        //SectionsnodeX := editionnodeX.NodeNew('Sections');

      end;



      Nsections := 0;

      for ipage := 1 to Editiondata[ied].NPages do
      begin
        Foundsec := false;
        For i := 1 to Nsections do
        begin

          IF Editiondata[ied].Pages[ipage].Section = sections[i] then
          Begin
            foundsec := true;
            break;
          End;
        end;

        IF Not Foundsec Then
        Begin
          Inc(Nsections);
          sections[Nsections] := Editiondata[ied].Pages[ipage].Section;
        End;

      End;



      For isecs := 1 to Nsections do
      begin
        aktsection := tnames1.SectionIDtoname(sections[Isecs]);
        sectionnode := Sectionsnode.AddChild('Section');
        sectionnode.SetAttribute('Name',aktsection);

        SectionnodeX := SectionsnodeX.NodeNew('Section');
        SectionnodeX.AttributeAdd('Name',aktsection);

        pagesnode := Sectionnode.AddChild('Pages');
        PagesnodeX := SectionnodeX.NodeNew('Pages');


        Aktsecionid := sections[Isecs];

        for ipage := 1 to Editiondata[ied].NPages do
        begin
          IF Editiondata[ied].Pages[ipage].Section = sections[Isecs] then
          begin
            pagenode := Pagesnode.AddChild('Page');
           // PagenodeX := PagesnodeX.NodeNew('Page');

            pagenode.SetAttribute('Name',Editiondata[ied].Pages[ipage].pagename);
            pagenode.SetAttribute('FileName',Editiondata[ied].Pages[ipage].Planedpagename);
            pagenode.SetAttribute('PageID',Editiondata[ied].Pages[ipage].pageID);
            pagenode.SetAttribute('PageType',Editiondata[ied].Pages[ipage].Pagetype);
            pagenode.SetAttribute('Pagination',Editiondata[ied].Pages[ipage].pagina);
            pagenode.SetAttribute('PageIndex',Editiondata[ied].Pages[ipage].pageindex);
            //pagenode.SetAttribute('Comment',Pagedata[ipage].platetext);

          //  pagenodeX.AttributeAdd('Name',Editiondata[ied].Pages[ipage].pagename);
           // pagenodeX.AttributeAdd('FileName',Editiondata[ied].Pages[ipage].Planedpagename);
           // pagenodeX.AttributeAdd('PageID', IntToStr(Editiondata[ied].Pages[ipage].pageID));
           // pagenodeX.AttributeAdd('PageType',IntToStr(Editiondata[ied].Pages[ipage].Pagetype));
          //  pagenodeX.AttributeAdd('Pagination',IntToStr(Editiondata[ied].Pages[ipage].pagina));
           // pagenodeX.AttributeAdd('PageIndex', IntToStr(Editiondata[ied].Pages[ipage].pageindex));

            if Editiondata[ied].Pages[ipage].pageid=Editiondata[ied].Pages[ipage].masterpageid then
              pagenode.SetAttribute('Unique','true')
            else
              pagenode.SetAttribute('Unique','false');

          //  if Editiondata[ied].Pages[ipage].pageid=Editiondata[ied].Pages[ipage].masterpageid then
           //   PagenodeX.AttributeAdd('Unique','true')
           // else
           //   PagenodeX.AttributeAdd('Unique','false');


            pagenode.SetAttribute('MasterPageID',Editiondata[ied].Pages[ipage].masterpageid);
           // PagenodeX.AttributeAdd('MasterPageID',IntToStr(Editiondata[ied].Pages[ipage].masterpageid));


            masterpageid := Editiondata[ied].Pages[ipage].mastercopyseparationset;
            IF Editiondata[ied].Pages[ipage].pageid <> Editiondata[ied].Pages[ipage].masterpageid then
              pagenode.SetAttribute('MasterEdition',tnames1.editionIDtoname(Editiondata[Editiondata[ied].Pages[ipage].Masteredition].Edition))
            else
              pagenode.SetAttribute('MasterEdition',tnames1.editionIDtoname(Editiondata[ied].Edition));


           // IF Editiondata[ied].Pages[ipage].pageid <> Editiondata[ied].Pages[ipage].masterpageid then
           //   PagenodeX.AttributeAdd('MasterEdition',tnames1.editionIDtoname(Editiondata[Editiondata[ied].Pages[ipage].Masteredition].Edition))
           // else
           //   PagenodeX.AttributeAdd('MasterEdition',tnames1.editionIDtoname(Editiondata[ied].Edition));


            pagenode.SetAttribute('Approved',Editiondata[ied].Pages[ipage].Approved);
            pagenode.SetAttribute('Hold',Editiondata[ied].Pages[ipage].Hold);
            pagenode.SetAttribute('Priority',Editiondata[ied].Pages[ipage].Priority);
            pagenode.SetAttribute('Version',Editiondata[ied].Pages[ipage].Version);

          //  PagenodeX.AttributeAdd('Approved', IntToStr(Editiondata[ied].Pages[ipage].Approved));
           // PagenodeX.AttributeAdd('Hold', IntToStr(Editiondata[ied].Pages[ipage].Hold));
           // PagenodeX.AttributeAdd('Priority',IntToStr(Editiondata[ied].Pages[ipage].Priority));
           // PagenodeX.AttributeAdd('Version', IntToStr(Editiondata[ied].Pages[ipage].Version));




            Separationsnode := Pagenode.AddChild('Separations');
           // SeparationsnodeX := PagenodeX.NodeNew('Separations');

            for ic := 1 to Editiondata[ied].Pages[ipage].NColors do
            begin
              Separationnode := Separationsnode.AddChild('Separation');
              Separationnode.SetAttribute('Name', tnames1.ColornameIDtoname(Editiondata[ied].Pages[ipage].Colors[ic].colorid) );

              //SeparationnodeX := SeparationsnodeX.NodeNew('Separation');
             // SeparationnodeX.AttributeAdd('Name', tnames1.ColornameIDtoname(Editiondata[ied].Pages[ipage].Colors[ic].colorid) );



            end;
          End;
        end;
      End;
    End;   // end editions NAN

      sheetsnode := editionnode.AddChild('Sheets');

      //SheetsnodeX := EditionnodeX.NodeNew('Sheets');

 //     if (XMLPressID = 3) then
   //       Editiondata[ied].Nplates := Editiondata[ied].Nplates div  Formloadstbplan.UpDownCopies.Position
    //  else
      //    Editiondata[ied].Nplates := Editiondata[ied].Nplates div  Formloadpressplan.UpDownCopies.Position;


     // Editiondata[ied].Nplates := Editiondata[ied].Nplates div  PlatetemplateArray[Editiondata[ied].plates[1].templatelistid].NupOnplate;

    For ied := 1 to NEditiondata do
    begin
       Editiondata[ied].Nplates := Editiondata[ied].Nplates div PlateCopies;
      aktedition := tnames1.editionIDtoname(Editiondata[ied].Edition);


      for ipl := 1 to Editiondata[ied].Nplates do
      begin
        IF true then
        begin
          IF ipl mod 2 = 1 then
          begin
            sheetnode := sheetsnode.AddChild('Sheet');
            sheetnode.SetAttribute('Template',PlatetemplateArray[Editiondata[ied].plates[ipl*PlateCopies].templatelistid].TemplateName);

           // SheetnodeX := SheetsnodeX.NodeNew('Sheet');
           // SheetnodeX.AttributeAdd('Template',PlatetemplateArray[Editiondata[ied].plates[ipl*PlateCopies].templatelistid].TemplateName);

            FrontBacktext := 'Front';

            sheetnode.SetAttribute('MarkGroups','0');
            sheetnode.SetAttribute('PagesOnPlate', PlatetemplateArray[Editiondata[ied].plates[ipl*PlateCopies].templatelistid].NupOnplate);

           // SheetnodeX.AttributeAdd('MarkGroups','0');
           // SheetnodeX.AttributeAdd('PagesOnPlate', IntToStr(PlatetemplateArray[Editiondata[ied].plates[ipl*PlateCopies].templatelistid].NupOnplate));

            Sheetnode.SetAttribute('PressSectionNumber',IntToStr(Editiondata[ied].PressSectionNumber));
           // SheetnodeX.AttributeAdd('PressSectionNumber',IntToStr(Editiondata[ied].PressSectionNumber));
          End
          Else
            FrontBacktext := 'Back';


          SheetFrontItemsNode := sheetnode.AddChild('Sheet'+FrontBacktext+'Items');
         // SheetFrontItemsNodeX := SheetnodeX.NodeNew('Sheet'+FrontBacktext+'Items');


          T := Editiondata[ied].plates[ipl*PlateCopies].PressTower;
          dbl1 := pos(';',T);
          IF dbl1 > 0 then
          Begin
            delete(t,dbl1,100);
          End;

          SheetFrontItemsNode.SetAttribute('PressTower',T);
          SheetFrontItemsNode.SetAttribute('PressZone',Editiondata[ied].plates[ipl*PlateCopies].PressZone);

          //SheetFrontItemsNodeX.AttributeAdd('PressTower',T);
         // SheetFrontItemsNodeX.AttributeAdd('PressZone',Editiondata[ied].plates[ipl*PlateCopies].PressZone);


          T := Editiondata[ied].plates[ipl*PlateCopies].PressHighLow;
          dbl1 := pos(';',T);
          IF dbl1 > 0 then
          Begin
            T[dbl1] := ',';
          End;



          SheetFrontItemsNode.SetAttribute('PressHighLow',T);
         // SheetFrontItemsNodeX.AttributeAdd('PressHighLow',T);
          if (XMLPressID=3) then
            SheetFrontItemsNode.SetAttribute('ActiveCopies',Formloadstbplan.UpDownCopies.Position)
          else
            SheetFrontItemsNode.SetAttribute('ActiveCopies',Formloadpressplan.UpDownCopies.Position);

          //SheetFrontItemsNodeX.AttributeAdd('ActiveCopies',IntToStr(PlateCopies));


          For ipage := 1 to Editiondata[ied].plates[ipl].Npages do
          begin
            SheetFrontItemNode := SheetFrontItemsNode.AddChild('Sheet'+FrontBacktext+'Item');
            SheetFrontItemNode.SetAttribute('PageName',Editiondata[ied].plates[ipl*PlateCopies].Pages[ipage].pagename);
            SheetFrontItemNode.SetAttribute('PageID',Editiondata[ied].plates[ipl*PlateCopies].Pages[ipage].pageid);
            SheetFrontItemNode.SetAttribute('MasterPageID',Editiondata[ied].plates[ipl*PlateCopies].Pages[ipage].masterpageid);
            SheetFrontItemNode.SetAttribute('Section',tnames1.sectionIDtoname(Editiondata[ied].plates[ipl*PlateCopies].Pages[ipage].sectionid));
            SheetFrontItemNode.SetAttribute('PosX',Editiondata[ied].plates[ipl*PlateCopies].Pages[ipage].posX);
            SheetFrontItemNode.SetAttribute('PosY',Editiondata[ied].plates[ipl*PlateCopies].Pages[ipage].posY);


          //  SheetFrontItemNodeX := SheetFrontItemsNodeX.NodeNew('Sheet'+FrontBacktext+'Item');
           // SheetFrontItemNodeX.AttributeAdd('PageName',Editiondata[ied].plates[ipl*PlateCopies].Pages[ipage].pagename);
           // SheetFrontItemNodeX.AttributeAdd('PageID',IntToStr(Editiondata[ied].plates[ipl*PlateCopies].Pages[ipage].pageid));
           // SheetFrontItemNodeX.AttributeAdd('MasterPageID',IntToStr(Editiondata[ied].plates[ipl*PlateCopies].Pages[ipage].masterpageid));
           // SheetFrontItemNodeX.AttributeAdd('Section',tnames1.sectionIDtoname(Editiondata[ied].plates[ipl*PlateCopies].Pages[ipage].sectionid));
          //  SheetFrontItemNodeX.AttributeAdd('PosX', IntToStr(Editiondata[ied].plates[ipl*PlateCopies].Pages[ipage].posX));
          //  SheetFrontItemNodeX.AttributeAdd('PosY', IntToStr(Editiondata[ied].plates[ipl*PlateCopies].Pages[ipage].posY));


          End;

          PressCylindersnode := SheetFrontItemsNode.AddChild('PressCylinders'+FrontBacktext);
          //PressCylindersnodeX := SheetFrontItemsNodeX.NodeNew('PressCylinders'+FrontBacktext);

          for ic := 1 to Editiondata[ied].plates[ipl*PlateCopies].NColors do
          begin
            plateidstr := Editiondata[ied].plates[ipl*PlateCopies].Colors[ic].Copies[1].miscstring3;
            sortstr := Editiondata[ied].plates[ipl*PlateCopies].colors[ic].copies[1].SortingPosition;


            Delete(Editiondata[ied].plates[ipl*PlateCopies+1].PressZone,dbl1,100);

            PressCylindernode := PressCylindersnode.AddChild('PressCylinder'+FrontBacktext);
         //   PressCylindernodeX := PressCylindersnodeX.NodeNew('PressCylinder'+FrontBacktext);


            T := Editiondata[ied].plates[ipl*PlateCopies].Colors[ic].cylinder;
            dbl1 := pos(';',T);
            IF dbl1 > 0 then
            Begin
              delete(t,dbl1,100);
            End;
            PressCylindernode.SetAttribute('Name',T);
            PressCylindernode.SetAttribute('Color',tnames1.ColornameIDtoname(Editiondata[ied].plates[ipl].Colors[ic].colorid));

           // PressCylindernodeX.AttributeAdd('Name',T);
           // PressCylindernodeX.AttributeAdd('Color',tnames1.ColornameIDtoname(Editiondata[ied].plates[ipl].Colors[ic].colorid));

            T := sortstr;
            dbl1 := pos(';',T);
            IF dbl1 > 0 then
            Begin
              T[dbl1] := ',';
            End;

            PressCylindernode.SetAttribute('SortingPosition',T);
            PressCylindernode.SetAttribute('FormID','');
            PressCylindernode.SetAttribute('PlateID',plateidstr);

            //PressCylindernodeX.AttributeAdd('SortingPosition',T);
           // PressCylindernodeX.AttributeAdd('FormID','');
            //PressCylindernodeX.AttributeAdd('PlateID',plateidstr);

          end;
        end;
      end;
    End;

    IF Prefs.ImportCenterInputPath <> '' then
    Begin
      savename := Includetrailingbackslash(Prefs.ImportCenterInputPath) + tnames1.publicationidtoname(XMLPublicationID)+'_'+ formatdatetime('YYYY-MM-DD',XMLPubdate)+'.xml';
      deletefile(savename);

       XMLDocument1.SaveToFile(savename);

      //ADoc.XmlFormat := xfReadable;
     // ADoc.SaveToFile(savename);

    End
    Else
    Begin
      SaveDialog1.FileName := tnames1.publicationidtoname(XMLPublicationID)+'_'+ formatdatetime('YYYY-MM-DD',XMLPubdate)+'.xml';

      IF SaveDialog1.execute then
      begin
        deletefile(SaveDialog1.FileName);
         XMLDocument1.SaveToFile(SaveDialog1.FileName);
       //  ADoc.XmlFormat := xfReadable;
        //  ADoc.SaveToFile(savename);
      end;
    End;

    result := true;

  finally
     XMLDocument1.Active := false;
     //XMLDocument1.Free;
  End;
end;


Function TDataModuleXML.TransferplantoAXML:boolean;

Var
  nedi : Longint;

Procedure findpagespageids(Editionid : Longint;
                           sectionid : Longint;
                           pageindex : Longint;
                           Var pageid : Longint;
                           Var Masterpageid : Longint);

Var
  ied,ip : Longint;
Begin
  For ied := 1 to nedi do
  begin
    for ip := 1 to Editiondata[ied].NPages do
    begin
      if (Editiondata[ied].Pages[ip].pageindex = pageindex) and
         (Editiondata[ied].Pages[ip].Section = sectionid) and
         (editionid = Editiondata[ied].Edition) then
      begin
        pageid :=  Editiondata[ied].Pages[ip].pageID;
        masterpageid :=  Editiondata[ied].Pages[ip].masterpageID;
      end;
    end;
  end;
end;


Var
  ied,isec,iEpage,Iplf,ipl,ip : Longint;
  Nsections : Longint;
  Sections : Array[1..10] of longint;




Var
  I,ied2,ip2 : Longint;
  T : String;
  Pageid,PLip,Pip,ic,EdiIP,ipf,icpy : Longint;
  ncop,Foundipl,Foundiplf,foundip :Longint;
  Aktfront,iedP,aktedition,dbl1 : Longint;
  NextIPLF,founded : boolean;
  aktsection : Longint;
  PressSectionNumber : Integer;
  Nup : Integer;
begin
  try
  ipl := 0;
  i := 0;
    nedi := 0;
    result := false;
    NEditiondata := 1;
    Editiondata[1].NPages := 0;
    Nsections := 0;
    Ied := 1;
    PressSectionNumber := 0;
    if (XMLPressID = 3) then
        XMLPubdate := Formloadstbplan.DateTimePicker1loadplan.Date
    else
        XMLPubdate := Formloadpressplan.DateTimePicker1loadplan.Date;
    pageid := 0;
    //platetemplatearray[plateframesdata[iplf].prodplates[ipl].pages[i].
    Foundipl := -1;
    Foundiplf := -1;
    foundip := -1;
    aktedition := -1;
    aktsection := -1;
    Ied := 0;
    Pageid := 0;
    NextIPLF := true;
    for iplf := 1 to Nplateframes  do
    begin
      ipl := 0;
      inc(PressSectionNumber);

       // New section (following edition)?
      //if (aktedition = plateframesdata[iplf].prodplates[1].EditionID) or
        // (aktsection <>plateframesdata[iplf].prodplates[1].Pages[1].SectionID) then //or (true) then
     // begin
          // Add to plate counter.
       //   Editiondata[ied].Nplates := Editiondata[ied].Nplates + plateframes[iplf].Nprodplates
      //end;

      // New edition?
      if (aktedition <> plateframesdata[iplf].prodplates[1].EditionID) or (true) then
      begin

          Inc(ied);
          Editiondata[ied].PressSectionNumber := PressSectionNumber;
          Editiondata[ied].NPages := 0;
          Editiondata[ied].Anyplates := false;
          Editiondata[ied].Nplates := plateframes[iplf].Nprodplates+1;

          if (XMLpressID = 3) then
            Editiondata[ied].Numberofcopies := Formloadstbplan.UpDownCopies.Position
          else
            Editiondata[ied].Numberofcopies := Formloadpressplan.UpDownCopies.Position;

          aktedition := plateframesdata[iplf].prodplates[1].EditionID;

          nedi := ied;
          NextIPLF := false;

          Editiondata[ied].Edition := aktedition;
          Editiondata[ied].Anyplates := false;

      end;

      Foundipl := ipl;
      Foundiplf := iplf;
      foundip := i;
      Aktfront := 1;
      For ipl := 0 to plateframes[iplf].Nprodplates do
      begin
        Nup :=  platetemplatearray[plateframesdata[iplf].prodplates[ipl].templatelistid].NupOnplate;
        for ip := 1 to Nup do
        Begin
          founded := false;
          For iedP := 1 to Editiondata[ied].NPages do
          begin
            if (Editiondata[ied].Pages[iedP].pageindex = plateframesdata[iplf].prodplates[ipl].pages[ip].pageindex) and
               (Editiondata[ied].Pages[iedP].Section = plateframesdata[iplf].prodplates[ipl].pages[ip].SectionID) and
               (Editiondata[ied].Edition = plateframesdata[iplf].prodplates[ipl].EditionID) then
            begin
              founded := true;
              break;
            end;
          end;

          IF Not founded then
          begin
            Inc(Pageid);
            Inc(Editiondata[ied].NPages);
            Editiondata[ied].Edition := plateframesdata[iplf].prodplates[ipl].EditionID;
            IF plateframesdata[iplf].prodplates[ipl].pages[ip].totUniquePage = 1 then
              Editiondata[ied].Anyplates := true;
            Editiondata[ied].Pages[Editiondata[ied].NPages].pagina := plateframesdata[iplf].prodplates[ipl].pages[ip].Pagina;
            Editiondata[ied].Pages[Editiondata[ied].NPages].pageindex := plateframesdata[iplf].prodplates[ipl].pages[ip].pageindex;
            Editiondata[ied].Pages[Editiondata[ied].NPages].pagename := plateframesdata[iplf].prodplates[ipl].pages[ip].pagename;
            Editiondata[ied].Pages[Editiondata[ied].NPages].Priority := 50;
            Editiondata[ied].Pages[Editiondata[ied].NPages].Section := plateframesdata[iplf].prodplates[ipl].pages[ip].SectionID;

            Editiondata[ied].Pages[Editiondata[ied].NPages].NColors := plateframesdata[iplf].prodplates[ipl].pages[ip].Ncolors;

            Editiondata[ied].Pages[Editiondata[ied].NPages].Pagetype := 1;//plateframesdata[iplf].prodplates[ipl].pages[ip].pagetype;
            if (AnsiContainsText(Editiondata[ied].Pages[Editiondata[ied].NPages].pagename,'Dinkey')) then
              Editiondata[ied].Pages[Editiondata[ied].NPages].Pagetype := 3;

            Editiondata[ied].Pages[Editiondata[ied].NPages].copyseparationset := plateframesdata[iplf].prodplates[ipl].pages[ip].CopySeparationSet;
            Editiondata[ied].Pages[Editiondata[ied].NPages].Approved := plateframesdata[iplf].prodplates[ipl].pages[ip].approved;
            Editiondata[ied].Pages[Editiondata[ied].NPages].Hold := FormApplyproduction.RadioGrouphold.ItemIndex + 1;
            Editiondata[ied].Pages[Editiondata[ied].NPages].Version := 0;
            Editiondata[ied].Pages[Editiondata[ied].NPages].iplf := iplf;
            Editiondata[ied].Pages[Editiondata[ied].NPages].ipl := ipl;
            Editiondata[ied].Pages[Editiondata[ied].NPages].ip := ip;
            Editiondata[ied].Pages[Editiondata[ied].NPages].pageid := Pageid;
            plateframesdata[iplf].prodplates[ipl].pages[ip].pageid := pageid;
            Editiondata[ied].Pages[Editiondata[ied].NPages].mastercopyseparationset := plateframesdata[iplf].prodplates[ipl].pages[ip].MasterCopySeparationSet;
            IF plateframesdata[iplf].prodplates[ipl].pages[ip].OrgeditionID = plateframesdata[iplf].prodplates[ipl].EditionID then
            Begin
              Editiondata[ied].Pages[Editiondata[ied].NPages].masterpageid := Pageid;
              plateframesdata[iplf].prodplates[ipl].pages[ip].masterpageid := pageid;

              Editiondata[ied].Pages[Editiondata[ied].NPages].Masteredition := plateframesdata[iplf].prodplates[ipl].EditionID;
              Editiondata[ied].Pages[Editiondata[ied].NPages].mastercopyseparationset := plateframesdata[iplf].prodplates[ipl].EditionID;
              Editiondata[ied].Pages[Editiondata[ied].NPages].Unique := 1;
              Editiondata[ied].Pages[Editiondata[ied].NPages].Masteredition := Editiondata[ied].Edition;
            End
            Else
            Begin
              Editiondata[ied].Pages[Editiondata[ied].NPages].Unique := 0;
              Editiondata[ied].Pages[Editiondata[ied].NPages].Masteredition := plateframesdata[iplf].prodplates[ipl].pages[ip].OrgeditionID;
              Editiondata[ied].Pages[Editiondata[ied].NPages].mastercopyseparationset := plateframesdata[iplf].prodplates[ipl].pages[ip].MasterCopySeparationSet;
              plateframesdata[iplf].prodplates[ipl].pages[ip].masterpageid := 0;
              Editiondata[ied].Pages[Editiondata[ied].NPages].masterpageid := 0;
            End;
            for ic := 1 to plateframesdata[iplf].prodplates[ipl].pages[ip].Ncolors do
            begin
              Editiondata[ied].Pages[Editiondata[ied].NPages].Colors[ic].colorid := plateframesdata[iplf].prodplates[ipl].pages[ip].colors[ic].colorid;
              Editiondata[ied].Pages[Editiondata[ied].NPages].Colors[ic].active := plateframesdata[iplf].prodplates[ipl].pages[ip].colors[ic].active;

            end;
          end;


        End;

      end;
      NextIPLF := true;

    End;

    for iplf := 1 to Nplateframes do
    begin
      (*
      For ied := 1 to nedi do
      begin

        ied := iplf;
        For ip := 1 to Editiondata[ied].NPages do
        begin
          IF Editiondata[ied].Pages[ip].masterpageid = 0 then
          begin
            For ied2 := 1 to nedi do
            begin
              IF Editiondata[ied2].Edition = Editiondata[ied].Pages[ip].Masteredition then
              begin
                For ip2 := 1 to Editiondata[ied2].NPages do
                begin
                  if (Editiondata[ied2].Pages[iP2].pageindex = Editiondata[ied].Pages[iP].pageindex) and
                     (Editiondata[ied2].Pages[iP2].Section = Editiondata[ied].Pages[iP].Section) then
                  begin
                    Editiondata[ied].Pages[iP].masterpageid := Editiondata[ied2].Pages[iP2].masterpageid;
                    break;
                  end;
                end;
                IF Editiondata[ied].Pages[iP].masterpageid <> 0 then
                  break;
              End;
            End;
          end;
        end;
      end;
      *)
    End;
    if (XMLpressID = 3) then
      ncop := Formloadstbplan.UpDownCopies.Position
    else
      ncop := Formloadpressplan.UpDownCopies.Position;

    // NAN
    ncop := 1;

    Aktfront := 1;
    for iplf := 1 to Nplateframes do
    begin

    (*
      For ied := 1 to nedi do
      begin
      *)
        ied := iplf;
        for ipl := 0 to plateframes[iplf].Nprodplates do
        begin
          Nup := platetemplatearray[plateframesdata[iplf].prodplates[ipl * ncop].templatelistid].NupOnplate;
          for ip := 1 to Nup do
          begin
            IF aktfront = 1 then
              aktfront := 0
            Else
              aktfront := 1;


            Editiondata[ied].plates[ipl+1].Front := plateframesdata[iplf].prodplates[ipl * ncop].Front;
            Editiondata[ied].plates[ipl+1].Npages := platetemplatearray[plateframesdata[iplf].prodplates[ipl * ncop].templatelistid].NupOnplate;
            Editiondata[ied].plates[ipl+1].templatelistid := plateframesdata[iplf].prodplates[ipl * ncop].templatelistid;
            Editiondata[ied].plates[ipl+1].PressTower := Getplantowername(plateframesdata[iplf].prodplates[ipl * ncop].Tower);

            Editiondata[ied].plates[ipl+1].PressZone := GetPlannameFromID(5,plateframesdata[iplf].prodplates[ipl * ncop].Zone);

            dbl1 := pos(';',Editiondata[ied].plates[ipl+1].PressZone);
            Delete(Editiondata[ied].plates[ipl+1].PressZone,dbl1,100);

            Editiondata[ied].plates[ipl+1].NColors := 4;

            Editiondata[ied].plates[ipl+1].Pages[1].posX := 1;
            Editiondata[ied].plates[ipl+1].Pages[1].posy := 1;

            if (Nup = 2) and (Editiondata[ied].plates[ipl+1].Npages > 1) then
            begin
              if platetemplatearray[plateframesdata[iplf].prodplates[ipl * ncop].templatelistid].Pagesdown > platetemplatearray[plateframesdata[iplf].prodplates[ipl * ncop].templatelistid].Pagesacross then
              begin
                Editiondata[ied].plates[ipl+1].Pages[2].posX := 1;
                Editiondata[ied].plates[ipl+1].Pages[2].posy := 2;
              end
              else
              begin
                Editiondata[ied].plates[ipl+1].Pages[2].posX := 2;
                Editiondata[ied].plates[ipl+1].Pages[2].posy := 1;
              end;
            end;

            if (Nup = 4) and (Editiondata[ied].plates[ipl+1].Npages >= 4) then
            begin
               Editiondata[ied].plates[ipl+1].Pages[2].posX := 2;
               Editiondata[ied].plates[ipl+1].Pages[2].posy := 1;
               Editiondata[ied].plates[ipl+1].Pages[3].posX := 1;
               Editiondata[ied].plates[ipl+1].Pages[3].posy := 2;
               Editiondata[ied].plates[ipl+1].Pages[4].posX := 2;
               Editiondata[ied].plates[ipl+1].Pages[4].posy := 2;
            end;

            if (Nup = 8) and (Editiondata[ied].plates[ipl+1].Npages >= 8) then
            begin
              if platetemplatearray[plateframesdata[iplf].prodplates[ipl * ncop].templatelistid].Pagesdown > platetemplatearray[plateframesdata[iplf].prodplates[ipl * ncop].templatelistid].Pagesacross then
              begin
                 Editiondata[ied].plates[ipl+1].Pages[2].posX := 2;
                 Editiondata[ied].plates[ipl+1].Pages[2].posy := 1;
                 Editiondata[ied].plates[ipl+1].Pages[3].posX := 1;
                 Editiondata[ied].plates[ipl+1].Pages[3].posy := 2;
                 Editiondata[ied].plates[ipl+1].Pages[4].posX := 2;
                 Editiondata[ied].plates[ipl+1].Pages[4].posy := 2;
                 Editiondata[ied].plates[ipl+1].Pages[5].posX := 1;
                 Editiondata[ied].plates[ipl+1].Pages[5].posy := 3;
                 Editiondata[ied].plates[ipl+1].Pages[6].posX := 2;
                 Editiondata[ied].plates[ipl+1].Pages[6].posy := 3;
                 Editiondata[ied].plates[ipl+1].Pages[7].posX := 1;
                 Editiondata[ied].plates[ipl+1].Pages[7].posy := 4;
                 Editiondata[ied].plates[ipl+1].Pages[8].posX := 2;
                 Editiondata[ied].plates[ipl+1].Pages[8].posy := 4;
              end
              else
              begin
                 Editiondata[ied].plates[ipl+1].Pages[2].posX := 2;
                 Editiondata[ied].plates[ipl+1].Pages[2].posy := 1;
                 Editiondata[ied].plates[ipl+1].Pages[3].posX := 3;
                 Editiondata[ied].plates[ipl+1].Pages[3].posy := 1;
                 Editiondata[ied].plates[ipl+1].Pages[4].posX := 4;
                 Editiondata[ied].plates[ipl+1].Pages[4].posy := 1;
                 Editiondata[ied].plates[ipl+1].Pages[5].posX := 1;
                 Editiondata[ied].plates[ipl+1].Pages[5].posy := 2;
                 Editiondata[ied].plates[ipl+1].Pages[6].posX := 2;
                 Editiondata[ied].plates[ipl+1].Pages[6].posy := 2;
                 Editiondata[ied].plates[ipl+1].Pages[7].posX := 3;
                 Editiondata[ied].plates[ipl+1].Pages[7].posy := 2;
                 Editiondata[ied].plates[ipl+1].Pages[8].posX := 4;
                 Editiondata[ied].plates[ipl+1].Pages[8].posy := 2;
              end;
            end;

            For i := 1 to platetemplatearray[plateframesdata[iplf].prodplates[ipl * ncop].templatelistid].NupOnplate do
            begin
              Editiondata[ied].plates[ipl+1].Pages[i].pageindex := plateframesdata[iplf].prodplates[ipl * ncop].pages[i].pageindex;
              Editiondata[ied].plates[ipl+1].Pages[i].copyseparationset := plateframesdata[iplf].prodplates[ipl * ncop].pages[i].CopySeparationSet;
              Editiondata[ied].plates[ipl+1].Pages[i].sectionid := plateframesdata[iplf].prodplates[ipl * ncop].pages[i].SectionID;
              Editiondata[ied].plates[ipl+1].Pages[i].pagina := plateframesdata[iplf].prodplates[ipl * ncop].pages[i].Pagina;
              Editiondata[ied].plates[ipl+1].Pages[i].pagename := plateframesdata[iplf].prodplates[ipl * ncop].pages[i].pagename;

              findpagespageids(Editiondata[ied].Edition,
                             Editiondata[ied].plates[ipl+1].Pages[i].sectionid,
                             Editiondata[ied].plates[ipl+1].Pages[i].pageindex,
                             Editiondata[ied].plates[ipl+1].Pages[i].pageid,
                             Editiondata[ied].plates[ipl+1].Pages[i].masterpageid);



              For ic := 1 to plateframesdata[iplf].prodplates[ipl * ncop].pages[i].Ncolors do
              begin
                 Editiondata[ied].plates[ipl+1].miscstring3 := GetPlannameFromID(8,plateframesdata[iplf].prodplates[ipl * ncop].Pages[i].colors[ic].Miscstring3);

                 T := Editiondata[ied].plates[ipl+1].miscstring3;
                 dbl1 := pos(';',T);
                 Delete(T,dbl1,100);
                 Editiondata[ied].plates[ipl+1].miscstring3 := T;

                 Editiondata[ied].plates[ipl+1].Colors[ic].colorid := plateframesdata[iplf].prodplates[ipl * ncop].pages[i].colors[ic].colorid;
                 Editiondata[ied].plates[ipl+1].Colors[ic].cylinder := GetPlannameFromID(4,plateframesdata[iplf].prodplates[ipl * ncop].pages[i].colors[ic].Cylinder);
                 dbl1 := pos(';',Editiondata[ied].plates[ipl+1].Colors[ic].cylinder);
              //   Delete(Editiondata[ied].plates[ipl+1].PressZone,dbl1,100);
                 Delete(Editiondata[ied].plates[ipl+1].Colors[ic].cylinder,dbl1,100);

                 if (XMLpressID = 3)  then
                   Editiondata[ied].plates[ipl+1].Colors[ic].Ncopies := Formloadstbplan.UpDownCopies.Position
                 else
                   Editiondata[ied].plates[ipl+1].Colors[ic].Ncopies := Formloadpressplan.UpDownCopies.Position;

                For icpy := 1 to Editiondata[ied].plates[ipl+1].Colors[ic].Ncopies do
                begin
                  Editiondata[ied].plates[ipl+1].Colors[ic].Copies[icpy].SortingPosition :=
                    GetPlannameFromID(2,plateframesdata[iplf].prodplates[ipl * ncop].pages[i].colors[ic].stackpos);
                    Editiondata[ied].plates[ipl+1].Colors[ic].Copies[icpy].miscstring3 :=  GetPlannameFromID(8,plateframesdata[iplf].prodplates[ipl * ncop].pages[i].colors[ic].Miscstring3);


                  Editiondata[ied].plates[ipl+1].Colors[ic].Copies[icpy].miscstring2 :=  GetPlannameFromID(2,plateframesdata[iplf].prodplates[ipl * ncop].pages[i].colors[ic].Miscstring3);
                  T := Editiondata[ied].plates[ipl+1].Colors[ic].Copies[icpy].miscstring3;
                  dbl1 := pos(';',T);
                  IF dbl1 > 0 then
                  begin
                    Delete(T,dbl1,100);
                    Editiondata[ied].plates[ipl+1].Colors[ic].Copies[icpy].miscstring3 := T;
                  End;

                  Editiondata[ied].plates[ipl+1].Colors[ic].Copies[icpy].High := GetPlannameFromID(3,plateframesdata[iplf].prodplates[ipl * ncop].pages[i].colors[ic].High);
                  Editiondata[ied].plates[ipl+1].PressHighLow := GetPlannameFromID(3,plateframesdata[iplf].prodplates[ipl * ncop].pages[i].colors[ic].High);
                end;
              end;
            end;
          End;
        End;
      //End;
    End;

    result := true;
    NEditiondata := nedi;


  finally

  End;
end;



end.
