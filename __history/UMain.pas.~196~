unit Umain;

interface

uses
  Winapi.Windows, Winapi.Messages, Winapi.ShellAPI, Winapi.TlHelp32,
  System.SysUtils, System.Variants, System.Classes, System.IniFiles,
  System.Actions, System.ImageList, System.IOUtils,
  System.UITypes, System.Math, System.DateUtils, System.Win.ComObj,
  System.Contnrs,
  Vcl.Graphics, Vcl.Forms, Vcl.Controls, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Menus,
  Vcl.ComCtrls,
  Vcl.ImgList, Vcl.ToolWin, Vcl.ActnList, Vcl.ActnCtrls, Vcl.ActnMan,
  Vcl.ActnMenus, Vcl.Imaging.Jpeg,
  Vcl.ActnPopup, Vcl.Buttons, Vcl.ExtDlgs, Vcl.FileCtrl, Vcl.Grids,
  Vcl.StdActns, Vcl.Tabs,
  Vcl.XPMan, Vcl.AppEvnts, Vcl.ExtCtrls, Vcl.BandActn, Vcl.ActnColorMaps,
  // Vcl.MPlayer,
  Vcl.PlatformDefaultStyleActnCtrls, Vcl.XPStyleActnCtrls, Vcl.CheckLst,
  Vcl.Printers,
  Vcl.StdStyleActnCtrls, Vcl.Samples.Spin,
  Data.SqlExpr,
  VclTee.TeeGDIPlus, VclTee.TeEngine, VclTee.TeeProcs, VclTee.Chart,
  VclTee.Series,
  ImageEn, ImageEnIO, ImageEnView, IEview, ImageEnProc,
  DBXDevartSQLServer, hyieutils, iexBitmaps, hyiedefs, iesettings,
  Fileclipboard, PBExListview, FixedDateTimePicker, RegExpr,
  UPlanframe, UPleaseWait, UImages,
  Names, Upageinfoframe, UTypes,
  Uinfoframe,
  InfraLanguage, LanguageList1,
  Udevmanager,
  UDeviceControlframe, UStatusmother,
  Udevicecontrolplacer,
  UReNumberPlate, UnitInkPreeSet, URemoteControl,
  Uapplytounplanned, UPrefs, UWorkerThreadUnknownPages, iexRulers,
  UWorkerThreadUnknownFiles,
  UNiceManualStackerSet, iexLayers,
  UADlogin, ULoadDLLs, UUtils, NetDirectoryExists,
  UxTheme, Vcl.Themes, iexToolbars, iexUserInteractions, iexProcEffects;

// Data.DB, //Data.FMTBcd,
// IdCoder3to4, IdCoderUUE, IdCoderMIME, IdCoderQuotedPrintable,
// System.Win.ScktComp,
// IdBaseComponent, IdCoder,
// MYApplicationEvents1, UPing
const
  writelangiagefile = false;
  WM_THEMECHANGED = $031A;

  // WM_USER_FIXACTIVEWND = WM_USER + 110;
type

  PPChar = ^PChar;
  CharArray = array [0 .. 255] of Char;

  THackPanel = class(TPanel)

  end;

  TFormMain = class(TForm)
    PageControlMain: TPageControl;
    ActionManager1: TActionManager;
    Actionplaterefresh: TAction;
    Aimage: TImage;
    Fimage: TImage;
    Image1: TImage;
    Imagepagesample: TImage;
    OpenDialogtheme: TOpenDialog;
    SaveDialog1: TSaveDialog;
    OpenPictureDialog1: TOpenPictureDialog;
    FontDialog1: TFontDialog;
    StatusBar1: TStatusBar;
    Panel2: TPanel;
    Actionrefreshpagefilter: TAction;
    Actionrefreshpages: TAction;
    ActionPageApprove: TAction;
    ActionPageDisapprove: TAction;
    ActionPageHold: TAction;
    ActionPagerelease: TAction;
    Actionpagereapprove: TAction;
    PopupMenuImposedata: TPopupMenu;
    Layout1: TMenuItem;
    Actionpagechangetower: TAction;
    ActionPageCHHighlow: TAction;
    ActionPageCHCyl: TAction;
    ActionPageCHstack: TAction;
    ower1: TMenuItem;
    Highlow1: TMenuItem;
    Cylinder1: TMenuItem;
    Stackposition1: TMenuItem;
    ImageListeditorialstate: TImageList;
    TabSheetPages: TTabSheet;
    Actionprogram: TAction;
    Halfweb2: TMenuItem;
    Actionthumbnailpreview: TAction;
    ActionPagereimage: TAction;
    ImageListdatasmall: TImageList;
    Actionpagedevice: TAction;
    Platemarks1: TMenuItem;
    Timerafterdrag: TTimer;
    ImageEnProcplate: TImageEnProc;
    ImageEnIO1: TImageEnIO;
    GroupBoxworking: TGroupBox;
    ProgressBarmain: TProgressBar;
    TabSheetprogress: TTabSheet;
    ActionProgressrefresh: TAction;
    ActionpageMissing: TAction;
    Actionpagepriority: TAction;
    TabSheetplates: TTabSheet;
    ActionPlaterefreshtree: TAction;
    Panelpages: TPanel;
    Panelseptree: TPanel;
    ActionToolBarpagefilter: TActionToolBar;
    Splitter2: TSplitter;
    PanelPlatetree: TPanel;
    TreeViewPlateview: TTreeView;
    ActionToolBarplatetree: TActionToolBar;
    PanelMainplateviewpanel: TPanel;
    Splitter8: TSplitter;
    ActionPlatelayout: TAction;
    ActionToolBarplateview: TActionToolBar;
    Actionplatereimage: TAction;
    ActionPlatehold: TAction;
    ActionPlaterelease: TAction;
    Actionplatedevice: TAction;
    Actionplatemarks: TAction;
    ActionPlateapprove: TAction;
    Actionplatedisapprove: TAction;
    Actionplatepriority: TAction;
    Actionplatetower: TAction;
    Actionplatestack: TAction;
    Actionpageretransmit: TAction;
    Actionplateretransmit: TAction;
    InfraLanguage1: TInfraLanguage;
    Actionclose: TAction;
    Actionhelp: TAction;
    ActionPageExport: TAction;
    ActionLogrefresh: TAction;
    Timerautorefresh: TTimer;
    ActionPageedit: TAction;
    ActionPagereproof: TAction;
    Actionabout: TAction;
    Actionprogressdele: TAction;
    TabSheetErrorLog: TTabSheet;
    TimerblinkNotapproved: TTimer;
    TimerPlateviewPopup: TTimer;
    TabSheetEdition: TTabSheet;
    ActionEditionrefresh: TAction;
    ActionPlateproduce: TAction;
    PopupMenuedition: TPopupMenu;
    editionstringgridmenu: TMenuItem;
    ActionEditionapply: TAction;
    ActionProgresshold: TAction;
    ActionProgressrelease: TAction;
    ActionProgresspriority: TAction;
    Actionpagechangeproofer: TAction;
    ActioneditionAdd: TAction;
    Actioneditiondelete: TAction;
    ActionPlateEditnames: TAction;
    Actionthumbnaileditcolors: TAction;
    ActionthumbnailCenterspread: TAction;
    ActionthumbnailSinglespread: TAction;
    PopupMenulocaled: TPopupMenu;
    Actionprogressrefreshfilter: TAction;
    PageControlprogress: TPageControl;
    TabSheet10: TTabSheet;
    TabSheet11: TTabSheet;
    Panel18: TPanel;
    GroupBox10: TGroupBox;
    GroupBox16: TGroupBox;
    Panelpagesapproved: TPanel;
    ProgressBarpagesapproved: TProgressBar;
    GroupBox18: TGroupBox;
    Panelpagesready: TPanel;
    ProgressBarpagesready: TProgressBar;
    TreeViewprogress: TTreeView;
    ActionToolBar1: TActionToolBar;
    Splitter4: TSplitter;
    GroupBox25: TGroupBox;
    Splitter7: TSplitter;
    GroupBox23: TGroupBox;
    Panelplatesready: TPanel;
    ProgressBarplatesready: TProgressBar;
    GroupBox24: TGroupBox;
    Panelplatesimaged: TPanel;
    ProgressBarplatesimaged: TProgressBar;
    GroupBox26: TGroupBox;
    PanelTotnpages: TPanel;
    GroupBox27: TGroupBox;
    PanelTotnuniquepages: TPanel;
    GroupBox28: TGroupBox;
    PaneltotalNplates: TPanel;
    Actionprogressreimage: TAction;
    Actionpageimaged: TAction;
    Actionprogaddcopy: TAction;
    Actionprogressremovecopy: TAction;
    Actionprogressforce: TAction;
    Actionsettingstoolbars: TAction;
    ActionPageactivate: TAction;
    Actionpagedeactivate: TAction;
    Actionsettingscolumns: TAction;
    XPColorMap1: TXPColorMap;
    ActionThumbnailrefresh: TAction;
    ActionThumbnailapprove: TAction;
    ActionThumbnaildisapprove: TAction;
    ActionThumbnailhold: TAction;
    ActionthumbnailRelease: TAction;
    ActionthumbnailReapprove: TAction;
    Actionthumbnailtower: TAction;
    Actionthumbnailhighlow: TAction;
    Actionthumbnailcylinder: TAction;
    Actionthumbnailstackpos: TAction;
    ActionThumbnailMissing: TAction;
    Actionthumbnailpriority: TAction;
    Actionthumbnailretransmit: TAction;
    Actionthumbnailreproof: TAction;
    Actionthumbnailchangeproofer: TAction;
    Actionthumbnailimaged: TAction;
    ActionDebugunplan: TAction;
    PopupActionBarEx1Pages: TPopupActionBar;
    PopupMenuaddsubmenu: TPopupMenu;
    addsubmenu1: TMenuItem;
    Approve3: TMenuItem;
    Disapprove3: TMenuItem;
    Hold2: TMenuItem;
    Release2: TMenuItem;
    Platesettings1: TMenuItem;
    ower2: TMenuItem;
    Cylinder2: TMenuItem;
    Highlow2: TMenuItem;
    Stackposition2: TMenuItem;
    Add1: TMenuItem;
    Delete1: TMenuItem;
    Retransmit1: TMenuItem;
    Rerip1: TMenuItem;
    Changestatus1: TMenuItem;
    Imaged1: TMenuItem;
    Selectall1: TMenuItem;
    PopupActionBarEx1Thumbnails: TPopupActionBar;
    Approve2: TMenuItem;
    Disapprove2: TMenuItem;
    Hold3: TMenuItem;
    Release3: TMenuItem;
    Editcolors1: TMenuItem;
    Centerspread1: TMenuItem;
    Singlespread1: TMenuItem;
    Reproof1: TMenuItem;
    Platesettings2: TMenuItem;
    Stackposition3: TMenuItem;
    ower3: TMenuItem;
    Cylinder3: TMenuItem;
    HighLow3: TMenuItem;
    Changestatus2: TMenuItem;
    ReRIP2: TMenuItem;
    Retransmit2: TMenuItem;
    Imaged2: TMenuItem;
    PopupActionBarEx1plateview: TPopupActionBar;
    Release1: TMenuItem;
    Hold1: TMenuItem;
    Device1: TMenuItem;
    Producecommonplate2: TMenuItem;
    Platesettings3: TMenuItem;
    Stackposition4: TMenuItem;
    ower4: TMenuItem;
    Cylinder4: TMenuItem;
    Highlow4: TMenuItem;
    Marks1: TMenuItem;
    Layout2: TMenuItem;
    PopupActionBarExplanningtree: TPopupActionBar;
    Changerun2: TMenuItem;
    Centerspread2: TMenuItem;
    Singlespread2: TMenuItem;
    Changepress2: TMenuItem;
    Editcolors3: TMenuItem;
    Copyproduction1: TMenuItem;
    Addcopy2: TMenuItem;
    Deletecopy2: TMenuItem;
    Editpagenames2: TMenuItem;
    TabSheetNewplanner: TTabSheet;
    ActionToolBarAplan: TActionToolBar;
    Actionnewplanrefresh: TAction;
    Actionnewplanedit: TAction;
    ActionnewplanLoad: TAction;
    ActionnewplanCreate: TAction;
    Addpages1: TMenuItem;
    ActionpageExtstatus: TAction;
    Externalstatus1: TMenuItem;
    Actionpagechangecols: TAction;
    Changecolumns1: TMenuItem;
    Actionthumbnailextstaus: TAction;
    Externalstatus2: TMenuItem;
    Actionpagetreeexternalstatus: TAction;
    Externalstatus3: TMenuItem;
    Deletepages1: TMenuItem;
    ActionnewplanMove: TAction;
    Actionnewplandelete: TAction;
    StandardColorMap1: TStandardColorMap;
    PanelBtnface: TPanel;
    Label5: TLabel;
    Actionsettingstabs: TAction;
    Actionreportfilter: TAction;
    Actionreportrefresh: TAction;
    Splitter11: TSplitter;
    ActionLogrefreshfilter: TAction;
    Actionlogsave: TAction;
    Actionlogfind: TAction;
    Actionconfigcolors: TAction;
    SaveDialoglog: TSaveDialog;
    TabSheetReportmain: TTabSheet;
    Splitter13: TSplitter;
    Actionreportsave: TAction;
    Actionreportprint: TAction;
    SaveDialogreport: TSaveDialog;
    PrintDialog1: TPrintDialog;
    SaveDialogsavetextreport: TSaveDialog;
    Actionlogtoexcel: TAction;
    FontDialog2: TFontDialog;
    PopupActionBarExreport: TPopupActionBar;
    Actionreportfont: TAction;
    Changefont1: TMenuItem;
    Actionconfigjobnames: TAction;
    Actionnewplanapply: TAction;
    Actionnewplandeletetemplate: TAction;
    TabSheetThumbnails: TTabSheet;
    PanelThumbTree: TPanel;
    TreeViewThumbs: TTreeView;
    GroupBox39: TGroupBox;
    ActionToolBarthumbfilter: TActionToolBar;
    Splitter15: TSplitter;
    Panel8: TPanel;
    ActionToolBarThumbnail: TActionToolBar;
    ActionToolBarpageactions: TActionToolBar;
    ActionThumbnailFilterrefresh: TAction;
    GroupBoxThumbnailstuf: TGroupBox;
    Imageload: TImage;
    Imagethumbbar: TImage;
    ActionThumbnailsreimage: TAction;
    ActionCHKpageautorefresh: TAction;
    ActionPageSelectTop: TAction;
    Actionpageselectplate: TAction;
    Actionpageselectpage: TAction;
    ActionpageselectSeparation: TAction;
    Actionpageselectplateset: TAction;
    ActionCHKthumbautorefresh: TAction;
    ActionCHKthumbstatus: TAction;
    ActionCHKthumbreadorder: TAction;
    ActionCHKthumbonlyunique: TAction;
    ActionCHKthumbnextnotapproved: TAction;
    ActionCHKthumbnextdisapproved: TAction;
    Actionplateautorefresh: TAction;
    ActionplateSmallimages: TAction;
    ActionplateThumbnails: TAction;
    ActionplateHidecommon: TAction;
    ActionnewplanSmallimages: TAction;
    Actionprogressdeadline: TAction;
    Actionproddevice: TAction;
    Actiondbtools: TAction;
    Actiondeletepublication: TAction;
    Action7: TAction;
    StringGridHS: TStringGrid;
    Actionpagesarchive: TAction;
    Actionthumbcomment: TAction;
    Comment1: TMenuItem;
    ActionpageInfo: TAction;
    Fileinfo1: TMenuItem;
    ActionThumbmissig: TAction;
    Actionthumbcopy: TAction;
    ActionThumbpaste: TAction;
    Copy1: TMenuItem;
    Paste1: TMenuItem;
    PopupActionBarEx1: TPopupActionBar;
    MenuItem1: TMenuItem;
    MenuItem2: TMenuItem;
    MenuItem3: TMenuItem;
    MenuItem4: TMenuItem;
    MenuItem5: TMenuItem;
    MenuItem6: TMenuItem;
    MenuItem7: TMenuItem;
    MenuItem8: TMenuItem;
    MenuItem9: TMenuItem;
    MenuItem10: TMenuItem;
    MenuItem11: TMenuItem;
    MenuItem12: TMenuItem;
    MenuItem13: TMenuItem;
    MenuItem14: TMenuItem;
    MenuItem15: TMenuItem;
    MenuItem16: TMenuItem;
    MenuItem17: TMenuItem;
    MenuItem18: TMenuItem;
    MenuItem19: TMenuItem;
    MenuItem20: TMenuItem;
    PopupActionBarExpagetree: TPopupActionBar;
    PopupActionBarExThumbtree: TPopupActionBar;
    PopupActionBarExplatetree: TPopupActionBar;
    Actionpagetreerelease: TAction;
    Release4: TMenuItem;
    ActionpagetreeHold: TAction;
    Hold4: TMenuItem;
    ActionpagetreePriority: TAction;
    Priority1: TMenuItem;
    ActionpagetreeApprove: TAction;
    Approve1: TMenuItem;
    Actionthumbtreerealse: TAction;
    Actionthumbtreehold: TAction;
    Actionthumbtreepriority: TAction;
    Actionthumbtreeapprove: TAction;
    Relase1: TMenuItem;
    Hold5: TMenuItem;
    Priority2: TMenuItem;
    Approve4: TMenuItem;
    Actionplatetreerelease: TAction;
    Release5: TMenuItem;
    Actionplatetreehold: TAction;
    Actionplatetreepriority: TAction;
    Actionplatetreeapprove: TAction;
    Hold6: TMenuItem;
    Priority3: TMenuItem;
    Approve5: TMenuItem;
    Stackposition5: TMenuItem;
    Actionpagecomma: TAction;
    Actioncustomtools: TAction;
    Index1: TMenuItem;
    Actionselectallcopies: TAction;
    ActionCopyStackerSetupProduction: TAction;
    ActionSavePlatePositionSetupProduction: TAction;
    CheckBoxthumbapprovalfilter: TCheckBox;
    Actionplateplatecopies: TAction;
    ActionCurretstate: TAction;
    Currentstate1: TMenuItem;
    Currentstate2: TMenuItem;
    Currentstate3: TMenuItem;
    Actionfiledropdown: TAction;
    ActionProgexit: TAction;
    Actionloadpressconf: TAction;
    Actionreimall: TAction;
    TreeViewpagelist: TTreeView;
    Panel5: TPanel;
    Splitter5: TSplitter;
    GroupBox6: TGroupBox;
    ComboBoxStatus: TComboBox;
    GroupBox9: TGroupBox;
    ComboBoxapproval: TComboBox;
    Panel6: TPanel;
    Splitter6: TSplitter;
    GroupBox11: TGroupBox;
    ComboBoxactive: TComboBox;
    GroupBoxInactive: TGroupBox;
    ComboBoxhold: TComboBox;
    GroupBoxpageslocation: TGroupBox;
    ComboBoxpalocationNY: TComboBox;
    ActionMainMenuBar1X: TActionMainMenuBar;
    Panelprodtree: TPanel;
    TreeViewprodcontrol: TTreeView;
    Panel17: TPanel;
    Panel19: TPanel;
    GroupBoxPlanfilt: TGroupBox;
    TreeViewplan: TTreeView;
    Splitter12: TSplitter;
    GroupBox17: TGroupBox;
    PageControlplanning: TPageControl;
    TabSheet1: TTabSheet;
    ScrollBoxplanmain: TScrollBox;
    TabSheet2: TTabSheet;
    PBExListviewPlandata: TPBExListview;
    Panel20: TPanel;
    PBExListviewthumbnail: TPBExListview;
    Splitter3: TSplitter;
    Panel22: TPanel;
    Panel21: TPanel;
    GroupBox5: TGroupBox;
    StringGridprods: TStringGrid;
    ActionToolBarprogresstree: TActionToolBar;
    Actionsystemdebugsettime: TAction;
    Actiongraphinput: TAction;
    Actiongraphapproval: TAction;
    Actiongraphoutput: TAction;
    PopupActionBarExgraph: TPopupActionBar;
    Showinput1: TMenuItem;
    Showapproval1: TMenuItem;
    Showoutput1: TMenuItem;
    PopupActionBarExreporttree: TPopupActionBar;
    Actiondeletedead: TAction;
    SaveDialogreportdetails: TSaveDialog;
    Actionplatetreelayout: TAction;
    Layout3: TMenuItem;
    SaveDialoggetfile: TSaveDialog;
    ActionThumbGetfile: TAction;
    Actionfilescopy: TAction;
    Actionfilespaste: TAction;
    Fileclipboard1: TFileclipboard;
    Actiontoolholdrelse: TAction;
    Actionprodchangepress: TAction;
    Paneledtree: TPanel;
    ActionToolBar5: TActionToolBar;
    TreeViewNeweddtree: TTreeView;
    Panel16: TPanel;
    ActionToolBaredition: TActionToolBar;
    Splitter1: TSplitter;
    Actionrefreshhedtree: TAction;
    GroupBox7: TGroupBox;
    Splitter14: TSplitter;
    GroupBox14: TGroupBox;
    PopupActionBarExedtions: TPopupActionBar;
    Actioneditionpopmakeunique: TAction;
    Makeunique1: TMenuItem;
    ActioneditionpopUseasmaster: TAction;
    ListViewedfrom: TListView;
    ListViewEdto: TListView;
    PopupActionBarExedfrom: TPopupActionBar;
    Useasmaster1: TMenuItem;
    Actioneditionpopundo: TAction;
    Undo1: TMenuItem;
    Actionplatesflatproof: TAction;
    Actionpagetreeflatproof: TAction;
    Flatproof1: TMenuItem;
    Actionpagesflatproof: TAction;
    Proofing1: TMenuItem;
    Reproof2: TMenuItem;
    Changeproofer1: TMenuItem;
    Flatproof2: TMenuItem;
    Actionthumbtreeflatproof: TAction;
    Flatproof3: TMenuItem;
    Actionplatetreeflatproof: TAction;
    Flatproof4: TMenuItem;
    Actionplateflatproof: TAction;
    Flatproof5: TMenuItem;
    Actionplatepairprev: TAction;
    Pairprev1: TMenuItem;
    Actionconfserversetup: TAction;
    Actionmontorrefresh: TAction;
    TabSheetUnknownpages: TTabSheet;
    Actionunkownretry: TAction;
    Actionnknowautorefresh: TAction;
    ActionUnknowndelete: TAction;
    ActionUnkownrename: TAction;
    PopupActionBarExUnnknwon: TPopupActionBar;
    Retryfiles1: TMenuItem;
    Delete2: TMenuItem;
    Rename1: TMenuItem;
    TabSheetactiivequeue: TTabSheet;
    Actionactiverefresh: TAction;
    GroupBoxActiveQueueLocation: TGroupBox;
    ComboBoxactivequeue: TComboBox;
    ActionToolBarActivequeue: TActionToolBar;
    ActionActihold: TAction;
    Actionactrelease: TAction;
    Actionactpriority: TAction;
    PopupActionBarExActive: TPopupActionBar;
    Hold7: TMenuItem;
    Priority4: TMenuItem;
    Actionactiveauto: TAction;
    ListViewActqueue: TListView;
    PopupActionBarExProduction: TPopupActionBar;
    Hold8: TMenuItem;
    Release6: TMenuItem;
    Priority5: TMenuItem;
    ActionChangeStacker1: TMenuItem;
    ActionplatetreeComment: TAction;
    Comment2: TMenuItem;
    ActionplateComment: TAction;
    ActionpageComment: TAction;
    Comment3: TMenuItem;
    Comment4: TMenuItem;
    ActionpagetreeComment: TAction;
    ActionthumbtreeComment: TAction;
    ActionthumbnailComment: TAction;
    Comment5: TMenuItem;
    Comment6: TMenuItem;
    PlateviewMain: TScrollBox;
    ActionPlateregenink: TAction;
    ActionPlateminimize: TAction;
    ActionPlatemaximize: TAction;
    ActionprodAutorefresh: TAction;
    ActionToolBarprogress: TActionToolBar;
    ActionCheckforms: TAction;
    ActionReSendInkbackup: TAction;
    Regenerateinkfile1: TMenuItem;
    GroupBoxPlatedetails: TGroupBox;
    PBExListviewplateinfo: TPBExListview;
    Splitterplatedetail: TSplitter;
    Actionplatedetails: TAction;
    Actionprodfanout: TAction;
    Fanoutsetting1: TMenuItem;
    ActionDebugtools: TAction;
    ActionplatetreeStack: TAction;
    Actionprodeditweek: TAction;
    Editweeknumber2: TMenuItem;
    Actionplaneditdates: TAction;
    GroupBoxedition: TGroupBox;
    ProgressBaredition: TProgressBar;
    Actiontreeexpand: TAction;
    Actiontreecollapse: TAction;
    ree1: TMenuItem;
    Collapse1: TMenuItem;
    Expand1: TMenuItem;
    ree2: TMenuItem;
    Expand2: TMenuItem;
    Collapse2: TMenuItem;
    ree3: TMenuItem;
    Expand3: TMenuItem;
    Collapse3: TMenuItem;
    Timerwaitforplanlock: TTimer;
    ActiontoolclearFproofQ: TAction;
    ActionprodGeneralsettings: TAction;
    Settings1: TMenuItem;
    Actionpagetreecreep: TAction;
    Creep1: TMenuItem;
    Reapprove1: TMenuItem;
    Reapprove2: TMenuItem;
    Actionprodreapproved: TAction;
    Actionprodautoapprove: TAction;
    Autoapprove1: TMenuItem;
    Actionpageautoapprove: TAction;
    Autoapprove2: TMenuItem;
    Actionthumbnailautoapproval: TAction;
    Approve6: TMenuItem;
    ActionprodSchedules: TAction;
    Actionplatetreeschedule: TAction;
    Schedule2: TMenuItem;
    PopupActionBarExgantgrid: TPopupActionBar;
    oday1: TMenuItem;
    Actionuknowfiletool: TAction;
    Actionpageshardproof: TAction;
    Hardproof1: TMenuItem;
    Actionthumbhardproof: TAction;
    Proofing2: TMenuItem;
    Hardproof2: TMenuItem;
    Softproof1: TMenuItem;
    ActionthumbtreeHardproof: TAction;
    Hardproof3: TMenuItem;
    Proofing3: TMenuItem;
    Actionthumbtreesoftproof: TAction;
    Unknownfiles1: TMenuItem;
    ActionUnkownfilter: TAction;
    ActionUnkownfolder: TAction;
    ActionFileserverconnect: TAction;
    Actiongotobackup: TAction;
    Actionglobalfilterrefresh: TAction;
    Actiongloballistrefresh: TAction;
    ActionprodSetImaged: TAction;
    StatusImaged1: TMenuItem;
    ActionToolOldver: TAction;
    Actionpagetreeoldver: TAction;
    Oldversions1: TMenuItem;
    ActionGlobalselectall: TAction;
    Actionglobalextstat: TAction;
    Actionplatesextstat: TAction;
    ActionGlobalmarks: TAction;
    Actionglobalproof: TAction;
    Actionprodsoftproof: TAction;
    Softproof2: TMenuItem;
    Actionglobalcomment: TAction;
    Actionplatesoftproof: TAction;
    Plateproofovermenu: TMenuItem;
    Softproof3: TMenuItem;
    Actionthumbtreeoldversions: TAction;
    Oldversions2: TMenuItem;
    ActionThumbnailoldversion: TAction;
    Oldversions3: TMenuItem;
    ActionPlatetreeexternstat: TAction;
    Externalstatus4: TMenuItem;
    Actionprodtreerelease: TAction;
    ActionprodtreeHold: TAction;
    ActionprodtreePRI: TAction;
    ActionprodtreerApprove: TAction;
    ActionprodtreeLayout: TAction;
    ActionprodtreeFlatproof: TAction;
    ActionprodtreeComment: TAction;
    ActionprodtreeStackpos: TAction;
    ActionprodtreeSchedule: TAction;
    ActionprodtreeExternalstat: TAction;
    PopupActionBarExprodtree: TPopupActionBar;
    MenuItem22: TMenuItem;
    MenuItem23: TMenuItem;
    MenuItem24: TMenuItem;
    MenuItem25: TMenuItem;
    MenuItem27: TMenuItem;
    MenuItem28: TMenuItem;
    MenuItem29: TMenuItem;
    MenuItem31: TMenuItem;
    MenuItem32: TMenuItem;
    MenuItem33: TMenuItem;
    MenuItem34: TMenuItem;
    MenuItem35: TMenuItem;
    MenuItem36: TMenuItem;
    MenuItem37: TMenuItem;
    ActionprodOrdernumber: TAction;
    Ordernumber1: TMenuItem;
    Actionprodcomment: TAction;
    Actionprodinkcomment: TAction;
    Productioncomment1: TMenuItem;
    Inkcomment1: TMenuItem;
    Actionpagetreeexportxml: TAction;
    XMLExport1: TMenuItem;
    Edit4: TMenuItem;
    GroupBox38: TGroupBox;
    ComboBoxPagescopies: TComboBox;
    TimerPlatetreekey: TTimer;
    Actionpagetreequicksel: TAction;
    Quickselect1: TMenuItem;
    ActionMacroexec1: TAction;
    ActionMacroexec2: TAction;
    ActionMacroexec3: TAction;
    ActionMacroexec4: TAction;
    ActionMacroexec5: TAction;
    ActionMacroexec6: TAction;
    ActionMacroexec7: TAction;
    ActionMacroexec8: TAction;
    ActionMacroexec9: TAction;
    ActionMacroSet1: TAction;
    ActionMacroSet2: TAction;
    ActionMacroSet3: TAction;
    ActionMacroSet4: TAction;
    ActionMacroSet5: TAction;
    ActionMacroSet6: TAction;
    ActionMacroSet7: TAction;
    ActionMacroSet8: TAction;
    ActionMacroSet9: TAction;
    ActionBacktolastsel: TAction;
    ActionSetswitchmacro: TAction;
    Actionplatesadd1copy: TAction;
    Addplatecopy1: TMenuItem;
    ActionAddtimetocomment: TAction;
    ActionViewSavecolumns: TAction;
    Actionsepsearch: TAction;
    Actiontoolcombinepressruns: TAction;
    Actionprodcombinepressruns: TAction;
    Actionplatecombpressruns: TAction;
    ActionPlancombinepressruns: TAction;
    ActionProgressTowerRelease: TAction;
    Actionprodcreateorder: TAction;
    ActionplatesaddNcopies: TAction;
    ActionProdordernum: TAction;
    Editordernumber1: TMenuItem;
    Actionthumbshowprepollmes: TAction;
    Prepollmessages1: TMenuItem;
    Showprepollmessages1: TMenuItem;
    ActionthumbClearFTP: TAction;
    ActionthumbClearPreflight: TAction;
    ActionthumbClearRIP: TAction;
    ActionthumbClearcolorlevel: TAction;
    ClearFTP1: TMenuItem;
    ClearPreflight1: TMenuItem;
    ClearRIP1: TMenuItem;
    Clearcolorlevel1: TMenuItem;
    PopupMenuPlanningPopup: TPopupMenu;
    Actionplanningpartapply: TAction;
    Partialapply1: TMenuItem;
    ActionPlanunapply: TAction;
    Unapply1: TMenuItem;
    Actionplanpartialload: TAction;
    Actionthumgtreefilename: TAction;
    Plannedpagename1: TMenuItem;
    Actionpagesplanpagenametree: TAction;
    Plannedpagename2: TMenuItem;
    ActionPaplannedpagename: TAction;
    Plannedpagename3: TMenuItem;
    Actionthumbplanpa: TAction;
    Plannedpagename4: TMenuItem;
    Actionthumbnailtreepdf: TAction;
    MakePDFbook1: TMenuItem;
    SaveDialogPDFBook: TSaveDialog;
    Actionreportgenext: TAction;
    Generatecustommerreport1: TMenuItem;
    ActionConfigRipSetupnames: TAction;
    ActionProdRipsetup: TAction;
    ChangeRipSetup1: TMenuItem;
    ActionpagePressZones: TAction;
    Presszone1: TMenuItem;
    Actionpagessavehighres: TAction;
    Savehighresfile1: TMenuItem;
    Actionplateautotower: TAction;
    Automatictowernaming1: TMenuItem;
    ActionThumbresetversion: TAction;
    Resetversion1: TMenuItem;
    Actiongensingleexcelrep: TAction;
    Actionsendreportmail: TAction;
    Actiontoolfindmaster: TAction;
    Actionsettimeded: TAction;
    Actionpressplanningconfig: TAction;
    Actionplateprintlist: TAction;
    Printplatelist1: TMenuItem;
    CCMessage1: TMenuItem;
    ActionsystemreadCCmes: TAction;
    CCMessage2: TMenuItem;
    Actionprodallcopies: TAction;
    Actionplatesplit: TAction;
    Platesplit1: TMenuItem;
    ActionAddtimedition: TAction;
    ImageListArrows: TImageList;
    Actionprodhidefinprod: TAction;
    Actionplanchangelayout: TAction;
    Changelayout1: TMenuItem;
    ActionConfadvinp: TAction;
    Actionpagespreview: TAction;
    Actionplatetreepdfbook: TAction;
    CreateplateDPFbook1: TMenuItem;
    Actionplatestimmedcolors: TAction;
    Getmissingcolors1: TMenuItem;
    Actioneditionedittypes: TAction;
    ActionplateCylinder: TAction;
    ActionplateZone: TAction;
    ActionPlateHighLow: TAction;
    ActionplateTrueSheetside: TAction;
    Zone1: TMenuItem;
    rueSheetside1: TMenuItem;
    Actionplatepanorama: TAction;
    Panorama1: TMenuItem;
    ActionPLFfilterhidemissing: TAction;
    Imposition1: TMenuItem;
    Combinepressruns1: TMenuItem;
    Applyplatemerge1: TMenuItem;
    Broadsheetpanorama1: TMenuItem;
    ActionPLFfiltermissing: TAction;
    Actionplatefiltertop: TAction;
    ActionPLFfilterReady: TAction;
    ActionPLFfilterShowall: TAction;
    Actionplateoutputversion: TAction;
    ActionLoadPlatePositionSetupProduction: TAction;
    Timerautupdate: TTimer;
    ListViewEdtodink: TListView;
    Actionunapplyall: TAction;
    Unapplyall1: TMenuItem;
    Panellogtree: TPanel;
    ActionToolBar4: TActionToolBar;
    TreeViewLogfilter: TTreeView;
    GroupBox32: TGroupBox;
    DateTimePickerlogfromdate: TDateTimePicker;
    DateTimePickerlogfromtime: TDateTimePicker;
    DateTimePickerlogtodate: TDateTimePicker;
    DateTimePickerlogtotime: TDateTimePicker;
    CheckBoxlogfrom: TCheckBox;
    CheckBoxlogto: TCheckBox;
    Panel11: TPanel;
    ActionToolBarinputerror: TActionToolBar;
    GroupBox22: TGroupBox;
    PageControlLog: TPageControl;
    TabSheet9: TTabSheet;
    PBExListviewOKLog: TPBExListview;
    TabSheet12: TTabSheet;
    PBExListviewErrorLog: TPBExListview;
    Panelreporttree: TPanel;
    ActionToolBarreportfilter: TActionToolBar;
    Panel14: TPanel;
    ActionToolBarreport: TActionToolBar;
    GroupBox37: TGroupBox;
    Panel23: TPanel;
    PageControlreport: TPageControl;
    TabSheet5: TTabSheet;
    RichEditreport: TRichEdit;
    TabSheetreportdetails: TTabSheet;
    StringGridReport: TStringGrid;
    RichEditprintreportdetails: TRichEdit;
    Panel25: TPanel;
    ComboBoxlogevent: TComboBox;
    FindDialoglog: TFindDialog;
    SaveDialogxsllogfile: TSaveDialog;
    Changepress4: TMenuItem;
    Actionpltrechangepress: TAction;
    Actionpagetreechangepress: TAction;
    Actionproductionchrpress: TAction;
    Combinepressruns2: TMenuItem;
    Combinepressruns3: TMenuItem;
    ActionPlanCopytopress: TAction;
    Actionplatecopypress: TAction;
    Actionprodcopytopress: TAction;
    Actionunknowprev: TAction;
    Preview1: TMenuItem;
    Actionunknowcolorprev: TAction;
    Actiontoolmakeedplan: TAction;
    Actionconfigunknowcolorsetup: TAction;
    Actionprodtreeprihot: TAction;
    Hottime1: TMenuItem;
    TabSheet3: TTabSheet;
    ActionShowdevicelist: TAction;
    Panel27: TPanel;
    Chartpage: TChart;
    LineSeries4: TLineSeries;
    LineSeries5: TLineSeries;
    LineSeries6: TLineSeries;
    LineSeries7: TLineSeries;
    Splitter9: TSplitter;
    Chartsum: TChart;
    LineSeries1: TLineSeries;
    LineSeries2: TLineSeries;
    LineSeries3: TLineSeries;
    LineSeries8: TLineSeries;
    GroupBoxinfoingraph: TGroupBox;
    Splitter10: TSplitter;
    RichEditcharts: TRichEdit;
    Series1: TLineSeries;
    GroupBox29: TGroupBox;
    TreeViewreportfilter: TTreeView;
    PopupActionBarExreporttreedead: TPopupActionBar;
    MenuItem38: TMenuItem;
    PopupMenuchartpage: TPopupMenu;
    Printpage: TMenuItem;
    Save1: TMenuItem;
    PopupMenuchartsum: TPopupMenu;
    MenuItem21: TMenuItem;
    MenuItem30: TMenuItem;
    PopupMenuchartrep: TPopupMenu;
    MenuItem39: TMenuItem;
    MenuItem40: TMenuItem;
    ImageEnchprint: TImageEn;
    PrinterSetupDialog1: TPrinterSetupDialog;
    SaveDialog2: TSaveDialog;
    ImageEnIO2: TImageEnIO;
    TabSheet4: TTabSheet;
    Chartdevusage: TChart;
    Series6: TLineSeries;
    Series7: TLineSeries;
    Series8: TLineSeries;
    Series9: TLineSeries;
    Series10: TLineSeries;
    LineSeries9: TBarSeries;
    Series2: TBarSeries;
    Series3: TBarSeries;
    Series4: TBarSeries;
    Series5: TBarSeries;
    Actiontoolchkdatabase: TAction;
    Actionplatetreedev: TAction;
    Device2: TMenuItem;
    Actionunknownfileinfo: TAction;
    Fileinfo2: TMenuItem;
    Actionunknowcropfiles: TAction;
    Cropfiles1: TMenuItem;
    ActionPagescrop: TAction;
    Tactionthumbtreecreep: TAction;
    Creep2: TMenuItem;
    Actionplatetreesetcreep: TAction;
    Creep3: TMenuItem;
    Actionprodtreecreep: TAction;
    Creep4: TMenuItem;
    Hottime2: TMenuItem;
    ActionPagesblackrel: TAction;
    Releaseblackonly1: TMenuItem;
    Actionpagetreemonrel: TAction;
    Releaseblackonly2: TMenuItem;
    Actionthumbrelmono: TAction;
    Releaseblackonly3: TMenuItem;
    Actionthumbtreerelmono: TAction;
    Releaseblackonly4: TMenuItem;
    Actionplaterelmono: TAction;
    Releaseblackonly5: TMenuItem;
    Actionplatetreerelmono: TAction;
    Releaseblackonly6: TMenuItem;
    Actionprodrelmono: TAction;
    Releaseblackonly7: TMenuItem;
    Actionprodtreerelmono: TAction;
    Releaseblackonly8: TMenuItem;
    Actioncalpartial: TAction;
    Actiondelsection: TAction;
    ActionChangeEdName: TAction;
    ActionDebugclearlog: TAction;
    LabelAlldays: TLabel;
    TimerautorefreshFormMain: TTimer;
    ComboBoxUnknowndropdown: TComboBox;
    Actionthumbmask: TAction;
    Setupproofmask1: TMenuItem;
    StatusBarthumbs: TStatusBar;
    Actionthumbpageformat: TAction;
    Pageformat1: TMenuItem;
    Actionconfigpageformat: TAction;
    Actionprodpageformat: TAction;
    Actionprodpageformat1: TMenuItem;
    ActionThumbTifedit: TAction;
    Edit3: TMenuItem;
    Crop1: TMenuItem;
    Actionplateretrans: TAction;
    Actionnewprods: TAction;
    GroupBoxProdpupl: TGroupBox;
    CheckListBoxprodpubl: TCheckListBox;
    Splitter16: TSplitter;
    ActionUnapplyandsplit: TAction;
    Uanpplyallandsplit1: TMenuItem;
    ImageListtreestateNEWnorm: TImageList;
    Actionrepairplan: TAction;
    Repair1: TMenuItem;
    Actionupdnewtreelist: TAction;
    ActionSetplatenumbers: TAction;
    Calcplatenumber1: TMenuItem;
    Reimage2: TMenuItem;
    Retransmit3: TMenuItem;
    Deadline1: TMenuItem;
    Series11: TLineSeries;
    immingprodtiimi: TMenuItem;
    Schedule1: TMenuItem;
    Actionplatetocommon: TAction;
    Actionplatetreemultrel: TAction;
    Multipressrelease1: TMenuItem;
    Actionplatepecom: TAction;
    Actionchanelle: TAction;
    GroupBox19: TGroupBox;
    ListBox3: TListBox;
    Actionplatetreeforce: TAction;
    Forcecommonplates1: TMenuItem;
    ActionPressInfoImport: TAction;
    Actionmiscstr2: TAction;
    Actionmiscstr3: TAction;
    ActionMiscint2: TAction;
    ActionMiscint3: TAction;
    Misc1: TMenuItem;
    Miscstring21: TMenuItem;
    Miscstring31: TMenuItem;
    Miscint21: TMenuItem;
    Miscint31: TMenuItem;
    ActionThumbregenInk: TAction;
    RegenerateInk1: TMenuItem;
    Timershowprev: TTimer;
    Actionthumbdelete: TAction;
    Delete3: TMenuItem;
    Actionmakereadord: TAction;
    Actionplanready: TAction;
    ActionthumbRecalc: TAction;
    Recalculate1: TMenuItem;
    ActionplateCenterSpread: TAction;
    Centerspread3: TMenuItem;
    ActionplateSinglepage: TAction;
    Singlepage1: TMenuItem;
    Actionplateeditcolors: TAction;
    Editcolors2: TMenuItem;
    Actionprodlayout: TAction;
    Layout4: TMenuItem;
    ActionchkCCfiles: TAction;

    ActionManageStackerSetups: TAction;
    Actionthumbfalse: TAction;
    Falsespread1: TMenuItem;
    ActionCustomdbsettings: TAction;

    Actionproductionerror: TAction;
    Timerblink: TTimer;
    ActionPlateSortbySide: TAction;
    ActionPlateSortbyTower: TAction;
    ActionPlateSortby: TAction;
    ActionPlateSortbySheet: TAction;
    Actionadvancedsettings: TAction;
    ActionPlateMerge: TAction;
    ActionSplitProduct: TAction;
    ActionChangeStacker: TAction;
    ActiondongAink: TAction;
    DongAInk1: TMenuItem;
    Actiontow1: TAction;
    Actiontowsel1: TAction;
    Actiontowsel2: TAction;
    Actiontowsel3: TAction;
    Actiontowsel4: TAction;
    Actiontowsel5: TAction;
    Actiontowsel6: TAction;
    Actiontowsel7: TAction;
    Actiontowsel8: TAction;
    Actiontowsel9: TAction;
    Actiontowsel10: TAction;
    Actiontowsel11: TAction;
    Actiontowsel12: TAction;
    Actiontowsel13: TAction;
    Actiontowsel14: TAction;
    Actiontowsel15: TAction;
    Actiontowsel16: TAction;
    Actiontowsel18: TAction;
    Actiontowsel19: TAction;
    Actiontowsel20: TAction;
    Actiontowsel21: TAction;
    Actiontowsel22: TAction;
    Actiontowsel23: TAction;
    Actiontowsel24: TAction;
    Actiontowsel25: TAction;
    Actiontowsel26: TAction;
    GroupBoxtowerfilter: TGroupBox;
    ComboBoxplatetowersfilter: TComboBox;
    Actionprintinkreport: TAction;
    PrintInkReport1: TMenuItem;
    ActionreimageK: TAction;
    ActionreimageC: TAction;
    ActionreimageM: TAction;
    ActionreimageY: TAction;
    Reimage1: TMenuItem;
    ActionplateresendInkFiles: TAction;
    ResendInkdata1: TMenuItem;
    Actionprintinkreport1: TAction;
    Actionprintinkreport2: TAction;
    PrintInkReport2: TMenuItem;
    PrintInkReportLine11: TMenuItem;
    PrintInkReportLine21: TMenuItem;
    Actionsysnocaption: TAction;
    ComboBox1: TComboBox;
    ActionManagerpressgrp: TActionManager;
    ActionPR1: TAction;
    ActionPressgrp1: TAction;
    GroupBoxprgp: TGroupBox;
    ComboBoxPressGrp: TComboBox;
    LabelFromtoday: TLabel;
    ActionThumbFileCenterRetry: TAction;
    ActionDebugsql: TAction;
    ActionSepReprocess: TAction;
    ReProcess1: TMenuItem;
    ReProcess2: TMenuItem;
    ReProcess3: TMenuItem;
    ReProcess4: TMenuItem;
    ReProcess6: TMenuItem;
    ReProcess7: TMenuItem;
    PageControlfiles: TPageControl;
    TabSheet6: TTabSheet;
    TabSheetArk: TTabSheet;
    GroupBoxArktree: TGroupBox;
    TreeViewArk: TTreeView;
    GroupBoxArkfiles: TGroupBox;
    Splitter18: TSplitter;
    ListViewArk: TListView;
    ActionToolBarArkfilter: TActionToolBar;
    ActionArkfilter: TAction;
    GroupBox12: TGroupBox;
    ComboBoxArkdate: TComboBox;
    ActionToolBar3: TActionToolBar;
    ActionArkrefresh: TAction;
    ActionArktreedelete: TAction;
    ActionArkfiledelete: TAction;
    PopupMenuArkfolder: TPopupMenu;
    Deletefolder1: TMenuItem;
    ActionArkretryfile: TAction;
    ActionArkpreview: TAction;
    ActionArkSelectAll: TAction;
    PopupActionBarExArk: TPopupActionBar;
    Selectall2: TMenuItem;
    ActionunPDFdel: TAction;
    ActionunPDFrefresh: TAction;
    Actionunpdfprev: TAction;
    Actionunpdfrename: TAction;
    Actionunpdfretry: TAction;
    TabSheetunknownpdf: TTabSheet;
    ActionToolBarUnkownpages: TActionToolBar;
    GroupBox2: TGroupBox;
    ListViewunPdfNotOK: TListView;
    ListViewunkowfiles: TListView;
    GroupBox1: TGroupBox;
    Splitter17: TSplitter;
    ListViewUnPdfOK: TListView;
    ActionToolBar2: TActionToolBar;
    Actionrefreshstattree: TAction;
    Actionstatviewrefresh: TAction;
    ActionStatusWindow: TAction;
    PopupActionBarExPDFNotOK: TPopupActionBar;
    Delete4: TMenuItem;
    Preview2: TMenuItem;
    Retryfiles2: TMenuItem;
    Retryfile1: TMenuItem;
    Device3: TMenuItem;
    PanelUnknownpdffilt: TPanel;
    FileListBoxPDFunknown: TFileListBox;
    Panel3: TPanel;
    ComboBoxunknownfilt: TComboBox;
    ActionRenameArkfile: TAction;
    Rename2: TMenuItem;
    ActionPlatetowerfilter: TAction;
    Actiontowerfilt1: TAction;
    iffile1: TMenuItem;
    Action1: TAction;
    Action11: TMenuItem;
    ActionBestFitt: TAction;
    Reprocesspages1: TMenuItem;

    ActionTreeCopyStackerSetup: TAction;

    ActionLowerHaftScreen: TAction;
    ActionUpperHalfScreen: TAction;
    ActionRemakeTile: TAction;
    RemakeWebCentertiles1: TMenuItem;
    SetstatusImaged1: TMenuItem;
    ActionPlateSetImaged: TAction;
    Regenerateinkfiles1: TMenuItem;
    ActionPlatetreeregenink: TAction;

    ActionProgressautorefresh: TAction;
    CheckBoxthumbappliedfilter: TCheckBox;

    Image7: TImage;
    Reversepagenumbers1: TMenuItem;
    Reverse: TMenuItem;
    Reversepagenumbers: TMenuItem;
    Outputcolororder1: TMenuItem;

    SavePlatePositionSetupProduction: TMenuItem;
    LoadPlatePositionSetupProduction: TMenuItem;
    ComboBoxGlobalPubDateFilter: TComboBox;
    Panel7: TPanel;
    Panel9: TPanel;
    Panel12: TPanel;
    Panel13: TPanel;
    Panel15: TPanel;
    Panel24: TPanel;
    Panel28: TPanel;
    Splitterreporttree: TSplitter;
    ColorMapMenuToolbar: TStandardColorMap;
    ColorMapToolBar: TXPColorMap;
    Panel30: TPanel;
    CheckBoxolreadyplates: TCheckBox;
    CheckBoxNounplanned: TCheckBox;
    Setpagetobacktostart1: TMenuItem;
    Renumberplates: TMenuItem;
    Inkpreset1: TMenuItem;
    Action2: TAction;
    Action3: TAction;
    Action4: TAction;
    Action5: TAction;
    // TimerUnplanPage: TTimer;
    MainMenu1: TMainMenu;
    MainMenu2: TMainMenu;
    Panel4: TPanel;
    GroupBox3: TGroupBox;
    ListViewUnknownPage: TListView;
    GroupBoxdevicelist: TGroupBox;
    FrameDeviceplacer1: TFrameDeviceplacer;
    Splitter19: TSplitter;
    ActionRemoteControl: TAction;
    langsections: TListBox;
    GroupBoxPlanlocation: TGroupBox;
    ComboBoxplanlocation: TComboBox;
    ActionShowDeleteLog: TAction;
    Action6: TAction;
    ActionReporcessRotation: TAction;
    Reprocessandrotate1: TMenuItem;
    ActionRetransmitPDF: TAction;
    RetransmitPDF1: TMenuItem;
    RetransmitPDF2: TMenuItem;
    ActionBackupConfiguration: TAction;
    ActionRestoreConfiguration: TAction;
    ActionLinkToMasterPage: TAction;
    Linktomasterpage1: TMenuItem;
    QuickApply: TAction;
    QuickApply1: TMenuItem;
    QuickApply2: TMenuItem;
    ActionCheckPlan: TAction;
    Checkplan1: TMenuItem;
    View1: TMenuItem;
    ActionViewPDF: TAction;
    Makepageunique1: TMenuItem;
    ActionMakeUnique: TAction;
    PopupMenuUnknownPages: TPopupMenu;

    ActionDeleteUnkownPage: TAction;
    ActionUnknownViewPage: TAction;
    ActionMakePageForced: TAction;
    Makepageforced1: TMenuItem;
    procedure WMDisplayChange(var Message: TWMDisplayChange); message WM_DISPLAYCHANGE;
    procedure DropFiles(var msg: TMessage); message WM_DROPFILES;
    procedure ListViewWndProc(var msg: TMessage);

    function Getdafaultdeadline(Pubdate: TDateTime; Publicationid: Longint)
      : TDateTime;
    procedure FormActivate(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure ListViewpagesGetSubItemImage(Sender: TObject; Item: TListItem;
      SubItem: Integer; var ImageIndex: Integer);
    procedure ActionrefreshpagesExecute(Sender: TObject);
    procedure ActionPageApproveExecute(Sender: TObject);
    procedure ActionPageDisapproveExecute(Sender: TObject);
    procedure ActionPageHoldExecute(Sender: TObject);
    procedure ActionPagereleaseExecute(Sender: TObject);

    procedure WindowClose1Execute(Sender: TObject);
    procedure ActionselectPLExecute(Sender: TObject);
    procedure ActionprogramExecute(Sender: TObject);
    procedure ActionthumbnailpreviewExecute(Sender: TObject);
    procedure ActionPagereimageExecute(Sender: TObject);
    procedure PBExListviewthumbnailDblClick(Sender: TObject);
    procedure ActionrefreshpagefilterExecute(Sender: TObject);
    procedure ActionpagedeviceExecute(Sender: TObject);
    procedure PBExListviewplatedataSelectItem(Sender: TObject; Item: TListItem;
      Selected: Boolean);
    procedure PBExListviewdatalistColumnResize(Sender: TCustomListView;
      columnindex, columnwidth: Integer);
    procedure TimerafterdragTimer(Sender: TObject);
    procedure ActionpagedeactivateExecute(Sender: TObject);
    procedure ActionPageactivateExecute(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure ActionProgressrefreshExecute(Sender: TObject);
    procedure ActionpageMissingExecute(Sender: TObject);
    procedure PBExListviewdatalistColumnClick(Sender: TObject;
      Column: TListColumn);
    procedure ActionpagepriorityExecute(Sender: TObject);
    procedure ActionPlaterefreshtreeExecute(Sender: TObject);
    procedure ActionplaterefreshExecute(Sender: TObject);
    procedure ActionpageretransmitExecute(Sender: TObject);
    procedure ActionplatereimageExecute(Sender: TObject);
    procedure ActionPlateholdExecute(Sender: TObject);
    procedure ActionPlatereleaseExecute(Sender: TObject);
    procedure ActionPlateapproveExecute(Sender: TObject);
    procedure ActionplatedisapproveExecute(Sender: TObject);
    procedure ActionplatepriorityExecute(Sender: TObject);
    procedure ActionplateretransmitExecute(Sender: TObject);
    procedure ActionplatedeviceExecute(Sender: TObject);
    procedure PageControlMainChange(Sender: TObject);
    procedure ActionplatemarksExecute(Sender: TObject);
    procedure ActionnotapprovedExecute(Sender: TObject);
    procedure PBExListviewdatalistColumnbegindrag(Sender: TCustomListView;
      columnindex, columnwidth: Integer);
    procedure ActionPageExportExecute(Sender: TObject);
    procedure TimerautorefreshTimer(Sender: TObject);
    procedure ActionPagemarksExecute(Sender: TObject);
    procedure PBExListview1ColumnClick(Sender: TObject; Column: TListColumn);
    procedure PBExListview1CustomDrawSubItem(Sender: TCustomListView;
      Item: TListItem; SubItem: Integer; State: TCustomDrawState;
      var DefaultDraw: Boolean);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure PBExListviewdatalistVertscroll(Sender: TObject);
    procedure ActionPagereproofExecute(Sender: TObject);
    procedure ActionaboutExecute(Sender: TObject);
    procedure ActionPagelistChangecolumnsExecute(Sender: TObject);
    procedure ComboBoxactiveChange(Sender: TObject);
    procedure ComboBoxStatusChange(Sender: TObject);
    procedure ComboBoxapprovalChange(Sender: TObject);
    procedure ComboBoxholdChange(Sender: TObject);
    procedure PBExListviewthumbnailVertscroll(Sender: TObject);
    procedure ActionPlateproduceExecute(Sender: TObject);
    procedure ActionPageCHstackExecute(Sender: TObject);
    procedure ActionpagechangetowerExecute(Sender: TObject);
    procedure ActionPageCHCylExecute(Sender: TObject);
    procedure ActionPageCHHighlowExecute(Sender: TObject);
    procedure ActionplatetowerExecute(Sender: TObject);
    procedure Stackposition4Click(Sender: TObject);
    procedure Cylinder5Click(Sender: TObject);
    procedure Highlow4Click(Sender: TObject);
    procedure ActionProgressholdExecute(Sender: TObject);
    procedure PBExListviewprogressClick(Sender: TObject);
    procedure ActionProgressreleaseExecute(Sender: TObject);
    procedure ActionProgresspriorityExecute(Sender: TObject);
    procedure ActionPageeditExecute(Sender: TObject);
    procedure ActionpagechangeprooferExecute(Sender: TObject);
    procedure ActionthumbnaileditcolorsExecute(Sender: TObject);
    procedure ActionthumbnailCenterspreadExecute(Sender: TObject);
    procedure ActionthumbnailSinglespreadExecute(Sender: TObject);
    procedure TreeViewpagelistChange(Sender: TObject; Node: TTreeNode);
    procedure ActionprogressrefreshfilterExecute(Sender: TObject);
    procedure TreeViewprogressChange(Sender: TObject; Node: TTreeNode);
    procedure PageControlprogressChange(Sender: TObject);
    procedure ActionprogressreimageExecute(Sender: TObject);
    procedure DateTimePickerprogressChange(Sender: TObject);
    procedure TimerblinkNotapprovedTimer(Sender: TObject);
    procedure PBExListviewprogressColumnClick(Sender: TObject;
      Column: TListColumn);
    procedure TreeViewprodcontrolChange(Sender: TObject; Node: TTreeNode);
    procedure ActionpageimagedExecute(Sender: TObject);
    procedure ActionprogaddcopyExecute(Sender: TObject);
    procedure PBExListviewthumbnailKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure CheckBoxDatefilterClick(Sender: TObject);
    procedure ActionprogressremovecopyExecute(Sender: TObject);
    procedure ActionprogressforceExecute(Sender: TObject);
    procedure ActionsettingstoolbarsExecute(Sender: TObject);
    // procedure ActionToolBarPagepopupClick(Sender: TObject);
    procedure ActionToolBarPagepopupDragOver(Sender, Source: TObject;
      X, Y: Integer; State: TDragState; var Accept: Boolean);
    procedure ActionToolBarpagefilterDragOver(Sender, Source: TObject;
      X, Y: Integer; State: TDragState; var Accept: Boolean);
    procedure GroupBoxPlatefilterDragOver(Sender, Source: TObject;
      X, Y: Integer; State: TDragState; var Accept: Boolean);
    procedure ActionMainMenuBar1XDragOver(Sender, Source: TObject;
      X, Y: Integer; State: TDragState; var Accept: Boolean);
    procedure ActionToolBarinputerrorDragOver(Sender, Source: TObject;
      X, Y: Integer; State: TDragState; var Accept: Boolean);
    procedure ActionToolBaroutputerrorDragOver(Sender, Source: TObject;
      X, Y: Integer; State: TDragState; var Accept: Boolean);
    procedure ActionThumbnailrefreshExecute(Sender: TObject);
    procedure ActionThumbnailapproveExecute(Sender: TObject);
    procedure ActionThumbnaildisapproveExecute(Sender: TObject);
    procedure ActionThumbnailholdExecute(Sender: TObject);
    procedure ActionthumbnailReleaseExecute(Sender: TObject);
    procedure ActionthumbnailReapproveExecute(Sender: TObject);
    procedure ActionthumbnailtowerExecute(Sender: TObject);
    procedure ActionthumbnailhighlowExecute(Sender: TObject);
    procedure ActionthumbnailcylinderExecute(Sender: TObject);
    procedure ActionthumbnailstackposExecute(Sender: TObject);
    procedure ActionThumbnailMissingExecute(Sender: TObject);
    procedure ActionthumbnailpriorityExecute(Sender: TObject);
    procedure ActionthumbnailretransmitExecute(Sender: TObject);
    procedure ActionthumbnailreproofExecute(Sender: TObject);
    procedure ActionthumbnailchangeprooferExecute(Sender: TObject);
    procedure ActionthumbnailimagedExecute(Sender: TObject);
    procedure ActionnewplanrefreshExecute(Sender: TObject);
    procedure TreeViewplanChange(Sender: TObject; Node: TTreeNode);
    procedure ActionnewplaneditExecute(Sender: TObject);
    procedure ActionnewplanCreateExecute(Sender: TObject);
    procedure ActionnewplanLoadExecute(Sender: TObject);
    procedure ActionpageExtstatusExecute(Sender: TObject);
    procedure ActionpagechangecolsExecute(Sender: TObject);
    procedure ActionthumbnailextstausExecute(Sender: TObject);
    procedure ActionpagetreeexternalstatusExecute(Sender: TObject);
    procedure CheckBoxsmallplanimageClick(Sender: TObject);
    procedure ActionnewplanMoveExecute(Sender: TObject);
    procedure ActionnewplandeleteExecute(Sender: TObject);
    procedure PBExListviewPlandataEdited(Sender: TObject; Item: TListItem;
      var S: String);
    procedure PageControlplanningChange(Sender: TObject);
    procedure ActionsettingstabsExecute(Sender: TObject);
    procedure ComboBoxPlatelocationChange(Sender: TObject);
    procedure PBExListviewplateinfoCustomDrawSubItem(Sender: TCustomListView;
      Item: TListItem; SubItem: Integer; State: TCustomDrawState;
      var DefaultDraw: Boolean);
    procedure ActionPlatelayoutExecute(Sender: TObject);
    procedure ActionconfigcolorsExecute(Sender: TObject);
    procedure ActionconfigjobnamesExecute(Sender: TObject);
    procedure ComboBoxLoglocationChange(Sender: TObject);
    procedure ActionLogrefreshfilterExecute(Sender: TObject);
    procedure PageControlLogChange(Sender: TObject);
    procedure ActionlogsaveExecute(Sender: TObject);
    procedure ComboBoxreportlocationChange(Sender: TObject);
    procedure ActionreportfilterExecute(Sender: TObject);
    procedure ActionreportrefreshExecute(Sender: TObject);
    procedure ActionreportsaveExecute(Sender: TObject);
    procedure ActionreportprintExecute(Sender: TObject);
    procedure TreeViewreportfilterChange(Sender: TObject; Node: TTreeNode);
    procedure ActionlogtoexcelExecute(Sender: TObject);
    procedure ActionreportfontExecute(Sender: TObject);
    procedure PageControlreportChange(Sender: TObject);
    procedure ActionnewplanapplyExecute(Sender: TObject);
    procedure ActionnewplandeletetemplateExecute(Sender: TObject);
    procedure ActionThumbnailFilterrefreshExecute(Sender: TObject);
    procedure ActionThumbnailsreimageExecute(Sender: TObject);
    procedure TreeViewThumbsChange(Sender: TObject; Node: TTreeNode);

    procedure ActionCHKpageautorefreshExecute(Sender: TObject);
    procedure ActionpageselectplateExecute(Sender: TObject);
    procedure ActionpageselectpageExecute(Sender: TObject);
    procedure ActionpageselectSeparationExecute(Sender: TObject);
    procedure ActionpageselectplatesetExecute(Sender: TObject);
    procedure ActionPageSelectTopExecute(Sender: TObject);
    procedure ActionCHKthumbautorefreshExecute(Sender: TObject);
    procedure ActionCHKthumbreadorderExecute(Sender: TObject);
    procedure ActionCHKthumbonlyuniqueExecute(Sender: TObject);
    procedure ActionCHKthumbnextnotapprovedExecute(Sender: TObject);
    procedure ActionCHKthumbnextdisapprovedExecute(Sender: TObject);
    procedure ActionplateautorefreshExecute(Sender: TObject);
    procedure ActionplateSmallimagesExecute(Sender: TObject);
    procedure ActionplateThumbnailsExecute(Sender: TObject);
    procedure ActionplateHidecommonExecute(Sender: TObject);
    procedure ActionnewplanSmallimagesExecute(Sender: TObject);
    procedure ActionprogressdeadlineExecute(Sender: TObject);
    procedure ActionnewplanquickExecute(Sender: TObject);
    procedure ActionproddeviceExecute(Sender: TObject);
    procedure ActiondbtoolsExecute(Sender: TObject);
    procedure Action6Execute(Sender: TObject);
    procedure ActiondeletepublicationExecute(Sender: TObject);
    procedure StringGridHSDrawCell(Sender: TObject; ACol, ARow: Integer;
      Rect: TRect; State: TGridDrawState);
    procedure StringGridHSMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure StringGridHSMouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure ActionpagesarchiveExecute(Sender: TObject);
    procedure ActionthumbcommentExecute(Sender: TObject);
    procedure ActionpageInfoExecute(Sender: TObject);
    procedure ActionThumbmissigExecute(Sender: TObject);
    procedure ActionthumbcopyExecute(Sender: TObject);
    procedure ActionThumbpasteExecute(Sender: TObject);
    procedure ActionplatestackExecute(Sender: TObject);
    procedure ActionpagetreereleaseExecute(Sender: TObject);
    procedure ActionpagetreeHoldExecute(Sender: TObject);
    procedure ActionpagetreePriorityExecute(Sender: TObject);
    procedure ActionpagetreeApproveExecute(Sender: TObject);
    procedure ActionthumbtreerealseExecute(Sender: TObject);
    procedure ActionthumbtreeholdExecute(Sender: TObject);
    procedure ActionthumbtreepriorityExecute(Sender: TObject);
    procedure ActionthumbtreeapproveExecute(Sender: TObject);
    procedure ActionplatetreereleaseExecute(Sender: TObject);
    procedure ActionplatetreeholdExecute(Sender: TObject);
    procedure ActionplatetreeapproveExecute(Sender: TObject);
    procedure ActionplatetreepriorityExecute(Sender: TObject);
    procedure ActionpagecommaExecute(Sender: TObject);
    procedure ActioncustomtoolsExecute(Sender: TObject);
    procedure ActionselectallcopiesExecute(Sender: TObject);
    procedure TreeViewLogfilterChange(Sender: TObject; Node: TTreeNode);
    procedure TreeViewPlateviewKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure TreeViewPlateviewChange(Sender: TObject; Node: TTreeNode);
    procedure TreeViewPlateviewKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure CheckBoxthumbapprovalfilterClick(Sender: TObject);

    procedure StringGridHSKeyPress(Sender: TObject; var Key: Char);
    procedure PBExListviewthumbnailKeyPress(Sender: TObject; var Key: Char);
    procedure ActionCurretstateExecute(Sender: TObject);
    procedure ActionfiledropdownExecute(Sender: TObject);
    procedure ActionProgexitExecute(Sender: TObject);
    procedure ActionloadpressconfExecute(Sender: TObject);
    procedure ActionreimallExecute(Sender: TObject);
    procedure FormPaint(Sender: TObject);
    procedure StringGridprodsDrawCell(Sender: TObject; ACol, ARow: Integer;
      Rect: TRect; State: TGridDrawState);
    // procedure ActionsystemDebugsettimeExecute(Sender: TObject);
    procedure ActionDebugunplanExecute(Sender: TObject);
    procedure ActiongraphinputExecute(Sender: TObject);
    procedure ActiongraphapprovalExecute(Sender: TObject);
    procedure ActiongraphoutputExecute(Sender: TObject);
    procedure StringGridReportTopLeftChanged(Sender: TObject);
    procedure StringGridReportSelectCell(Sender: TObject; ACol, ARow: Integer;
      var CanSelect: Boolean);
    procedure ActionplatetreelayoutExecute(Sender: TObject);
    procedure ActionfilescopyExecute(Sender: TObject);
    procedure ActionfilespasteExecute(Sender: TObject);
    procedure ActionfilesmoveExecute(Sender: TObject);
    procedure PopupActionBarEx1PagesPopup(Sender: TObject);
    procedure PopupActionBarExpagetreePopup(Sender: TObject);
    procedure PopupActionBarExThumbtreePopup(Sender: TObject);
    procedure PopupActionBarEx1ThumbnailsPopup(Sender: TObject);
    procedure ActiontoolholdrelseExecute(Sender: TObject);
    procedure StringGridprodsMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure ActionprodchangepressExecute(Sender: TObject);
    procedure ActioneditionAddExecute(Sender: TObject);
    procedure ActionrefreshhedtreeExecute(Sender: TObject);
    procedure TreeViewNeweddtreeChange(Sender: TObject; Node: TTreeNode);
    procedure ListViewEdtoDragOver(Sender, Source: TObject; X, Y: Integer;
      State: TDragState; var Accept: Boolean);
    procedure ActioneditionpopmakeuniqueExecute(Sender: TObject);
    procedure ActioneditionpopUseasmasterExecute(Sender: TObject);
    procedure ActioneditionpopundoExecute(Sender: TObject);
    procedure ListViewEdtoDragDrop(Sender, Source: TObject; X, Y: Integer);
    procedure ActionEditionrefreshExecute(Sender: TObject);
    procedure ComboBoxThumblocationNyChange(Sender: TObject);
    procedure ComboBoxeditionlocationChange(Sender: TObject);
    procedure ActionEditionapplyExecute(Sender: TObject);
    procedure ActionplatesflatproofExecute(Sender: TObject);
    procedure ActionpagetreeflatproofExecute(Sender: TObject);
    procedure ActionpagesflatproofExecute(Sender: TObject);
    procedure ActionthumbtreeflatproofExecute(Sender: TObject);
    procedure ActionplatetreeflatproofExecute(Sender: TObject);
    procedure ActionplateflatproofExecute(Sender: TObject);
    procedure ActionmontorrefreshExecute(Sender: TObject);
    procedure ActionunkownretryExecute(Sender: TObject);
    procedure ActionnknowautorefreshExecute(Sender: TObject);
    procedure ActionUnknowndeleteExecute(Sender: TObject);
    // procedure TimerUknownTimer(Sender: TObject);
    procedure ComboBoxactivequeueChange(Sender: TObject);
    procedure ActionactiverefreshExecute(Sender: TObject);
    procedure ActionActiholdExecute(Sender: TObject);
    procedure ActionactreleaseExecute(Sender: TObject);
    procedure ActionactpriorityExecute(Sender: TObject);
    procedure ActionactiveautoExecute(Sender: TObject);
    procedure ListViewActqueueAdvancedCustomDrawItem(Sender: TCustomListView;
      Item: TListItem; State: TCustomDrawState; Stage: TCustomDrawStage;
      var DefaultDraw: Boolean);
    procedure ActionplatetreeCommentExecute(Sender: TObject);
    procedure ActionplateCommentExecute(Sender: TObject);
    procedure ActionpageCommentExecute(Sender: TObject);
    procedure ActionpagetreeCommentExecute(Sender: TObject);
    procedure ActionthumbtreeCommentExecute(Sender: TObject);
    procedure ActionthumbnailCommentExecute(Sender: TObject);
    procedure FormMouseWheelDown(Sender: TObject; Shift: TShiftState;
      MousePos: TPoint; var Handled: Boolean);
    procedure FormMouseWheelUp(Sender: TObject; Shift: TShiftState;
      MousePos: TPoint; var Handled: Boolean);
    procedure ActionPlateregeninkExecute(Sender: TObject);
    procedure ActionPlateminimizeExecute(Sender: TObject);
    procedure ActionPlatemaximizeExecute(Sender: TObject);
    procedure ActionprodAutorefreshExecute(Sender: TObject);
    procedure ActionCheckformsExecute(Sender: TObject);
    procedure ActionReSendInkbackupExecute(Sender: TObject);
    procedure ActionplatedetailsExecute(Sender: TObject);
    procedure ActionprodfanoutExecute(Sender: TObject);
    procedure ActionDebugtoolsExecute(Sender: TObject);
    procedure ListViewunkowfilesCompare(Sender: TObject;
      Item1, Item2: TListItem; Data: Integer; var Compare: Integer);
    procedure ListViewunkowfilesColumnClick(Sender: TObject;
      Column: TListColumn);
    procedure ActioneditiondeleteExecute(Sender: TObject);
    procedure ListViewunkowfilesDblClick(Sender: TObject);
    procedure ActionplatetreeStackExecute(Sender: TObject);
    procedure FormResize(Sender: TObject);
    procedure ActionprodeditweekExecute(Sender: TObject);
    procedure ActionplaneditdatesExecute(Sender: TObject);
    procedure ActiontreeexpandExecute(Sender: TObject);
    procedure ActiontreecollapseExecute(Sender: TObject);
    procedure TimerwaitforplanlockTimer(Sender: TObject);
    procedure ActiontoolclearFproofQExecute(Sender: TObject);
    procedure ActionpagetreecreepExecute(Sender: TObject);
    procedure ActionprodreapprovedExecute(Sender: TObject);
    procedure ActionprodautoapproveExecute(Sender: TObject);
    procedure ActionpageautoapproveExecute(Sender: TObject);
    procedure ActionthumbnailautoapprovalExecute(Sender: TObject);
    procedure ActionplatetreescheduleExecute(Sender: TObject);
    procedure ActionuknowfiletoolExecute(Sender: TObject);
    procedure StringGridHSDragOver(Sender, Source: TObject; X, Y: Integer;
      State: TDragState; var Accept: Boolean);
    procedure StringGridHSDragDrop(Sender, Source: TObject; X, Y: Integer);
    procedure ActionUnkownrenameExecute(Sender: TObject);
    procedure PBExListviewthumbnailDragDrop(Sender, Source: TObject;
      X, Y: Integer);
    procedure PBExListviewthumbnailDragOver(Sender, Source: TObject;
      X, Y: Integer; State: TDragState; var Accept: Boolean);
    procedure ActionpageshardproofExecute(Sender: TObject);
    procedure ActionthumbhardproofExecute(Sender: TObject);
    procedure ActionthumbtreeHardproofExecute(Sender: TObject);
    procedure ActionthumbtreesoftproofExecute(Sender: TObject);
    procedure ActionFileserverconnectExecute(Sender: TObject);
    procedure ActionglobalfilterrefreshExecute(Sender: TObject);
    procedure ActiongloballistrefreshExecute(Sender: TObject);
    procedure ActionprodSetImagedExecute(Sender: TObject);
    procedure ActionToolOldverExecute(Sender: TObject);
    procedure ActionpagetreeoldverExecute(Sender: TObject);
    procedure ActionGlobalselectallExecute(Sender: TObject);
    procedure ActionglobalextstatExecute(Sender: TObject);
    procedure ActionplatesextstatExecute(Sender: TObject);
    procedure ActionGlobalmarksExecute(Sender: TObject);
    procedure ActionglobalproofExecute(Sender: TObject);
    procedure ActionprodsoftproofExecute(Sender: TObject);
    procedure ActionglobalcommentExecute(Sender: TObject);
    procedure ActionplatesoftproofExecute(Sender: TObject);
    procedure ActionthumbtreeoldversionsExecute(Sender: TObject);
    procedure ActionThumbnailoldversionExecute(Sender: TObject);
    procedure ActionPlatetreeexternstatExecute(Sender: TObject);
    procedure ActionprodtreereleaseExecute(Sender: TObject);
    procedure ActionprodtreeHoldExecute(Sender: TObject);
    procedure ActionprodtreePRIExecute(Sender: TObject);
    procedure ActionprodtreerApproveExecute(Sender: TObject);
    procedure ActionprodtreeLayoutExecute(Sender: TObject);
    procedure ActionprodtreeFlatproofExecute(Sender: TObject);
    procedure ActionprodtreeCommentExecute(Sender: TObject);
    procedure ActionprodtreeStackposExecute(Sender: TObject);
    procedure ActionprodtreeScheduleExecute(Sender: TObject);
    procedure ActionprodtreeExternalstatExecute(Sender: TObject);
    procedure ActionprodOrdernumberExecute(Sender: TObject);
    procedure ActionprodcommentExecute(Sender: TObject);
    procedure ActionprodinkcommentExecute(Sender: TObject);
    procedure ActionpagetreeexportxmlExecute(Sender: TObject);
    procedure ComboBoxPagescopiesChange(Sender: TObject);
    procedure ActionplateplatecopiesExecute(Sender: TObject);
    procedure TimerPlatetreekeyTimer(Sender: TObject);
    procedure ActionMacroexec1Execute(Sender: TObject);
    procedure ActionMacroSet1Execute(Sender: TObject);
    procedure ActionBacktolastselExecute(Sender: TObject);
    procedure ActionSetswitchmacroExecute(Sender: TObject);
    procedure Actionplatesadd1copyExecute(Sender: TObject);
    procedure ActionAddtimetocommentExecute(Sender: TObject);
    procedure ActionViewSavecolumnsExecute(Sender: TObject);
    procedure ActionsepsearchExecute(Sender: TObject);
    procedure ActionprodcombinepressrunsExecute(Sender: TObject);
    procedure ActiontoolcombinepressrunsExecute(Sender: TObject);
    procedure ActionplatecombpressrunsExecute(Sender: TObject);
    procedure ActionPlancombinepressrunsExecute(Sender: TObject);
    procedure ActionplatesplatemergeExecute(Sender: TObject);
    procedure ActionprodSchedulesExecute(Sender: TObject);
    procedure ActionProdordernumExecute(Sender: TObject);
    procedure ActionthumbshowprepollmesExecute(Sender: TObject);
    procedure ActionthumbClearFTPExecute(Sender: TObject);
    procedure ActionthumbClearPreflightExecute(Sender: TObject);
    procedure ActionthumbClearRIPExecute(Sender: TObject);
    procedure ActionthumbClearcolorlevelExecute(Sender: TObject);
    procedure ActionplanningpartapplyExecute(Sender: TObject);
    procedure ActionPlanunapplyExecute(Sender: TObject);
    procedure ActionplanpartialloadExecute(Sender: TObject);
    procedure ActionthumgtreefilenameExecute(Sender: TObject);
    procedure ActionpagesplanpagenametreeExecute(Sender: TObject);
    procedure ActionPaplannedpagenameExecute(Sender: TObject);
    procedure ActionthumbplanpaExecute(Sender: TObject);
    procedure ActionthumbnailtreepdfExecute(Sender: TObject);
    procedure ActionreportgenextExecute(Sender: TObject);
    procedure PBExListviewthumbnailMouseMove(Sender: TObject;
      Shift: TShiftState; X, Y: Integer);
    procedure ActionConfigRipSetupnamesExecute(Sender: TObject);
    procedure ActionProdRipsetupExecute(Sender: TObject);
    procedure ActionpagePressZonesExecute(Sender: TObject);
    procedure ActionpagessavehighresExecute(Sender: TObject);
    procedure ActionplateautotowerExecute(Sender: TObject);
    procedure ActionThumbresetversionExecute(Sender: TObject);
    procedure ActiongenCCreportExecute(Sender: TObject);
    procedure ActiongensingleexcelrepExecute(Sender: TObject);
    procedure ActiontoolfindmasterExecute(Sender: TObject);
    procedure ActionsettimededExecute(Sender: TObject);
    procedure TimerPlateviewPopupTimer(Sender: TObject);
    procedure ActionplateprintlistExecute(Sender: TObject);

    procedure ActionprodallcopiesExecute(Sender: TObject);
    procedure ActionplatesplitExecute(Sender: TObject);
    procedure ActionAddtimeditionExecute(Sender: TObject);
    procedure ActionprodhidefinprodExecute(Sender: TObject);
    procedure ActionplanchangelayoutExecute(Sender: TObject);
    procedure ActionConfadvinpExecute(Sender: TObject);
    procedure ActionpagespreviewExecute(Sender: TObject);
    procedure StringGridHSDblClick(Sender: TObject);
    procedure ActionplatetreepdfbookExecute(Sender: TObject);
    procedure ActionplatestimmedcolorsExecute(Sender: TObject);
    procedure ActioneditionedittypesExecute(Sender: TObject);
    procedure ActionplateZoneExecute(Sender: TObject);
    procedure ActionPlateHighLowExecute(Sender: TObject);
    procedure ActionplateTrueSheetsideExecute(Sender: TObject);
    procedure ActionplateCylinderExecute(Sender: TObject);
    procedure ActionplatepanoramaExecute(Sender: TObject);
    procedure ActionplatefiltertopExecute(Sender: TObject);
    procedure ActionPLFfiltermissingExecute(Sender: TObject);
    procedure ActionPLFfilterShowallExecute(Sender: TObject);
    procedure ActionPLFfilterReadyExecute(Sender: TObject);
    procedure ActionPLFfilterhidemissingExecute(Sender: TObject);
    procedure ActionplateoutputversionExecute(Sender: TObject);
    procedure TimerautupdateTimer(Sender: TObject);
    procedure ListViewEdtoCustomDrawItem(Sender: TCustomListView;
      Item: TListItem; State: TCustomDrawState; var DefaultDraw: Boolean);
    procedure ComboBoxpalocationNYChange(Sender: TObject);
    procedure ComboBoxprodlocationNyChange(Sender: TObject);
    procedure ComboBoxplanlocationChange(Sender: TObject);
    procedure ActionunapplyallExecute(Sender: TObject);
    procedure TreeExpanded(Sender: TObject; Node: TTreeNode);
    procedure TreeCollapsed(Sender: TObject; Node: TTreeNode);
    procedure ActionLogrefreshExecute(Sender: TObject);
    procedure PBExListviewOKLogCustomDrawSubItem(Sender: TCustomListView;
      Item: TListItem; SubItem: Integer; State: TCustomDrawState;
      var DefaultDraw: Boolean);
    procedure ComboBoxlogeventChange(Sender: TObject);
    procedure ActionlogfindExecute(Sender: TObject);
    procedure FindDialoglogFind(Sender: TObject);
    procedure ActionpltrechangepressExecute(Sender: TObject);
    procedure ActionproductionchrpressExecute(Sender: TObject);
    procedure ActionPlanCopytopressExecute(Sender: TObject);
    procedure ActionplatecopypressExecute(Sender: TObject);
    procedure ActionprodcopytopressExecute(Sender: TObject);
    procedure ActionunknowprevExecute(Sender: TObject);
    procedure ActionunknowcolorprevExecute(Sender: TObject);
    procedure ActiontoolmakeedplanExecute(Sender: TObject);
    procedure ActionconfigunknowcolorsetupExecute(Sender: TObject);
    procedure ActionprodtreeprihotExecute(Sender: TObject);
    procedure ActionShowdevicelistExecute(Sender: TObject);
    procedure FrameDeviceplacer1Timer1Timer(Sender: TObject);
    procedure ChartpageGetLegendRect(Sender: TCustomChart; var Rect: TRect);
    procedure ChartsumGetLegendRect(Sender: TCustomChart; var Rect: TRect);
    procedure ChartpageClickSeries(Sender: TCustomChart; Series: TChartSeries;
      ValueIndex: Integer; Button: TMouseButton; Shift: TShiftState;
      X, Y: Integer);
    procedure ActiontoolchkdatabaseExecute(Sender: TObject);
    procedure ActionplatetreedevExecute(Sender: TObject);
    procedure ActionunknownfileinfoExecute(Sender: TObject);
    procedure ActionunknowcropfilesExecute(Sender: TObject);
    procedure ActionPagescropExecute(Sender: TObject);
    procedure TactionthumbtreecreepExecute(Sender: TObject);
    procedure ActionplatetreesetcreepExecute(Sender: TObject);
    procedure ActionprodtreecreepExecute(Sender: TObject);
    procedure ActionPagesblackrelExecute(Sender: TObject);
    procedure ActionpagetreemonrelExecute(Sender: TObject);
    procedure ActionthumbrelmonoExecute(Sender: TObject);
    procedure ActionthumbtreerelmonoExecute(Sender: TObject);
    procedure ActionplaterelmonoExecute(Sender: TObject);
    procedure ActionplatetreerelmonoExecute(Sender: TObject);
    procedure ActionprodrelmonoExecute(Sender: TObject);
    procedure ActionprodtreerelmonoExecute(Sender: TObject);
    procedure ActioncalpartialExecute(Sender: TObject);
    procedure ActiondelsectionExecute(Sender: TObject);
    procedure ActionChangeEdNameExecute(Sender: TObject);
    procedure StringGridprodsKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure StringGridprodsKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure CheckBoxAllLocationsPaClick(Sender: TObject);
    procedure CheckBoxThumballClick(Sender: TObject);
    procedure CheckBoxAllLocationsProdClick(Sender: TObject);
    procedure ActionDebugclearlogExecute(Sender: TObject);
    procedure TimerautorefreshFormMainTimer(Sender: TObject);
    procedure ActionthumbmaskExecute(Sender: TObject);
    procedure ActionthumbpageformatExecute(Sender: TObject);
    procedure ActionconfigpageformatExecute(Sender: TObject);
    procedure ActionprodpageformatExecute(Sender: TObject);
    procedure ActionThumbTifeditExecute(Sender: TObject);
    procedure ActionplateretransExecute(Sender: TObject);
    procedure ActionnewprodsExecute(Sender: TObject);
    procedure ActionUnapplyandsplitExecute(Sender: TObject);
    procedure ActionrepairplanExecute(Sender: TObject);
    procedure ActionupdnewtreelistExecute(Sender: TObject);
    procedure ActionSetplatenumbersExecute(Sender: TObject);
    procedure ActionplatetocommonExecute(Sender: TObject);
    procedure ActionplatetreemultrelExecute(Sender: TObject);
    procedure ActionplatepecomExecute(Sender: TObject);
    procedure ActionchanelleExecute(Sender: TObject);
    procedure ActionplatetreeforceExecute(Sender: TObject);
    procedure ActionPressInfoImportExecute(Sender: TObject);
    procedure Actionmiscstr2Execute(Sender: TObject);
    procedure Actionmiscstr3Execute(Sender: TObject);
    procedure ActionMiscint2Execute(Sender: TObject);
    procedure ActionMiscint3Execute(Sender: TObject);
    procedure ActionThumbregenInkExecute(Sender: TObject);
    procedure TimershowprevTimer(Sender: TObject);
    procedure ActionthumbdeleteExecute(Sender: TObject);
    procedure ActionplanreadyExecute(Sender: TObject);
    procedure ActionthumbRecalcExecute(Sender: TObject);
    procedure ActionplateCenterSpreadExecute(Sender: TObject);
    procedure ActionplateSinglepageExecute(Sender: TObject);
    procedure ActionplateeditcolorsExecute(Sender: TObject);
    procedure ActionprodlayoutExecute(Sender: TObject);
    procedure ActionchkCCfilesExecute(Sender: TObject);
    procedure ActionthumbfalseExecute(Sender: TObject);
    procedure ActionCustomdbsettingsExecute(Sender: TObject);
    procedure ActionproductionerrorExecute(Sender: TObject);
    procedure TimerblinkTimer(Sender: TObject);
    procedure ActionPlateSortbyExecute(Sender: TObject);
    procedure ActionPlateSortbySideExecute(Sender: TObject);
    procedure ActionPlateSortbySheetExecute(Sender: TObject);
    procedure ActionPlateSortbyTowerExecute(Sender: TObject);
    procedure ActionadvancedsettingsExecute(Sender: TObject);
    procedure ActionPlateMergeExecute(Sender: TObject);
    procedure ActionSplitProductExecute(Sender: TObject);
    procedure ActionChangeStackerExecute(Sender: TObject);
    procedure ActiondongAinkExecute(Sender: TObject);
    procedure Actiontow1Execute(Sender: TObject);
    procedure Actiontowsel1Execute(Sender: TObject);
    procedure ComboBoxplatetowersfilterChange(Sender: TObject);
    procedure ActionreimageKExecute(Sender: TObject);
    procedure ActionreimageCExecute(Sender: TObject);
    procedure ActionreimageMExecute(Sender: TObject);
    procedure ActionreimageYExecute(Sender: TObject);
    procedure ActionplateresendInkFilesExecute(Sender: TObject);
    procedure Actionprintinkreport1Execute(Sender: TObject);
    procedure Actionprintinkreport2Execute(Sender: TObject);
    procedure ActionprintinkreportExecute(Sender: TObject);
    procedure ActionsysnocaptionExecute(Sender: TObject);
    procedure ComboBoxPressGrpChange(Sender: TObject);
    procedure ComboBoxGlobalPubDateFilterDropDown(Sender: TObject);
    procedure ComboBoxGlobalPubDateFilterChange(Sender: TObject);
    procedure PBExListviewthumbnailMouseUp(Sender: TObject;
      Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure ComboBoxGlobalPubDateFilterCloseUp(Sender: TObject);
    procedure ActionThumbFileCenterRetryExecute(Sender: TObject);

    procedure ActionDebugsqlExecute(Sender: TObject);
    procedure ActionSepReprocessExecute(Sender: TObject);
    procedure ActionArkfilterExecute(Sender: TObject);
    procedure ComboBoxArkdateChange(Sender: TObject);
    procedure PageControlfilesChange(Sender: TObject);
    procedure ActionArktreedeleteExecute(Sender: TObject);
    procedure TreeViewArkChange(Sender: TObject; Node: TTreeNode);
    procedure ActionArkretryfileExecute(Sender: TObject);
    procedure ActionArkpreviewExecute(Sender: TObject);
    procedure ActionArkSelectAllExecute(Sender: TObject);
    procedure ActionunPDFdelExecute(Sender: TObject);
    procedure ActionunPDFrefreshExecute(Sender: TObject);
    procedure ActionunpdfprevExecute(Sender: TObject);
    procedure ActionunpdfretryExecute(Sender: TObject);
    procedure ActionArkrefreshExecute(Sender: TObject);
    procedure ComboBoxunknownfiltSelect(Sender: TObject);
    procedure ActionRenameArkfileExecute(Sender: TObject);

    procedure ActionCopyStackerSetupProductionExecute(Sender: TObject);
    procedure ActionSavePlatePositionSetupProductionExecute(Sender: TObject);
    procedure ActionLoadPlatePositionSetupProductionExecute(Sender: TObject);
    procedure LoadPlatePositionSetup(ProductionID: Integer;
      EditionFromID: Longint);
    procedure SavePlatePositionSetup(ProductionID: Integer;
      EditionFromID: Longint);

    procedure ActionTreeCopyStackerSetupExecute(Sender: TObject);
    procedure ActionManageStackerSetupsExecute(Sender: TObject);

    procedure SelectSpecificThumbTreeNode(Publication: string;
      PubDateStr: string);
    procedure Action1Execute(Sender: TObject);
    procedure Action2Execute(Sender: TObject);
    procedure Action3Execute(Sender: TObject);
    procedure Action4Execute(Sender: TObject);
    procedure Action5Execute(Sender: TObject);
    procedure ActionBestFittExecute(Sender: TObject);
    procedure CheckBoxNounplannedClick(Sender: TObject);
    procedure CheckBoxolreadyplatesClick(Sender: TObject);

    procedure ApplySortingPositionIfEmpty(ProductionID: Integer;
      sortingposition: string);

    procedure ActionLowerHalfScreenExecute(Sender: TObject);
    procedure ActionUpperHalfScreenExecute(Sender: TObject);
    procedure ActionRemakeTileExecute(Sender: TObject);
    procedure ActionPlateSetImagedExecute(Sender: TObject);
    procedure ActionPlatetreeregeninkExecute(Sender: TObject);
    procedure ActionProgressautorefreshExecute(Sender: TObject);

    procedure ActionReversePageNumbersExecute(Sender: TObject);
    // procedure Outputcolororder1Click(Sender: TObject);
    procedure TreeViewProductionCustomDrawItem(Sender: TCustomTreeView;
      Node: TTreeNode; State: TCustomDrawState; var DefaultDraw: Boolean);
    procedure TreeViewpagelistCustomDrawItem(Sender: TCustomTreeView;
      Node: TTreeNode; State: TCustomDrawState; var DefaultDraw: Boolean);
    procedure TreeViewThumbsCustomDrawItem(Sender: TCustomTreeView;
      Node: TTreeNode; State: TCustomDrawState; var DefaultDraw: Boolean);
    procedure TreeViewPlateviewCustomDrawItem(Sender: TCustomTreeView;
      Node: TTreeNode; State: TCustomDrawState; var DefaultDraw: Boolean);
    procedure TreeViewNeweddtreeCustomDrawItem(Sender: TCustomTreeView;
      Node: TTreeNode; State: TCustomDrawState; var DefaultDraw: Boolean);
    procedure TreeViewLogfilterCustomDrawItem(Sender: TCustomTreeView;
      Node: TTreeNode; State: TCustomDrawState; var DefaultDraw: Boolean);

    procedure ActionProgressTowerReleaseExecute(Sender: TObject);
    // procedure Setpagetobacktostart1Click(Sender: TObject);
    procedure TreeViewExpandViewClick(Sender: TObject);
    procedure RenumberplatesClick(Sender: TObject);
    procedure Inkpreset1Click(Sender: TObject);
    // procedure TimerUnplanPageTimer(Sender: TObject);
    procedure ActionRemoteControlExecute(Sender: TObject);
    procedure ActionShowFileCenterQueuesExecute(Sender: TObject);
    procedure ActionShowDeleteLogExecute(Sender: TObject);
    procedure ListViewUnknownPageCustomDrawItem(Sender: TCustomListView;
      Item: TListItem; State: TCustomDrawState; var DefaultDraw: Boolean);
    procedure PBExListviewthumbnailSelectItem(Sender: TObject; Item: TListItem;
      Selected: Boolean);
    procedure PBExListviewthumbnailMouseDown(Sender: TObject;
      Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure ActionReporcessRotationExecute(Sender: TObject);
    procedure ActionRetransmitPDFExecute(Sender: TObject);
    procedure ActionBackupConfigurationExecute(Sender: TObject);
    procedure ActionRestoreConfigurationExecute(Sender: TObject);

    procedure AfterConstruction; override;
    procedure ActionLinkToMasterPageExecute(Sender: TObject);

    procedure QuickApplyExecute(Sender: TObject);
    procedure ActionCheckPlanExecute(Sender: TObject);
    procedure ComboBoxlocationManageChange(Sender: TObject);
    procedure ActionViewPDFExecute(Sender: TObject);
    procedure ListViewUnknownPageDblClick(Sender: TObject);

    procedure ActionMakeUniqueExecute(Sender: TObject);

    procedure ActionDeleteUnkownPageExecute(Sender: TObject);
    procedure ActionUnknownViewPageExecute(Sender: TObject);
    procedure ActionMakePageForcedExecute(Sender: TObject);

  private

    procedure Doinkplatereport(Line: Longint);
    procedure Resendinkfiles;
    procedure ReimagesingleColor(Color: String);
    procedure RegenInkOnThumbthumbdata;
    procedure PageSetAmiscstring(Number: Longint);

    procedure RemoveNon3systemactions;
    procedure Setglobalsys3view;
    function makeprogINrunStr(p1: string): String;
    procedure Setthumbstatbar;
    procedure LoadTreePublInputalais;
    function getTreePublInputalais(APublID: Longint): String;

    procedure GetPosiblePubdates(SetToplus: Longint);
    procedure Setallpublsystem(Ischecked: Boolean);
    procedure Setcreep(Publicationid: Integer; Pubdate: TDateTime);
    function getcreep(pressrunid: Longint): double;

    procedure makedevicereport;
    procedure Savergaprhrep;
    procedure Printrgaprhrep;
    procedure makegraphicreport;
    procedure selecttheplanfromtree(Node: TTreeNode);
    procedure Standardplantonewpress();
    procedure changepressformatree(Var Atree: TTreeView; LocationID: Longint);

    procedure Loadkeeptrees(Locationname: String; ATreeView: TTreeView);

    function Getedtreedata(Var LocationID: Integer; Var Pubdate: TDateTime;
      Var Publicationid: Integer; Var editionid: Integer;
      Var ProductionID: Integer; Var Sectionid: Longint): Boolean;

    procedure Dopartappl(autoseted: Boolean);
    function testconnecttion: Boolean;

    procedure planloading(partial: Boolean);
    procedure planloadingSTB(partial: Boolean);
    function Morethanoneplateselectedinseplist: Boolean;
    procedure Thumbclearprepollmessages(Fromnum: Integer; tonum: Longint);

    procedure saveminmaxplateview;
    procedure Loadminmaxplateview;

    procedure platesetapproval(approved: Longint);
    function AddANewCopy(FromCopyFlatseparationset: string;
      FromCopyNumber: string; NewDeviceID: string;
      Newpressrunid: string): Integer;

    procedure macrosetandsel(Macronum: Integer; Setit: Boolean);

    procedure Resetfilterrefreshsign;

    procedure DOActionthumbnaileditcolorsExecute;
    procedure DOthumbnaileditcolorsExecute;
    procedure DothumbnailCenterspreadExecute;
    procedure DothumbnailSinglespreadExecute;
    procedure DoThumbnailapproveExecute;
    procedure DoThumbnaildisapproveExecute;
    procedure DoThumbnailholdExecute;
    procedure DothumbnailReleaseExecute(Monoonly: Boolean);
    procedure DothumbnailReapproveExecute;
    procedure DothumbnailAutoapproveExecute;

    procedure PartialapplyPlan(autoseted: Boolean);

    procedure doseparationsapproval;
    procedure doseparationsReapproval;
    procedure DOPageDisapproveExecute;
    procedure DoPageHoldExecute;
    procedure DoPagereleaseExecute(Onlymono: Boolean);

    function Findpageineditionsys(pagename: string; Sectionid: Integer)
      : Integer;

    procedure writeeditioneditlog(adding: Boolean);

    function ActivateData(ReActivate: Boolean): Boolean;
    procedure doseparationsAutoapproval;
    procedure ApplytoPlan(AllIsSet: Boolean);
    procedure plateviewtreedeselect;
    procedure storePlateselection;
    procedure RestorePlateselection;
    // procedure logontopaths;
    // procedure loadpaths;
    procedure updateactiveplates;

    procedure applyeditiondata;

    function Checkforedchanges: Boolean;

    function applyplannedpagenamestoplan(Publicationid: Integer;
      Pubdate: TDateTime; Week: Integer; editionid: Integer; Sectionid: Integer;
      LocationID: Integer; pagename: string; Format: string;
      dateformat: string): String;

    function Makereportdetails: Boolean;
    procedure Printreportdetails;
    procedure savereportdetails(filename: string);
    procedure makeLiveDetailsreport;
    // procedure loadoldstatistictree;
    procedure Movepressgrpfilter;

    procedure getpreselHS;
    procedure resetpreselHS;
    procedure clearhs;
    function getfirstselectedhs: Integer;
    procedure resetsuperhsselection;

    procedure InitProdCols;

    procedure Logtoexcel(Var APBExListview: TPBExListview);

    procedure maketextreport;
    procedure maketextreportVer3;

    procedure Loadloggridsize;
    procedure saveloggridsize;

    function findplantreenode: Boolean;
    procedure Setselectedplanframe;
    procedure Makeplantree(forcetoproductionid: Longint);
    function Configallowed: Boolean;
    function GetDatabaseDateTree: String;
    function makeprogwherestr(p1: string): String;
    procedure Newrefreshprogress;
    // procedure Ripagain(color : Boolean; flatseparationset : Longint);
    procedure newprogress;

    procedure HSToExcel;

    procedure loadSuperHSDB2(autosizecols: Boolean);

    function loadplateview(keepviews: Boolean; Smoothupdate: Boolean): Boolean;

    procedure setpagetablethumbdata(Setstring: string; extrawhere: String);
    procedure setpagetablestFlatdata(setstr: string; wherestr: string;
      totset: Boolean; AllPlatecopies: Boolean);
    procedure saveHSwidths;

    procedure loadthumbnails(manulrefresh: Boolean);
    procedure setdroptarget;
    procedure MovePubdateFilter;
    function LoadDBIniPrefs: Boolean;
    procedure expandlangfile(language: String);
    procedure CopyStackerSetupToOtherEdition(ProductionID: Integer;
      EditionFromID: Longint);
    // procedure TreeViewExpandviewClick(Sender: TObject);

  protected

  public
    makeingnewedition: Boolean;
    Procedure LogTestDebug(text: String);
    function Publextratextonproduction(ProductionID: Integer;
      akttext: String): String;
    // function GetApressactionNumber(Action : Taction): Integer;
    procedure SetMissingOnmaster(mastercopyseparationset: Longint);

    function StringToPAnsiChar(stringVar: string): PAnsiChar;

    procedure RefresshAllpressgrpnames;

    procedure changemastertocenterspread(mastercopyseparationset: Longint);
    procedure changemastertoSinglespread(mastercopyseparationset: Longint);
    procedure PrevAsinglefilePdfOrtif(filename: String);
    procedure DothumbnailpreviewExecute(Modalview: Boolean;
      SpecificMaster: Longint);
    procedure SetAdayselectcombo(Var Acombobox: TComboBox);
    procedure DounapplyandSplit(ProductionID: Integer; pressid: Longint);
    procedure Getplateviewpagetable(ProductionID: Integer; pressid: Longint);

    procedure Plateretrans;
    procedure dopageformatsetup;

    procedure AppException(Sender: TObject; E: Exception);
    procedure prodtreerelease(Monoonly: Boolean);
    procedure productionrelase(Monoonly: Boolean);
    procedure platetreerelease(Monoonly: Boolean);
    procedure Platerelease(Monoonly: Boolean);
    procedure thumbtreerealse(Monoonly: Boolean);
    procedure Pagetreerelease(mononly: Boolean);
    function compagerplatelayouts(Tmpl1: Integer; Tmpl2: Longint): Boolean;
    function Getnewsystemtype: Integer;
    function StandardProduktionchk(Editmode: Integer; ProductionID: Integer;
      Publicationid: Integer; Pubdate: TDateTime; Fromproductionid: Integer;
      FromPublicationid: Integer; FromPubdate: TDateTime): Integer;

    function differentremotefolder(fromlocationid: Integer;
      tolocationid: Longint): Boolean;
    procedure CreatePressvisibilyINstring;
    procedure SaveEventlog(Event: Integer; Separation: Integer;
      FlatSeparation: Integer; ErrorMsg: String; filename: String;
      Version: Integer; MiscInt: Longint); // Productionid

    procedure Savekeeptrees(Locationname: String; ATreeView: TTreeView);

    function setalllocationcombos(newlocationname: string): Integer;
    // -1 error, 0 no change, 1 normal change, 2 server change

    function checkdevbeforerelease: Boolean;
    function CompareJpgIds(filename: String; Pubdate: TDateTime;
      Publicationid: Integer; Sectionid: Integer; pagename: string): Integer;
    // 0 nofileid,1 fileok,2 filenotok

    procedure addnewsubedition(LocationID: Integer; Pubdate: TDateTime;
      Publicationid: Integer; FromEdId: Integer; ToEdid: Integer;
      Addfrommain: Boolean; ApplyascommonIDX: Integer; KeepdeviceIDX: Integer;
      ApprovalIDX: Integer; HoldIDX: Integer; ProductionID: Integer);
    procedure loadedition(LocationID: Integer; Pubdate: TDateTime;
      Publicationid: Integer; editionid: Integer; ProductionID: Integer;
      Sectionid: Longint);

    function Limiteditionselection(Publicationid: Integer;
      Astrings: Tstrings): Boolean;
    function Limitsectionselection(Publicationid: Integer;
      Astrings: Tstrings): Boolean;

    function dateandtimetostr(Adate: TDateTime; ATime: TDateTime): String;
    procedure writeinitlog(logstr: String);
    procedure strTodateandtime(Adatetimestr: String; Var Adate: TDateTime;
      Var ATime: TDateTime);

    procedure getallarkdate;
    procedure getArktree;
    procedure getArkFiles;

    procedure GradientApanel(Apanel: TPanel; fromcolor: tcolor; Tocolor: tcolor;
      Horizontal: Boolean);

    function getinkfolderUsername(Path: String; Var Username: String;
      Var Password: string): Boolean;

    function pagetreeselstr: String;
    // cedure showpdffile(pdffilename : string);
    procedure MakepdfLogpreview(master: Integer; LogType: Longint);

    function createstatistictabledata(ProductionID: Longint): Integer;
    function GetInkFolder(Foldertype: Integer; // 1 prev 2 thumb 3 zone 4 org
      LocationID: Longint): String;
    function GetInkFolderCache(Foldertype:Integer): String;
    procedure plateviewrefresh(sameselection: Boolean; FromProc: String);
    function makepressrunprodwhere(p1: String): String;
    function setAcomment(Var Acomment: String; captiontext: String): Integer;
    // 0 cancel 1 sæt, 2 clear
    function GetplanTypefromplantree: Integer;
    procedure doAhalftimeplanLock;

    (* procedure Autoplanexport(Autoevent    : Integer;  //1=Planning 2=Color change 3=Pagetype change 4=Pforce 5=Reimage
      productionid : Integer;
      pressrunids  : Integer;
      mastercopyseparationset : Integer;
      copyseparationset : Integer;
      separationset : Integer;
      separation : int64;
      copyflatseparationset : Integer;
      flatseparationset : Integer;
      flatseparation : int64);
    *)

    function Setplanlock(Iwanttoplan: Boolean): Boolean;
    procedure Deleteproductionwitherror(ProductionID: Integer;
      pressrunid: Integer; Publicationid: Integer; Pubdate: TDateTime;
      copynumber: Longint);
    function productionIsok(ProductionID: Integer; pressrunid: Integer;
      Publicationid: Integer; Pubdate: TDateTime; copynumber: Longint): Boolean;
    function ConnectUserDrive(Username: string; Password: string; Path: string;
      echo: Boolean): Boolean;

    procedure SelectProductionTreeNode(Publicationid: Integer;
      Pubdate: TDateTime);

    procedure loadAPagetree(Ltree: TTreeView; frontorderstr: string;
      press: string; Location: string; Pubdatetext: String);
    procedure PlateEditcolors;
    procedure loadAPlatetree(Ltree: TTreeView; frontorderstr: string;
      press: string; Location: string; Pubdatetext: String);

    function getfileserverFrommaster(pathtype: Integer;
      mastercopyseparationset: Longint): string;

    function getfileserverFrommaster2(mastercopyseparationset: Longint): string;

    function getfileserverpath(pathtype: Integer; Fileservername: string): string;
    function getfileserverpathcached(pathtype: Integer): string;
    procedure Checkforms;
    procedure ActionEnable(FromProc: String);
    procedure Regencopyflatinkfiles;

    procedure Mainwizard(CopyOrMoving: Boolean);
    // Remotecall : Boolean);
    procedure MainEditplan;
    procedure MainEditplanpart;

    procedure planlogging(logtext: String);
    function Allocateprodplates(IPLF: Integer; Nprods: Longint): Boolean;
    function Deallocateplateframes: Boolean;
    function allocateplateframes(parentBox: TScrollBox;
      Numberofframes: Longint): Boolean;

    procedure settotransmittedifmainlocation;
    procedure addcopytopressrun(pressrunid: Longint);
    function Userloginonserver(Username: string; Password: string;
      _drvLetter: string; _netPath: string; _showError: Boolean;
      _reconnect: Boolean; showerror: Boolean): DWORD;

    procedure applysepecifikdeviceid(id: Integer; ProductionID: Longint);
    procedure ApplySpecificPageFormat(pageFormatName: string; ProductionID: Integer);
    // procedure paintbackground;
    procedure postapplyplan(LocationID: Integer; pressid: Integer;
      ProductionID: Integer; Publicationid: Integer; Pubdate: TDateTime;
      Editmode: Longint; existingPlanOverwrite: Boolean);

    procedure AddlogentryById(Event: Integer; ErrorMsg: string;
      LocationID: Integer; pressid: Integer; pressrunid: Integer;
      Publicationid: Integer; editionid: Integer; Sectionid: Integer;
      Colorid: Integer; Pubdate: TDateTime);

    procedure cleanupfilesonserver;
    procedure dojobsetup;
    procedure Addlogentry(Event: Integer; ErrorMsg: string;
      Var eventtime: TDateTime; Separation: Int64; separationset: Integer;
      copyseparationset: Integer; mastercopyseparationset: Integer;
      FlatSeparation: Int64; flatseparationset: Integer;
      copyflatseparationset: Longint);
    function dateplustime(Adate: TDateTime; ATime: TDateTime): TDateTime;

    procedure addtoselectedmasters(mastercopyseparationset: Longint);
    function makeapagenametext(mastercopyseparationset: Integer;
      pagenamesetup: string): String;

    procedure applyAbbinkcomment(ProductionID: Longint);
    procedure applyHoneyinkcomment(ProductionID: Integer; usenumbers: Boolean);
    procedure applyPERRETTAinkcomment(ProductionID: Longint);
    procedure sendedisapprovemail(mastercopyseparationset: Integer;
      Toptext: string; fromform: Integer); // 0 main 1 preview
    procedure WMTHEMECHANGED(var msg: TMessage); message WM_THEMECHANGED;
    procedure Onidlehandler(Sender: TObject; var Done: Boolean);
    procedure cleanupproductionnames;
    procedure UnapplyAll();

    function getpressplanid: Integer;
    function Supergetantipos(frompos: Integer; pagetypes: TPageNumbering;
      tmpl: Integer; makeit: Boolean): Integer;

    procedure LoadIDs(FromProc: String; fullReload: Boolean);
    procedure SetAutorefreshMode(ActivePageIndex: Longint);

    procedure Myonclick(Sender: TObject);
    function accepttoolbardrag(Sender, Source: TObject): Boolean;

    function InitGlobalData: Boolean;
    procedure afterapproval(mastercopyseparationset: Integer;
      pdfmaster: Longint);

    function trysql(Var Aquery: TSQLQuery): Boolean;
    function Tryopen(Var Aquery: TSQLQuery): Boolean;

    procedure Syncscrollbars(Number: Longint);

    procedure scrollmultiruns(scrpos: Integer; scrmove: Integer;
      Number: Longint);

    // procedure ExecNewProcess(ProgramName      : String; programparameter : string);
    function converttoExcelnums(datatext: string; col: Integer): string;
    procedure setlistsortcol;
    procedure setGroupBoxworking;
    procedure setpagetableMasterdata(setstr: string; wherestr: string);
    procedure setpagetablestddata(setstr: string; wherestr: string);
    function ApplyDark(Color: tcolor; HowMuch: Byte): tcolor;
    function ApplyLight(Color: tcolor; HowMuch: Byte): tcolor;
    // procedure settoproduceOnedition(var Edition : ttreenode);
    function GetFileLastAccessTime(sFileName: string; filetimetype: Integer)
      : TDateTime;
    function numberofpagesUnderEdition(Aktnode: TTreeNode): Integer;
    function productionnametoid(nameofprod: string): Integer;
    procedure deletegrid(gridtodel: TStringGrid);
    procedure Copystringgrid(Fromgrid: TStringGrid; Togrid: TStringGrid);
    procedure Inserttoselection(Fromgrid: TStringGrid; NewCol: Tstringlist);
    function Selcolortostr(Colorbox: TCheckListBox): string;
    function strtoNcolors(colorstr: string): Integer;
    function GetcolorN(colorstr: string; colornumber: Integer): string;
    procedure strtocolorChk(Var Colorbox: TCheckListBox; colorstr: string);
    procedure AddReimageEventSingle(FlatSeparation: Integer;
      ReimageReason: Integer; Comment: String);
    procedure AddReimageEvent(CopyFlatSeparationList: Tstringlist;
      ColorList: Tstringlist; CopyList: Tstringlist; ReimageReason: Integer;
      Comment: String);
    procedure ApplyRipSetups(ProductionID: Integer; RipSetupName: string;
      PreflightSetupName: string; InkSaveSetupName: string);
    procedure ApplyOutputMetode(ProductionID: Integer; Tekst: String);

    procedure SetWarningSystem;
    Function FindStringGridProdBiggestFont: Integer;
    procedure SetUnknownFilesLampOn;
    procedure SetUnknownFilesLampOff;

    procedure SetLocationPressModeGUIVisibility();
    function GetSelectedLocationID: Integer;

    function SaveConfigFile(ApplicationName: string; MachineName: string;
      Username: string; ConfigNumber: Integer; ConfigFileName: string;
      Buffer: string): Boolean;
  end;

const

  tabfile = 'PLCtab1.cfg';
  pressplanimdx: array [0 .. 8] of Integer = (42, 20, 36, 0, 41, 28, 48, 28, 8);
  // press,pressrun,presssection, section,page,color

var
  PreviousActivePageIndex: Integer;
  beforedropdownday: String;
  initglobaldataDebug: Integer;
  NPublinalias, NPublinSize: Integer;
  Publinalias: Array of record Publid: Integer;
  Inalias: String;
end;

ActionThumbFileCenterRetryPossible: Boolean;
alllocationsset:
Boolean;
Nlogfields:
Integer;
SelStartTime:
TDateTime;
SelEndTime:
TDateTime;
Thumbcapheight:
Integer;
CombinepressrunPoissible:
Boolean;
BKSelset:
Array [1 .. 2] of record ISset: Boolean;
BKslpubdate:
string;
BKslpublication:
String;
BKsledition:
string;
BKslsection:
String;
end;

isstarting:
Boolean;
errcodenum:
Integer;
stringgridhswidthdownA, stringgridhswidthdownL, stringgridhswidthdownR: Integer;
Listshortcut, filtershortcut: TShortCut;

checkfiltercount:
Integer;
MAINCC:
String;
MainCCDATA:
String;
MainCCConfig:
String;
setAcommentResult:
Integer;
maxtryopensql:
Longword;
Avgtryopen:
Longword;
tryopenCount:
Longword;
tryopentot:
Longword;

FirstProductionRefresh:
Boolean;

programminorversion:
Integer;
DBVersion:
Integer;
PlanLock:
Boolean; // true det er mig som bestemmer
plancancel:
Boolean;
PlanLockClient:
String;
PlanLockTimeoutSec, planlocktimeleft: Integer;
PlanLockTime:
TDateTime;
ThisplancenterlocationID:
Integer;

logfindpos:
Integer;
Multifileserversystem:
Boolean;

Multisecplan:
Boolean;

lastviewselected:
Integer;
LastPlatepressrunid, LastPlatepresssectionnumber: Integer;
Plateselection:
Array of Boolean; // Dette er de images som er valgt

plateviewmouseButton:
TMouseButton;
plateviewmouseShift: TShiftState;
plateviewmousecoord: TPoint;
plateviewmouseScreencoord: TPoint;
plateviewmouseSelectedItem : Integer;

TimerPlatetreekeyshift:TShiftState;
TimerPlatetreekeyKey:Word;

Regeninkflats:Tstrings;

editionlogpublicationid: Integer;
editionlogpubdate: TDateTime;

actDevselected: Integer;
Ntrysqllogfile: Integer;
trysqllogfile: text;

planlogfile:
text;
writeplanlog:
Boolean;
// PressConfigfilename : string;

GMainlocationID:
Integer;
Gaddfromeditionid:
Integer;
GSelpubdate:
TDateTime;
GSelpubid:
Integer;

Firstsortcolnumber:
Integer;
szXmlFileName,
  PDFOutputfilename: PChar;
   szpressname,DLLErrormessage, szErrorMessage : PAnsiChar;
nProductionID_PDF:
Integer;
nPressRunID_PDF:
Integer;

URLMessage:
PChar;
Mainerrorfolder:
String;
NErrorfolders:
Integer;
Errorfolders:
array [1 .. 100] of record InputID: Integer;
InputPath:
string;
name:
String;
folderbased:
Boolean;
ignorefolder:
Boolean;
DefaultPublicationID:
Integer;
Username:
String;
Password:
string;
Connected:
Boolean;
LocationID:
Integer;
end;

Superdownon:
Integer;
localmode:
Boolean;
Popupmenunumber:
Integer;
Tmpfolder:
String;
Debuginsert:
Boolean;
NSellevels:
Integer;
Sellevelkinds:
Array [0 .. 7] of Integer;
// 0=all,1=pubdate,2=publication,3=issue,4=edition,5=section/
lastselids:
record Publicationid: Integer;
editionid:
Integer;
Sectionid:
Integer;
LocationID:
Integer;
pressid:
Integer;
Pubdate:
TDateTime;
end;

StringGridprodsdata:
array [1 .. 1000] of record Selected: Boolean;
Ncopies:
Integer;
Lstat:
Integer;
hold:
Integer;
priority:
Integer;
pages:
Integer;
pagesArrived:
Integer;
pagesApproved:
Integer;
plates:
Integer;
platesimaged:
Integer;
LocationID:
Integer;
pressid:
Integer;
pressrunid:
Integer;
ProductionID:
Integer;
Publicationid:
Integer;
OrderNumber:
string;
NSectionids:
Integer;
Sectionids:
array [1 .. 20] of Integer;
NDevices:
Integer;
Devices:
array [1 .. 20] of Integer;
editionid:
Integer;
copynumber:
Integer;
Pubdate:
TDateTime;
presstime:
TDateTime;
Presstimelength:
TDateTime;
ripsetupID:
Integer;
presssectionnumber:
Integer;
OutputOrder:
string[50];
FTPCount:
Integer;
PRECount:
Integer;
INKCount:
Integer;
RIPCount:
Integer;
end;

changeHSsel:
Boolean;
preactionsel:
array of Integer;
Npreactionsel:
Integer;

preactionProductionid:
Integer;
NpreactionRunsel:
Integer;
XpreactionRunsel:
array [1 .. 200] of record ProductionID: Integer;
pressrunid:
Integer;
end;

Npreactionprodsel:
Integer;
preactionprodsel:
array [1 .. 200] of Integer;

filterlocation, filterdate, filterpubl, filtered, filtersec: string;
Reimagetostat:
String;
termprog:
Boolean;
SuperHSdata:
Array of THSdatatype;
PageselectionType:
Integer;

GetCurrentThemeName:

function(pszThemeFileName: LPWSTR; cchMaxNameChars: Integer;
  pszColorBuff: LPWSTR; cchMaxColorChars: Integer; pszSizeBuff: LPWSTR;
  cchMaxSizeChars: Integer): HRESULT; stdcall;
platecappagina, platecappageindex, platepanenamescap, plannedPanamescap,
  platecapaltpage: string;
LCappagina, LCappageindex: Integer;
InitlogStrs:
Tstrings;
Timerautorefreshcount:
Integer;
stavallabeltime:
TDateTime;
findlogseparation, findlogflatseparation: String;
CheckListBoxprodpubldate:
TDateTime;
CheckListBoxprodpublalllocationsset:
Boolean;
CheckListBoxprodpublaktlocation:
String;
activetoolbar:
TActionToolBar;
testcounter:
Integer;
Thumbcopymasterset:
Integer;
aktnewplannode:
TTreeNode;

sectionlongname, sectionalias: Tstrings;
Editionlongname, Editionalias: Tstrings;
Publicationlongname, Publicationalias: Tstrings;

nseqbeforepart:
Integer;
seqbeforepart:
Array [1 .. 200] of record editionid: Integer;
Sectionid:
Integer;
minpagename:
String;
seq:
Integer;
end;

productioncolwiths:
array [0 .. 30] of record name: string;
width:
Integer;
end;
PlateviewImage:
tbitmap;

AcolSortcol:
Integer;
MergeJpegs:
TMergeJpegs;
UseMergeJpegs:
Boolean;
firstplateview, firsteditionview: Boolean;
LookForhonneywherestr:
String;

LookForhonneypublid, LookForhonneyeditionid: Integer;
LookForhonneypubldate:
TDateTime;

// Proversion : Integer; //0 standard enterprice, 1 almgammelproversion, 2 ny lilleproversion
lastconfiglogin:
TDateTime;
anynotapprovedblink, anyDisapprovedblink: Boolean;
Changingthumborder:
Boolean;
firstpaint:
Boolean;
NCurThumbs:
Integer;
CurThumbsH:
Integer;
CurThumbsw:
Integer;
firstprgcoldata:
Integer;
CurThumbs:
array [0 .. MAXTHUMBNAILS] of record masterset: Integer;
filetime:
TDateTime;
Image:
tbitmap;
Lock:
Integer;
end;
pagenamecol:
Integer;
Totalplateuse:
Integer;

Thisdevicename:
string;
gridshiftstate:
TShiftState;
gridButton:
TMouseButton;
lastLEcol:
Integer;
lastLErow:
Integer;
Firstprgorder:
Integer;
Treenodeinf:
array [0 .. 8] of string;

DynamicPP:
Boolean;
keybcontrol:
Integer;
fromi, toi: Integer;
NSplitliste:
Integer;
Splitliste:
Array [1 .. 200] of Integer;
splitlistecombine:
Boolean;
FShowHoriz:
Boolean;
drakcolcolor, FShowVert: Boolean;
prdls:
Array [0 .. 20] of Integer;
drakcolcoloritem:
Integer;
FListViewWndProc:
TWndMethod;
FList1ViewWndProc:
TWndMethod;
captionis:
Integer;
splitting, tNames1init, sortdirectiondown: Boolean;

cursortlistcol:
Integer;
colrefrecker:
Integer;
firstpageload, Runningdll: Boolean;
TreeViewPressrundrover:
TTreeNode;
pageprogresssub, plateprogresssub: Integer;
FileResampleposible:
Boolean;
FormMain:
TFormMain;
tNames1:
tNames;
Prefs:
tPrefs;
Listsortcol:
Integer;
terminateprogram:
Boolean;
// Setupdllhandle : Thandle;
// plotinfohandle : Thandle;
// Resampledllhandle : Thandle;

RenameFileDialogPossible:
Boolean;
CalculateImposeVersion:
CalculateImposeVersionType;
ExportPressTemplateDataDialog:
ExportPressTemplateDataDialogType;
ExportPressTemplateDataPossible:
Boolean;

MakePdfBook:
MakePdfBookType;
MakePdfBookFlats:
MakePdfBookFlatsType;
DLLGenerateReport:
GenerateReportType;
ApletoDLLGenerateReport:
Boolean;
ApletoUseRipSetupNameSetup:
Boolean;
AbleToStackingBinSetup:
Boolean;
MakePdfBookPosible, MakePdfBookFlatsPosible: Boolean;

addafterPStitle, addinfrontPStitle: String;
Pressviewzoom:
Integer;

NyFileInfo:
FileInfotype;

mainrefreshing:
Boolean;
NAutoSelectionstrings:
Integer;
AutoSelectionstrings:
array [1 .. 50] of string;

NAutoOrderbystrings:
Integer;
AutoOrderbystrings:
array [1 .. 50] of string;
ConnectUserDriveCount:
Integer;

LastHSsel:
Integer;
StringGridHSempty:
Boolean;
Commentconfigfilename:
string;

SpecificDeviceID:
Integer;
FOrgListViewWndProc:
TWndMethod;

workerThreadUnknownPages:TWorkerThreadUnknownPages;
workerThreadUnknownFiles:TWorkerThreadUnknownFiles;

ADLogin: TADlogin;

NetDirectoryExists:TNetDirectoryExists;

implementation

uses
  ClipBrd,
  SqlTimSt, Ueditpagedef, Udata,
  USelcolors, Uinitdata, USelecttemplate,
  Ulistselect, USelecttheme,
  USelectnewpresssection, Usavename,
  Uloadpressplan, Uaddpressrun, Uaddplan, Usettings,
  USellwin, Uchlayout, Uselfromlist, Umarkgroups, Upriority,
  Uplatereimage, UUser, Ulogin, Uabout,
  Udeleteplans, UChangepress, Uproof, UHSOrder,
  UEditionpageplan, Unewlocalpress, UChangeplatelayout, Ueditatextcombo,
  Userverconfig,
  Uendiscolor, Udeletesubedition, UEdittemplatedata,
  Ureimageproduction, UDeleteold, UColor2mono, Uadminlogin,
  Upopupsetup, Uprodplan, UChangeexternalstatus,
  UMultplanload, UTabs, Usaveusers, Uconfigemail, USendaemail,
  UEmailsender,
  Ueditionorder, Udeletepressplans, UApplyplan,
  Usetdeadline, ULoadcombined, UFTP, Uadmintools,
  Uappendruns, Udelpubl, Uarchive, Ufileinfo, UCopyingfile, Ucustomtools,
  Ucopypastepage, UCurentstate, Uloadpressconf,
  Ureloadingerrorfiles, UDebugtools, UPrev2, UPrevPlate2,
  UCopyfiles, UHoldrelease, USelectnewpress, Unewlocation, Ualfalist,
  Uaddeditions, Udeletebar, Upressruninfo, UCustomTowers, Uflatproof,
  UPing, UMServer, Uaddsubplannedname, Urenameunown, Utowername,
  Uretryfiles, uplateviewframe, USelplatecopies, UInkBackupretry, UFanout,
  UUknowfileerrorlog, UEditweek, Ueditdates,
  Uplanerrors, Uplanisbusy, UWorkerThreadTreeUpdate, Ueditcreep,
  USetschedules, UListselection, Uunknownfiles, UHardproofselect,
  UResampleprogress, {UOldversions,} UXMLExport, UEditplatecopies,
  UActionconfig, Uusercolssaveload, UChangecomment, UUnkFolders,
  Usepsearch, Upressorderandtime, UExportcustomplan,
  UAddNplatecopies, Ushowprepoll,
  USelectfolder, UAutotower, UGenExcelrep,
  Ugenexelsinglerep, USendAmail, USelnexttimedEd,
  UPlateprint, USendmessage, UAddtimedEds, JPGGetComment,
  UChangetotimed, UWebnaming, USetpressCylinder, USeprationlist,
  UCopyPlanTopress, UAutoupdateTHR, UChanginglocserv, UNewChpress,
  UMakedefeds, UFilepreview, Ucolordetect, UHottime,
  Utotreportgen, Udevicereport, Utoolchkdb, UTiffpreview,
  UCroptiff, UAutopartialapplyCalc, Udelpubl2, UProofmask, Upageformat,
  Uretransto, Urelto, USelectlocationandproductions, UChangeplatenumbers,
  UAutoflatproof, UPdfFileInfo, Umultipressrelease, UPecomImp,
  UPressinforeq, UEditcolors, UChkCCfiles, UFalsespread, UCenterandmarks,
  Uprodwarn, UDongAInkComment, UDebugsql,
  UReProcess, UTowerfilter,
  ULoadstbplan, UReimageReason, UReversePageNumbers, USelectdefinition,
  UCopyStackerSetup, SaveStackerSetup, UPdfRotation, ULinkToMaster, UQuickApply,
  UCheckPlan;

{$R *.dfm}

var
  // CHPrect : trect;
  MouseoverthumbX, Mouseoverthumby: Integer;
  // Mouseoverthumbrect : trect;
  reportselmode: Integer;
  reportleftwhenSel: Integer;
  platetreeMouseShift: TShiftState;
  PLCProcessID: Integer;

  Nmaxtimedata: Integer;
  NTimedatalabels { ,NTimedatalabelssize } : Integer;
  aktPBExListviewthumbnailvertpos: Integer;

  applyColorproofids: Integer;
  applyMonoproofids: Integer;
  lastHSlevel: Integer;
  PBExListviewHSselected: Boolean;
  // actlog : tinifile;

  lastclicktime: TDateTime;
  scoller: Integer;
  PBExListviewdatalisthorzpos: Integer;
  ignorescroll, Pagepagecoldragging: Boolean;
  firstplan, aproveblinkon: Boolean;
  Nclicks: Integer;
  pladatedataselection: Integer;
  firstnotappr, firstDisappr: Integer;
  AutoRetryQueuePossible: Boolean;

  scrolling: Boolean;
  copypressrun: TTreeNode;

  X: Integer;

  Nrepaints: Integer;

  Firstprod, activated, plateframesinitialized, activatedonce: Boolean;
  MinMaxpressrunselstring: String;
  NMinMaxsettings: Integer;
  MinMaxsettings: Array [1 .. 200] of record minimized: Boolean;
  caption: String;
end;

procedure TFormMain.WMDisplayChange(var Message: TWMDisplayChange);
begin
  writeMainlogfile('The screen resolution has changed to ' + IntToStr(Message.Width) + 'x' + IntToStr(Height) + ' bpp ' + IntToStr(Message.BitsPerPixel));
  //ShowMessageFmt('The screen resolution has changed to %d×%d×%d.',
   // [Message.Width, Message.Height, Message.BitsPerPixel]);
end;


procedure TFormMain.AfterConstruction;

var
  i: Integer;
begin
  inherited;
  { *
    if Screen.PixelsPerInch <> 96 then //as I’m designing at 96 DPI
    begin
    // Stretch imagelist items to fit current screen dpi



    FormMain.writeinitlog('ScaleDimension='+ IntToStr(ScaleDimension(100)));
    FormMain.writeinitlog('FormImage.ImageList1.Width='+ IntToStr(FormImage.ImageList1.Width));
    FormMain.writeinitlog('FormImage.ImageListtreestate.Width='+ IntToStr(FormImage.ImageListtreestate.Width));
    TreeViewThumbs.Images.Width := FormImage.ImageList1.Width;
    TreeViewThumbs.Images.Height := FormImage.ImageList1.Height;
    TreeViewThumbs.StateImages.Width := FormImage.ImageListtreestate.Width;
    TreeViewThumbs.StateImages.Height := FormImage.ImageListtreestate.Height;
    end;
    * }
end;

procedure TFormMain.LogTestDebug(text: String);
var
  f: TextFile;
begin
  Assignfile(f, IncludeTrailingBackSlash(TUtils.GetTempDirectory()) +
    'TestPrefs.Debug.log');
  if FileExists(IncludeTrailingBackSlash(TUtils.GetTempDirectory()) +
    'TestPrefs.Debug.log') then
    Append(f)
  else
    ReWrite(f);
  Writeln(f, FormaTDateTime('YYYY.MM.DD HH:NN', NOW) + ' ' + text);
  CloseFile(f);
End;

// Application load time call (once only)
// Prefs PreLoadIniFile called (LoadIniFile called in FormMain.Activate
// data allocations and inits, DLL load
// No database initialization here

procedure TFormMain.FormCreate(Sender: TObject);
Var
  i: Integer;
begin
  //ShowMessage('Screen dpi=' + IntToSTr(Screen.PixelsPerInch) + '. Form dpi=' + IntToSTr(PixelsPerInch) );
  // FormMain.PixelsPerInch := Screen.PixelsPerInch;
  { if (FxormSettings.CheckBoxAllowDropFiles.Checked) AND (FxormSettings.EditDropFilesDestination.Text <> '') then
    begin
    FOrgListViewWndProc := PBExListviewthumbnail.WindowProc;
    PBExListviewthumbnail.WindowProc := ListViewWndProc;
    DragAcceptFiles(PBExListviewthumbnail.Handle, True);
    end; }
 LogTestDebug('In FormCreate');
  Application.OnException := AppException;

  // SetWindowTheme(StringGridHS.Handle, nil, '');
  // SetWindowTheme(StringGridProds.Handle, nil, '');



  // Show panel if PDFium Plug-In DLL not available
  //pnlDownload.Visible := not ( iepiPDFium in IEGlobalSettings().ActivePlugIns );

  InitlogStrs := Tstringlist.Create;
  Multilocationslist := Tstringlist.Create;
  Releaseproductionids := Tstringlist.Create;
  ReleasePressrunids := Tstringlist.Create;
  ReleasePlates := Tstringlist.Create;
  sectionlongname := Tstringlist.Create;
  sectionalias := Tstringlist.Create;
  Editionlongname := Tstringlist.Create;
  Editionalias := Tstringlist.Create;
  Publicationlongname := Tstringlist.Create;
  Publicationalias := Tstringlist.Create;
  Regeninkflats := Tstringlist.Create;
  plancentermainlog := Tstringlist.Create;

  SetLength(users, 100);
  MrgFileNameLeft := StrAlloc(1024);
  MrgFileNameRight := StrAlloc(1024);
  MrgOutputFileName := StrAlloc(1024);
  Plotinfofilname := StrAlloc(1024);
  SetLength(SuperHSdata, 10);
  PlateviewImage := tbitmap.Create;
  DLLErrormessage := AnsiStrAlloc(1024);
  szXmlFileName := StrAlloc(255);
  szErrorMessage := AnsiStrAlloc(255);
  szpressname := AnsiStrAlloc(255);
  PDFOutputfilename := StrAlloc(255);
  URLMessage := StrAlloc(1024);

  Globalsystemtype := 1;
  StartuPdone := false;
  treeIdle := true;

  activated := false;
  activatedonce := false;

  LookForProducerrorNow := false;
  PageControlMain.ActivePageIndex := VIEW_SEPARATIONS;
  PDFMasterOK := false;
  Orgpdffilepossible := false;
  Newtreeprodid := -1;
  plateframesinitialized := false;
  CurrentLocationid := -1;
  alllocationsset := false;
  CheckListBoxprodpublalllocationsset := false;
  CheckListBoxprodpublaktlocation := '';
  Currentlocationname := '';
  Planloggingseparation := -1;
  keeptreesLoading := false;
  Planloggingtype := -1;
  Planloggingmessage := '';

  ChangetoMultilocationlocation := '';
  ChangetoMultilocationserver := -1;

  TUtils.DisableProcessWindowsGhosting();

  PreviousActivePageIndex := -1;

  // DoALamptreerefresh := false;
  // NumberMultiserverlocations := 0;
  PlateSelecttionstyle.reseting := true;
  isstarting := true;
  ConnectUserDriveCount := 0;
  makeingnewedition := false;

  Prefs := tPrefs.Create(FormMain);

  DeleteFile(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
    'plancenterinit.log');
  DeleteFile(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
    tabfile);
  DeleteFile(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
    'SQLException.log');

  // ### 20170617
  TUtils.MirrorIniToUserFolderIfNewer(Prefs.PlanCenterConfigFileName);
  TUtils.MirrorIniToUserFolder('DataListOrder.ini');
  TUtils.MirrorIniToUserFolder('Shortcuts.ini');
  TUtils.MirrorIniToUserFolder('WarnSystem.ini');
  TUtils.MirrorIniToUserFolder('LogGrids.ini');
  TUtils.MirrorIniToUserFolder('Colordetect.ini');
  TUtils.MirrorIniToUserFolder('PlanCenter_datalist.ini');
  CreateDir(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'logs');
  CreateDir(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
    'sqllogs');
  CreateDir(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
    'Tmpfiles');

  CreateDir(IncludeTrailingBackSlash(TUtils.GetTempDirectory()) + 'PrevTemp');
  CreateDir(IncludeTrailingBackSlash(TUtils.GetTempDirectory()) + 'TmpPDF');

  FormMain.caption := 'PlanCenter V' + TUtils.GetMajorVersion();


  LoadAllDlls();
  Prefs.PreLoadIniFile();

  if (ParamCount > 1) then
  begin
    if (ParamStr(1) = '-d') OR (ParamStr(1) = '-D') OR (ParamStr(1) = '/d') OR
      (ParamStr(1) = '/D') then
      Prefs.Debug := true;

    if (ParamStr(1) = '-b') OR (ParamStr(1) = '-B') OR (ParamStr(1) = '/b') OR
      (ParamStr(1) = '/B') then
      Prefs.DBUseBackup := true;
  end;

  if (not Prefs.DBUseBackup) then
    Application.Title := Prefs.caption
  else
    Application.Title := Prefs.caption + ' - BACKUP MODE';

  DBVersion := 1;
  maxtryopensql := 0;
  Avgtryopen := 0;
  tryopenCount := 0;
  tryopentot := 0;
  NMinMaxsettings := 0;
  FirstProductionRefresh := true;
  Nclicks := 0;
  Firstsortcolnumber := 0;

  Popupmenunumber := -1;
  reportselmode := -1;
  reportleftwhenSel := 0;
  Debuginsert := false;
  Nmaxtimedata := 0;
  NTimedatalabels := -1;

  lastselids.Publicationid := -1;
  lastselids.editionid := -1;
  lastselids.Sectionid := -1;
  lastselids.LocationID := -1;
  lastselids.pressid := -1;
  lastselids.Pubdate := 0;
  FlatPageTablePossible := false;
  CCMesagePossible := false;

  firstpaint := true;
  pagenamecol := 0;
  Nrepaints := 0;

  checkfiltercount := -1;

  changeHSsel := true;
  filterdate := '';
  filterlocation := '';
  filterpubl := '';
  filtered := '';
  filtersec := '';

  Thumbcopymasterset := -1;
  Mouseoveriplf := -1;
  mouseoveripl := -1;
  mouseoverip := -1;
  termprog := false;
  Firstprod := true;
  StringGridHSempty := true;
  Ndevmans := 0;
  firstplateview := true;
  firsteditionview := true;
  PageselectionType := 0;
  Changingthumborder := false;
  plateviewmouseSelectedItem := -1;

  Ntrysqllogfile := 0;

  Assignfile(trysqllogfile, IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'SQLException.log');
  ReWrite(trysqllogfile);
  Writeln(trysqllogfile, 'Plancenter sql error log file ' + DateTimeToStr(NOW));
  Writeln(trysqllogfile, '');

  FormMain.writeinitlog('Create 1');

  XPColorMap1.UpdateColors;

  FormMain.writeinitlog('Create 2');

  Tmpfolder := IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'Tmpfiles';
  CreateDir(Tmpfolder);
  CreateDir(IncludeTrailingBackSlash(Tmpfolder) + 'Copyfolder');


  // Nruntimes    := 0;

  CCMessage1.Visible := false;
  CCMessage2.Visible := false;

  if (Prefs.Proversion = 2) then
  begin
    Platesettings1.Visible := false;
    Platesettings2.Visible := false;
    Prepollmessages1.Visible := false;
    Plateproofovermenu.Visible := false;
    Proofing3.Visible := false;
    Platesettings3.Visible := false;
    Imposition1.Visible := false;
    immingprodtiimi.Visible := false;
    Misc1.Visible := false;

    ActionToolBarpageactions.ActionControls[16].Visible := false; // advanced
    ActionMainMenuBar1X.ActionControls[6].Visible := false; // message
    ActionMainMenuBar1X.ActionControls[4].Visible := false; // control
    FormMain.TabSheetEdition.TabVisible := false;
    FormMain.TabSheetNewplanner.TabVisible := true;
    FormMain.TabSheetprogress.TabVisible := true;
    FormMain.TabSheetplates.TabVisible := true;
    FormMain.TabSheetErrorLog.TabVisible := false;
    FormMain.TabSheetPages.TabVisible := true;
    FormMain.TabSheetThumbnails.TabVisible := true;
    FormMain.TabSheetReportmain.TabVisible := false;
    FormMain.TabSheetUnknownpages.TabVisible := true;
    FormMain.TabSheetactiivequeue.TabVisible := false;
  end;

  writeplanlog := Prefs.WritePlanLogFile;
  // ini.ReadBool('system','writeplanlog',false);

  FormMain.writeinitlog('Create 6');

  if writeplanlog then
  begin
    Assignfile(planlogfile,
      IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
      'Planning.log');
    ReWrite(planlogfile);
    Writeln(planlogfile, 'Plancenter Planning log file ' + DateTimeToStr(NOW));
  end;

  FormMain.writeinitlog('Create 7');
  SuperHSdata[0].changed := false;
  Nplateframes := 0;
  NplateframesDummy := 0;
  Sizeofplateframes := 2;
  FormMain.writeinitlog('Create 8');

  firstplan := true;
  FormMain.writeinitlog('Create 9');

  Firstprgorder := 0;
  CurThumbsH := 0;
  CurThumbsw := 0;
  anynotapprovedblink := false;
  anyDisapprovedblink := false;

  FormMain.writeinitlog('Create 10');
  NCurThumbs := 0;
  for i := 0 to MAXTHUMBNAILS do
  begin
    CurThumbs[i].Image := tbitmap.Create;
    Showthubms[i].filetime := 0;
  end;
  lastHSlevel := 0;
  WeditionStr := '';
  // Global (declared in Types) with current list of user allowed editions.
  WP1editionStr := ''; // Same but with P1. suffix
  WP2editionStr := ''; // Same but with P2. suffix

  WpublicationStr := '';
  // Global (declared in Types) with current list of user allowed publications.
  WP1publicationStr := ''; // Same but with P1. suffix
  WP2publicationStr := ''; // Same but with P2. suffix

  WP1towerstr := '';

  FormMain.writeinitlog('Create 11');
  // r := MAX_COMPUTERNAME_LENGTH + 1;
  // if GetComputerName(g,r) then
  // begin
  // Thisdevicename := StrPas(g);
  // end;

  Thisdevicename := TUtils.GetThisComputerName();

  tNames1init := true;

  FormMain.writeinitlog('Create 12');

  firstpageload := true;
  Global_SelectedProductionID := 0;

  strpcopy(DLLErrormessage, 'No error');

  strpcopy(URLMessage, 'Some message');
  giveproductionwarning := false;

  FormMain.writeinitlog('Create 13');

  FShowHoriz := true; // show the horiz scrollbar
  FShowVert := false; // hide vert scrollbar
  FormMain.writeinitlog('Create 14');
  // actlog.WriteString('log','progress','load dll');

  FormMain.writeinitlog('Create 16');

  LoadAllDlls(); // ULoadDLLs unit

  if not PublicationEditionSectionAliasSetupPossible then
    ActionConfadvinp.Visible := false;


  // actlog.WriteString('log','progress','loaded dll');
  // actlog.WriteString('log','progress','formcreate done');

  FormMain.writeinitlog('Create 23');

  Listshortcut := Actionrefreshpages.ShortCut;
  filtershortcut := Actionrefreshpagefilter.ShortCut;

  FormMain.writeinitlog('Create 24');
  { if FileResampleposible then
    begin
    ResampleInit;
    ResampleRegisterProgress(ResampleProgressCallBack);
    end; }

  AutoUpdateTHR := TAutoUpdateTHR.Create;
  FormMain.writeinitlog('Create 25');

end;

// Called on form input focus
procedure TFormMain.FormActivate(Sender: TObject);

Var
  ActivateOK: Boolean;
  i, res: Integer;
  ini: TIniFile;
  firstwc: Boolean;
begin
  LogTestDebug('In FormActivate');
  firstwc := false;
  lastclicktime := NOW;
  MainUpdateing := true;
  ActivateOK := true;

  try


    // First time called?
    if (not activated) And (not activatedonce) then
    begin
      activatedonce := true;

      (*
        if Screen.PixelsPerInch <> 96 then //as I’m designing at 96 DPI
        begin
        try
        for i := 0 to FormImage.ComponentCount -1 do
        if FormImage.Components[i] is TImageList then
        FormImage.ResizeImageListImagesforHighDPI(TImageList(FormImage.Components[i]));

        for i := 0 to FrameDeviceplacer1.ComponentCount -1 do
        if FrameDeviceplacer1.Components[i] is TImageList then
        FormImage.ResizeImageListImagesforHighDPI(TImageList(FrameDeviceplacer1.Components[i]));

        FormMain.writeinitlog('ScaleDimension='+ IntToStr(TUtils.HighDPIScale(100)));
        FormMain.writeinitlog('FormImage.ImageList1.Width='+ IntToStr(FormImage.ImageList1.Width));
        FormMain.writeinitlog('FormImage.ImageListtreestate.Width='+ IntToStr(FormImage.ImageListtreestate.Width));
        TreeViewThumbs.Images.Width := FormImage.ImageList1.Width;
        TreeViewThumbs.Images.Height := FormImage.ImageList1.Height;
        TreeViewThumbs.StateImages.Width := FormImage.ImageListtreestate.Width;
        TreeViewThumbs.StateImages.Height := FormImage.ImageListtreestate.Height;
        except
        end;

        end;
      *)

      FormMain.writeinitlog('Loading ini-file');
      Prefs.LoadIniFile;

      if (not plateframesinitialized) then
      begin
        SetLength(plateframes, Prefs.PlannningMaxPlateFrames + 1);
        for i := 1 to Prefs.PlannningMaxPlateFrames do
        begin
          plateframes[i] := TPlateframe.Create(nil);
          plateframes[i].PBExListview1.DoubleBuffered := true;
        end;
        plateframesinitialized := true;
      end;

      PlatesortType := 0;
      ComboBoxGlobalPubDateFilter.Top := 4;
      // (ActionToolBarpagefilter.Height - ComboBoxGlobalPubDateFilter.Height) DIV 2;

      FrameDeviceplacer1.Ndevicecontrolframes := 0;

      for i := 1 to 20 do
      begin
        DeleteFile(TUtils.GetTempDirectory() + '\' + IntToStr(i) +
          'Netconnect.bat');
        DeleteFile(TUtils.GetTempDirectory() + '\' + IntToStr(i) +
          'NetConResult.txt');
      end;

      Prefs.LoadShortCuts();

      InitProdCols();

      if not System.SysUtils.DirectoryExists
        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs')
      then
        CreateDir(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
          'sqllogs');

      FormMain.writeinitlog('activate 1');
      firstwc := true;

      NMultiruns := 0;
      colrefrecker := 1;
      // LastPageControlMain := -1;

      lastconfiglogin := 0;
      NPlatetemplateArray := 0;
      FormMain.writeinitlog('activate 4');
      FormImage.Imagedealericon.Picture := FormImage.Imagedelareil.Picture;
      FormMain.writeinitlog('activate 5');

      scoller := 0;
      PBExListviewdatalisthorzpos := 0;
      ignorescroll := false;
      sortdirectiondown := true;
      cursortlistcol := -1;

      GetLocaleFormatSettings(0, localdatetimesettings);
      terminateprogram := false;
      Listsortcol := -99;
      FormImage.DateTimePickerakt.Time := 0;

      FormMain.writeinitlog('activate 8');
      if writelangiagefile then
        InfraLanguage1.makelanguagefile('Default');

      FormMain.writeinitlog('activate 9');

      Panel21.DoubleBuffered := true;
      PBExListviewOKLog.DoubleBuffered := true;
      PBExListviewthumbnail.DoubleBuffered := true;
      ProgressBaredition.DoubleBuffered := true;
      ProgressBarmain.DoubleBuffered := true;
      PBExListviewplateinfo.DoubleBuffered := true;

      FormMain.writeinitlog('activate 10');

      if (Prefs.StartupWindowsSize = 1) then
        FormMain.WindowState := wsMaximized
      else if (Prefs.StartupWindowsSize = 2) then
        ActionUpperHalfScreenExecute(Self)
      else if (Prefs.StartupWindowsSize = 3) then
        ActionLowerHalfScreenExecute(Self);

      FormImage.DateTimePickerakt.Time := 0;
      Pressviewzoom := 100;

      copypressrun := nil;

      // Splash screen..
      FormInit.Show;

      FormMain.writeinitlog('activate 13');

      pladatedataselection := 1;

      tNames1 := tNames.Create(FormMain);

      Loadloggridsize;

      if (Prefs.Proversion > 0) then
      begin
        Actionprogressforce.Visible := false;
        ActionPlateproduce.Visible := false;
        GroupBoxpageslocation.Visible := false;
      end;

      if Actionplatedetails.Checked then
      begin
        PlateviewMain.Align := alnone;
        PlateviewMain.Height := 50;
        GroupBoxPlatedetails.Visible := true;
        Splitterplatedetail.Visible := true;
        PlateviewMain.Align := alclient;
      end
      else
      begin
        GroupBoxPlatedetails.Visible := false;
        Splitterplatedetail.Visible := false;
      end;

      StringGridReport.RowCount := 2;
      StringGridReport.cells[0, 0] := InfraLanguage1.Translate('Publ.Date');
      StringGridReport.cells[1, 0] := InfraLanguage1.Translate('Publication');
      StringGridReport.cells[2, 0] := InfraLanguage1.Translate('Edition');
      StringGridReport.cells[3, 0] := InfraLanguage1.Translate('Section');
      StringGridReport.cells[4, 0] := InfraLanguage1.Translate('Location');
      StringGridReport.cells[5, 0] := InfraLanguage1.Translate('Press');
      StringGridReport.cells[6, 0] := InfraLanguage1.Translate('Page');
      StringGridReport.cells[7, 0] := InfraLanguage1.Translate('UniquePage');
      StringGridReport.cells[8, 0] := InfraLanguage1.Translate('CopyNumber');
      StringGridReport.cells[9, 0] := InfraLanguage1.Translate('Color');
      StringGridReport.cells[10, 0] := InfraLanguage1.Translate('Status');
      StringGridReport.cells[11, 0] := InfraLanguage1.Translate('Approved');
      StringGridReport.cells[12, 0] := InfraLanguage1.Translate('Released');
      StringGridReport.cells[13, 0] := InfraLanguage1.Translate('Inputtime');
      StringGridReport.cells[14, 0] := InfraLanguage1.Translate('Approvetime');
      StringGridReport.cells[15, 0] := InfraLanguage1.Translate('Outputtime');
      StringGridReport.cells[16, 0] := InfraLanguage1.Translate('Device');
      StringGridReport.cells[17, 0] := InfraLanguage1.Translate('Deadline');
      StringGridReport.cells[18, 0] := InfraLanguage1.Translate('Comment');
      StringGridReport.cells[19, 0] := InfraLanguage1.Translate('Pageindex');

      FormMain.writeinitlog('activate 14');

      ini := TIniFile.Create(Commentconfigfilename);
      Formpressruninfo.ComboBoxComment.Items.Clear;
      for i := 1 to ini.ReadInteger('Commentnames', 'numberof', 0) do
      begin
        Formpressruninfo.ComboBoxComment.Items.Add
          (ini.ReadString('Commentnames', IntToStr(i), ''));
      end;
      ini.free;

      FormMain.writeinitlog('activate 15');

      // Load DB data

      ActivateOK := ActivateData(false);

      // All tNames are now loaded from DB

      if (Length(Prefs.TowerNameTranslation) < 1) then
        GroupBoxtowerfilter.Visible := false
      else
      begin
        ComboBoxplatetowersfilter.Items.Clear;
        ComboBoxplatetowersfilter.Items.Add(InfraLanguage1.Translate('All'));

        for i := 0 to Length(Prefs.TowerNameTranslation) do
          ComboBoxplatetowersfilter.Items.Add
            (Prefs.TowerNameTranslation[i].Key);
        ComboBoxplatetowersfilter.ItemIndex := 0;
      end;
    end; // not activated

    if ActivateOK then
    begin
      // LastPageControlMain := PageControlMain.ActivePageIndex;

      screen.Cursor := crdefault;

      FormMain.writeinitlog('activate 17');

      // TimerUknown.Enabled := true;

      FormMain.writeinitlog('activate 19');
      if Prefs.LoggedIN then
      begin
        activated := true;
        // loadpaths;
        // logontopaths;
      end;
    end;
  Finally
    if (firstwc) and (activated) then // This is first time called (firstwc)
    begin

      // Close splash screen
      if FormInit <> nil then
      begin
        FormInit.Close;
        FormMain.SetFocus;
      end;

      FormMain.writeinitlog('activate 20');
      activetoolbar := ActionToolBarpageactions;
      FormMain.writeinitlog('activate 21');
      Application.OnIdle := Onidlehandler;
      FormMain.writeinitlog('activate 22');
      for i := 0 to PageControlMain.PageCount - 1 do
      begin
        if PageControlMain.pages[i].Visible then
          PageControlMain.ActivePageIndex := i;
      end;
      FormMain.writeinitlog('activate 23');
      TimerautorefreshFormMain.Enabled := true;
    end;

    FormMain.writeinitlog('activate 25');
    MainUpdateing := false;
    FormMain.writeinitlog('activate 26');

  end;

  // Show Prefs.Debug icon
  if Prefs.Debug then
  begin
    for i := 0 to ActionMainMenuBar1X.ActionClient.Items.Count - 1 do
    begin
      if ActionMainMenuBar1X.ActionClient.Items[i].ImageIndex = 268 then
        ActionMainMenuBar1X.ActionClient.Items[i].Visible := true;
    end;
    ActionDebugtools.Visible := true;
  end;

  ActionthumbRecalc.Enabled := Prefs.AllowPaginaRecalculate;

  CheckBoxNounplanned.Checked := Prefs.DefaultHidePagePlans;
  CheckBoxthumbappliedfilter.Checked := Prefs.DefaultThumbnailOnlyPagePlans;

  FormMain.writeinitlog('ON activate Done');

  FrameDeviceplacer1.Timerdeviceupdate.Enabled := Prefs.ShowDeviceControl;
  if isstarting then
  begin
    Application.ProcessMessages;
    PageControlMainChange(Self);
    Application.ProcessMessages;

  end;
  isstarting := false;

  // Start timers.
  if ActivateOK then
  begin
    FormMain.writeinitlog('activate 16');

    Timerautorefresh.Interval := Prefs.AutoRefreshSpeed * 1000;
    Timerautorefreshcount := 0;
    Timerautorefresh.Enabled := true;
  end;

  Timerautupdate.Enabled := false;

  if Prefs.StartupTab > 0 then
  begin
    PageControlMain.ActivePageIndex := Prefs.StartupTab;
    PageControlMainChange(Self);
  end;

  // Er CCRemote muligt? .exe fil og tabel skal være der.
  if FileExists('CCRemote.exe') then
  Begin
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add
      ('select * from dbo.sysobjects where name = ''FileCenterState''');
    Datam1.Query3.Open;
    if not Datam1.Query3.Eof then
      ActionRemoteControl.Enabled := true
    else
      ActionRemoteControl.Enabled := false;
    Datam1.Query3.Close;
  End
  else
    ActionRemoteControl.Enabled := false;

  Timerblink.Enabled := true;
  screen.Cursor := crdefault;
  StartuPdone := true;

  FormMain.writeinitlog('ON activate Done 2');
  MainUpdateing := false;
end;

// load or reload database names etc.  ONLY called from FormActivate
function TFormMain.ActivateData(ReActivate: Boolean): Boolean;
Const
  defeventson: set of Byte = [6, 10, 16, 20, 26, 30, 46, 50, 70, 71,
    80, 81, 90];

Var
  skaldeklarerespgadll: Integer;
  i, res: Integer;
  Noplanevents: Boolean;
  AktTservername, T2: string;
  Aresulttat: Integer;
  ini: TIniFile;
  L: TListItem;
  CustomTBLOK: Boolean;
  T, inifilename: string;
  Aaction: TAction;
  Foundmainserver: Boolean;
  Foundmainplancenterserver: Boolean;
  Mservn, Mservshare, mservuser, mservpass: string;
  aword: Word;
  Pathtologon: string;
  founddsn, foundtable: Boolean;
  Logonerror: String;
  f: TSearchRec;
  fres: Integer;
  Lid: Integer;
  defeventon: Boolean;
  NofileserversTable, Tommorowday: Tdate;
  found: Boolean;
  FoundPlanCenterShare: Boolean;
  UserGroup: string;
  CurrentADGroupList: Tstringlist;
  DefaultUserGroupName: string;
  sList: Tstringlist;
  HasAdGroup: Boolean;
  FoundAdminGroupList: Tstringlist;

   FormLogin : TFormLogin;

begin
  try
   FormLogin :=   TFormLogin.Create(nil);
   try
    CurrentADGroupList := Tstringlist.Create;
    FoundAdminGroupList := Tstringlist.Create;
    sList := Tstringlist.Create;
    DefaultUserGroupName := '';
    Debugautorefreshing := false;
    Foundmainplancenterserver := false;
    if Prefs.LoginError then
    begin
      result := false;
      exit;
    end;

    FormMain.writeinitlog('activate data 1' + ' ' + BoolToStr(result));

    Orgpdffilepossible := false;
    LastnewtreetableCash := EncodeDate(2000, 1, 1);
    NnewtreetableCash := 0;
    SetLength(newtreetableCash, 1);

    MainUpdateing := true;
    BKSelset[1].ISset := false;
    BKSelset[1].BKslpubdate := '';
    BKSelset[1].BKslpublication := '';
    BKSelset[1].BKsledition := '';
    BKSelset[1].BKslsection := '';
    BKSelset[2].ISset := false;
    BKSelset[2].BKslpubdate := '';
    BKSelset[2].BKslpublication := '';
    BKSelset[2].BKsledition := '';
    BKSelset[2].BKslsection := '';

    CheckListBoxprodpubldate := EncodeDate(1975, 1, 1);
    DateTimePickerlogfromdate.Date := NOW;
    DateTimePickerlogtodate.Date := NOW;

    DateTimePickerlogfromdate.Date :=
      IncDay(DateTimePickerlogfromdate.Date, -1);
    DateTimePickerlogtodate.Date := IncDay(DateTimePickerlogtodate.Date, 1);

    DateTimePickerlogfromtime.DateTime := DateTimePickerlogfromdate.Date;

    DateTimePickerlogfromtime.Time := EncodeTime(6, 0, 0, 0);
    DateTimePickerlogtotime.Time := EncodeTime(23, 0, 0, 0);

    pagetableloadstatus := false;

    (* if (Prefs.TreeShowAllLocationOption) then
      begin
      CheckBoxAllLocationsPa.Checked := Prefs.ShowAllLocationsSeparations;
      CheckBoxThumball.Checked := Prefs.ShowAllLocationsThumbnails;
      CheckBoxAllLocationsProd.Checked := Prefs.ShowAllLocationsProduction;
      end
      else
      begin
      CheckBoxAllLocationsPa.Checked := false;
      CheckBoxThumball.Checked := false;
      CheckBoxAllLocationsProd.Checked := false;
      end;
    *)
    if ReActivate then
    begin
      NPlatetemplateArray := 0;

      // TimerUknown.Enabled := false;
      Timerautorefresh.Interval := Prefs.AutoRefreshSpeed * 1000;
      Timerautorefreshcount := 0;
      Timerautorefresh.Enabled := false;

      // 'Soft' stop signal to tree update thread
      TreeStopit := true;

      Application.ProcessMessages;
      sleep(1000);

      // Kill tree update thread
      if (workerThreadTreeUpdate <> nil) then
      begin
        if (workerThreadTreeUpdate.running) then
        begin
          i := 1;
          repeat
            Application.ProcessMessages;
            sleep(100);
            Inc(i);
          until (not workerThreadTreeUpdate.running) or (i > 100);
        end;
      end;

      if (workerThreadTreeUpdate <> nil) then
        workerThreadTreeUpdate.terminateit := true;

      Application.ProcessMessages;
      sleep(2000);
      if (workerThreadTreeUpdate <> nil) then
        workerThreadTreeUpdate.free;
      Datam1.CRSQLConnectionplan.Close;

      Application.ProcessMessages;
      sleep(120);
    end;

    StatusBar1.Panels[2].text := 'Version: ' +
      TUtils.GetVersion(programminorversion);

    /// //////////////////////////////////////////
    /// Connect TemplateDialog DLL to database
    /// //////////////////////////////////////////

    i := 0;
    repeat
      Aresulttat := ReConnectDB(DLLErrormessage);
      if Aresulttat <> 1 then
      begin
        Prefs.LoginError := true;
        result := false;
        T := DLLErrormessage;
        sleep(500);
      end;
      Inc(i);
    until (Aresulttat = 1) or (i > 10);
    if Aresulttat <> 1 then
    begin
      MessageDlg(T, mtError, [mbOk], 0);
      Application.Terminate;
      exit;
    end
    else
      result := true;

    result := LoadDBIniPrefs(); // terminates app if failed

    /// //////////////////////////////////////////////////
    /// Make connection to database for the first time!
    /// //////////////////////////////////////////////////

    FormMain.writeinitlog('activate data LoadDBIniPrefs OK');

    if not DataM1.ConnectToServer() then
    begin
      FormMain.writeinitlog('activate data connecttoserver error');
      result := false;
    end
    else
    begin
      FormMain.writeinitlog('activate data connecttoserver OK');
      result := true;
    end;

    FormMain.writeinitlog('activate data 2 ' + BoolToStr(result));
    if not result then
      exit;

    PlanLock := false;

    if Prefs.UseCustomTowerNames then
      FormCustomTower.LoadTowerData;

    (*
      FormMain.writeinitlog('activate data 3' + ' ' +booltostr(result));
      if not result then
      begin
      for i := 0 to ActionManager1.actioncount - 1 do
      begin
      Taction(ActionManager1.Actions[i]).Enabled := false;
      end;
      end;
    *)

    TabSheetunknownpdf.TabVisible := false;

    FormMain.writeinitlog('activate data 4' + ' ' + BoolToStr(result));

    /// ///////////////////////////////////////////////
    /// Load ID names and determine database features
    /// //////////////////////////////////////////////

    result := InitGlobalData();

    FormMain.writeinitlog('activate initglobaldata ' +
      IntToStr(initglobaldataDebug) + ' ' + BoolToStr(result));

    // All dbnames loaded now!

    /// ////////////////////////////////
    /// Load press name prefrence etc
    /// ////////////////////////////////

    Prefs.LoadIniFileAfterDBInit();

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('SELECT ProcessID,ProcessType FROM ProcessConfigurations (NOLOCK)');
    Datam1.Query1.SQL.Add('WHERE ProcessType = 999');
    Datam1.Query1.Open;
    Noplanevents := Datam1.Query1.Eof;
    if not Datam1.Query1.Eof then
      PLCProcessID := Datam1.Query1.Fields[0].AsInteger;
    Datam1.Query1.Close;

    Lid := tNames1.locationnametoid(tNames1.locationnames[0]);

    if Noplanevents then
    begin
      PLCProcessID := 999;
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('SELECT MAX(ProcessID)+1 FROM ProcessConfigurations (NOLOCK)');
      Datam1.Query1.Open;
      if not Datam1.Query1.Eof then
        PLCProcessID := Datam1.Query1.Fields[0].AsInteger;
      Datam1.Query1.Close;

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Insert ProcessConfigurations (ProcessID,MachineName,ProcessType,LocationID,ProcessTitle,Enabled,CurrentState)');
      Datam1.Query1.SQL.Add('Values (' + IntToStr(PLCProcessID) + ',' + '''' +
        'Client' + '''' + ',999,' + IntToStr(Lid) + ',' + '''' + 'Plancenter' +
        '''' + ',0,0)');
      if Prefs.Debug then
        Datam1.Query1.SQL.SaveToFile
          (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'
          + 'InsertPLCproc.SQL');
      trysql(Datam1.Query1);
    end;

    ComboBoxlogevent.Items.Clear;
    ComboBoxlogevent.Items.Add('All');
    for i := 0 to Length(Prefs.EventLogs) - 1 do
    begin
      if (Prefs.EventLogs[i].Enabled) then
        ComboBoxlogevent.Items.Add(Prefs.EventLogs[i].Name);
    end;

    SetLength(Prefs.StatusWarningList, 0);
    i := 0;
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('');
    Datam1.Query1.SQL.Add('select StatusNumber,StatusName from StatusCodes');
    Datam1.Query1.SQL.Add('order by StatusNumber');
    Datam1.Query1.Open;
    while not Datam1.Query1.Eof do
    begin
      T := Datam1.Query1.Fields[0].AsString;
      if T[Length(T)] = '6' then
      begin
        SetLength(Prefs.StatusWarningList, i + 1);
        Prefs.StatusWarningList[i].Name := Datam1.Query1.Fields[1].AsString;
        Prefs.StatusWarningList[i].Enabled := false;
        Inc(i);
        // CheckListBoxwarnstatus.items.add(DataM1.Query1.fields[1].asstring);
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;

      SetLength(Prefs.ExtStatusWarningList, 0);
      i := 0;
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('');
      Datam1.Query1.SQL.Add
        ('select StatusNumber,StatusName from ExternalStatusCodes');
      Datam1.Query1.SQL.Add('order by StatusNumber');
      Datam1.Query1.Open;
      while not Datam1.Query1.Eof do
      begin
        SetLength(Prefs.ExtStatusWarningList, i + 1);
        Prefs.ExtStatusWarningList[i].Name := Datam1.Query1.Fields[1].AsString;
        Prefs.ExtStatusWarningList[i].Enabled := false;
        Inc(i);
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;

      Prefs.LoadWarningSystem();

      ComboBoxlogevent.ItemIndex := 0;

      FormMain.writeinitlog('activate data 5' + ' ' + BoolToStr(result));

      // FormMain.Refresh;

      if not result then
      begin
        FormMain.writeinitlog('Error loading global data');
        MessageDlg(InfraLanguage1.Translate('Error loading global data'),
          mtInformation, [mbOk], 0);
      end;

      FormMain.writeinitlog('activate data 6' + ' ' + BoolToStr(result));

      inittypes.LoadColorNames;

      FormMain.writeinitlog('activate data 6.1' + ' ' + BoolToStr(result));

      Action5.Enabled := PressRunOutputMethodTablePossible and
        OutputMethodNamesTablePossible;

      FormMain.writeinitlog('activate data 6.3' + ' ' + BoolToStr(result));

      X := 0;

      if TreeViewpagelist.Items.Count > 0 then
        TreeViewpagelist.Selected := TreeViewpagelist.Items.GetFirstNode.
          GetFirstChild;

      FormMain.writeinitlog('activate data 6.4' + ' ' + BoolToStr(result));

      /// ///////////////////////
      /// Load GeneralPreferences
      /// ///////////////////////

      Datam1.Query1.SQL.Clear;
     // Datam1.Query1.SQL.Add('Select * from GeneralPreferences (NOLOCK)');
      //                                0          1               2             3             4              5                   6                7                8          9         10           11         12        13            14            15        16
      Datam1.Query1.SQL.Add('Select ServerName,ServerUserName,ServerPassword, ServerShare,ServerFilePath,ServerPreviewPath, ');
      Datam1.Query1.SQL.Add('ServerThumbnailPath,ServerConfigPath,WebProofPath,WebUseFTP,WebFTPuser,WebFTPpw,WebFTPfolder,WebFTPport, ');
      Datam1.Query1.SQL.Add('CopyProofToWeb,WebUseFTP,WebFTPserver from GeneralPreferences (NOLOCK)');
      Tryopen(Datam1.Query1);
      if not Datam1.Query1.Eof then
      begin
        FormMain.writeinitlog('activate data 7' + ' ' + BoolToStr(result));

        Prefs.CCfilesPath := Datam1.Query1.Fields[4].AsString; // Datam1.Query1.FieldByName('ServerFilePath').AsString;
        Prefs.CCPreviewPath := Datam1.Query1.Fields[5].AsString; // Datam1.Query1.FieldByName('ServerPreviewPath').AsString;
        Prefs.CCThumbnailPath := Datam1.Query1.Fields[6].AsString; // Datam1.Query1.FieldByName('ServerThumbnailPath').AsString;
        Prefs.CCWebProofPath := Datam1.Query1.Fields[8].AsString; // Datam1.Query1.FieldByName('WebProofPath').AsString;
        Prefs.CopyToWebCenter := Datam1.Query1.Fields[14].AsInteger = 1; // Datam1.Query1.FieldByName('CopyProofToWeb').AsInteger = 1;

        Mservn := Datam1.Query1.Fields[0].AsString; //Datam1.Query1.FieldByName('ServerName').AsString;
        mservuser := Datam1.Query1.Fields[1].AsString; //Datam1.Query1.FieldByName('ServerUserName').AsString;
        mservpass := TUtils.DecodeBlowfish(Datam1.Query1.Fields[2].AsString); // Datam1.Query1.FieldByName('ServerPassword').AsString;
        Mservshare := Datam1.Query1.Fields[3].AsString; //Datam1.Query1.FieldByName('ServerShare').AsString;


        MainCCDATA := Uppercase(Prefs.CCfilesPath);

        MAINCC := '\\' + Mservn + '\' + Mservshare;
        PDFarchivepath := MAINCC + '\CCPDFArchive';
        PDFUnknownpath := MAINCC + '\CCPDFUnknownFiles';

        Delete(MainCCDATA, pos('CCFILES', MainCCDATA), 100);
        MainCCConfig := IncludeTrailingBackSlash(MainCCDATA) + 'CCCONFIG\';
        PageControlfiles.ActivePageIndex := 0;

        FormMain.writeinitlog('activate data 8' + ' ' + BoolToStr(result));

        if localmode then
          MAINCC := MainCCDATA;

        Prefs.webisftp := Datam1.Query1.Fields[15].AsInteger = 1;  // Datam1.Query1.FieldByName('WebUseFTP').AsInteger = 1;
        Prefs.ftpservername := Datam1.Query1.Fields[16].AsString; // Datam1.Query1.FieldByName('WebFTPserver').AsString;
        Prefs.ftpusername :=  Datam1.Query1.Fields[10].AsString; // Datam1.Query1.FieldByName('WebFTPuser').AsString;
        Prefs.ftppasword := Datam1.Query1.Fields[11].AsString; // Datam1.Query1.FieldByName('WebFTPpw').AsString;
        Prefs.ftpfolder := Datam1.Query1.Fields[12].AsString; // Datam1.Query1.FieldByName('WebFTPfolder').AsString;
        Prefs.ftpport :=  Datam1.Query1.Fields[13].AsInteger;  // Datam1.Query1.FieldByName('WebFTPport').AsInteger;

        Commentconfigfilename := IncludeTrailingBackSlash(Datam1.Query1.Fields[7].AsString) + 'Commentnames.ini'; //IncludeTrailingBackSlash(Datam1.Query1.FieldByName('ServerConfigPath').AsString) + 'Commentnames.ini';
      end;
      Datam1.Query1.Close;

      // ##### NAN 20150930
      // GetPosiblePubdates(-1);

      ComboBoxGlobalPubDateFilter.ItemIndex := Prefs.DefaultDateSelect;

      Mainerrorfolder := IncludeTrailingBackSlash(MAINCC) + 'CCerrorfiles';
      Formprodplan.planisactive := false;

      GMainlocationID := -1;

      Orgpdffilepath := IncludeTrailingBackSlash(MAINCC) + 'CCPDFfiles';
      Orgpdffilepossible := false;

      fres := FindFirst(IncludeTrailingBackSlash(MAINCC) + 'CCPDFfiles\*.pdf',
        faAnyFile, f);
      if fres = 0 then
        Orgpdffilepossible := true;
      FindClose(f);

      Formtabs.DBset := false;

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('SELECT TOP 1 * FROM UserGroupNames');
      Datam1.Query1.Open;
      for i := 0 to Datam1.Query1.Fields.Count - 1 do
      begin
        T := Datam1.Query1.Fields[i].FieldName;
        if Uppercase(T) = 'PLANCENTERVIEWS' then
        begin
          Formtabs.DBset := true;
          break;
        end;
      end;
      Datam1.Query1.Close;
      FormMain.writeinitlog('activate data 11' + ' ' + BoolToStr(result));

      if SetplannameINpressrunID then
        DBVersion := 2;
      (* Datam1.Query3.SQL.Clear;
        Datam1.Query3.SQL.Add('select max pressrunid from pressrunid');
        Try
        Datam1.Query3.Open;
        SetplannameINpressrunID := Datam1.Query3.Fields.Count >= 27;
        Datam1.Query3.Close;


        Except
        end;
      *)

      DBVersion := 2;
      if DBVersion > 1 then
        MAXColsortcount := 117
        // 114 før  hvis jeg vil havde de andre med må jeg bede om op til 109
      else
        MAXColsortcount := 98;

      FormMain.writeinitlog('activate data 12' + ' ' + BoolToStr(result));
      Formtabs.loadtabsettings;
      FormMain.writeinitlog('activate data 13' + ' ' + BoolToStr(result));

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select RemoteFolder,locationid from locationnames (NOLOCK) ');

      Tryopen(Datam1.Query1);
      while not Datam1.Query1.Eof do
      begin
        if Uppercase(Datam1.Query1.Fields[0].AsString)
          = Uppercase(Prefs.CCfilesPath) then
        begin
          GMainlocationID := Datam1.Query1.Fields[1].AsInteger;
          break;
        end;
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;

      Prefs.CurrentWindowsUser := '';
      Prefs.CurrentWindowsDomain := '';
      Prefs.CurrentADGroups := '';

      // ### NAN 20170502 - Get current logged in user
      if (Prefs.UseWindowsUser) then
      begin
        if (Prefs.SimpleUserLookup) then
        begin
          Prefs.CurrentWindowsUser := ADLogin.GetCurrentUserSimple();
          Prefs.CurrentWindowsDomain := ADLogin.GetCurrentDomainSimple();
        end
        else
        begin
          Prefs.CurrentWindowsUser := ADLogin.GetCurrentUser();
          Prefs.CurrentWindowsDomain := ADLogin.GetCurrentDomain(Prefs.CurrentWindowsUser);
        end;

        if (Prefs.FixedDomain <> '') then
          Prefs.CurrentWindowsDomain := Prefs.FixedDomain;
        Prefs.CurrentADGroups := ADLogin.GetCurrentUserGroupList
          (Prefs.CurrentWindowsDomain);

        // TEST Prefs.CurrentWindowsUser := 'testjcm';

        FormMain.writeinitlog('CurrentWindowsUser ' + Prefs.CurrentWindowsUser);
        FormMain.writeinitlog('CurrentWindowsDomain ' +
          Prefs.CurrentWindowsDomain);
        FormMain.writeinitlog('CurrentADGroups ' + Prefs.CurrentADGroups);

        FormAbout.LabelWindowsUserName.caption := Prefs.CurrentWindowsUser;
        FormAbout.LabelWindowsDomain.caption := Prefs.CurrentWindowsDomain;

        if (Prefs.CurrentADGroups <> '') then
          CurrentADGroupList.text := StringReplace(Prefs.CurrentADGroups, ',',
            sLineBreak, [rfReplaceAll]);
        FormAbout.MemoADGroups.Lines := CurrentADGroupList;
      end;

      FormMain.writeinitlog('ADGroups split OK');

      if (Prefs.UseWindowsUser) and (AdmGroupPublicationsPossible) and
        (Prefs.UseAdministrativeGroups) and (Prefs.UseADGroups) then
      begin
        if (Prefs.CurrentWindowsUser <> '') and (Prefs.CurrentADGroups <> '')
        then
        begin

          // Do actual user authentication test - check if ADGroup exists in list of Administrative groups
          FoundAdminGroupList.Clear();
          for i := 0 to CurrentADGroupList.Count - 1 do
          begin
            if (FormUsers.HasAdminGroupName(CurrentADGroupList[i])) then
            begin
              FoundAdminGroupList.Add(CurrentADGroupList[i]);
            end;
          end;

          if (FoundAdminGroupList.Count = 0) then
          begin
            If FormInit.Showing then
              FormInit.Close;

            MessageDlg(InfraLanguage1.Translate
              ('Unknown user name - aborting login'), mtError, [mbOk], 0);
            Application.Terminate;
            exit;
          end;

          FormMain.writeinitlog('ADGroup(s) found in system : ' +
            FoundAdminGroupList[0]);

          // From current Windows login AD Group list - find match in table AdmGroupUserGroupRelations so that we can deduct UserGroup
          // CurrentADGroupList.Text := StringReplace(Prefs.CurrentADGroups,',',sLineBreak,[rfReplaceAll]);
          DefaultUserGroupName := '';
          if (AdmGroupUserGroupRelationsPossible) then
          begin
            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add
              ('SELECT AdmGroupName,UserGroupName FROM AdmGroupUserGroupRelations');
            Datam1.Query1.Open;
            while not Datam1.Query1.Eof do
            begin
              for i := 0 to CurrentADGroupList.Count - 1 do
              begin
                if (CompareText(Datam1.Query1.Fields[0].AsString,
                  CurrentADGroupList[i]) = 0) then
                begin
                  DefaultUserGroupName := Datam1.Query1.Fields[1].AsString;
                  break;
                end;
              end;
              if (DefaultUserGroupName <> '') then
                break;
              Datam1.Query1.Next;
            end;
            Datam1.Query1.Close;
          end;
          FormMain.writeinitlog('DefaultUserGroupName ' + DefaultUserGroupName +
            ' (ID ' + IntToStr(FormUsers.GetUserGroupID
            (DefaultUserGroupName)) + ')');

          // Windows user has legal AD Group AND we have ound a CC User group.

          // If no  CC user matches current Window user - auto-create user now..
          if (not FormUsers.UserExists(Prefs.CurrentWindowsUser)) then
          begin
            FormMain.writeinitlog('User does not exist - creating...');
            if (not FormUsers.CreateUser(Prefs.CurrentWindowsUser,
              DefaultUserGroupName, FoundAdminGroupList)) then
              FormMain.writeinitlog('ERROR CreateUser failed!!');
          end
          else
          begin
            FormMain.writeinitlog('User does exist - modifying to usergroup ' +
              DefaultUserGroupName + ' Admin group ' + FoundAdminGroupList[0]
              + ' ....');

            // User exists - but default usergroup may have to change if AD groups are now different
            // if (CompareText(UserGroup, DefaultUserGroupName) <> 0) then
            if (not FormUsers.ChangeUser(Prefs.CurrentWindowsUser,
              DefaultUserGroupName, FoundAdminGroupList)) then
              FormMain.writeinitlog('ERROR ChangeUser failed!!');

          end;
        end;
      end;

      // If windows user was used - it is now registered in correct user group and with updated admin groups

      FoundAdminGroupList.free;

      /// ///////////////////////////
      // Show login dialog
      /// ///////////////////////////

      Prefs.MayConfigure := false;
      Prefs.MayReimage := true;
      Prefs.MayKillColor := true;
      Prefs.MayRunProducts := true;
      Prefs.MayDeleteProducts := true;
      Prefs.MayApprove := true;
      Prefs.ReadOnly := false;

      FormUsers.LoadUsers();

      Prefs.LoggedIN := true;



      if (Prefs.UseWindowsUser) and (Prefs.CurrentWindowsUser <> '') then
      begin
        Prefs.Username := Prefs.CurrentWindowsUser;
        FormUsers.Currentuser := Prefs.CurrentWindowsUser;
        Prefs.UsernameOnStatusbar := Prefs.Username;
      end;

      FormMain.writeinitlog('activate data 18 (LOGIN)' + ' ' + BoolToStr(result));
      if Prefs.NoLoginPrompt then
      begin
        if (Prefs.AutoLoginUser <> '') and (FormUsers.NumberOfUsers > 1) then
        begin
          Prefs.Username := Prefs.AutoLoginUser;
          formlogin.EditPassword.text := Prefs.AutoLoginPassword;
        end
        else
        begin
          Prefs.Username := 'admin';
          formlogin.EditPassword.text := 'root';
        end;
        Prefs.UsernameOnStatusbar := Prefs.Username;
        FormUsers.userlevel := FormUsers.chkusername(Prefs.Username,
          formlogin.EditPassword.text);
        if (FormUsers.userlevel <> -1) then
          Prefs.LoggedIN := true;
      end
      else
      begin
        if ((FormUsers.NumberOfUsers = 1) and (Prefs.AutoLogin)) or ((Prefs.UseWindowsUser) and (Prefs.CurrentWindowsUser <> '')) then
        begin
          Prefs.Username := FormUsers.Currentuser;
          Prefs.UsernameOnStatusbar := Prefs.Username;
          FormUsers.userlevel := FormUsers.ChkUsernameNoPassword(Prefs.Username);
          if (FormUsers.userlevel <> -1) then
            Prefs.LoggedIN := true;
        end
        else
        begin

          // Close splashscreen
          If FormInit.Showing then
            FormInit.Close;

          formlogin.ShowModal;

          if not Prefs.LoggedIN then
          begin
            activated := false;
            result := false;
            Application.Terminate;
            Exit;
          end;
        end;
      end;

      FormMain.writeinitlog('activate data 19 (login done)' + ' ' +
        BoolToStr(result));
      if Prefs.LoggedIN then
      begin

        Prefs.ISadministrator := FormUsers.ISadministrator(Prefs.Username);

        StatusBar1.Panels[3].text := 'Current user: ' + Prefs.UsernameOnStatusbar; // Prefs.Username;


        StatusBar1.Panels[7].text := 'Database: ' + Prefs.DBServerName + ' ' + Prefs.DBDatabase;
        if Prefs.webisftp then
        begin
          if not FormFTP.Testconnection then
          begin
            MessageDlg(InfraLanguage1.Translate
              ('Cannot connect to web ftp server'), mtInformation, [mbOk], 0);
          end;
        end;

        if not FormUsers.ISadministrator(Prefs.Username) then
        begin
          FormUsers.makeuseredition(false, Prefs.issuperuser,
            Prefs.Username);

          if (AdmGroupPublicationsPossible) and (Prefs.UseAdministrativeGroups)
          then
          begin
            FormAbout.MemoADGroups.Lines := CurrentADGroupList;
            T := FormUsers.GetAdministrativeGroupList(Prefs.Username);
            if (T <> '') then
            begin
              sList.text := StringReplace(T, ',', sLineBreak, [rfReplaceAll]);
              FormAbout.MemoAdminGroups.Lines := sList;
            end;

            FormUsers.MakePublicationWhereListsAdministrativeGroups(false,
              Prefs.issuperuser, Prefs.Username);
            T := FormUsers.GetPublicationsFromAdministrativeGroupList
              (Prefs.Username);
            if (T <> '') then
            begin
              sList.text := StringReplace(T, ',', sLineBreak, [rfReplaceAll]);
              FormAbout.MemoPublications.Lines := sList;
            end;
            sList.free;

          end;

          FormAbout.LabelUserGroup.caption := FormUsers.GetUserGroupOfUser
            (Prefs.Username);

        end;

        if (Prefs.DefaultLocation) = '' then
          Prefs.DefaultLocation := tNames1.locationnames[0];

        ThisplancenterlocationID := tNames1.locationnametoid
          (Prefs.DefaultLocation);
        if ThisplancenterlocationID = -1 then
        begin
          Prefs.DefaultLocation := tNames1.locationIDtoname(1);
          ThisplancenterlocationID := tNames1.locationnametoid
            (Prefs.DefaultLocation);
        end;

        FormMain.writeinitlog('activate data 20' + ' ' + BoolToStr(result));


        // Set Unknown plan page panel
        spGetAllUnplannedPagesPossible := false;
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('select * from dbo.sysobjects');
        Datam1.Query1.SQL.Add('where name = ' + '''' +
          'spGetAllUnplannedPages' + '''');
        Datam1.Query1.Open;
        if not Datam1.Query1.Eof Then
        begin
          GroupBox3.Visible := Prefs.ShowPanelUnknownFiles;
          Panel4.Realign;
          spGetAllUnplannedPagesPossible := true;
          // TimerUnplanPage.Enabled := Prefs.ShowPanelUnknownFiles;
          // TimerUnplanPage.Interval := Prefs.ShowPanelUnknownFilesRefreshTime * 60000;
        end
        else
        begin
          GroupBox3.Visible := false;
          Panel4.Realign;
          // TimerUnplanPage.Enabled := False;
          // TimerUnplanPage.Interval := 1;

        end;
        Datam1.Query1.Close;

        // staok := false;
        Splitterreporttree.Visible := false;
        // ##


        // Prefs.SetCylindersMaxPagesOldInk;

        FormMain.writeinitlog('activate data 22' + ' ' + BoolToStr(result));

        // Determine sql date format.. (detects funny french format)
        i := -1;
        sqldateformat := 'YYYY-MM-DD';
        SQLdatetimeformat := 'YYYY-MM-DD HH:NN';
        sqltimeformat := 'HH:NN';
        SQLnotime := '1975-1-1';

        try
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('SELECT CAST(' + '''' + '2000-11-29 23:59' +
            '''' + ' AS datetime)');
          Datam1.Query1.ExecSQL(false);
          Datam1.Query1.Close;
          i := 1;
        except
        end;

        if i = -1 then
        begin
          try

            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add('SELECT CAST(' + '''' + '2000-29-11 23:59' +
              '''' + ' AS datetime)');
            Datam1.Query1.ExecSQL(false);
            Datam1.Query1.Close;

            sqldateformat := 'YYYY-DD-MM';
            SQLdatetimeformat := 'YYYY-DD-MM HH:NN';
            sqltimeformat := 'HH:NN';

            i := 2;
          except
          end;
        end;

        FormMain.writeinitlog('activate data 23' + ' ' + BoolToStr(result));

        Multifileserversystem := false;
        Foundmainserver := false;
        Foundmainplancenterserver := false;

        if localmode then
          tNames1.NFileServerNames := 0;
        // Force use of  GeneraralPreferences data

        for i := 1 to tNames1.NFileServerNames do
        begin
          if (tNames1.FileServerNames[i].Servertype = FILESERVERTYPE_MAIN) then
            Foundmainserver := true;
          if (tNames1.FileServerNames[i].Servertype = FILESERVERTYPE_LOCAL) then
            Multifileserversystem := true;
          if (tNames1.FileServerNames[i].Servertype = Prefs.PlanCenterFileServerType) then
            Foundmainplancenterserver := true;
        end;

        if not Foundmainserver then
        // MUST have servertype 1 in list - use data from GeneraralPreferences table
        begin
          Inc(tNames1.NFileServerNames);
          tNames1.FileServerNames[tNames1.NFileServerNames].Servertype := FILESERVERTYPE_MAIN;
          tNames1.FileServerNames[tNames1.NFileServerNames].Name := Mservn;
          tNames1.FileServerNames[tNames1.NFileServerNames].Share := Mservshare;
          tNames1.FileServerNames[tNames1.NFileServerNames].Username := mservuser;
          tNames1.FileServerNames[tNames1.NFileServerNames].Password := mservpass;
          tNames1.FileServerNames[tNames1.NFileServerNames].IP := '';
        end;

        FormMain.writeinitlog('activate data 24' + ' ' + BoolToStr(result));

        Prefs.SetFileServerAlternativeIP();

        // NAN 20161212
        // NEW Implementation
        FoundPlanCenterShare := false;

        for i := 1 to tNames1.NFileServerNames do
        begin
          if (tNames1.FileServerNames[i].Servertype = Prefs.PlanCenterFileServerType)
          then
          begin
            MainCCConfig := tNames1.FileServerNames[i].FullPath + 'CCCONFIG\';
            MainCCDATA := tNames1.FileServerNames[i].FullPath + 'CCFILES';
            FoundPlanCenterShare := true;
          end;
        end;
        if (not FoundPlanCenterShare) then
        begin
          for i := 1 to tNames1.NFileServerNames do
          begin
            if (tNames1.FileServerNames[i].Servertype = FILESERVERTYPE_MAIN)
            then
            begin
              MainCCConfig := tNames1.FileServerNames[i].FullPath + 'CCCONFIG\';
              MainCCDATA := tNames1.FileServerNames[i].FullPath + 'CCFILES';
            end;
          end;
        end;

        if (not localmode) then
        begin
          if (Prefs.OnlyConnectPlanCenterUser) then
          begin

            for i := 1 to tNames1.NFileServerNames do
            begin
              if ((tNames1.FileServerNames[i]
                .Servertype = Prefs.PlanCenterFileServerType) and
                (tNames1.FileServerNames[i].FullPath <> '') and
                (tNames1.FileServerNames[i].Username <> '') and
                (tNames1.FileServerNames[i].Password <> '')) then
              begin
                Pathtologon := ExcludeTrailingBackslash
                  (tNames1.FileServerNames[i].FullPath);
                FormMain.writeinitlog('Netuse PathStart ' + IntToStr(i) + ' ' +
                  Pathtologon + ' ' + BoolToStr(result));
                if (tNames1.FileServerNames[i].FullPath[1] = '\') then
                  ConnectUserDrive(tNames1.FileServerNames[i].Username,
                    tNames1.FileServerNames[i].Password, Pathtologon, false);
                FormMain.writeinitlog('Netuse Done ' + IntToStr(i) + ' ' +
                  Pathtologon + ' ' + BoolToStr(result));
                break; // Only allow plancenrer user..
              end;
            end;
          end
          else
          begin
            for i := 1 to tNames1.NFileServerNames do
            begin
              if ((tNames1.FileServerNames[i].FullPath <> '') and
                (tNames1.FileServerNames[i].Username <> '') and
                (tNames1.FileServerNames[i].Password <> '')) then
              begin
                Pathtologon := ExcludeTrailingBackslash
                  (tNames1.FileServerNames[i].FullPath);
                FormMain.writeinitlog('Netuse PathStart ' + IntToStr(i) + ' ' +
                  Pathtologon + ' ' + BoolToStr(result));
                if (tNames1.FileServerNames[i].FullPath[1] = '\') then
                  ConnectUserDrive(tNames1.FileServerNames[i].Username, tNames1.FileServerNames[i].Password, Pathtologon, false);
                FormMain.writeinitlog('Netuse Done ' + IntToStr(i) + ' ' +
                  Pathtologon + ' ' + BoolToStr(result));
              end;
            end;
          end;

        end;

        Formflatproof.Loadflatproofers;

        if (not Prefs.UsePreviewCache) OR (Prefs.PreviewCacheShare = '') then
   	      Prefs.PreviewCacheShare := tNames1.GetMainFileServerShare;

        /// //////////////////
        /// Ink resend stuff
        /// //////////////////

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('Select locationid,CCdatashare,Name,IP,uselocaluser,Username,password From FileServers (NOLOCK) where Servertype = 4');
        Datam1.Query1.SQL.Add('order by locationid');
        for i := 1 to MAXINKFOLDERS do
        begin
          InkFolders[i].LocationID := -1;
          InkFolders[i].InkShare := '';
          InkFolders[i].Username := '';
          InkFolders[i].Password := '';
        end;
        Datam1.Query1.Open;

        i := 0;
        NInkFolders := 0;
        while not Datam1.Query1.Eof do
        begin
          Inc(NInkFolders);
          T := '\\';
          if Datam1.Query1.Fields[3].AsString <> '' then // IP
            T := T + Datam1.Query1.Fields[3].AsString + '\'
          else
            T := T + Datam1.Query1.Fields[2].AsString + '\';

          InkFolders[NInkFolders].LocationID := Datam1.Query1.Fields[0].AsInteger;
          InkFolders[NInkFolders].InkShare := T + Datam1.Query1.Fields[1].AsString;
          if localmode then
            InkFolders[NInkFolders].InkShare := MAINCC;

          if Datam1.Query1.Fields[4].AsInteger <> 1 then
          begin
            InkFolders[NInkFolders].Username := Datam1.Query1.Fields[5].AsString;
            InkFolders[NInkFolders].Password := TUtils.DecodeBlowfish(Datam1.Query1.Fields[6].AsString);
          end;
          Datam1.Query1.Next;
        end;
        Datam1.Query1.Close;

        if NInkFolders > 0 then
        begin
          for i := 1 to NInkFolders do
          begin
            if InkFolders[i].Username <> '' then
            begin
              T := IncludeTrailingBackSlash(InkFolders[i].InkShare) +
                'CCinkoriginals';
              ConnectUserDrive(InkFolders[i].Username, InkFolders[i].Password,
                T, false);
              (* T := IncludeTrailingBackSlash(InkFolders[I].InkShare) + 'CCinkflatpreviews';
                ConnectUserDrive(InkFolders[I].username,InkFolders[I].password, T,false);
                T := IncludeTrailingBackSlash(InkFolders[I].InkShare) + 'CCinkflatthumbnails';
                ConnectUserDrive(InkFolders[I].username,InkFolders[I].password, T,false);
                T := IncludeTrailingBackSlash(InkFolders[I].InkShare) + 'CCinkzonepreviews';
                ConnectUserDrive(InkFolders[I].username,InkFolders[I].password, T,false);
              *)
            end;
          end;
        end;

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('Select locationid,CCdatashare,Name,IP,uselocaluser,Username,password,Servertype From FileServers (NOLOCK) where Servertype = 7');
        Datam1.Query1.SQL.Add('order by locationid');
        for i := 1 to MAXPDFFOLDERS do
        begin
          pdfFolders[i].LocationID := -1;
          pdfFolders[i].pdfShare := '';
          pdfFolders[i].Username := '';
          pdfFolders[i].Password := '';
        end;
        Datam1.Query1.Open;
        i := 0;
        NpdfFolders := 0;
        while not Datam1.Query1.Eof do
        begin

          Inc(NpdfFolders);
          T := '\\';

          if Datam1.Query1.Fields[3].AsString <> '' then
            T := T + Datam1.Query1.Fields[3].AsString + '\'
          else
            T := T + Datam1.Query1.Fields[2].AsString + '\';

          if localmode then
          begin
            pdfFolders[NpdfFolders].pdfShare := MAINCC;
          end;

          pdfFolders[NpdfFolders].LocationID := Datam1.Query1.Fields[0].AsInteger;
          pdfFolders[NpdfFolders].pdfShare := T + Datam1.Query1.Fields[1].AsString;
          if Datam1.Query1.Fields[4].AsInteger <> 1 then
          begin
            pdfFolders[NpdfFolders].Username := Datam1.Query1.Fields[5].AsString;
            pdfFolders[NpdfFolders].Password := TUtils.DecodeBlowfish(Datam1.Query1.Fields[6].AsString);
          end;

          Datam1.Query1.Next;
        end;
        Datam1.Query1.Close;

        /// //////////////////
        /// PDF archive stuff
        /// //////////////////

        if NpdfFolders > 0 then
        begin
          for i := 1 to NpdfFolders do
          begin
            if pdfFolders[i].Username <> '' then
            begin
              T := IncludeTrailingBackSlash(pdfFolders[i].pdfShare) +
                'CCPdffiles';
              ConnectUserDrive(pdfFolders[i].Username, pdfFolders[i].Password,
                T, false);
              (* T := IncludeTrailingBackSlash(pdfFolders[I].pdfShare) + 'CCPdflogs';
                ConnectUserDrive(pdfFolders[I].username,pdfFolders[I].password, T,false); *)
            end;
          end;
        end;

        if NpdfFolders < 1 then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('Select  Name,CCdatashare,IP,username,password from FileServers (NOLOCK) where Servertype = 1');
          Datam1.Query1.Open;
          if not Datam1.Query1.Eof then
          begin
            if Datam1.Query1.Fields[2].AsString <> '' then
              T := '\\' + Datam1.Query1.Fields[2].AsString + '\' +
                Datam1.Query1.Fields[1].AsString
            else
              T := '\\' + Datam1.Query1.Fields[0].AsString + '\' +
                Datam1.Query1.Fields[1].AsString;

            pdfFolders[1].LocationID := 1;
            pdfFolders[1].Username := Datam1.Query1.Fields[3].AsString;
            pdfFolders[1].Password := TUtils.DecodeBlowfish(Datam1.Query1.Fields[4].AsString);

            // if Datam1.Query1.Fields[0].AsString = 'KCHWIN7' then
            // T := 'c:\'+Datam1.Query1.Fields[1].AsString;

            pdfFolders[1].pdfShare := T;
            NpdfFolders := 1;
          end;
          Datam1.Query1.Close;
        end;
        FormMain.writeinitlog('activate data 27.5');


        FormMain.writeinitlog('activate data 27.7');

        Actionplatedetails.Checked := Prefs.DefaultShowPlateDetails;
        FormMain.writeinitlog('activate data 27' + ' ' + BoolToStr(result));

        /// ///////////////////////////////////////////////////
        /// Set up location/press/press group filter combos
        /// NEW STUFF 20170522
        /// ///////////////////////////////////////////////////

        RefresshAllpressgrpnames();

        // ComboBoxpalocationNy already loaded with full location list
        // Adjust locationlist if presses are limited..

        if (Prefs.LocationPressFilterMode = LOCATIONPRESSSFILTERMODE_LOCATION)
          and (PressvisibilyIN <> '') then
        begin
          ComboBoxpalocationNY.Items.Clear;
          ComboBoxactivequeue.Items.Clear;
          ComboBoxplanlocation.Items.Clear;

          // Get locations via visible presses

          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('Select DISTINCT LocationID FROM PressNames WHERE PressID IN ' +
            PressvisibilyIN);
          Datam1.Query1.SQL.Add('Order by LocationID');
          Datam1.Query1.Open;
          while (not Datam1.Query1.Eof) and
            (not Formreloadingerrorfiles.stopit) do
          begin
            T := tNames1.locationIDtoname(Datam1.Query1.Fields[0].AsInteger);
            ComboBoxpalocationNY.Items.Add(T);
            ComboBoxactivequeue.Items.Add(T);
            ComboBoxplanlocation.Items.Add(T);
            Datam1.Query1.Next;
          end;
          Datam1.Query1.Close;

        end;

        // Adjust locationlist if only one location permitted

        (* if (Prefs.AllowOnlyDefaultLocationPress)  then
          begin
          ComboBoxpalocationNy.Items.Clear;
          ComboBoxactivequeue.Items.Clear;
          ComboBoxplanlocation.Items.Clear;

          RefresshAllPressGrpNames;

          ComboBoxpalocationNy.Items.Add(Prefs.DefaultLocation);
          ComboBoxactivequeue.Items.Add(Prefs.DefaultLocation);
          ComboBoxplanlocation.Items.Add(Prefs.DefaultLocation);

          ComboBoxpalocationNy.ItemIndex := 0;
          ComboBoxactivequeue.ItemIndex := 0;
          ComboBoxplanlocation.ItemIndex := 0;
          end
          else
          begin *)
        if ComboBoxpalocationNY.Items.IndexOf(Prefs.DefaultLocation) > -1 then
        begin
          ComboBoxpalocationNY.ItemIndex := ComboBoxpalocationNY.Items.IndexOf
            (Prefs.DefaultLocation);
          ComboBoxactivequeue.ItemIndex := ComboBoxactivequeue.Items.IndexOf
            (Prefs.DefaultLocation);
          ComboBoxplanlocation.ItemIndex := ComboBoxplanlocation.Items.IndexOf
            (Prefs.DefaultLocation);
        End
        else
        begin
          ComboBoxplanlocation.ItemIndex := 0;
          ComboBoxpalocationNY.ItemIndex := 0;
          ComboBoxactivequeue.ItemIndex := 0;
        end;
        // end;

        // Don't ask..
        for i := 0 to tNames1.locationnames.Count - 1 do
        begin
          T := Uppercase(tNames1.locationnames[i]);
          if (T = 'DAMMAM') Or (T = 'JEDDA') Or (T = 'RIYADH') then
          begin
            Prefs.ThumbnailAllowSetFalseSpread := true;
            Prefs.ThumbnailResetStatusOnPageTypeChange := true;
          end;
        end;

        // Error retry folder stuff

        NErrorfolders := 0;
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('Select InputID,DefaultPublicationID,NamingMask,InputPath,InputName,username,password,UseCurrentUser,DefaultLocationID from InputConfigurations (NOLOCK) ');
        Datam1.Query1.SQL.Add('Order by InputID');
        Datam1.Query1.Open;
        while (not Datam1.Query1.Eof) and
          (not Formreloadingerrorfiles.stopit) do
        begin
          Inc(NErrorfolders);
          Errorfolders[NErrorfolders].folderbased := false;
          Errorfolders[NErrorfolders].ignorefolder := false;
          Errorfolders[NErrorfolders].InputID := Datam1.Query1.Fields[0]
            .AsInteger;
          Errorfolders[NErrorfolders].InputPath :=
            IncludeTrailingBackSlash(Datam1.Query1.Fields[3].AsString);
          Errorfolders[NErrorfolders].Name := Datam1.Query1.Fields[4].AsString;

          Errorfolders[NErrorfolders].LocationID := Datam1.Query1.Fields[8]
            .AsInteger;
          Errorfolders[NErrorfolders].Username := '';
          if Datam1.Query1.Fields[7].AsInteger <> 1 then
          begin
            Errorfolders[NErrorfolders].Username := Datam1.Query1.Fields[5].AsString;
            Errorfolders[NErrorfolders].Password := TUtils.DecodeBlowfish(Datam1.Query1.Fields[6].AsString);
          end;
          Datam1.Query1.Next;
        end;

        Prefs.SetErrorFolders;

        Formerrorfolderselect.caption := 'Select error folders';
        Formerrorfolderselect.checklistbox1.Items.Clear;
        Formerrorfolderselect.checklistbox1.Items.Add('Show all folders');
        for i := 0 to Length(Prefs.DefaultUnknownFilesFolders) - 1 do
        begin
          Formerrorfolderselect.checklistbox1.Items.Add
            (Prefs.DefaultUnknownFilesFolders[i].Name);
          Formerrorfolderselect.checklistbox1.Checked[i + 1] :=
            Prefs.DefaultUnknownFilesFolders[i].Enabled;
        end;

        if (Prefs.PressHighPlateName = '') OR (Prefs.PressLowPlateName = '')
        then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('SELECT TOP 1 HighName,LowName FROM [PressNames]');
          // any press will do..
          if (not Datam1.Query1.Eof) then
          begin
            PressHighPlateName := Datam1.Query1.Fields[0].AsString;
            PressLowPlateName := Datam1.Query1.Fields[1].AsString;
          end;
          Datam1.Query1.Close;
        end;
        if (PressHighPlateName = '') then
          PressHighPlateName := 'H';
        if (PressLowPlateName = '') then
          PressLowPlateName := 'L';

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('Select distinct t.TowerName,p.pressname,p.pressid,t.pressid from PressTowerNames t (NOLOCK) ,PressNames p (NOLOCK) ');
        Datam1.Query1.SQL.Add('where p.pressid = t.pressid');
        Datam1.Query1.SQL.Add('Order by p.pressname,t.TowerName');
        Datam1.Query1.Open;

        SetLength(Prefs.VisibleTowers, 0);
        SetLength(Prefs.PressTowers, 0);
        i := 0;
        while (not Datam1.Query1.Eof) do
        begin
          SetLength(Prefs.VisibleTowers, i + 1);
          SetLength(Prefs.PressTowers, i + 1);
          Prefs.VisibleTowers[i].press := Datam1.Query1.Fields[1].AsString;
          Prefs.VisibleTowers[i].Tower := Datam1.Query1.Fields[0].AsString;
          Prefs.VisibleTowers[i].Visible := true;
          Prefs.PressTowers[i].press := Prefs.VisibleTowers[i].press;
          Prefs.PressTowers[i].Tower := Prefs.VisibleTowers[i].Tower;
          Inc(i);
          Datam1.Query1.Next;
        end;
        Datam1.Query1.Close;
        Prefs.SetVisibleTowers;

        // if reactivate then
        // begin
        // FormxSettings.readsettings(-1);
        // end;

        (* Usesnewtreetable := false;
          if FoxrmSettings.CheckBoxnewtreeload.Checked then
          begin
          Datam1.Query3.SQL.Clear;
          Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
          Datam1.Query3.SQL.Add('where name = ' + ''''+'Treestate'+'''');
          Datam1.Query3.Open;
          Usesnewtreetable := not Datam1.Query3.Eof;
          Datam1.Query3.Close;
          end;
        *)
        // Hardcoded !
        Usesnewtreetable := false;

        FormMain.writeinitlog('activate data 29' + ' ' + BoolToStr(result));

        Prefs.PressSpecific := false;
        if Length(globaldbsettings) > 0 then
          Prefs.PressSpecific := Boolean(StrToInt(globaldbsettings[1]));

        FormMain.writeinitlog('activate data 30' + ' ' + BoolToStr(result));

        Formtabs.settabvisible;

        FormActionconfig.init;
        FormActionconfig.LoadUseractions
          (FormUsers.GetUserGroupOfUser(Prefs.Username),
          Prefs.Username);
        ActionEnable('activatedata');
        setdroptarget;
        FormMain.writeinitlog('activate data 31' + ' ' + BoolToStr(result));

        ActionToolBarThumbnail.Realign;

        FormAddpressrun.RadioGroupcollection.ItemIndex :=
          Integer(Prefs.PlanningDefaultInserted);
        if ReActivate then
        begin
          for i := 0 to PageControlMain.PageCount - 1 do
          begin
            if PageControlMain.pages[i].Visible then
            begin
              PageControlMain.ActivePageIndex := i;
            end;
          end;
          // PageControlMain.ActivePageIndex := VIEW_SEPARATIONS;
        end;

        Application.ProcessMessages;
        PageControlMainChange(Self);
        Application.ProcessMessages;
        // FormMain.SetFocus;
        FormMain.writeinitlog('activate data 32' + ' ' + BoolToStr(result));

        Timerautorefresh.Interval := Prefs.AutoRefreshSpeed * 1000;
        Timerautorefreshcount := 0;
        Timerautorefresh.Enabled := true;
        FormMain.writeinitlog('activate data 33' + ' ' + BoolToStr(result));
        // TimerUknown.Enabled := true;
        MainUpdateing := false;

        if ((Prefs.DeviceControlUsePressDevices) and (Pressdevpossible) and (ComboBoxPressGrp.Items.Count>0))  then  // 20210322 ALWAYS USE THIS!!!
        begin
          FrameDeviceplacer1.ComboBoxlocationManage.Items := ComboBoxPressGrp.Items;
          if (Uppercase(FrameDeviceplacer1.ComboBoxlocationManage.Items[0]) = 'AAL') or ((Uppercase(FrameDeviceplacer1.ComboBoxlocationManage.Items[0]) = 'ALL')) then
            FrameDeviceplacer1.ComboBoxlocationManage.Items.Delete(0);
          if ComboBoxPressGrp.ItemIndex = 0 then
            FrameDeviceplacer1.ComboBoxlocationManage.ItemIndex := 0
          else
            FrameDeviceplacer1.ComboBoxlocationManage.ItemIndex := FrameDeviceplacer1.ComboBoxlocationManage.Items.IndexOf(ComboBoxPressGrp.text);
        end

        else
        begin                 // Use locations for combo
          // if not Prefs.AllowOnlyDefaultLocationPress then
          // begin
          if (ComboBoxpalocationNY.Items.Count>0) then
          begin
            FrameDeviceplacer1.ComboBoxlocationManage.Items := ComboBoxpalocationNY.Items; // .locationnames;
            if (Uppercase(FrameDeviceplacer1.ComboBoxlocationManage.Items[0])
              = 'AAL') or
              ((Uppercase(FrameDeviceplacer1.ComboBoxlocationManage.Items[0])
              = 'ALL')) then
              FrameDeviceplacer1.ComboBoxlocationManage.Items.Delete(0);
            if (ComboBoxpalocationNY.ItemIndex = 0) then
              FrameDeviceplacer1.ComboBoxlocationManage.ItemIndex := 0
            else
              FrameDeviceplacer1.ComboBoxlocationManage.ItemIndex :=
                FrameDeviceplacer1.ComboBoxlocationManage.Items.IndexOf(ComboBoxpalocationNY.text);
            (* end
              else
              begin
              FrameDeviceplacer1.ComboBoxlocationManage.Items.Clear;
              FrameDeviceplacer1.ComboBoxlocationManage.Items.Add(Prefs.DefaultLocation);
              FrameDeviceplacer1.ComboBoxlocationManage.ItemIndex := 0;
              end;
            *)
            FrameDeviceplacer1.ComboBoxlocationManage.ItemIndex := FrameDeviceplacer1.ComboBoxlocationManage.Items.IndexOf(Prefs.DefaultLocation);
          end;
        end;

        FormMain.writeinitlog('activate data 33.1' + ' ' + BoolToStr(result));
        if (FrameDeviceplacer1.ComboBoxlocationManage.Items.Count <= 1) OR (Prefs.OnlyShowDefaultDevices) then
          FrameDeviceplacer1.ComboBoxlocationManage.Enabled := false;

        if (Prefs.Proversion = 2) then
          Prefs.ShowDeviceControl := false;

        GroupBoxdevicelist.Visible := (Prefs.ShowDeviceControl) And
          (Prefs.Proversion <> 2) AND
          ((Prefs.ISadministrator) OR (NOT Prefs.DeviceControlOnlyAdmins));
        Panel4.Realign;
        FormMain.writeinitlog('activate data 33.3' + ' ' + BoolToStr(result));

        if GroupBoxdevicelist.Visible then
          FrameDeviceplacer1.loaddevices;
        FormMain.writeinitlog('activate data 33.4' + ' ' + BoolToStr(result));

        GroupBoxProdpupl.Visible := Prefs.TreeFilterOnProductionDate;
        Splitter16.Visible := Prefs.TreeFilterOnProductionDate;

        FormSaveloadcols.loadAuserColsort(FormUsers.GetUserGroupOfUser(Prefs.Username), Prefs.Username);

        FormMain.writeinitlog('activate data 33.5' + ' ' + BoolToStr(result));
        Reimagetostat := '30';
        if Prefs.PlateTransmissionSystem then
        begin
          Reimage2.Visible := true; { sep 2011 }
          Retransmit3.Visible := true; { sep 2011 }
          Reimage1.Visible := true; { sep 2011 }

          Reimagetostat := '49';
          ActionPagereimage.caption := 'Retransmit';
          ActionPagereimage.Hint :=
            'Retransmit the pre-pared file to print site';
          Actionplatereimage.caption := 'Retransmit';
          Actionplatereimage.Hint :=
            'Retransmit the pre-pared file to print site';
          ActionThumbnailsreimage.caption := 'Retransmit';
          ActionThumbnailsreimage.Hint :=
            'Retransmit the pre-pared file to print site';
          Actionprogressreimage.caption := 'Retransmit';
          Actionprogressreimage.Hint :=
            'Resend the pre-pared file to print site';
          Actionreimall.caption := 'Retransmit all';
          Actionreimall.Hint := 'Resend all the pare file to print site';

          Actionplateretransmit.caption := 'Re-prepair';
          Actionpageretransmit.Hint :=
            'Re-prepair file for sending to print site';
          Actionpageretransmit.caption := 'Re-prepair';
          Actionplateretransmit.Hint :=
            'Re-prepair file for sending to print site';
          Actionthumbnailretransmit.caption := 'Re-prepair';
          Actionthumbnailretransmit.Hint :=
            'Re-prepair file for sending to print site';
          Actionplateretrans.caption := 'Re-prepair';
          Actionplateretrans.Hint :=
            'Re-prepair file for sending to print site';
          Actionplateretrans.ImageIndex := Actionplateretransmit.ImageIndex;

          Actionpageimaged.caption := 'Transmitted';
        end
        else
        begin
          Reimage1.Visible := true;
          Reimage2.Visible := false;
          Retransmit3.Visible := false;
        end;

        if not formprev2.AutoconsolePossible then
          Prefs.AutoConsole := false;

        FormMain.writeinitlog('activate data 34' + ' ' + BoolToStr(result));

        try
          workerThreadTreeUpdate := TWorkerThreadTreeUpdate.Create;
        Except
        end;

        if (spGetAllUnplannedPagesPossible) then
          workerThreadUnknownPages := TWorkerThreadUnknownPages.Create;
        // Run now..

        workerThreadUnknownFiles := TWorkerThreadUnknownFiles.Create;
        // Run now..

        result := true;

      end; // Loggedin..

      FormMain.writeinitlog('activate data 35' + ' ' + BoolToStr(result));

      if not Formerrorfolderselect.checklistbox1.Checked[0] then
      begin
        FormUknownfiles.ActionFolder.caption := 'Folder (Filter On)';
        ActionUnkownfolder.caption := 'Folder (Filter On)';
      End
      else
      begin
        FormUknownfiles.ActionFolder.caption := 'Folder (Show all)';
        ActionUnkownfolder.caption := 'Folder (Show all)';
      end;

      Nkeeptrees := tNames1.locationnames.Count;
      for i := 1 to Nkeeptrees do
      begin
        keeptrees[i].Locationname := tNames1.locationnames[i - 1];
        keeptrees[i].Ntree := 0;
        SetLength(keeptrees[i].tree, 10);
      end;

      Inc(Nkeeptrees);
      keeptrees[Nkeeptrees].Locationname := '*';
      keeptrees[Nkeeptrees].Ntree := 0;
      SetLength(keeptrees[Nkeeptrees].tree, 10);

      Actionmiscstr2.Visible := Prefs.EnableEditOfMiscString2;
      Actionmiscstr3.Visible := Prefs.EnableEditOfMiscString3;
      ActionMiscint2.Visible := Prefs.EnableEditOfMiscInt2;
      ActionMiscint3.Visible := Prefs.EnableEditOfMiscInt3;
      FormMain.writeinitlog('activate data 35.1' + ' ' + BoolToStr(result));

      if Prefs.CustomPlanCheck then
        Formtoolchkdb.setupcustomcheckup;

      FormMain.writeinitlog('activate data 35.2' + ' ' + BoolToStr(result));

      ComboBoxArkdate.Align := alclient;
      TreeViewArk.Align := alclient;
      // getallarkdate;

      PDFUnknownpath := Prefs.UnknownPDFfolder;
      PDFarchivepath := Prefs.PDFArchivefolder;
      // if (directoryexists(PDFUnknownpath)) and (FoxrmSettings.CheckBoxPdfunknown.checked) then
      // TabSheetunknownpdf.TabVisible := true
      // else

      TabSheetunknownpdf.TabVisible := false;
      TabSheetArk.TabVisible := false;

      FormMain.writeinitlog('activate data 35.3' + ' ' + BoolToStr(result));


      if (Prefs.EnableArchive) then
      begin
          if (NetDirectoryExists.NetDirectoryExists(PDFarchivepath, 5000)) then
       //faFrocec1n if (DirectoryExists(PDFarchivepath)) then
          TabSheetArk.TabVisible := true;
      end;

    end;
   Except
     on E: Exception do
     begin
       MessageDlg('Init error ' + E.Message, mtError, [mbOk], 0);
     end;

   end
  Finally
    MainUpdateing := false;
    FormLogin.Free;
  end;

  FormMain.writeinitlog('activate data 35.4' + ' ' + BoolToStr(result));


  SetAdayselectcombo(ComboBoxGlobalPubDateFilter);
  ComboBoxGlobalPubDateFilter.ItemIndex := Prefs.DefaultDateSelect;

  FormMain.writeinitlog('activate data 36' + ' ' + BoolToStr(result));

  if (not PDFMasterOK) OR (not Prefs.ThumbnailsAllowPdfRotation) then
    ActionReporcessRotation.Visible := false;

  Actionthumbdelete.Visible := Prefs.AllowPageDelete;

  if (not Prefs.PlateTransmissionSystem) then
    Actionplateretrans.Visible := false;

  SetWarningSystem;

  ActionToolBarThumbnail.Realign;

  // FormMain.Refresh;
  FormMain.writeinitlog('activate data done' + ' ' + BoolToStr(result));

end;

procedure TFormMain.SetWarningSystem;
Var
  i: Integer;
  givstat: Boolean;
  statw, extw: String;
Begin
  givstat := false;
  // giveextstat := false;
  giveproductionwarning := false;
  statw := '(-999';
  extw := '(-999';
  // statuswarningstr extstatuswarningstr
  for i := 0 to Length(Prefs.StatusWarningList) - 1 do
  begin
    if (Prefs.StatusWarningList[i].Enabled) then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('select StatusNumber,StatusName from StatusCodes');
      Datam1.Query1.SQL.Add('where StatusName = ' + '''' +
        Prefs.StatusWarningList[i].Name + '''');
      Datam1.Query1.Open;
      if not Datam1.Query1.Eof then
      begin
        givstat := true;
        statw := statw + ',' + Datam1.Query1.Fields[0].AsString;
      end;
      Datam1.Query1.Close;
    end;
  End;

  for i := 0 to Length(Prefs.ExtStatusWarningList) - 1 do
  begin
    if (Prefs.ExtStatusWarningList[i].Enabled) then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('select StatusNumber,StatusName from ExternalStatusCodes');
      Datam1.Query1.SQL.Add('where StatusName = ' + '''' +
        Prefs.ExtStatusWarningList[i].Name + '''');
      Datam1.Query1.Open;
      if not Datam1.Query1.Eof then
      begin
        givstat := true;
        extw := extw + ',' + Datam1.Query1.Fields[0].AsString;
      end;
      Datam1.Query1.Close;

    End;
  End;
  statw := statw + ')';
  extw := extw + ')';

  // Set in Utypes...
  statuswarningstr := statw;
  extstatuswarningstr := extw;
  giveproductionwarning := (givstat) or (Prefs.WarnIfAnyDisapproved);
End;

procedure TFormMain.ListViewWndProc(var msg: TMessage);
begin
  // Catch the WM_DROPFILES message, and call the original ListView WindowProc
  // for all other messages.
  case msg.msg of
    WM_DROPFILES:
      DropFiles(msg);
  else
    if Assigned(FOrgListViewWndProc) then
      FOrgListViewWndProc(msg);
  end;
end;

function TFormMain.Selcolortostr(Colorbox: TCheckListBox): string;
Var
  i: Integer;
  T: String;
begin
  T := '';
  try
    for i := 0 to Colorbox.Items.Count - 1 do
    begin
      if Colorbox.Checked[i] then
        T := T + Colorbox.Items[i] + ';';
    end;
    if Length(T) > 0 then
      Delete(T, Length(T), 1);
  except
  end;
  result := T;
end;

procedure TFormMain.strtocolorChk(Var Colorbox: TCheckListBox;
  colorstr: string);
Var
  i: Integer;
  T: String;
begin
  try
    Colorbox.ClearSelection;
    if Length(colorstr) > 0 then
    begin
      T := '';
      for i := 1 to Length(colorstr) do
      begin
        if (colorstr[i] = ';') And (i < Length(colorstr)) then
        begin
          if Colorbox.Items.IndexOf(T) > -1 then
            Colorbox.Checked[Colorbox.Items.IndexOf(T)] := true;
          T := '';
        end
        else
        begin
          T := T + colorstr[i];
        end;
      end;
    end;
  except
  end;
end;

procedure TFormMain.ComboBoxThumblocationNyChange(Sender: TObject);
Var
  chtype: Integer;
begin
  chtype := setalllocationcombos(TComboBox(Sender).text);

  // NAN 20160526 ####
  SetAdayselectcombo(ComboBoxGlobalPubDateFilter);

  if chtype = 2 then
  begin
    TreeViewpagelist.Items.Clear;
    TreeViewThumbs.Items.Clear;
    TreeViewPlateview.Items.Clear;
    TreeViewprodcontrol.Items.Clear;
    TreeViewNeweddtree.Items.Clear;
    TreeViewplan.Items.Clear;
    TreeViewLogfilter.Items.Clear;
    TreeViewreportfilter.Items.Clear;
    screen.Cursor := crhourglass;
  end
  else
    ActionThumbnailFilterrefresh.Execute;
end;

function TFormMain.GetcolorN(colorstr: string; colornumber: Integer): string;
Var
  i: Integer;
  T: String;
  N: Integer;
begin
  try
    N := 0;
    result := '';
    if Length(colorstr) > 0 then
    begin
      T := '';

      for i := 1 to Length(colorstr) do
      begin
        if (colorstr[i] = ';') And (i < Length(colorstr)) then
        begin
          Inc(N);
          if N = colornumber then
          begin
            result := T;
            break;
          end;
          T := '';
        end
        else
        begin
          T := T + colorstr[i];
          result := T;
        end;
      end;
    end;
  except
  end;
end;

function TFormMain.strtoNcolors(colorstr: string): Integer;
Var
  i, res: Integer;
begin

  res := 0;
  try
    if Length(colorstr) > 0 then
    begin
      res := 1;
      for i := 1 to Length(colorstr) do
        if colorstr[i] = ';' then
          Inc(res);
    end;
  except
  end;
  result := res;
end;

procedure TFormMain.ListViewpagesGetSubItemImage(Sender: TObject;
  Item: TListItem; SubItem: Integer; var ImageIndex: Integer);
begin
  try
    if SubItem = 3 then
      ImageIndex := 3;
  except
  end;
end;

procedure TFormMain.ListViewUnknownPageCustomDrawItem(Sender: TCustomListView;
  Item: TListItem; State: TCustomDrawState; var DefaultDraw: Boolean);
begin

  Sender.Canvas.Brush.Color := clWebRed;
  Sender.Canvas.Font.Color := clWhite;

end;

procedure TFormMain.ListViewUnknownPageDblClick(Sender: TObject);
var
  t1,t2 : string;
  index,i : Integer;
begin
//   ListViewUnknownPage.Selected
  //try

   // index := ListViewUnknownPage.ItemIndex;
   // if (index >= 0) then
   // begin
   //   t1 := ListViewUnknownPage.Items[Index].Caption;
   //   t2 := IncludeTrailingBackSlash(ListViewUnknownPage.Items[Index].SubItems[0]);
   //   if (FileExists(t2 + t1)) then
   //   begin
   //     ShellExecute(Handle, 'open',PChar(t2 + t1),nil,nil,SW_SHOW);
   //   end;
   // end;
  //except
  //end;


  try
     for i:= 0 to  ListViewUnknownPage.Items.Count-1 do
     begin
       if ListViewUnknownPage.Items[i].Selected then
       begin
         t1 := ListViewUnknownPage.Items[i].Caption;
         t2 := IncludeTrailingBackSlash(ListViewUnknownPage.Items[i].SubItems[0]);
         if (FileExists(t2 + t1)) then
         begin
           ShellExecute(Handle, 'open',PChar(t2 + t1),nil,nil,SW_SHOW);
           exit;
         end;
       end;
     end;
   except
   end;
end;

procedure TFormMain.Copystringgrid(Fromgrid: TStringGrid; Togrid: TStringGrid);
Var
  X, Y: Integer;
begin
  try
    Togrid.RowCount := Fromgrid.RowCount;
    Togrid.ColCount := Fromgrid.ColCount;

    for Y := 0 to Fromgrid.RowCount - 1 do
    begin
      for X := 0 to Fromgrid.ColCount - 1 do
      begin
        Togrid.cells[X, Y] := Fromgrid.cells[X, Y];
      end;
    end;
    Togrid.Selection := Fromgrid.Selection;
  except
  end;
end;

procedure TFormMain.Inkpreset1Click(Sender: TObject);
Var
  pressrunid, iMinPagina, iAntalPagina, iToValue: Integer;
  LI: TListItem;
  SLInkComment, SLPubDate, SLPagina: Tstringlist;
  i,j: Integer;
  sMiscString1, sInkComment: String;
  aPaginaOld: Array of String;
  aPaginaNew: Array of String;
begin

  iAntalPagina := 1;
  iMinPagina := 1;

  FormInkPreeSet.ListView1.Items.Clear;
  FormInkPreeSet.ComboBoxAllPub.Clear;

  pressrunid := Views[Viewselected].platesData[0].runid;
  // ShowMessage('PressRunID:' + IntToStr(PressRunID));

  // Hent alle produktioner
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('Select distinct PublicationNames.Name, PubDate, Pagetable.PublicationID from PageTable With (NOLOCK)');
  Datam1.Query1.SQL.Add
    ('Inner join PublicationNames ON PageTable.PublicationID = PublicationNames.PublicationID');
  Datam1.Query1.SQL.Add('Where Dirty=0');
  Datam1.Query1.Open;
  while NOT Datam1.Query1.Eof do
  Begin
    FormInkPreeSet.ComboBoxAllPub.AddItem(Datam1.Query1.FieldByName('Name')
      .AsString, TObject(1));
    Datam1.Query1.Next;
  End;
  Datam1.Query1.Close;

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('Select MIN(MiscString3), Count(Distinct MiscString3) from PageTable with (NOLOCK) where PressRunID = '''
    + IntToStr(pressrunid) + '''');
  Datam1.Query1.Open;
  If NOT Datam1.Query1.Eof then
  Begin
    iMinPagina := StrToIntDef(Datam1.Query1.Fields[0].AsString, 1);
    iAntalPagina := Datam1.Query1.Fields[1].AsInteger;
  End;
  Datam1.Query1.Close;

  Datam1.Query1.SQL.Add
    ('SELECT TOP 1 InkComment, MiscString1 FROM Pressrunid With (NOLOCK) where PressRunID ='''
    + IntToStr(pressrunid) + '''');
  Datam1.Query1.Open;

  If NOT Datam1.Query1.Eof Then
  Begin
    // ShowMessage('InkComment:' + Datam1.Query1.FieldByName('InkComment').AsString + ' MiscString1:' + Datam1.Query1.FieldByName('MiscString1').AsString);

    SLInkComment := Tstringlist.Create;
    SLInkComment.Clear;
    SLInkComment.Delimiter := ',';
    SLInkComment.StrictDelimiter := true;
    SLInkComment.DelimitedText := Datam1.Query1.Fields[0].AsString;

    SLPubDate := Tstringlist.Create;
    SLPubDate.Clear;
    SLPubDate.Delimiter := ',';
    SLPubDate.StrictDelimiter := true;
    SLPubDate.DelimitedText := Datam1.Query1.Fields[1].AsString;

    for i := 0 to SLInkComment.Count - 1 do
    Begin
      LI := FormInkPreeSet.ListView1.Items.Add;
      LI.caption := SLInkComment[i];
      if SLPubDate.Count - 1 >= i then
        LI.SubItems.Add(SLPubDate[i])
      else
        LI.SubItems.Add('');
      LI.SubItems.Add(TUtils.LeadingZeroes(iMinPagina, 2));
    End;

    SLInkComment.free;
    SLPubDate.free;
  End;
  Datam1.Query1.Close;

  If FormInkPreeSet.ShowModal = mrOK then
  Begin
    sInkComment := '';
    sMiscString1 := '';
    for i := 1 to FormInkPreeSet.ListView1.Items.Count - 1 do
    Begin
      if i <> 0 then
      Begin
        sInkComment := sInkComment + ',';
        sMiscString1 := sMiscString1 + ',';
      End;
      sInkComment := sInkComment + FormInkPreeSet.ListView1.Items[i].caption;
      sMiscString1 := sMiscString1 + FormInkPreeSet.ListView1.Items[i]
        .SubItems[0];
    End;
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Update Pressrunid Set InkComment = ''' + sInkComment
      + ''', MiscString1 = ''' + sMiscString1 + ''' where PressRunID=' +
      IntToStr(pressrunid));
    trysql(Datam1.Query1);
    Datam1.Query1.Close;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Update pageTable Set MiscString3 = Cast((Cast(MiscString3 as Int) + 100) as VarChar(50)) where PressRunID='
      + IntToStr(pressrunid));
    trysql(Datam1.Query1);
    Datam1.Query1.Close;
    for i := 1 to FormInkPreeSet.ListView1.Items.Count - 1 do
    Begin
      For j := 0 to iAntalPagina - 1 do
      Begin
        iToValue := StrToInt(FormInkPreeSet.ListView1.Items[i].SubItems[1]) + j;
        Datam1.Query1.SQL.text := 'Update pageTable Set MiscString3 = ''' +
          TUtils.LeadingZeroes(iToValue, 2) + ''' where MiscString3 = ''' +
          IntToStr(iMinPagina + 100) + ''' AND PressRunID=' +
          IntToStr(pressrunid);
      End;
    End;
  End;
end;

procedure TFormMain.Inserttoselection(Fromgrid: TStringGrid;
  NewCol: Tstringlist);
Var
  X, Y, ytop: Integer;
  InsertStringGrid: TStringGrid;
begin
  try
    InsertStringGrid := TStringGrid.Create(Self);
    InsertStringGrid.ColCount := Fromgrid.ColCount;
    ytop := 0;

    if Fromgrid.FixedRows > 0 then
    begin
      ytop := Fromgrid.FixedRows;
    end;

    InsertStringGrid.FixedRows := 0;
    InsertStringGrid.Fixedcols := 0;
    InsertStringGrid.RowCount := 1;

    for Y := ytop to Fromgrid.RowCount - 1 do
    begin
      if (Y >= Fromgrid.Selection.Top) and (Y <= Fromgrid.Selection.bottom) then
      begin
        for X := 0 to Fromgrid.ColCount - 1 do
        begin
          InsertStringGrid.cells[X, InsertStringGrid.RowCount - 1] :=
            Fromgrid.cells[X, Y];
        end;
        InsertStringGrid.RowCount := InsertStringGrid.RowCount + 1;
        for X := 0 to Fromgrid.ColCount - 1 do
        begin
          if NewCol[X] <> '' then
            InsertStringGrid.cells[X, InsertStringGrid.RowCount - 1]
              := NewCol[X]
          else
            InsertStringGrid.cells[X, InsertStringGrid.RowCount - 1] :=
              Fromgrid.cells[X, Y];
        end;
      end
      else
      begin
        for X := 0 to Fromgrid.ColCount - 1 do
          InsertStringGrid.cells[X, InsertStringGrid.RowCount - 1] :=
            Fromgrid.cells[X, Y];
      end;
      InsertStringGrid.RowCount := InsertStringGrid.RowCount + 1;
    end;
    InsertStringGrid.RowCount := InsertStringGrid.RowCount - 1;

    Fromgrid.RowCount := Fromgrid.FixedRows + 1;
    for Y := 0 to InsertStringGrid.RowCount - 1 do
    begin
      for X := 0 to InsertStringGrid.ColCount - 1 do
      begin
        Fromgrid.cells[X, Fromgrid.RowCount - 1] :=
          InsertStringGrid.cells[X, Y];

      end;
      Fromgrid.RowCount := Fromgrid.RowCount + 1;
    end;
    Fromgrid.RowCount := Fromgrid.RowCount - 1;
    InsertStringGrid.free;
  except
  end;
end;

procedure TFormMain.deletegrid(gridtodel: TStringGrid);
Var
  tmpGrid: TStringGrid;
  X, Y: Integer;
begin
  try
    tmpGrid := TStringGrid.Create(Self);
    tmpGrid.FixedRows := 0;
    tmpGrid.Fixedcols := 0;
    tmpGrid.ColCount := gridtodel.ColCount;
    tmpGrid.RowCount := 1;

    for Y := gridtodel.FixedRows to gridtodel.RowCount - 1 do
    begin
      if (Y < gridtodel.Selection.Top) or (Y > gridtodel.Selection.bottom) then
      begin
        for X := 0 to gridtodel.ColCount - 1 do
        begin
          tmpGrid.cells[X, tmpGrid.RowCount - 1] := gridtodel.cells[X, Y];
        end;
        tmpGrid.RowCount := tmpGrid.RowCount + 1;
      end;
    end;

    tmpGrid.RowCount := tmpGrid.RowCount - 1;

    gridtodel.RowCount := gridtodel.FixedRows + 1;

    for Y := 0 to tmpGrid.RowCount - 1 do
    begin
      for X := 0 to gridtodel.ColCount - 1 do
      begin
        gridtodel.cells[X, gridtodel.RowCount - 1] := tmpGrid.cells[X, Y];
      end;
      gridtodel.RowCount := gridtodel.RowCount + 1;
    end;
    gridtodel.RowCount := gridtodel.RowCount - 1;

    tmpGrid.free;
  except
  end;
end;

function TFormMain.productionnametoid(nameofprod: string): Integer;
begin
  result := -1;
  try
    Datam1.Query2.SQL.Clear;
    Datam1.Query2.SQL.Add('SELECT ProductionID FROM ProductionNames (NOLOCK)');
    Datam1.Query2.SQL.Add('Where Name = ' + '''' + nameofprod + '''');
    Tryopen(Datam1.Query2);
    result := Datam1.Query2.Fields[0].AsInteger;
    Datam1.Query2.Close;
  except
  end;
end;

function TFormMain.numberofpagesUnderEdition(Aktnode: TTreeNode): Integer;
Var
  sectionnode, pagenode: TTreeNode;
  Npages: Integer;
begin
  Npages := 0;
  try
    case Aktnode.Level of
      3:
        begin
          sectionnode := Aktnode.GetFirstChild;
          while (sectionnode <> nil) do
          begin
            pagenode := sectionnode.GetFirstChild;
            while (pagenode <> nil) do
            begin
              Inc(Npages);
              pagenode := sectionnode.GetNextChild(pagenode);
            end;
            sectionnode := Aktnode.GetNextChild(sectionnode);
          end;
        end;
    end;
  except
  end;
  result := Npages;
end;

function TFormMain.ApplyDark(Color: tcolor; HowMuch: Byte): tcolor;
Var
  r, g, b: Byte;
begin
  Color := ColorToRGB(Color);
  r := GetRValue(Color);
  g := GetGValue(Color);
  b := GetBValue(Color);
  if r > HowMuch then
    r := r - HowMuch
  else
    r := 0;
  if g > HowMuch then
    g := g - HowMuch
  else
    g := 0;
  if b > HowMuch then
    b := b - HowMuch
  else
    b := 0;
  if RGB(r, g, b) = Color then
    result := RGB(128, 128, 128)
  else
    result := RGB(r, g, b);
end;

function TFormMain.ApplyLight(Color: tcolor; HowMuch: Byte): tcolor;
Var
  r, g, b: Byte;
begin
  Color := ColorToRGB(Color);
  r := GetRValue(Color);
  g := GetGValue(Color);
  b := GetBValue(Color);
  if r + HowMuch < 255 then
    r := r + HowMuch
  else
    r := 255;
  if g + HowMuch < 255 then
    g := g + HowMuch
  else
    g := 255;
  if b + HowMuch < 255 then
    b := b + HowMuch
  else
    b := 255;
  result := RGB(r, g, b);
end;

function TFormMain.LoadDBIniPrefs: Boolean;
var
  T: string;
  anyerror: Boolean;
begin
  result := true;

  if Prefs.DBServerName = '' then
  begin
    Formserverconfig.Editservername.text := Prefs.DBServerName;
    Formserverconfig.Editdbname.text := Prefs.DBDatabase;
    Formserverconfig.Editinstance.text := Prefs.DBInstance;
    Formserverconfig.Editsaname.text := Prefs.DBUser;
    Formserverconfig.Editsapassword.text := Prefs.DBPassword;
    Formserverconfig.EditDSN.text := Prefs.DSN;
    Formserverconfig.Editbackupservername.text := Prefs.DBBackupServerName;
    Formserverconfig.Editbackupdbname.text := Prefs.DBBackupDatabase;
    Formserverconfig.Editbackupinstance.text := Prefs.DBBackupInstance;
    Formserverconfig.EditBackupsaname.text := Prefs.DBBackupUser;
    Formserverconfig.Editbackupsapassword.text := Prefs.DBBackupPassword;
    Formserverconfig.EditbackupDSN.text := Prefs.BackupDSN;
    if Formserverconfig.ShowModal = mrOK then
    begin
      Prefs.DBServerName := Formserverconfig.Editservername.text;
      Prefs.DBDatabase := Formserverconfig.Editdbname.text;
      Prefs.DBInstance := Formserverconfig.Editinstance.text;
      Prefs.DBUser := Formserverconfig.Editsaname.text;
      Prefs.DBPassword := Formserverconfig.Editsapassword.text;
      Prefs.DSN := Formserverconfig.EditDSN.text;

      Prefs.DBBackupServerName := Formserverconfig.Editbackupservername.text;
      Prefs.DBBackupDatabase := Formserverconfig.Editbackupdbname.text;
      Prefs.DBBackupInstance := Formserverconfig.Editbackupinstance.text;
      Prefs.DBBackupUser := Formserverconfig.EditBackupsaname.text;
      Prefs.DBBackupPassword := Formserverconfig.Editbackupsapassword.text;
      Prefs.BackupDSN := Formserverconfig.EditbackupDSN.text;

      Prefs.SaveIniDatabaseDetails();
    end
    else
    begin
      MessageDlg(InfraLanguage1.Translate
        ('The program cannot run without database server - the application will terminate'),
        mtInformation, [mbOk], 0);
      Application.Terminate;
    end;

    Datam1.SetParamters('',Prefs.DBreconnect, Prefs.DBFetchAll,
      Prefs.DBCommandTimeout, Prefs.DBUser = '');

    if (not Prefs.DBUseBackup) then
    begin
      Datam1.Servername := Prefs.DBServerName;
      Datam1.Database := Prefs.DBDatabase;
      Datam1.Instance := Prefs.DBInstance;
      Datam1.DBUser := Prefs.DBUser;
      Datam1.DBPassword := Prefs.DBPassword;
      Datam1.OSAuthentication := Prefs.DBUser = '';
    end
    else
    begin
      Datam1.Servername := Prefs.DBBackupServerName;
      Datam1.Database := Prefs.DBBackupDatabase;
      Datam1.Instance := Prefs.DBBackupInstance;
      Datam1.DBUser := Prefs.DBBackupUser;
      Datam1.DBPassword := Prefs.DBBackupPassword;
      Datam1.OSAuthentication := Prefs.DBBackupUser = '';
    end;
  end;
  result := true;
end;

function TFormMain.InitGlobalData: Boolean;
Var
  i: Integer;
  drect: TRect;
  Noplanevents: Boolean;
  SPNotuptodate: Boolean;
  found: Boolean;
  hasevent: Boolean;
  FieldName : string;
begin
  try
    initglobaldataDebug := 0;
    result := false;
    TiffArchiveFolder := '';

    if tNames1init then
    begin
      tNames1.InitializeDB(Datam1.SQLQueryname);
      tNames1init := false;
    end;

    initglobaldataDebug := 3;

    Formeditpagedef.ComboBoxpublication.Items.Clear;
    Formeditpagedef.ComboBoxIssue.Items.Clear;
    Formeditpagedef.ComboBoxedition.Items.Clear;
    Formeditpagedef.ComboBoxsection.Items.Clear;

    Formeditpagedef.CheckListBoxcolor.Items.Clear;
    FormSelcolors.CheckListBoxColors.Items.Clear;
    Formeditpagedef.CheckListBoxcolor.Items.Clear;
    FormSelcolors.CheckListBoxColors.Items.Clear;
    initglobaldataDebug := 4;

    // Datam1.Databaseplanner.Open;
    { if fileexists(ExtractFilePath(axpplication.ExeName)+'samplepage.bmp') then
      Imagepagesample.Picture.LoadFromFile(ExtractFilePath(axpplication.ExeName)+'samplepage.bmp'); }

    Aimage.Picture.Bitmap.width := 16;
    Aimage.Picture.Bitmap.Height := 16;
    drect := Rect(0, 0, 16, 16);

    Fimage.Picture.Bitmap.width := 16;
    Fimage.Picture.Bitmap.Height := 16;

    Fimage.Picture.Bitmap.Canvas.Brush.Style := bssolid;
    Fimage.Picture.Bitmap.Canvas.Brush.Color := clnone;
    Fimage.Picture.Bitmap.Canvas.pen.Color := clnone;
    Fimage.Picture.Bitmap.Canvas.Rectangle(drect);

    initglobaldataDebug := 5;

    // Here we load db lists!
    tNames1.Loadnames;

    inittypes.Typesloadtemplatearray2;

    initglobaldataDebug := 7;

    ComboBoxpalocationNY.Items.Clear;
    ComboBoxactivequeue.Items.Clear;
    ComboBoxplanlocation.Items.Clear;

    if (Prefs.AllowLocationPressAllSelection) then
    begin
      ComboBoxpalocationNY.Items.Add('All');
      ComboBoxplanlocation.Items.Add('All');
      ComboBoxactivequeue.Items.Add('All');
    end;

    for i := 0 to tNames1.locationnames.Count - 1 do
    begin
      ComboBoxactivequeue.Items.Add(tNames1.locationnames[i]);
      ComboBoxplanlocation.Items.Add(tNames1.locationnames[i]);
      ComboBoxpalocationNY.Items.Add(tNames1.locationnames[i]);
    end;

    ComboBoxactivequeue.ItemIndex := 0;
    ComboBoxplanlocation.ItemIndex := 0;
    ComboBoxpalocationNY.ItemIndex := 0;

    initglobaldataDebug := 9;

    Formeditpagedef.ComboBoxpublication.Items := tNames1.publicationnames;
    Formeditpagedef.ComboBoxIssue.Items := tNames1.issuenames;
    Formeditpagedef.ComboBoxedition.Items := tNames1.editionnames;
    Formeditpagedef.ComboBoxsection.Items := tNames1.sectionnames;
    Formeditpagedef.CheckListBoxcolor.Items.Clear;
    FormSelcolors.CheckListBoxColors.Items.Clear;
    Formeditpagedef.CheckListBoxcolor.Items := tNames1.Colornames;
    FormSelcolors.CheckListBoxColors.Items := tNames1.Colornames;

    initglobaldataDebug := 10;

    Datam1.CheckAndcreateSPandTables;



    Presstemplatedbversion := 1;
    // 1 har kun til og med Backwards   2 går helt til ColorControlID
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select top 1  * from presstemplate');
    Datam1.Query3.Open;
    if Datam1.Query3.FieldCount > 59 then
      Presstemplatedbversion := 2;
    Datam1.Query3.Close;

    smallpressrunidtable := true;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select TOP 1 * from pressrunid  (NOLOCK)');
    Datam1.Query3.Open;
    for i := 0 to Datam1.Query3.Fields.Count - 1 do
    begin
      if Uppercase(Datam1.Query3.Fields[i].FieldName) = 'MISCINT1' then
      begin
        smallpressrunidtable := false;
        break;
      end;
    end;
    Datam1.Query3.Close;

    prepollpagetable_hasdirty := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select TOP 1 * from PrePollPageTable  (NOLOCK)');
    Datam1.Query3.Open;
    for i := 0 to Datam1.Query3.Fields.Count - 1 do
    begin
      if Uppercase(Datam1.Query3.Fields[i].FieldName) = 'DIRTY' then
      begin
        prepollpagetable_hasdirty := true;
        break;
      end;
    end;
    Datam1.Query3.Close;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' + 'FlatPageTable' + '''');
    Datam1.Query3.Open;
    FlatPageTablePossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' + 'PressDevices' + '''');
    Datam1.Query3.Open;
    Pressdevpossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;


    // Reset if nothing in tabel..

    if (Pressdevpossible) then

    begin

      Datam1.Query3.SQL.Clear;

      Datam1.Query3.SQL.Add('select top 1 * from PressDevices (NOLOCK)');
      Datam1.Query3.Open;
      Pressdevpossible := not Datam1.Query3.Eof;

      Datam1.Query3.Close;

    end;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' + 'PressGroupNames' + '''');
    Datam1.Query3.Open;
    PressGroupNamesPossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' +
      'spImportCenterPageOutOfRangeCheck' + '''');
    Datam1.Query3.Open;
    Global_spImportCenterPageOutOfRangeCheckPossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' + 'UserPresses' + '''');
    Datam1.Query3.Open;
    UserPressesPossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' + 'UserPressGroups' + '''');
    Datam1.Query3.Open;
    UserPressGroupsPossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    PressTemplatePageRotationPossible := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select top 1 * from PressTemplate (NOLOCK)');
    Datam1.Query3.Open;
    PressTemplatePageRotationPossible := Datam1.Query3.FieldCount > 58;
    Datam1.Query3.Close;

    PressRunIDPlanVersionPossible := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select top 1 * from PressRunID (NOLOCK)');
    Datam1.Query3.Open;
    PressRunIDPlanVersionPossible := Datam1.Query3.FieldCount >= 35;
    Datam1.Query3.Close;

    PageTableFieldCount := 0;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select top 1 * from PageTable (NOLOCK)');
    Datam1.Query3.Open;
    PageTableFieldCount := Datam1.Query3.FieldCount;
    Datam1.Query3.Close;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' + 'ConSoleView' + '''');
    Datam1.Query3.Open;
    formprev2.AutoconsolePossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' +
      'AdmGroupPublications' + '''');
    Datam1.Query3.Open;
    AdmGroupPublicationsPossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' +
      'AdmGroupUserGroupRelations' + '''');
    Datam1.Query3.Open;
    AdmGroupUserGroupRelationsPossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' + 'AutoRetryQueue' + '''');
    Datam1.Query3.Open;
    AutoRetryQueuePossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' +
      'InkReportPlateQueue' + '''');
    Datam1.Query3.Open;
    InkReportPlateQueuePossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    if not InkReportPlateQueuePossible then
      Actionprintinkreport.Visible := false;

    publdeadpossible := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select top 1 * from Publicationnames (NOLOCK) ');
    Datam1.Query3.Open;
    publdeadpossible := Datam1.Query3.FieldCount >= 20;
    Datam1.Query3.Close;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' +
      'PublicationTemplates' + '''');
    Datam1.Query3.Open;
    PublicationTemplatesPossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    if PublicationEditionSectionAliasSetupPossible then
    begin
      Datam1.Query3.SQL.Clear;
      Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
      Datam1.Query3.SQL.Add('where name = ' + '''' +
        'PublicationEditionSectionAliases' + '''');
      Datam1.Query3.Open;
      PublicationEditionSectionAliasSetupPossible := not Datam1.Query3.Eof;
      Datam1.Query3.Close;
    end;

    if not PublicationEditionSectionAliasSetupPossible then
    begin
      ActionConfadvinp.Visible := false;
    end;

    Comment2INPressrunid := false;
    TimedEdPossible := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select top 1 * from pressrunid (NOLOCK) ');
    Datam1.Query3.Open;
    TimedEdPossible := Datam1.Query3.FieldCount > 30;
    Comment2INPressrunid := Datam1.Query3.FieldCount > 32;
    Datam1.Query3.Close;

    IsDefaultPressTemplateNamesPossible := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select top 1 * from PressTemplateNames (NOLOCK) ');
    Datam1.Query3.Open;
    IsDefaultPressTemplateNamesPossible := Datam1.Query3.FieldCount > 10;
    Datam1.Query3.Close;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' + 'Messages' + '''');
    Datam1.Query3.Open;
    CCMesagePossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    advancedstatavail := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' +
      'spplancenterInputStatistic4' + '''');
    Datam1.Query3.Open;
    advancedstatavail := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' +
      'spPlancenterInputeditorialsep3' + '''');
    Datam1.Query3.Open;
    SPNotuptodate := Datam1.Query3.Eof;
    Datam1.Query3.Close;

    Global_spReImage := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' + 'spReimage' + '''');
    Datam1.Query3.Open;
    Global_spReImage := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    Global_spImportCenterRetryMissingPagesPossible := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' +
      'spImportCenterRetryMissingPages' + '''');
    Datam1.Query3.Open;
    Global_spImportCenterRetryMissingPagesPossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    spPlanCenterCopyPressSettingsPossible := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' +
      'spPlanCenterCopyPressSettings' + '''');
    Datam1.Query3.Open;
    spPlanCenterCopyPressSettingsPossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    spPlanCenterSavePressSettingsPossible := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' +
      'spPlanCenterSavePressSettings' + '''');
    Datam1.Query3.Open;
    spPlanCenterSavePressSettingsPossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;


    spPlanCenterGeneratePlanPageNamesPossible := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' +
      'spPlanCenterGeneratePlanPageNames' + '''');
    Datam1.Query3.Open;
    spPlanCenterGeneratePlanPageNamesPossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    spPlanCenterConsecutivePaginationPossible := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' +
      'spPlanCenterConsecutivePagination' + '''');
    Datam1.Query3.Open;
    spPlanCenterConsecutivePaginationPossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    found := false;
    if (Global_spReImage) then
    begin
      Datam1.Query3.SQL.Clear;
      Datam1.Query3.SQL.Add('exec sp_sproc_columns');
      Datam1.Query3.SQL.Add('@procedure_name = ''spReimage''');
      Datam1.Query3.Open;
      while not Datam1.Query3.Eof do
      begin
        if (Datam1.Query3.Fields[3].AsString = '@ReimageReason') then
        begin
          found := true;
          break;
        end;
        Datam1.Query3.Next;
      end;
      Datam1.Query3.Close;
      if (found = false) then
        Global_spReImage := false;
    end;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' + 'InksaveSetupNames' + '''');
    Datam1.Query3.Open;
    InkSaveSetupNamesPossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' +
      'PreflightSetupNames' + '''');
    Datam1.Query3.Open;
    PreflightSetupNamesPossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' +
      'AutoRetryQueueFileCenter' + '''');
    Datam1.Query3.Open;
    AutoRetryQueueFileCenterPossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    spAddLogEntrySetsVersion := 1;

    if not CCMesagePossible then
    begin
      ActionsystemreadCCmes.Visible := false;

    end;
    // NAN
    ActionsystemreadCCmes.Visible := false;
    Actionplatepecom.Visible := false;
    Actiontoolmakeedplan.Visible := true;

    FormMain.writeinitlog('activate data 16' + ' ' + BoolToStr(result));

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' + 'spRepairPageTable' + '''');
    Datam1.Query3.Open;
    if Datam1.Query3.Eof then
    begin
      Prefs.PlanRepair := false;
    end;
    FormMain.writeinitlog('activate data 17' + ' ' + BoolToStr(result));
    Datam1.Query3.Close;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' +
      'spImportCenterPreImportCustom' + '''');
    Datam1.Query3.Open;
    ImportCenterPreImportCustomPossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' +
      'spImportCenterPressRunCustom2' + '''');
    Datam1.Query3.Open;
    ImportCenterPressRunCustom2Possible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' +
      'spImportCenterProductionCustom' + '''');
    Datam1.Query3.Open;
    ImportCenterProductionCustomPossible3 := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' +
      'spPlancenterInputeditorialsep4' + '''');
    Datam1.Query3.Open;
    spPlancenterInputeditorialsep4Possible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' + 'DeviceGroupNames' + '''');
    Datam1.Query3.Open;
    DeviceGroupNamesPossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;
    initglobaldataDebug := 11;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' +
      'spTransmitUpdateStatusPDF' + '''');
    Datam1.Query3.Open;
    spTransmitUpdateStatusPDFPossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    if (not spTransmitUpdateStatusPDFPossible) then
    begin
      ActionRetransmitPDF.Visible := false;
      ActionRetransmitPDF.Enabled := false;
    end;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' +
      'GeneralPreferencesExtra' + '''');
    Datam1.Query3.Open;
    GeneralPreferencesExtraPossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    GeneralPreferencesExtraPossible_TiffPlateArchiveFolder := false;
    GeneralPreferencesExtraPossible_ReportFolder := false;
    if (GeneralPreferencesExtraPossible) then
    begin
      Datam1.Query3.SQL.Clear;
      Datam1.Query3.SQL.Add
        ('select top 1 * from GeneralPreferencesExtra (NOLOCK) ');
      Datam1.Query3.Open;
      GeneralPreferencesExtraPossible_TiffPlateArchiveFolder :=
        Datam1.Query3.FieldCount > 7;
      GeneralPreferencesExtraPossible_ReportFolder :=
        Datam1.Query3.FieldCount > 9;
      Datam1.Query3.Close;
    end;

    StackerNamesPossible := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' + 'StackerNames' + '''');
    Datam1.Query3.Open;
    StackerNamesPossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    if not StackerNamesPossible then
      ActionChangeStacker.Visible := false;

    BackupApplicationConfigFilesPossible := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' +
      'BackupApplicationConfigFiles' + '''');
    Datam1.Query3.Open;
    BackupApplicationConfigFilesPossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    if not BackupApplicationConfigFilesPossible then
    begin
      ActionBackupConfiguration.Enabled := false;
      ActionRestoreConfiguration.Enabled := false;
    end;

    spPlancenterImportCenterAddSeparation3PageCategoryParamPossible := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add
      ('exec sp_sproc_columns ''spPlancenterImportCenterAddSeparation3''');
    Datam1.Query3.Open;
    while not Datam1.Query3.Eof do
    begin
      if (Datam1.Query3.Fields[3].AsString = '@PageCategoryID') then
      begin
        spPlancenterImportCenterAddSeparation3PageCategoryParamPossible := true;
        break;
      end;

      Datam1.Query3.Next;
    end;
    Datam1.Query3.Close;


    spPlanCenterLoadMultiplePressTemplatesPossible := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' +
      'spPlanCenterLoadMultiplePressTemplates' + '''');
    Datam1.Query3.Open;
    spPlanCenterLoadMultiplePressTemplatesPossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    if (spPlanCenterLoadMultiplePressTemplatesPossible) then
    begin

    spPlanCenterLoadMultiplePressTemplatesPressTemplateID5ParamPossible := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add
      ('exec sp_sproc_columns ''spPlanCenterLoadMultiplePressTemplates''');
    Datam1.Query3.Open;
    while not Datam1.Query3.Eof do
    begin
      if (Datam1.Query3.Fields[3].AsString = '@PressTemplateID5') then
      begin
        spPlanCenterLoadMultiplePressTemplatesPressTemplateID5ParamPossible := true;
        break;
      end;

      Datam1.Query3.Next;
    end;
    Datam1.Query3.Close;
    end;
    spPlancenterInputeditorialsep3Possible := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add
      ('exec sp_sproc_columns ''spPlancenterInputeditorialsep3''');
    Datam1.Query3.Open;
    while not Datam1.Query3.Eof do
    begin
      if (Datam1.Query3.Fields[3].AsString = '@PageCategoryID') then
      begin
        spPlancenterInputeditorialsep3Possible := true;
        break;
      end;
      Datam1.Query3.Next;
    end;
    Datam1.Query3.Close;

    // NAN 20151103 - try new field TiffPlateArchiveFolder
    try
      if (GeneralPreferencesExtraPossible_TiffPlateArchiveFolder) then
      begin
        Datam1.Query3.SQL.Clear;
        Datam1.Query3.SQL.Add
          ('SELECT TOP 1 ISNULL(TiffPlateArchiveFolder,'''') FROM GeneralPreferencesExtra');
        Datam1.Query3.Open;
        if (not Datam1.Query3.Eof) then
          TiffArchiveFolder := Datam1.Query3.Fields[0].AsString;
        Datam1.Query3.Close;
      end;
    except
    end;

    // NAN 20170531 - try new field ReportFolder
    // if (Prefs.DefaultReportFolder = '') then
    // begin
    try
      if (GeneralPreferencesExtraPossible_ReportFolder) then
      begin
        Datam1.Query3.SQL.Clear;
        Datam1.Query3.SQL.Add
          ('SELECT TOP 1 ISNULL(ReportFolder,'''') FROM GeneralPreferencesExtra');
        Datam1.Query3.Open;
        if (not Datam1.Query3.Eof) then
        begin
          Prefs.DefaultReportFolder := Datam1.Query3.Fields[0].AsString;
        end;
        Datam1.Query3.Close;
      end;
    except
    end;
    // end;

    if DeviceGroupNamesPossible then
    begin
      PBExListviewplateinfo.Column[4].caption := 'DeviceGroup / Device';
    end;

    try
      if (FormMain.InfraLanguage1.language <> 'Default') and
        (FormMain.InfraLanguage1.language <> '') then
      begin
        FormMain.InfraLanguage1.Readlanguagefile
          (FormMain.InfraLanguage1.language);
        expandlangfile(FormMain.InfraLanguage1.language);
      end;
    except
    end;

    initglobaldataDebug := 12;
    inittypes.InitDeviceGroupNames;

    inittypes.initthetypes;

    Prefs.ReadDataExportColumns;

    CurrentLocationid := -1;
    Currentlocationname := '';

    if (ComboBoxpalocationNY.text <> 'All') then
    begin
      Currentlocationname := ComboBoxpalocationNY.Items
        [ComboBoxpalocationNY.ItemIndex];
      CurrentLocationid := tNames1.locationnametoid
        (ComboBoxpalocationNY.Items[ComboBoxpalocationNY.ItemIndex]);
    end;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('SELECT EventNumber FROM EventCodes (NOLOCK)');
    Datam1.Query1.SQL.Add('Where EventNumber = 991');
    Datam1.Query1.SQL.Add('order by EventNumber');
    Datam1.Query1.Open;
    Noplanevents := Datam1.Query1.Eof;
    Datam1.Query1.Close;

    if Noplanevents then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Delete EventCodes');
      Datam1.Query1.SQL.Add('Where EventNumber >= 990 and EventNumber < 1000');
      trysql(Datam1.Query1);

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Insert EventCodes');
      Datam1.Query1.SQL.Add('Values (990,' + '''' + 'Planned' + '''' + ')');
      Datam1.Query1.SQL.Add('Insert EventCodes');
      Datam1.Query1.SQL.Add('Values (991,' + '''' + 'Applied' + '''' + ')');
      Datam1.Query1.SQL.Add('Insert EventCodes');
      Datam1.Query1.SQL.Add('Values (992,' + '''' + 'Changed' + '''' + ')');
      Datam1.Query1.SQL.Add('Insert EventCodes');
      Datam1.Query1.SQL.Add('Values (999,' + '''' + 'Deleted' + '''' + ')');
      trysql(Datam1.Query1);
    end;

    hasevent := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add
      ('select TOP 1 EventNumber from EventCodes WHERE EventNumber=320');
    Datam1.Query3.Open;
    if not Datam1.Query3.Eof then
      hasevent := true;
    Datam1.Query3.Close;

    if (hasevent = false) then
    begin
      Datam1.Query3.SQL.Clear;
      Datam1.Query3.SQL.Add
        ('INSERT INTO EventCodes (EventNumber,EventName) VALUES (320,''Reimage damaged plate'')');
      Datam1.Query3.ExecSQL(false);
    end;

    hasevent := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add
      ('select TOP 1 EventNumber from EventCodes WHERE EventNumber=321');
    Datam1.Query3.Open;
    if not Datam1.Query3.Eof then
      hasevent := true;
    Datam1.Query3.Close;

    if (hasevent = false) then
    begin
      Datam1.Query3.SQL.Clear;
      Datam1.Query3.SQL.Add
        ('INSERT INTO EventCodes (EventNumber,EventName) VALUES (321,''Reimage page update'')');
      Datam1.Query3.ExecSQL(false);
    end;

    hasevent := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add
      ('select TOP 1 EventNumber from EventCodes WHERE EventNumber=322');
    Datam1.Query3.Open;
    if not Datam1.Query3.Eof then
      hasevent := true;
    Datam1.Query3.Close;

    if (hasevent = false) then
    begin
      Datam1.Query3.SQL.Clear;
      Datam1.Query3.SQL.Add
        ('INSERT INTO EventCodes (EventNumber,EventName) VALUES (322,''Reimage other reason'')');
      Datam1.Query3.ExecSQL(false);
    end;

    hasevent := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add
      ('select TOP 1 ProcessTypeID from ProcessTypes WHERE ProcessTypeID=320');
    Datam1.Query3.Open;
    if not Datam1.Query3.Eof then
      hasevent := true;
    Datam1.Query3.Close;

    if (hasevent = false) then
    begin
      Datam1.Query3.SQL.Clear;
      Datam1.Query3.SQL.Add
        ('INSERT INTO ProcessTypes (ProcessTypeID,ProcessTypeName) VALUES (320,''Reimage'')');
      Datam1.Query3.ExecSQL(false);
    end;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('SELECT * from log (NOLOCK)');
    Datam1.Query1.SQL.Add('Where Event = 8675');
    Datam1.Query1.Open;
    Nlogfields := Datam1.Query1.Fields.Count;
    Datam1.Query1.Close;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add
      ('select TOP 1 Globalsettings,Globalvars from PlancenterSetup');
    Datam1.Query3.Open;
    if not Datam1.Query3.Eof then
    begin
      globaldbsettings := Datam1.Query3.Fields[0].AsString;
      globaldbvars := Datam1.Query3.Fields[1].AsString;
      Datam1.Query3.Close;
    end
    else
    begin
      Datam1.Query3.Close;
      Datam1.Query3.SQL.Clear;
      Datam1.Query3.SQL.Add
        ('Insert PlancenterSetup (Globalsettings,Globalvars,minversion)');
      Datam1.Query3.SQL.Add('values (' + '''' + '1' + '''' + ',' + '''' + '' +
        '''' + ',' + IntToStr(programminorversion) + ')');
      Datam1.Query3.ExecSQL(false);
      Datam1.Query3.Close;
    end;

    ActionThumbFileCenterRetryPossible := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('SELECT  * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' +
      'FileCenterRetryQueue' + '''');
    Datam1.Query3.Open;
    ActionThumbFileCenterRetryPossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' +
      'PressRunOutputMethod' + '''');
    Datam1.Query3.Open;
    PressRunOutputMethodTablePossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' + 'OutputMethodNames' + '''');
    Datam1.Query3.Open;
    OutputMethodNamesTablePossible := not Datam1.Query3.Eof;
    Datam1.Query3.Close;

    // THIS IS THE ONLY PLACE WE CAN ACCEPT * IN FIELD LIST!!!!!!!!!!!!
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select top 1 * from Pagetable (NOLOCK)');
    Datam1.Query3.Open;

    PDFMasterOK  := false;
    Pageformatinpagetable := false;
    Global_HasPageCategoryField := false;
    Global_HasPlateStatusField := false;
    RipSetupIDInPageTable := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('exec sp_columns ''PageTable''');
    Datam1.Query3.Open;
    while not Datam1.Query3.Eof do
    begin
      fieldName := Uppercase(Datam1.Query3.Fields[3].AsString);
      if (fieldName = 'PDFMASTER') then
        PDFMasterOK := true;
      if (fieldName = 'PAGEFORMATID') then
        Pageformatinpagetable := true;
      if (fieldName = 'PAGECATEGORYID') then
        Global_HasPageCategoryField := true;
      if (fieldName = 'PLATESTATUS') then
        Global_HasPlateStatusField := true;
     if (fieldName = 'RIPSETUPID') then
        RipSetupIDInPageTable := true;
     Datam1.Query3.Next;
    end;

    //PDFMasterOK := Datam1.Query3.FieldCount > 92;
    //Pageformatinpagetable := Datam1.Query3.FieldCount > 94;
    //Global_HasPageCategoryField := Datam1.Query3.FieldCount >= 97;
    //Global_HasPlateStatusField := Datam1.Query3.FieldCount >= 98;
    //RipSetupIDInPageTable := Datam1.Query3.FieldCount > 95;



    Datam1.Query3.Close;

    if not Pageformatinpagetable then
      DeviceGroupNamesPossible := false;

    if SPNotuptodate then
    begin
      MessageDlg(InfraLanguage1.Translate
        ('Warning - The database is missing new stored procedures '), mtwarning,
        [mbOk], 0);
    end;

    initglobaldataDebug := 13;
    result := true;
  Except
    begin
      // MessageDlg('Excetion in InitGlobalData()', mtwarning,[mbOk], 0);
      result := false;
    end;
  end;
end;

procedure TFormMain.WindowClose1Execute(Sender: TObject);
begin
  FormMain.Close;
end;

procedure TFormMain.ActionselectPLExecute(Sender: TObject);
begin
  Application.ProcessMessages;
end;

// Used plateframespressid from selecttheplanfromtree() from tree change event..;
function TFormMain.getpressplanid: Integer;
Var
  newtemplate: Boolean;
  ipl, Lindex, presstemplateID, i, IPLF, IP, nip: Integer;
  aktname: string;
  lpage: Integer;
  L: TListItem;
  T: string;
begin
  result := -1;
  try
    presstemplateID := -1;

    aktname := Formsavename.ComboBoxname.text;
    Formsavename.ComboBoxname.Items.Clear;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select Distinct p1.name,p1.PresstemplateID,p2.pressid from presstemplatenames p1 (NOLOCK), presstemplate p2 (NOLOCK)');
    Datam1.Query1.SQL.Add
      ('Where p1.PresstemplateID = p2.PresstemplateID and p2.pressid = ' +
      IntToStr(plateframespressid));
    Datam1.Query1.SQL.Add('order by p1.name');
    Tryopen(Datam1.Query1);
    while not Datam1.Query1.Eof do
    begin
      Formsavename.ComboBoxname.Items.Add(Datam1.Query1.Fields[0].AsString);
      Formsavename.ids[Formsavename.ComboBoxname.Items.Count - 1] :=
        Datam1.Query1.FieldByName('presstemplateid').AsInteger;
      Datam1.Query1.Next;
    end;

    Datam1.Query1.Close;

    if Formsavename.ComboBoxname.Items.Count > 0 then
    begin
      Formsavename.ComboBoxname.ItemIndex :=
        Formsavename.ComboBoxname.Items.IndexOf(aktname);
      Formsavename.ComboBoxname.text := aktname;
    end;

    Formappendruns.ListViewappend.Items.Clear;

    for IPLF := 1 to Nplateframes do
    begin
      T := '';
      nip := planpagenames[IPLF].Npages;
      lpage := 0;
      for IP := 1 to nip do
      begin
        if planpagenames[IPLF].pages[IP].pageindex > 0 then
        begin
          (* if lpage > planpagenames[iplf].pages[ip].pageindex then
            lpage := planpagenames[iplf].pages[ip].pageindex; *)
          Inc(lpage);
          T := T + IntToStr(planpagenames[IPLF].pages[IP].pageindex) + ',';
        end;
      end;

      L := Formappendruns.ListViewappend.Items.Add;
      L.caption := tNames1.pressnameIDtoname(plateframesdata[IPLF].prodplates
        [0].pressid);
      L.SubItems.Add(IntToStr(IPLF));
      L.SubItems.Add(tNames1.editionIDtoname(plateframesdata[IPLF].prodplates[0]
        .editionid));
      L.SubItems.Add(T);
      L.SubItems.Add(IntToStr(lpage));

      L.Checked := true;
    end;

    Formappendruns.appendtoplanid := -1;

    case Formsavename.ShowModal of
      mrOK:
        begin
          if Formsavename.ComboBoxname.Items.Count > 0 then
          begin
            for i := 0 to Formsavename.ComboBoxname.Items.Count - 1 do
            begin
              if Uppercase(Formsavename.ComboBoxname.text)
                = Uppercase(Formsavename.ComboBoxname.Items[i]) then
              begin
                Formappendruns.appendtoplanid := Formsavename.ids[i];
                break;
              end;
            end;
          end;

          if Formappendruns.ShowModal <> mryes then
          begin
            exit;
          end;

        end;
      mryes:
        begin
          if Formsavename.ComboBoxname.Items.Count > 0 then
          begin
            for i := 0 to Formsavename.ComboBoxname.Items.Count - 1 do
            begin
              if Uppercase(Formsavename.ComboBoxname.text)
                = Uppercase(Formsavename.ComboBoxname.Items[i]) then
              begin
                Formappendruns.appendtoplanid := Formsavename.ids[i];
                break;
              end;
            end;
          end;

          if Formappendruns.ShowModal <> mryes then
          begin
            exit;
          end;
        end;
    else
      begin
        exit;
      end;
    end;

    newtemplate := true;
    if Formsavename.ComboBoxname.Items.Count > 0 then
    begin
      for i := 0 to Formsavename.ComboBoxname.Items.Count - 1 do
      begin
        if Uppercase(Formsavename.ComboBoxname.text)
          = Uppercase(Formsavename.ComboBoxname.Items[i]) then
        begin
          presstemplateID := Formsavename.ids[i];
          newtemplate := false;
          break;
        end;
      end;
    end;

    if newtemplate then
    begin

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select top 1 presstemplateid From presstemplatenames (NOLOCK)');
      Datam1.Query1.SQL.Add('order by presstemplateid DESC');
      Tryopen(Datam1.Query1);
      if Datam1.Query1.recordcount > 0 then
      begin
        presstemplateID := Datam1.Query1.FieldByName('presstemplateid')
          .AsInteger + 1;
      End
      else
        presstemplateID := 1;

      Datam1.Query1.SQL.Clear;

      if DBVersion > 1 then
      begin
        Datam1.Query1.SQL.Add
          ('Insert presstemplatenames (PresstemplateID,Name,PressSystem)');
        Datam1.Query1.SQL.Add('values (' + IntToStr(presstemplateID) + ',' +
          '''' + Formsavename.ComboBoxname.text + ''','''')');
      End
      else
      begin
        Datam1.Query1.SQL.Add
          ('Insert presstemplatenames (PresstemplateID,Name)');
        Datam1.Query1.SQL.Add('values (' + IntToStr(presstemplateID) + ',' +
          '''' + Formsavename.ComboBoxname.text + ''''')');
      end;
      trysql(Datam1.Query1);
    end;

    if (IsDefaultPressTemplateNamesPossible) then
    begin
      Datam1.Query1.SQL.Clear;
      if (Formsavename.CheckBoxDefaultTemplate.Checked) then
        Datam1.Query1.SQL.Add
          ('UPDATE PressTemplateNames SET IsDefault=1 WHERE PresstemplateID=' +
          IntToStr(presstemplateID))
      else
        Datam1.Query1.SQL.Add
          ('UPDATE PressTemplateNames SET IsDefault=0 WHERE PresstemplateID=' +
          IntToStr(presstemplateID));
      trysql(Datam1.Query1);
    end;

    result := presstemplateID;
  except
  end;
end;

{ procedure TFormMain.loadplateplan(var pressplan : ttreenode);
  Var
  prnode,secnode,pagenode,colornode : ttreenode;
  ipl,aktflat : Integer;
  begin
  try
  ipl := 0;
  prnode := pressplan.GetFirstChild;
  while prnode <> nil do
  begin
  secnode := prnode.GetFirstChild;
  while secnode <> nil do
  begin
  pagenode := secnode.GetFirstChild;
  while pagenode <> nil do
  begin

  pagenode := pagenode.getNextSibling;
  end;
  secnode := secnode.getNextSibling;
  end;
  prnode := prnode.getNextSibling;
  end;
  except
  end;
  end;
}

procedure TFormMain.setdroptarget;
Var
  i: Integer;
begin
  case PageControlMain.ActivePageIndex of
    VIEW_SEPARATIONS:
      begin
        for i := 0 to TreeViewpagelist.Items.Count - 1 do
          TreeViewpagelist.Items[i].DropTarget := false;
      end;
    VIEW_THUMBNAILS:
      begin
        for i := 0 to TreeViewThumbs.Items.Count - 1 do
          TreeViewThumbs.Items[i].DropTarget := false;
      end;
  end;
end;

function TFormMain.GetSelectedLocationID: Integer;
var
  LocationID: Integer;
begin
  LocationID := -1;
  if (ComboBoxpalocationNY.Enabled) AND (ComboBoxpalocationNY.text <> 'All')
  then
    LocationID := tNames1.locationnametoid
      (ComboBoxpalocationNY.Items[ComboBoxpalocationNY.ItemIndex]);

  result := LocationID;
end;

procedure TFormMain.ActionrefreshpagefilterExecute(Sender: TObject);
Var
  foundlastsel: Boolean;
  Pubdate: string;
  Publication: String;
  Issue: string;
  edition: string;
  section: String;
  DTpubdate: TDateTime;
begin
  try
    errcodenum := 100;
    if activated then
    begin
      writeMainlogfile('Actionrefreshpagefilter start');
      errcodenum := 101;
      errcodenum := 102;
      LoadIDs('Actionrefreshpagefilter', false);
      errcodenum := 103;
      if (ComboBoxpalocationNY.Enabled) AND (ComboBoxpalocationNY.text <> 'All')
      then
      begin
        loadAPagetree(TreeViewpagelist, '', '*', ComboBoxpalocationNY.text, '')
      End
      else
      begin
        loadAPagetree(TreeViewpagelist, '', '', '*', '')

      end;
      errcodenum := 107;
      setdroptarget;
      errcodenum := 108;
      ActionEnable('ActionrefreshpagefilterExecute');
      errcodenum := 109;
      // ActionToolBarpagefilter.SetFocus;
      // ActionMainMenuBar1X.SetFocus;
      writeMainlogfile('Actionrefreshpagefilter End');
    end;
  except

    // MessageDlg('Error during refresh of pagefilter ' + IntToStr(errcodenum), mtInformation,[mbOk], 0);

  end;

end;

procedure TFormMain.ActionPagereimageExecute(Sender: TObject);
Var
  dorem: Boolean;
  highpritext: string;
begin
  getpreselHS;
  if Prefs.ShowReimgeDialog then
  begin
    dorem := MessageDlg(InfraLanguage1.Translate('Reimage ?'), mtConfirmation,
      [mbYes, mbNo], 0) = mryes;
  end
  else
    dorem := true;

  if dorem then
  begin

    if Prefs.SeparationsResetDeviceOnReimage then
    begin
      setpagetablestFlatdata('set deviceid = 0', '', true, false);
    end;
    highpritext := '';
    if Prefs.ReimageWithHighPriority then
      highpritext := ',priority = 100';

    if Morethanoneplateselectedinseplist then
      setpagetablestFlatdata('set status = ' + Reimagetostat +
        ', EmailStatus = (EmailStatus & 0xF0F0FFFF), miscint4 = 0 ,inkstatus = 0,outputtime = 0, ImagingProcessID = 0 '
        + highpritext, 'and status > 30',
        Prefs.SeparationsResetDeviceOnReimage, false)
    else
      setpagetablestFlatdata('set status = ' + Reimagetostat +
        ', EmailStatus = ((EmailStatus | 128) & 0xF0F0FFFF) , miscint4 = 0 ,inkstatus = 0,outputtime = 0, ImagingProcessID = 0 '
        + highpritext, 'and status > 30',
        Prefs.SeparationsResetDeviceOnReimage, false);

    Datam1.SetNewtreeprodid;
    Datam1.UpdateTreeStateOnProduction(false);
    loadSuperHSDB2(false);
    resetpreselHS;
  end;
end;

procedure TFormMain.PBExListviewplatedataSelectItem(Sender: TObject;
  Item: TListItem; Selected: Boolean);
begin
  Item.Checked := Selected;
  Item.StateIndex := Integer(Selected);
end;

procedure TFormMain.cleanupproductionnames;
begin

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('delete productionnames');
  Datam1.Query1.SQL.Add('where not exists (');
  Datam1.Query1.SQL.Add('select productionid from pagetable (NOLOCK)');
  Datam1.Query1.SQL.Add
    ('where productionnames.productionid = pagetable.productionid)');
  trysql(Datam1.Query1);

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('DELETE FROM PageTable WHERE NOT EXISTS (SELECT ProductionID FROM ProductionNames WHERE PageTable.ProductionID=ProductionNames.ProductionID)');
  trysql(Datam1.Query1);

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('delete log where');
  Datam1.Query1.SQL.Add
    ('event<800 and not exists(Select separation from pagetable (NOLOCK)');
  Datam1.Query1.SQL.Add('where pagetable.separation = log.separation)');
  trysql(Datam1.Query1);

  Datam1.Query1.SQL.Add('delete pressrunid where');
  Datam1.Query1.SQL.Add('not exists(Select pressrunid from pagetable (NOLOCK)');
  Datam1.Query1.SQL.Add('where pagetable.pressrunid = pressrunid.pressrunid)');
  trysql(Datam1.Query1);

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('DELETE FROM PageTable WHERE NOT EXISTS (SELECT PressRunID FROM PressRunID WHERE PageTable.PressRunID=PressRunID.PressRunID)');
  trysql(Datam1.Query1);

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('delete PrepollPageTable where');
  Datam1.Query1.SQL.Add
    ('not exists(Select mastercopyseparationset from pagetable (NOLOCK)');
  Datam1.Query1.SQL.Add
    ('where pagetable.mastercopyseparationset = PrepollPageTable.mastercopyseparationset)');
  trysql(Datam1.Query1);

end;

procedure TFormMain.ActionrefreshpagesExecute(Sender: TObject);
begin
  // off loadids;
  loadSuperHSDB2(false);
  ActionEnable('ActionrefreshpagesExecute');
end;

procedure TFormMain.PBExListviewdatalistColumnResize(Sender: TCustomListView;
  columnindex, columnwidth: Integer);
begin
  (* PBExListview1.Visible := false;

  *)
  datalistCols[Colorder[columnindex]].width := columnwidth;
end;

procedure TFormMain.TimerafterdragTimer(Sender: TObject);
begin
  if not StartuPdone then
    exit;
  // memotestPrefs.Debug.Lines.Add('TimerafterdragTimer');
  // memotestPrefs.Debug.refresh;
  ActionrefreshpagesExecute(Self);
  Timerafterdrag.Enabled := false;
end;

// ### NAN 20160115 Potential fatal situation is returned string is empty - may update all PageTable!

function TFormMain.pagetreeselstr: String;
Var
  N: TTreeNode;
begin
  result := '';
  N := TreeViewpagelist.Selected;
  while N.Level > 0 do
  begin
    if result <> '' then
      result := result + ' and ';

    case N.Level of
      1:
        begin
          result := result + ' ' + Datam1.makedatastr('',
            TTreeViewpagestype(N.Data^).Pubdate);
        end;
      2:
        begin
          result := result + ' publicationid = ' +
            IntToStr(TTreeViewpagestype(N.Data^).Publicationid);
        end;
      3:
        begin
          result := result + ' editionid = ' +
            IntToStr(TTreeViewpagestype(N.Data^).editionid);
        end;
      4:
        begin
          result := result + ' sectionid = ' +
            IntToStr(TTreeViewpagestype(N.Data^).Sectionid);
        end;
    end;
    N := N.Parent;
  end;

  // NAN 20150115 Ensure empty result does not select anything..
  if (result = '') then
    result := '0=1';

  result := '( ' + result + ')';
end;

procedure TFormMain.setpagetablestddata(setstr: string; wherestr: string);
Var
  i, Alocationid: Integer;
  N, c: TTreeNode;
  Inliste, wtreestr: String;
  foundone: Boolean;
  allrows: Boolean;
begin
  Nselectedmasters := 0;

  Inliste := 'and separation IN (';
  case PageControlMain.ActivePageIndex of
    VIEW_SEPARATIONS:
      begin
        foundone := false;
        allrows := true;
        for i := 1 to StringGridHS.RowCount do
        begin
          if not SuperHSdata[i - 1].Selected then
          begin
            allrows := false;
          End
          else
            addtoselectedmasters(SuperHSdata[i - 1].mastercopyseparationset);
        end;

        if allrows then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add(setstr);
          Datam1.Query1.SQL.Add('Where active <> -999');
          Datam1.Query1.SQL.Add(wherestr);

          if ComboBoxPagescopies.ItemIndex > 0 then
          begin
            Datam1.Query1.SQL.Add('and copynumber = ' +
              ComboBoxPagescopies.text);
          end;

          Datam1.Query1.SQL.Add('and ' + pagetreeselstr);

          Alocationid := GetSelectedLocationID();
          if (Alocationid > 0) then
            Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

          Alocationid := -1;
          trysql(Datam1.Query1);
        end
        else
        begin

          for i := 1 to StringGridHS.RowCount do
          begin
            if SuperHSdata[i - 1].Selected then
            begin
              Datam1.Query1.SQL.Clear;
              Datam1.Query1.SQL.Add('Update pagetable');
              Datam1.Query1.SQL.Add(setstr);
              Datam1.Query1.SQL.Add('where active <> -999');
              Datam1.Query1.SQL.Add(wherestr);
              if ComboBoxPagescopies.ItemIndex > 0 then
              begin
                Datam1.Query1.SQL.Add('and copynumber = ' +
                  ComboBoxPagescopies.text);
              end;

              Datam1.Query1.SQL.Add('and ' + pagetreeselstr);
              Datam1.Query1.SQL.Add('And separation = ' +
                IntToStr(SuperHSdata[i - 1].Separation));
              Datam1.Query1.SQL.Add(WeditionStr);
              Datam1.Query1.SQL.Add(WpublicationStr);

              trysql(Datam1.Query1);

              foundone := true;
            end;
          end;
        end;
      end;
    VIEW_THUMBNAILS:
      begin // thumbnail
        if PBExListviewthumbnail.Selected <> nil then
        begin
          addtoselectedmasters
            (StrToInt(PBExListviewthumbnail.Selected.SubItems[6]));
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('Update pagetable');
          Datam1.Query1.SQL.Add(setstr);
          Datam1.Query1.SQL.Add('where active <> -999');
          Datam1.Query1.SQL.Add(wherestr);
          Datam1.Query1.SQL.Add('and mastercopyseparationset = ' +
            PBExListviewthumbnail.Selected.SubItems[6]);
          // Datam1.Query1.SQL.Add(notinproofplans);
          Datam1.Query1.SQL.Add(WeditionStr);
          Datam1.Query1.SQL.Add(WpublicationStr);

          if Prefs.Debug then
            Datam1.Query1.SQL.SaveToFile
              (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
              'sqllogs\' + 'approve.SQL');
          trysql(Datam1.Query1);
        end;
      end;
  end;
end;

procedure TFormMain.setGroupBoxworking;
begin
  GroupBoxworking.left := (FormMain.width div 2) -
    (GroupBoxworking.width div 2);
  GroupBoxworking.Top := (FormMain.Height div 2) -
    (GroupBoxworking.Height div 2);
  GroupBoxworking.Visible := true;
  FormMain.Repaint;
  GroupBoxworking.Repaint;
end;

procedure TFormMain.FormClose(Sender: TObject; var Action: TCloseAction);
var
  i: Integer;
  ini: TIniFile;
begin

  if (workerThreadTreeUpdate <> nil) then
  begin
    workerThreadTreeUpdate.terminateit := true;
    workerThreadTreeUpdate.Terminate;
  end;

  if (workerThreadUnknownPages <> nil) then
  begin
    workerThreadUnknownPages.terminateThread := true;
    workerThreadUnknownPages.Terminate;
  end;

  if (workerThreadUnknownFiles <> nil) then
  begin
    workerThreadUnknownFiles.terminateThread := true;
    workerThreadUnknownFiles.Terminate;
  end;

  CloseFile(trysqllogfile);
  if writeplanlog then
    CloseFile(planlogfile);
  saveloggridsize;
  // FoxrmSettings.writeexportcols;
  saveHSwidths;

  try
    if FormPecomrequest.IdFTP1.Connected then
      FormPecomrequest.IdFTP1.Disconnect;
  Except
  end;

  Prefs.SaveShortCuts;
  exitprocess(0);
end;

procedure TFormMain.ActionpageMissingExecute(Sender: TObject);
Var
  i: Integer;
begin
  for i := 1 to StringGridHS.RowCount do
  begin
    if SuperHSdata[i - 1].Selected then
    begin

      (*
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('Update pagetable');
        Datam1.Query1.SQL.Add('set status = 0,inkstatus = 0, proofstatus=0,outputtime = 0, ImagingProcessID = 0 ');
        Datam1.Query1.SQL.Add('where active <> -999');
        Datam1.Query1.SQL.Add('And mastercopyseparationset = ' + IntToStr(SuperHSdata[i-1].mastercopyseparationset));
        trysql(Datam1.Query1);

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('Select distinct copyflatseparationset from pagetable (NOLOCK)');
        Datam1.Query1.SQL.Add('where active <> -999 ');
        Datam1.Query1.SQL.Add('And mastercopyseparationset = ' + IntToStr(SuperHSdata[i-1].mastercopyseparationset));
        Datam1.Query1.Open;
        while not Datam1.Query1.Eof do
        begin
        Datam1.Query2.SQL.Clear;
        Datam1.Query2.SQL.Add('Update pagetable set status = 30, miscint4 = 0 ,outputtime = 0, inkstatus = 0, ImagingProcessID = 0 where copyflatseparationset = ' + Datam1.Query1.Fields[0].AsString);
        Datam1.Query2.SQL.Add('and status > 30');
        Datam1.Query2.execsql;

        Datam1.Query1.Next;
        end;
        Datam1.Query1.Close;

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('Delete PrepollPageTable');
        Datam1.Query1.SQL.Add('where (mastercopyseparationset = ' + IntToStr(SuperHSdata[i-1].mastercopyseparationset) + ')');
        Datam1.Query1.SQL.Add('and (Event not in (130,136,137))');
        trysql(Datam1.Query1);
      *)

      SetMissingOnmaster(SuperHSdata[i - 1].mastercopyseparationset);

      Datam1.SetNewtreeprodid;
    end;
  end;
  Datam1.UpdateTreeStateOnProduction(false);
  loadSuperHSDB2(false);
  resetpreselHS;
end;

procedure TFormMain.SetMissingOnmaster(mastercopyseparationset: Longint);
begin
  try
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Update pagetable');
    Datam1.Query1.SQL.Add
      ('set status = 0,inkstatus = 0, proofstatus=0,outputtime = 0, ImagingProcessID = 0 ');
    Datam1.Query1.SQL.Add('where active <> -999');
    Datam1.Query1.SQL.Add('And mastercopyseparationset = ' +
      IntToStr(mastercopyseparationset));
    trysql(Datam1.Query1);

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select distinct copyflatseparationset from pagetable (NOLOCK)');
    Datam1.Query1.SQL.Add('where active <> -999 ');
    Datam1.Query1.SQL.Add('And mastercopyseparationset = ' +
      IntToStr(mastercopyseparationset));
    Datam1.Query1.Open;
    while not Datam1.Query1.Eof do
    begin
      Datam1.Query2.SQL.Clear;
      Datam1.Query2.SQL.Add
        ('Update pagetable set status = 30, miscint4 = 0 ,outputtime = 0, inkstatus = 0, ImagingProcessID = 0 where copyflatseparationset = '
        + Datam1.Query1.Fields[0].AsString);
      Datam1.Query2.SQL.Add('and status > 30');
      Datam1.Query2.ExecSQL;

      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Delete PrepollPageTable');
    Datam1.Query1.SQL.Add('where (mastercopyseparationset = ' +
      IntToStr(mastercopyseparationset) + ')');
    Datam1.Query1.SQL.Add('and (Event not in (130,136,137))');
    trysql(Datam1.Query1);
  Except
  end;
end;

procedure TFormMain.ActionpagepriorityExecute(Sender: TObject);
begin
  getpreselHS;
  if Formpriority.ShowModal = mrOK then
  begin
    setpagetablestddata('set priority = ' + Formpriority.edit1.text, '');
    loadSuperHSDB2(false);
    resetpreselHS;
  end;
end;

procedure TFormMain.ActionplaterefreshExecute(Sender: TObject);
begin
  pagetableloadstatus := false;
  plateviewrefresh(true, 'ActionplaterefreshExecute');
end;

procedure TFormMain.plateviewrefresh(sameselection: Boolean; FromProc: String);
Var
  i: Integer;
  tid, nu: TDateTime;
begin
  // off loadids;
  if (not Prefs.ReselectPlates) then
    sameselection := false;

  tid := NOW;
  writeMainlogfile('plateviewrefresh start > ' + FromProc);

  if TreeViewPlateview.Selected <> nil then
  begin
    if TreeViewPlateview.Selected.Level > 1 then
    begin
      // if not loadplateview(false,false) then
      // NAN TEST
      if not loadplateview(sameselection, false) then
      begin
        plateviewtreedeselect;
      end;
    end
    else
    begin
      if Nviews > 0 then
      begin
        for i := 0 to Nviews - 1 do
        begin
          Views[i].free;
        end;
      end;
      Nviews := 0;
    end;
  end;

  writeMainlogfile('plateviewrefresh End > ' + FromProc);
  ActionEnable('plateviewrefresh');
  (*
    nu := now;
    MemotestPrefs.Debug.Lines.Add('');
    MemotestPrefs.Debug.Lines.Add(IntToStr(nPagetabeldb) + ','+IntToStr(NPossiblepressrunid));
    MemotestPrefs.Debug.Lines.Add(datetimetostr(tid));
    MemotestPrefs.Debug.Lines.Add(datetimetostr(nu));
    MemotestPrefs.Debug.Lines.Add(IntToStr(MilliSecondsBetween(nu,tid)));
    MemotestPrefs.Debug.refresh;
  *)
  SetLength(Pagetabeldb, 12);
end;

procedure TFormMain.ActionpageretransmitExecute(Sender: TObject);
begin
  if (not Prefs.RestrictRetransmit) then
  begin
    getpreselHS;
    if (Prefs.PlateTransmissionSystem) then
      setpagetablestddata
        ('set status = 30, miscint4 = 0 ,inkstatus = 0,outputtime = 0, ImagingProcessID = 0 ',
        'and status > 10')
    else
      setpagetablestddata
        ('set status = 10, miscint4 = 0 ,inkstatus = 0,outputtime = 0, ImagingProcessID = 0 ',
        'and status > 10');

    setpagetablestFlatdata('set status = 30, miscint4 = 0 ,inkstatus = 0',
      'and status > 30 ', false, false);

    if (not Prefs.PlateTransmissionSystem) then
      settotransmittedifmainlocation;

    Datam1.SetNewtreeprodid;
    Datam1.UpdateTreeStateOnProduction(false);
    loadSuperHSDB2(false);
    resetpreselHS;
  end;
end;

procedure TFormMain.SetAutorefreshMode(ActivePageIndex: Longint);
begin
  ActionCHKpageautorefresh.Checked := false;
  ActionCHKthumbautorefresh.Checked := false;
  Actionplateautorefresh.Checked := false;
  Actionactiveauto.Checked := false;
  ActionProgressautorefresh.Checked := false;
  ActionprodAutorefresh.Checked := false;

  ActionCHKthumbautorefresh.ImageIndex := 149;
  ActionCHKpageautorefresh.ImageIndex := 149;
  Actionplateautorefresh.ImageIndex := 149;
  Actionactiveauto.ImageIndex := 149;
  ActionprodAutorefresh.ImageIndex := 149;
  ActionProgressautorefresh.ImageIndex := 149;

  if (Prefs.AutoRefreshOn) then
  begin
    case ActivePageIndex of
      VIEW_SEPARATIONS:
        begin
          ActionCHKpageautorefresh.Checked := true;
        end;
      VIEW_THUMBNAILS:
        begin
          ActionCHKthumbautorefresh.Checked := true;
        end;
      VIEW_PLATES:
        begin
          Actionplateautorefresh.Checked := true;
        end;
      VIEW_PRODUCTIONS:
        begin
          ActionprodAutorefresh.Checked := true;
        end;
      VIEW_ACTIVEQUEUE:
        begin
          ActionProgressautorefresh.Checked := true;
        end;
    end;
  end;
end;

procedure TFormMain.PageControlMainChange(Sender: TObject);
Var
  DTpubdate: TDateTime;
  Pubdate: string;
  Publication: String;
  Issue: string;
  edition: string;
  section: String;
  foundlastsel: Boolean;
  pressplan: TTreeNode;
  chtype, i: Integer;
  Limittow: Boolean;

begin
  // if PageControlMain.ActivePageIndex = VIEW_PLANS then exit;
  if (not activated) then
    exit;

  try
    if formprev2.Showing then
      formprev2.Clearprev2;

    writeMainlogfile('Tab change start');
    // TimerPlateviewPopup.Enabled := false;

    Limittow := false;
    if firstplateview then
    begin
      for i := 0 to Length(Prefs.VisibleTowers) - 1 do
      begin
        if Prefs.VisibleTowers[i].Visible then
        begin
          Limittow := true;
          break;
        end;
      end;
    end;

    Actionproductionerror.Visible := false;
    TreeViewpagelist.Visible := false;
    TreeViewThumbs.Visible := false;
    TreeViewPlateview.Visible := false;
    TreeViewprodcontrol.Visible := false;
    TreeViewNeweddtree.Visible := false;
    TreeViewLogfilter.Visible := false;
    TreeViewreportfilter.Visible := false;
    GroupBoxinfoingraph.Visible := Prefs.TextOnReportGraph;
    TreeViewpagelist.Items.Clear;
    TreeViewThumbs.Items.Clear;
    TreeViewPlateview.Items.Clear;
    TreeViewprodcontrol.Items.Clear;
    TreeViewNeweddtree.Items.Clear;
    TreeViewLogfilter.Items.Clear;
    TreeViewreportfilter.Items.Clear;

    Movepressgrpfilter;

    MovePubdateFilter;

    Actionprodallcopies.Checked := Prefs.ProductionSelectAllCopies;

    if (FormUknownfiles.Showing) and (PageControlMain.ActivePageIndex > 1) then
      FormUknownfiles.Close;

    mainrefreshing := true;
    MainUpdateing := true;
    TreeStopit := true;
    FormMain.Deallocateplateframes;
    StatusBar1.Panels[4].text := '';
    Timerautorefreshcount := 1;

    SetAutorefreshMode(-1);
    (*
      ActionCHKpageautorefresh.checked := false;
      ActionCHKthumbautorefresh.checked := false;
      Actionplateautorefresh.checked := false;
      Actionactiveauto.checked := false;
      Actionprogressautorefresh.checked := false;
      Actionprodautorefresh.checked := false;
      ActionCHKthumbautorefresh.ImageIndex := 149;
      ActionCHKpageautorefresh.ImageIndex := 149;
      Actionplateautorefresh.ImageIndex := 149;
      Actionactiveauto.ImageIndex := 149;
      Actionprodautorefresh.ImageIndex := 149;
      Actionprogressautorefresh.ImageIndex := 149;
    *)
    lastselids.Publicationid := -1;
    lastselids.editionid := -1;
    lastselids.Sectionid := -1;
    lastselids.LocationID := -1;
    lastselids.pressid := -1;
    lastselids.Pubdate := 0;
    // screen.cursor := crhourglass;

    Actionrefreshpages.ShortCut := 0;
    Actionrefreshpagefilter.ShortCut := 0;
    ActionThumbnailrefresh.ShortCut := 0;
    ActionThumbnailFilterrefresh.ShortCut := 0;
    Actionuknowfiletool.Enabled := false;

    if Nviews > 0 then
      for i := 0 to Nviews - 1 do
        Views[i].free;
    Nviews := 0;
    FormMain.PBExListviewplateinfo.Items.Clear;

    ActionCHKthumbnextnotapproved.Enabled := false;
    ActionCHKthumbnextdisapproved.Enabled := false;
    Formflatproof.Loadflatproofers;

    case PageControlMain.ActivePageIndex of
      VIEW_SEPARATIONS:
        begin
          activetoolbar := ActionToolBarpageactions;
          (* if (Prefs.KeepTreeExpansion) then
            begin
            FormMain.CheckBoxAllLocationsPa.Checked := alllocationsset;
            FormMain.CheckBoxAllLocationsPa.Repaint;
            end; *)
          ActionrefreshpagefilterExecute(Self);
        end;
      VIEW_THUMBNAILS:
        begin
          ComboBoxGlobalPubDateFilter.Top := 4;
          // (ActionToolBarpagefilter.Height - ComboBoxGlobalPubDateFilter.Height) DIV 2;
          activetoolbar := ActionToolBarThumbnail;
          ActionThumbnailFilterrefresh.Execute;
        end;

      VIEW_PLATES:
        begin // Plates
          ComboBoxGlobalPubDateFilter.Top := 4;
          // (ActionToolBarthumbfilter.Height - ComboBoxGlobalPubDateFilter.Height) DIV 2;
          if (Prefs.PlateDetailsOff) then
          begin
            Actionplatedetails.Checked := false;
            GroupBoxPlatedetails.Visible := false;
            Splitterplatedetail.Visible := false;
          end;
          activetoolbar := ActionToolBarplateview;

          firstplateview := false;

          loadAPlatetree(TreeViewPlateview, '', '', ComboBoxpalocationNY.text,
            ComboBoxGlobalPubDateFilter.text)

          // if Limittow then
          // begin
          // loadAPlatetree(TreeViewPlateview,'','',ComboBoxPlatelocation.Text,ComboBoxGlobalPubDateFilter.Text);
          // end;
        end;
      VIEW_PRODUCTIONS:
        begin
          ComboBoxGlobalPubDateFilter.Top := 4;
          // (ActionToolBarprogresstree.Height - ComboBoxGlobalPubDateFilter.Height) DIV 2;
          activetoolbar := ActionToolBarprogress;
          (* if (Prefs.KeepTreeExpansion) then
            FormMain.CheckBoxAllLocationsProd.Checked := alllocationsset;
          *)
          // ComboBoxprodlocationNy.Enabled := not FormMain.CheckBoxAllLocationsProd.Checked;
          // if (PreviousActivePageIndex = 3) or (PreviousActivePageIndex = 5) or (PreviousActivePageIndex > 7) then
          loadAPagetree(TreeViewprodcontrol, '', '', ComboBoxpalocationNY.text,
            ComboBoxGlobalPubDateFilter.text);

        end;

      VIEW_EDITIONS:
        begin // Edition
          ComboBoxGlobalPubDateFilter.Top := 4;
          // (ActionToolBar5.Height - ComboBoxGlobalPubDateFilter.Height) DIV 2;
          activetoolbar := ActionToolBaredition;
          // if (PreviousActivePageIndex = 3) or (PreviousActivePageIndex = 5) or (PreviousActivePageIndex > 7) then
          loadAPagetree(TreeViewNeweddtree, '', '', ComboBoxpalocationNY.text,
            ComboBoxGlobalPubDateFilter.text);

        end;
      VIEW_PLANS:
        begin
          activetoolbar := ActionToolBarAplan;
          Actionnewplanrefresh.Execute;
        end;
      VIEW_LOGS:
        begin
          ComboBoxGlobalPubDateFilter.Top := 4;
          // (ActionToolBar4.Height - ComboBoxGlobalPubDateFilter.Height) DIV 2;
          activetoolbar := ActionToolBarinputerror;
          ActionLogrefreshfilter.Execute;
        end;
      VIEW_REPORTS:
        begin
          ComboBoxGlobalPubDateFilter.Top := 4;
          // (ActionToolBarpagefilter.Height - ComboBoxGlobalPubDateFilter.Height) DIV 2;
          activetoolbar := ActionToolBarreport;
          loadAPagetree(TreeViewreportfilter, '', '', ComboBoxpalocationNY.text,
            ComboBoxGlobalPubDateFilter.text);

          // nan - DO NOT REFRESH AUTOMATICALLY WHEN CHANGING TAB
          // Actionreportrefresh.execute;
        end;
      VIEW_FILES:
        begin
          ComboBoxGlobalPubDateFilter.Top := 4;
          // (ActionToolBarreportfilter.Height - ComboBoxGlobalPubDateFilter.Height) DIV 2;

          // if (directoryexists(PDFUnknownpath)) and (FoxrmSettings.CheckBoxPdfunknown.checked) then
          // TabSheetunknownpdf.TabVisible := true
          // else
          //
          TabSheetunknownpdf.TabVisible := false;

          TabSheetArk.TabVisible := false;
          if (Prefs.EnableArchive) then
          begin
            if (NetDirectoryExists.NetDirectoryExists(PDFarchivepath, 5000)) then
            //if (DirectoryExists(PDFarchivepath))  then
              TabSheetArk.TabVisible := true
           end;
          Actionmontorrefresh.Execute;
        end;
      VIEW_ACTIVEQUEUE:
        begin
          ComboBoxGlobalPubDateFilter.Top := 4;
          // (ActionToolBarpagefilter.Height - ComboBoxGlobalPubDateFilter.Height) DIV 2;
          updateactiveplates;
        end;

    end;

    PreviousActivePageIndex := PageControlMain.ActivePageIndex;

    SetAutorefreshMode(PageControlMain.ActivePageIndex);
    case PageControlMain.ActivePageIndex of
      VIEW_SEPARATIONS:
        begin
          TreeViewpagelist.SetFocus;
        end;
      VIEW_THUMBNAILS:
        begin
          TreeViewThumbs.SetFocus;
        end;
      VIEW_PLATES:
        begin
          TreeViewPlateview.SetFocus;
        end;
      VIEW_PRODUCTIONS:
        begin
          StringGridprods.SetFocus;
        end;
      VIEW_EDITIONS:
        begin
          TreeViewNeweddtree.SetFocus;
        end;
      VIEW_PLANS:
        begin
          TreeViewplan.SetFocus;
        end;
      VIEW_LOGS:
        begin
          TreeViewLogfilter.SetFocus;
        end;
      VIEW_REPORTS:
        begin
          TreeViewreportfilter.SetFocus;
        end;
    end;

  finally

    formprev2.Clearprev2;

    MainUpdateing := false;

    // LastPageControlMain := PageControlMain.ActivePageIndex;

    // ActionEnable('PageControlMainChange');

    screen.Cursor := crdefault;

  end;
  writeMainlogfile('Tab change End');

end;

procedure TFormMain.ActionnotapprovedExecute(Sender: TObject);
begin
  doseparationsReapproval;
end;

procedure TFormMain.ActionpageautoapproveExecute(Sender: TObject);
begin
  doseparationsAutoapproval;
end;

procedure TFormMain.PBExListviewdatalistColumnbegindrag(Sender: TCustomListView;
  columnindex, columnwidth: Integer);
begin
  try
    // PBExListview1.Visible := false;
    Pagepagecoldragging := true;
  except
  end;
end;

procedure TFormMain.ActionPageExportExecute(Sender: TObject);
begin
  HSToExcel;
end;

procedure TFormMain.LoadIDs(FromProc: String; fullReload: Boolean);
Var
  IPrepollEvents, ComboBoxLocationitemindex, ComboBoxLocationpagesitemindex,
    ComboBoxPlatelocationitemindex: Integer;
begin
  try
    writeMainlogfile('Start loadids ' + FromProc);
    // inittypes.Typesloadtemplatearray2;
    // writeMainlogfile('return from load tremplate');

    writeMainlogfile('load names');
    if (fullReload) then
    begin
      inittypes.Typesloadtemplatearray2;
      tNames1.Loadnames;
    end
    else
      tNames1.LoadnamesSmall;
    writeMainlogfile('loadnames done');

  Except
    writeMainlogfile('Execpt in loadids');
    sleep(10);
  end;
end;

{ procedure TFormMain.SetColumnImage(List: TListView; Column, Image: Integer; ShowImage: Boolean);
  var
  Align,hHeader: Integer;
  //HD: HD_ITEM;

  begin
  (*
  hHeader := SendMessage(List.Handle, LVM_GETHEADER, 0, 0);
  with HD do
  begin
  case List.Columns[Column].Alignment of
  taLeftJustify:  Align := HDF_LEFT;
  taCenter:       Align := HDF_CENTER;
  taRightJustify: Align := HDF_RIGHT;
  else
  Align := HDF_LEFT;
  end;

  mask := HDI_IMAGE or HDI_FORMAT;

  pszText := Pchar(List.Columns[Column].Caption);

  if ShowImage then
  fmt := HDF_STRING or HDF_IMAGE or HDF_BITMAP_ON_RIGHT
  else
  fmt := HDF_STRING or Align;

  iImage := Image;
  *)
  end;
}

procedure TFormMain.setpagetablestFlatdata(setstr: string; wherestr: string;
  totset: Boolean; AllPlatecopies: Boolean);
var
  i: Integer;
  N, c: TTreeNode;
  foundone: Boolean;
  Inliste: String;
  allselected: string;
  aktset, Alocationid: Integer;
  allrows: Boolean;
begin
  if totset then
    Inliste := 'and flatseparationset IN ('
  else
    Inliste := 'and flatseparation IN (';
  // FormMain.ListBox1.Items.Clear;              DEBUG purpose
  case PageControlMain.ActivePageIndex of
    VIEW_SEPARATIONS:
      begin
        allrows := true;
        for i := 1 to StringGridHS.RowCount do
        begin
          if not SuperHSdata[i - 1].Selected then
          begin
            allrows := false;
          End
          else
            addtoselectedmasters(SuperHSdata[i - 1].mastercopyseparationset);
        end;
        if allrows then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add(setstr);
          Datam1.Query1.SQL.Add('Where active <> -999');
          Datam1.Query1.SQL.Add(wherestr);

          Datam1.Query1.SQL.Add('and ' + pagetreeselstr);

          Alocationid := GetSelectedLocationID();;
          if (Alocationid > 0) then
            Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

          trysql(Datam1.Query1);
        end
        else
        begin
          aktset := 0;
          foundone := false;
          for i := 1 to StringGridHS.RowCount do
          begin
            if SuperHSdata[i - 1].Selected then
            begin
              if totset then
              begin
                if aktset <> SuperHSdata[i - 1].flatseparationset then
                begin
                  aktset := SuperHSdata[i - 1].flatseparationset;
                  Datam1.Query1.SQL.Clear;
                  Datam1.Query1.SQL.Add('Update pagetable');
                  Datam1.Query1.SQL.Add(setstr);
                  Datam1.Query1.SQL.Add('where active <> -999');
                  Datam1.Query1.SQL.Add(wherestr);
                  Datam1.Query1.SQL.Add('and ' + pagetreeselstr);

                  if AllPlatecopies then
                    Datam1.Query1.SQL.Add('and Copyflatseparationset = ' +
                      IntToStr(SuperHSdata[i - 1].copyflatseparationset))
                  else
                    Datam1.Query1.SQL.Add('and flatseparationset = ' +
                      IntToStr(SuperHSdata[i - 1].flatseparationset));
                  if (WeditionStr <> '') then
                    Datam1.Query1.SQL.Add(WeditionStr);
                  Datam1.Query1.SQL.Add(WpublicationStr);
                  if Prefs.Debug then
                    Datam1.Query1.SQL.SaveToFile
                      (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory())
                      + 'sqllogs\' + 'Setpagelistflatset.SQL');
                  trysql(Datam1.Query1);
                end;
              end
              else
              begin
                Datam1.Query1.SQL.Clear;
                Datam1.Query1.SQL.Add('Update pagetable');
                // FormMain.ListBox1.Items.Add(setstr);           DEBUG purpose
                Datam1.Query1.SQL.Add(setstr);
                Datam1.Query1.SQL.Add('where active <> -999');
                Datam1.Query1.SQL.Add(wherestr);
                Datam1.Query1.SQL.Add('and ' + pagetreeselstr);
                Datam1.Query1.SQL.Add('and flatseparation = ' +
                  IntToStr(SuperHSdata[i - 1].FlatSeparation));
                if (WeditionStr <> '') then
                  Datam1.Query1.SQL.Add(WeditionStr);
                Datam1.Query1.SQL.Add(WpublicationStr);
                if Prefs.Debug then
                  Datam1.Query1.SQL.SaveToFile
                    (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
                    'sqllogs\' + 'Setpagelistflatset.SQL');
                trysql(Datam1.Query1);

              end;
              foundone := true;
            end;
          end;

        end;
      end;

    VIEW_THUMBNAILS:
      begin
        if PBExListviewthumbnail.Selected <> nil then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('Update pagetable');
          Datam1.Query1.SQL.Add(setstr);
          Datam1.Query1.SQL.Add('where active <> -999');
          Datam1.Query1.SQL.Add(wherestr);
          Datam1.Query1.SQL.Add('and mastercopyseparationset = ' +
            PBExListviewthumbnail.Selected.SubItems[6]);
          if (WeditionStr <> '') then
            Datam1.Query1.SQL.Add(WeditionStr);
          Datam1.Query1.SQL.Add(WpublicationStr);
          if Prefs.Debug then
            Datam1.Query1.SQL.SaveToFile
              (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
              'sqllogs\' + 'approve.SQL');
          trysql(Datam1.Query1);
        end;
      end;

  end;
end;

procedure TFormMain.TimerautorefreshTimer(Sender: TObject);
var
  anode, Aktnode, pressnode, publnode, runnode: TTreeNode;
  Aaction: TAction;
  foundlastsel, Updateviewsresult: Boolean;
  pressrunid: Integer;
  Selpublid: Integer;
  Seledition: Integer;
  Selsection: Integer;
  selpubdate: TDateTime;
  ProductionID, pressid: Integer;
  DTpubdate: TDateTime;
  Pubdate: string;
  Publication: String;
  Issue: string;
  edition: string;
  section: String;
begin
  if not StartuPdone then
    exit;
  try

    pagetableloadstatus := false;
    if (not FormMain.Active) AND (not FormMain.Showing) then
      exit;
    // memotestPrefs.Debug.Lines.Add('TimerautorefreshTimer');
    // memotestPrefs.Debug.refresh;
    if FormChangecomment.Showing then
      exit;
    if FormChangeextstatus.Showing then
      exit;
    if Formselectfromlist.Showing then
      exit;
    //if FxormSettings.Showing then
     // exit;
 //   if formlogin.Showing then
   //   exit;

    // ##NAN##
    // if FormPrev2.showing then exit;

    if PageControlMain.ActivePageIndex IN [0, 1, 2, 3, 9] then
    begin

      case PageControlMain.ActivePageIndex of
        VIEW_SEPARATIONS:
          begin
            if TreeViewpagelist.Selected <> nil then
            begin
              if TreeViewpagelist.Selected.Level < 1 then
              begin
                Timerautorefreshcount := 0;
                // ActionCHKpageautorefresh.Checked := false;
              end;
            end;
            // aaction := ActionCHKpageautorefresh;
          end;
        VIEW_THUMBNAILS:
          begin
            // aaction := ActionCHKthumbautorefresh;
          end;

        VIEW_PLATES:
          begin
            // aaction := Actionplateautorefresh;
          end;
        VIEW_PRODUCTIONS:
          begin
            if TreeViewprodcontrol.Selected <> nil then
            begin
              if (TreeViewprodcontrol.Selected.Level <
                Prefs.ProductionMinTreeLevel) then
              begin
                Timerautorefreshcount := 0;
                // ActionprodAutorefresh.Checked := false;
              end;
            end;
            // aaction := ActionprodAutorefresh;
          end;
      end;

      case PageControlMain.ActivePageIndex of
        VIEW_SEPARATIONS:
          begin
            if ActionCHKpageautorefresh.Checked then
            begin
              if TreeViewpagelist.Selected <> nil then
              begin
                if (Prefs.SeparationsFullAutorefresh) and
                  (not Formselectfromlist.Showing) and (not formprev2.Showing)
                  and (TreeViewpagelist.Selected.Level > 1) then
                begin
                  ActionCHKpageautorefresh.ImageIndex := 291;
                  ActionToolBarpageactions.Refresh;
                  // sleep(10);
                  Actionrefreshpages.Execute;
                end;
              end;
            end;
          end;
        VIEW_THUMBNAILS:
          begin
            if TreeViewThumbs.Selected <> nil then
            begin
              if (ActionCHKthumbautorefresh.Checked) And (not formprev2.Showing)
                and (not Formselectfromlist.Showing) and (not Formproof.Showing)
                and (TreeViewThumbs.Selected.Level > 1) then
              begin

                ActionCHKthumbautorefresh.ImageIndex := 291;
                ActionToolBarThumbnail.Refresh;
                loadthumbnails(false);
              end;
            end;
          end;

        VIEW_PLATES:
          begin
            if Actionplateautorefresh.Checked then
            begin
              if TreeViewPlateview.Selected <> nil then
              begin
                if (not formprev2.Showing) then
                begin
                  // off loadids;
                  if (TreeViewPlateview.Selected.Level > 1) then
                  begin
                    Actionplateautorefresh.ImageIndex := 291;
                    ActionToolBarplateview.Refresh;
                    runnode := TreeViewPlateview.Selected;
                    if runnode = nil then
                      exit;
                    if (runnode.Level < Prefs.PlateTreeMinLevel) then
                      exit;
                    pressrunid := TTreeViewpagestype(runnode.Data^).pressrunid;
                    writeMainlogfile('Loadplateview pressrunid = ' +
                      IntToStr(pressrunid));
                    if runnode.Level > 3 Then
                      Selsection := TTreeViewpagestype(runnode.Data^).Sectionid;

                    if runnode.Level = 3 Then
                      Seledition := TTreeViewpagestype(runnode.Data^).editionid;
                    writeMainlogfile('Loadplateview3 ');
                    while runnode.Level > 3 do
                      runnode := runnode.Parent;

                    pressnode := runnode.Parent;
                    while pressnode.Level > 0 do
                      pressnode := pressnode.Parent;

                    Selpublid := TTreeViewpagestype(runnode.Data^).Publicationid;
                    selpubdate := TTreeViewpagestype(runnode.Data^).Pubdate;
                    ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;
                    pressid := TTreeViewpagestype(runnode.Data^).platetreepressid;

                    if (Prefs.SmoothPlateAutoRefresh) then
                    begin
                      Debugautorefreshing := true;
                      if Prefs.NewPlateDataSystem then
                        FormMain.Getplateviewpagetable(ProductionID, pressid);
                      Updateviewsresult := Updateviews;
                      if not Updateviewsresult then
                      begin
                        if not loadplateview(false, false) then
                          plateviewtreedeselect;
                      End
                      else
                      begin
                        (*
                          if not loadplateview(true,true ) then
                          plateviewtreedeselect; *)
                      end;
                      Debugautorefreshing := false;
                    end
                    else
                    begin
                      if not loadplateview(false, false) then
                        plateviewtreedeselect;
                    end;
                  end;
                end;
                // ActionEnable('TimerautorefreshTimer');
              end;
            end;
          end;
        VIEW_PRODUCTIONS:
          begin
            if ActionprodAutorefresh.Checked then
            begin
              if TreeViewprodcontrol.Selected <> nil then
              begin
                ActionprodAutorefresh.ImageIndex := 291;
                ActionToolBarprogress.Refresh;
                Newrefreshprogress;
              end;
            end;
          end;

        VIEW_ACTIVEQUEUE:
          begin
            if ActionProgressautorefresh.Checked then
            begin
              ActionProgressautorefresh.ImageIndex := 291;
              ActionToolBarprogress.Refresh;
              updateactiveplates;
            end;

          end;

      end;
    end;
  Except
  end;
  Timerautorefresh.Enabled := false;
  Timerautorefresh.Interval := Prefs.AutoRefreshSpeed * 1000;
  Timerautorefresh.Enabled := true;

  ActionCHKpageautorefresh.ImageIndex := 149;
  ActionCHKthumbautorefresh.ImageIndex := 149;
  Actionplateautorefresh.ImageIndex := 149;
  ActionprodAutorefresh.ImageIndex := 149;
  ActionProgressautorefresh.ImageIndex := 149;
end;

procedure TFormMain.setlistsortcol;
var
  i, i2: Integer;
begin
  if Listsortcol > -99 then
  begin
    comparecols[0].col := Listsortcol - 1;
    comparecols[0].sorttype := 1;
  end
  else
    comparecols[0].col := -99;
  for i := 0 to 6 do
  begin
    for i2 := 0 to NdatalistCols do
    begin
      if comparecols[i].col = datalistCols[i2].col then
      begin
        if datalistCols[i2].field = 'p1.pagename' then
        begin
          if (Prefs.UsePageIndexForSorting) then
          begin
            comparecols[i].col := datalistCols[46].col;
            comparecols[i].sorttype := datalistCols[46].kind;
          end;
        end
        else
          comparecols[i].sorttype := datalistCols[i2].kind;
        break;
      end;
    end;
  end;
end;

procedure TFormMain.PBExListviewdatalistColumnClick(Sender: TObject;
  Column: TListColumn);
begin
  if cursortlistcol <> Column.Index then
    sortdirectiondown := true
  else
    sortdirectiondown := not sortdirectiondown;

  Listsortcol := Column.Index;
  cursortlistcol := Column.Index;

  setlistsortcol;

  (Sender as TCustomListView).AlphaSort;

  // drawspeedlist;
end;

procedure TFormMain.PBExListview1ColumnClick(Sender: TObject;
  Column: TListColumn);
begin

end;

(*
  procedure TFormMain.DataListViewWndProc(var Msg: TMessage);
  begin
  ShowScrollBar(PBExListviewdatalist.Handle, SB_HORZ, true);
  ShowScrollBar(PBExListviewdatalist.Handle, SB_VERT, false);
  FListViewWndProc(Msg); // process message
  end;

  procedure TFormMain.List1ViewWndProc(var Msg: TMessage);
  begin
  ShowScrollBar(PBExListview1.Handle, SB_HORZ, false);
  ShowScrollBar(PBExListview1.Handle, SB_VERT, true);
  FList1ViewWndProc(Msg); // process message
  end;
*)

procedure TFormMain.PBExListview1CustomDrawSubItem(Sender: TCustomListView;
  Item: TListItem; SubItem: Integer; State: TCustomDrawState;
  var DefaultDraw: Boolean);
var
  T: String;
begin
end;

procedure TFormMain.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
var
  i: Integer;
  ini: TIniFile;
begin
  workerThreadTreeUpdate.terminateit := true;

  activated := false;
  termprog := true;
  try
    ini := TIniFile.Create(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory
      ()) + 'LastUser.ini');
    ini.WriteString('system', 'lastuser', Prefs.Username);
    ini.free;
  except
  end;

  CanClose := true;
end;

procedure TFormMain.expandlangfile(language: String);
var
  langini, defini: TIniFile;
  T: string;
  i: Integer;
begin
  try
    T := ExtractFilePath(Application.ExeName) + 'INFRA-default.Trl'; // OK!
    defini := TIniFile.Create(T);
    T := ExtractFilePath(Application.ExeName) + 'INFRA-' + language + '.Trl';
    // OK!

    langini := TIniFile.Create(T);

    defini.ReadSection('Translation', langsections.Items);
    for i := 0 to langsections.Items.Count - 1 do
    begin
      T := langini.ReadString('Translation', langsections.Items[i], '');
      if T = '' then
        langini.WriteString('Translation', langsections.Items[i],
          defini.ReadString('Translation', langsections.Items[i], ''));
    end;

    langini.free;
    defini.free;
  except
  end;
end;

procedure TFormMain.PBExListviewdatalistVertscroll(Sender: TObject);
begin
  scrolling := false;
end;

function TFormMain.converttoExcelnums(datatext: string; col: Integer): string;
begin
  result := '';
  try
    case col of
      10:
        begin
          result := IntToStr(inittypes.getstatuscodefromname(datatext));
        end;
      13:
        begin
          if datatext = apprnamearray[0] then
            result := '0';
          if datatext = apprnamearray[1] then
            result := '1';
          if datatext = apprnamearray[2] then
            result := '2';
          if datatext = apprnamearray[3] then
            result := '3';
          if datatext = apprnamearray[4] then
            result := '4';
        end;
      14:
        begin
          if datatext = Holdrealesarray[0] then
            result := '0';
          if datatext = Holdrealesarray[1] then
            result := '1';
        end;
      30:
        begin
          if datatext = Yesnoarray[0] then
            result := '0';
          if datatext = Yesnoarray[1] then
            result := '1';
        end;
      31:
        begin
          if datatext = Yesnoarray[0] then
            result := '0';
          if datatext = Yesnoarray[1] then
            result := '1';
        end;
    else
      result := datatext;
    end;
  except
  end;
end;

procedure TFormMain.ActionPagereproofExecute(Sender: TObject);
begin
  getpreselHS;
  setpagetablestddata('set proofstatus = 0', '');
  loadSuperHSDB2(false);
  resetpreselHS;
end;

procedure TFormMain.ActionaboutExecute(Sender: TObject);
begin
  FormAbout.ShowModal;
end;

procedure TFormMain.cleanupfilesonserver;
Var
  ini: TIniFile;

  Lstdeltime: TDateTime;
begin
  exit;
  // NAN 20160810 NOT USED!
  (*
    ini := tinifile.Create(ExtractFilePath(axpplication.ExeName)+'plancenter.ini');
    Lstdeltime := ini.ReadDateTime('System','lastthrcleanup',now);

    if HoursBetween(now,Lstdeltime) > 10 then
    begin
    if delfilesthread.running then
    delfilesthread.Rerun := true;
    delfilesthread.Startit := true;
    ini.writeDateTime('System','lastthrcleanup',Lstdeltime);
    end;
    ini.free; *)
end;

procedure TFormMain.ActionPagelistChangecolumnsExecute(Sender: TObject);
begin
  if Configallowed then
  begin
    if FormSaveloadcols.ShowModal = mrOK then
    begin

    end;
    loadSuperHSDB2(true);
  end;
end;

procedure TFormMain.saveHSwidths;
Var
  inif: TIniFile;
  i, i2: Integer;
begin
  try
    inif := TIniFile.Create
      (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
      'DataListorder.ini');

    for i2 := 0 to StringGridHS.ColCount - 1 do
    begin
      for i := 0 to 100 do
      begin
        if HSCols[i].Name = StringGridHS.cells[i2, 0] then
        begin
          HSCols[i].width := StringGridHS.ColWidths[i2];
          break;
        end;
      end;
    end;

    for i := 0 to 100 do
    begin
      inif.writeinteger('Width', IntToStr(i), HSCols[i].width);
    end;

    for i := 0 to StringGridReport.ColCount - 1 do
    begin
      inif.writeinteger('StringGridReport', IntToStr(i),
        StringGridReport.ColWidths[i]);
    end;

    inif.free;
  except
  end;
end;

procedure TFormMain.ComboBoxactiveChange(Sender: TObject);
begin
  if PageControlMain.ActivePageIndex = VIEW_SEPARATIONS then
    loadSuperHSDB2(false);
end;

procedure TFormMain.ComboBoxStatusChange(Sender: TObject);
begin
  if (PageControlMain.ActivePageIndex = VIEW_SEPARATIONS) and (activated) then
    loadSuperHSDB2(false);
end;

procedure TFormMain.ComboBoxapprovalChange(Sender: TObject);
begin
  if (PageControlMain.ActivePageIndex = VIEW_SEPARATIONS) and (activated) then
    loadSuperHSDB2(false);

end;

procedure TFormMain.ComboBoxholdChange(Sender: TObject);
begin
  if (PageControlMain.ActivePageIndex = VIEW_SEPARATIONS) and (activated) then
    loadSuperHSDB2(false);
end;

procedure TFormMain.PBExListviewthumbnailVertscroll(Sender: TObject);
begin
  aktPBExListviewthumbnailvertpos := PBExListviewthumbnail.Vertpos;
end;

procedure TFormMain.ActionPlaterefreshtreeExecute(Sender: TObject);
var
  foundlastsel: Boolean;
  Pubdate: string;
  Publication: String;
  Issue: string;
  edition: string;
  section: String;
  DTpubdate: TDateTime;
  i, N: Integer;
begin
  MainUpdateing := true;
  pagetableloadstatus := false;
  // for i := 1 to 100 do
  // Expanedpresses[i] := '';
  // n :=0;
  // for i := 0 to TreeViewPlateview.Items.Count-1 do
  // begin
  // if (TreeViewPlateview.Items[i].Level = 0) and (TreeViewPlateview.Items[i].Expanded) then
  // begin
  // inc(n);
  // Expanedpresses[n] := TreeViewPlateview.Items[i].Text;
  // end;
  // end;

  loadAPlatetree(TreeViewPlateview, '', '', ComboBoxpalocationNY.text, ComboBoxGlobalPubDateFilter.text)

end;

procedure TFormMain.ActionPageCHstackExecute(Sender: TObject);
var
  i: Integer;
  T: string;
begin
  getpreselHS;
  Formeditatext.caption := InfraLanguage1.Translate('Change stackposition');
  Formeditatext.Label1.caption := InfraLanguage1.Translate('Stackposition');

  Formeditatext.ComboBox1.Items.Clear;
  for i := 0 to Length(Prefs.StackNamesList) - 1 do
    Formeditatext.ComboBox1.Items.Add(Prefs.StackNamesList[i]);

  Formeditatext.ComboBox1.text := '';

  if Formeditatext.ShowModal = mrOK then
  begin
    T := Formeditatext.ComboBox1.text;
    if Length(T) > 4 then
      Delete(T, 5, Length(T));

    if (Prefs.OrStackpositionsTogether) then
      setpagetablestddata('set SortingPosition = ' + '''' + T + '''' +
        ' +SUBSTRING(SortingPosition,' + IntToStr(Length(T) + 1) +
        ',DATALength(SortingPosition))', '')
    else
      setpagetablestddata('set sortingposition = ' + '''' + T + '''', '');
    loadSuperHSDB2(false);
    resetpreselHS;
  end;
end;

procedure TFormMain.ActionpagechangetowerExecute(Sender: TObject);
Var
  T: string;
  i: Integer;
begin
  getpreselHS;
  Formeditatext.caption := InfraLanguage1.Translate('Change press tower');
  Formeditatext.Label1.caption := InfraLanguage1.Translate('tower');

  Formeditatext.ComboBox1.text := '';
  Formeditatext.ComboBox1.Items.Clear;

  for i := 0 to Length(Prefs.PressTowers) - 1 do
  begin
    Formeditatext.ComboBox1.Items.Add(Prefs.PressTowers[i].Tower);
  end;

  if Formeditatext.ShowModal = mrOK then
  begin
    T := Formeditatext.ComboBox1.text;
    if Length(T) > 4 then
      Delete(T, 5, Length(T));

    setpagetablestddata('set presstower = ' + '''' + T + '''', '');
    loadSuperHSDB2(false);
    resetpreselHS;
  end;
end;

procedure TFormMain.ActionPageCHCylExecute(Sender: TObject);
Var
  i: Integer;
  T: string;
begin
  getpreselHS;
  Formeditatext.caption := InfraLanguage1.Translate('Change press cylinder');
  Formeditatext.Label1.caption := InfraLanguage1.Translate('cylinder');

  Formeditatext.ComboBox1.Items.Clear;
  for i := 0 to Length(Prefs.CylinderNameTranslation) - 1 do
    Formeditatext.ComboBox1.Items.Add(Prefs.CylinderNameTranslation[i].Value);

  Formeditatext.ComboBox1.text := '';
  if Formeditatext.ShowModal = mrOK then
  begin
    T := Formeditatext.ComboBox1.text;
    if Length(T) > 4 then
      Delete(T, 5, Length(T));

    setpagetablestddata('set presscylinder = ' + '''' + T + '''', '');
    loadSuperHSDB2(false);
    resetpreselHS;
  end;
end;

procedure TFormMain.ActionpagePressZonesExecute(Sender: TObject);
Var
  i: Integer;
  T: string;
begin
  getpreselHS;
  Formeditatext.caption := InfraLanguage1.Translate('Change press Zone');
  Formeditatext.Label1.caption := InfraLanguage1.Translate('Zone');

  Formeditatext.ComboBox1.Items.Clear;
  for i := 0 to Length(Prefs.ZoneNamesList) - 1 do
    Formeditatext.ComboBox1.Items.Add(Prefs.ZoneNamesList[i]);

  Formeditatext.ComboBox1.text := '';
  if Formeditatext.ShowModal = mrOK then
  begin
    T := Formeditatext.ComboBox1.text;
    if Length(T) > 8 then
      Delete(T, 9, Length(T));

    setpagetablestddata('set pressZone = ' + '''' + T + '''', '');
    loadSuperHSDB2(false);
    resetpreselHS;
  end;
end;

procedure TFormMain.ActionPageCHHighlowExecute(Sender: TObject);
Var
  T: string;
begin
  getpreselHS;
  Formeditatext.caption := InfraLanguage1.Translate('Change cylinder position');
  Formeditatext.Label1.caption := InfraLanguage1.Translate('cylinder position');
  Formeditatext.ComboBox1.Items.Clear;
  Formeditatext.ComboBox1.Items.Add('High');
  Formeditatext.ComboBox1.Items.Add('Low');
  Formeditatext.ComboBox1.text := '';
  if Formeditatext.ShowModal = mrOK then
  begin
    T := Formeditatext.ComboBox1.text;
    if Length(T) > 4 then
      Delete(T, 5, Length(T));

    setpagetablestddata('set presshighlow = ' + '''' + T + '''', '');
    loadSuperHSDB2(false);
    resetpreselHS;
  end;
end;

procedure TFormMain.ActionProgressholdExecute(Sender: TObject);
  function Makeprodrealwherestr: String;
  Var
    i: Integer;
    wherestr: string;
    INcopies, INpressrunids: String;

  begin
    if TreeViewprodcontrol.Selected = nil then
      exit;
    if TreeViewprodcontrol.Selected.Level < 0 then
      exit;

    wherestr := '(';
    for i := 1 to StringGridprods.RowCount do
    begin
      if StringGridprodsdata[i].Selected then
      begin
        if Length(wherestr) > 1 then
          wherestr := wherestr + ' OR ';

        wherestr := wherestr + '(pressrunid = ' +
          IntToStr(StringGridprodsdata[i].pressrunid) + ')';

      end;
    end;

    if Length(wherestr) > 1 then
      wherestr := wherestr + ')'
    else
      wherestr := '';

    result := wherestr;
  end;

Var
  wherestr: string;

begin
  if TreeViewprodcontrol.Selected = nil then
    exit;

  wherestr := makeprogwherestr('');

  if (Prefs.ProductionReleaseHoldAllCopies) then
    wherestr := Makeprodrealwherestr;

  try
    if wherestr <> '' then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      Datam1.Query1.SQL.Add('set hold = 1');
      Datam1.Query1.SQL.Add('where active <> -98 and ' + wherestr);
      if Prefs.Debug then
        Datam1.Query1.SQL.SaveToFile
          (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'
          + 'Setprodhold.SQL');
      Datam1.Query1.SQL.Add(WeditionStr);
      trysql(Datam1.Query1);
      Newrefreshprogress;

      if (Prefs.LogHold) then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('Select filename,version,separation,productionid from pagetable (NOLOCK)');
        Datam1.Query1.SQL.Add('where active <> -98 and ' + wherestr);
        Datam1.Query1.Open;
        while not Datam1.Query1.Eof do
        begin
          FormMain.SaveEventlog(81, Datam1.Query1.Fields[2].AsInteger, 0, '',
            Datam1.Query1.Fields[0].AsString, Datam1.Query1.Fields[1].AsInteger,
            Datam1.Query1.Fields[3].AsInteger);
          Datam1.Query1.Next;
        end;
        Datam1.Query1.Close;
      end;
    end;
  Except
  end;
end;

procedure TFormMain.PBExListviewprogressClick(Sender: TObject);
begin
  ActionEnable('PBExListviewprogressClick');
end;

procedure TFormMain.ActionProgressreleaseExecute(Sender: TObject);
begin
  productionrelase(false);
end;

procedure TFormMain.productionrelase(Monoonly: Boolean);

  function Makeprodrealwherestr: String;
  var
    i: Integer;
    wherestr: string;
    INcopies, INpressrunids: String;

  begin
    if TreeViewprodcontrol.Selected = nil then
      exit;
    if TreeViewprodcontrol.Selected.Level < 0 then
      exit;

    wherestr := '(';
    for i := 1 to StringGridprods.RowCount do
    begin
      if StringGridprodsdata[i].Selected then
      begin
        if Length(wherestr) > 1 then
          wherestr := wherestr + ' OR ';

        wherestr := wherestr + '(pressrunid = ' +
          IntToStr(StringGridprodsdata[i].pressrunid) + ')';

      end;
    end;

    if Length(wherestr) > 1 then
      wherestr := wherestr + ')'
    else
      wherestr := '';

    // NAN 20160115 Ensure empty where strgin does not select anything
    if (wherestr = '') OR (wherestr = '(') OR (wherestr = '()') then
      wherestr := '(1=0)';

    result := wherestr;
  end;

Var
  i: Integer;
  L: TListItem;
  DevWherestr, wherestr: string;
  loca, press: Integer;

begin

  if TreeViewprodcontrol.Selected = nil then
    exit;

  wherestr := makeprogwherestr('');
  if (Prefs.ProductionReleaseHoldAllCopies) then
    wherestr := Makeprodrealwherestr;

  if Prefs.MustSetDeviceOnRelease then
  begin
    if TreeViewprodcontrol.Selected = nil then
      exit;

    if Prefs.ReleaseRules[0] then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select TOP 1 pressrunid,deviceid from pagetable (NOLOCK)');
      Datam1.Query1.SQL.Add('where active <> -98 and ' + wherestr);
      Datam1.Query1.SQL.Add('And deviceid < 1 ');
      Datam1.Query1.SQL.Add('And active = 1');
      Datam1.Query1.SQL.Add('And pagetype <> 3 ');

      // Datam1.Query1.SQL.SaveToFile('c:\a.SQL');
      Datam1.Query1.Open;
      if not Datam1.Query1.Eof then
      begin
        Datam1.Query1.Close;

        ActionproddeviceExecute(Self);
        (*

          if MessageDlg('Some plates do not have an assigned device continue?',mtConfirmation, [mbYes, mbNo], 0) <> mrYes then
          exit;
        *)
      end
      else
        Datam1.Query1.Close;
    end;
  end;

  try

    // NAN 20160115 Make sure empty where string does not select anything
    if (wherestr = '') then
      wherestr := '1=0';

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable');
    Datam1.Query1.SQL.Add('set hold = 0'); // OK
    if (Prefs.SetApproveTimeOnRelease) then
      Datam1.Query1.SQL.Add(', approvetime = getdate(),approveuser=' + '''' +
        Prefs.Username + '''');
    Datam1.Query1.SQL.Add('where active <> -98 and ' + wherestr);
    if Monoonly then
      Datam1.Query1.SQL.Add('and colorid = 4');
    Datam1.Query1.SQL.Add(WeditionStr);
    trysql(Datam1.Query1);
    Newrefreshprogress;

    if (Prefs.LogHold) then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select filename,version,separation,productionid from pagetable (NOLOCK) ');
      Datam1.Query1.SQL.Add('where active <> -98 and ' + wherestr);
      Datam1.Query1.Open;
      while not Datam1.Query1.Eof do
      begin
        FormMain.SaveEventlog(80, Datam1.Query1.Fields[2].AsInteger, 0, '',
          Datam1.Query1.Fields[0].AsString, Datam1.Query1.Fields[1].AsInteger,
          Datam1.Query1.Fields[3].AsInteger);
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;
    end;

  Except
  end;
end;

procedure TFormMain.ActionProgresspriorityExecute(Sender: TObject);
Var
  i: Integer;
  L: TListItem;
  wherestr: string;
  loca, press: Integer;

begin

  if TreeViewprodcontrol.Selected = nil then
    exit;

  wherestr := makeprogwherestr('');
  if Formpriority.ShowModal = mrOK then
  begin

    try
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      Datam1.Query1.SQL.Add('set priority = ' + Formpriority.edit1.text);
      Datam1.Query1.SQL.Add('where active > -1 and ' + wherestr);
      Datam1.Query1.SQL.Add(WeditionStr);
      trysql(Datam1.Query1);
      Newrefreshprogress;
    Except
    end;
  end;
end;

procedure TFormMain.ActionprodsoftproofExecute(Sender: TObject);
Var
  i: Integer;
  L: TListItem;
  wherestr: string;
  loca, press: Integer;
begin

  if TreeViewprodcontrol.Selected = nil then
    exit;
  wherestr := makeprogwherestr('');
  Formproof.init;

  if Formproof.ShowModal = mrOK then
  begin
    try
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      Datam1.Query1.SQL.Add('set proofstatus = 0, proofid = ' +
        IntToStr(Formproof.Selectedproofid));
      Datam1.Query1.SQL.Add('where active > -1 and ' + wherestr);
      Datam1.Query1.SQL.Add(WeditionStr);
      trysql(Datam1.Query1);
      Newrefreshprogress;
    Except
    end;
  end;
end;



procedure TFormMain.scrollmultiruns(scrpos: Integer; scrmove: Integer;
  Number: Longint);
var
  lpMinPos, lpMaxPos, X, N, i: Integer;
begin
  for i := 1 to NMultiruns do
  begin
    if i <> Number then
    begin
      GetScrollRange(Multiruns[i].FrameMultirun.PBExListviewplates.Handle,
        SB_HORZ, lpMinPos, lpMaxPos);
      X := GetScrollPos(Multiruns[i].FrameMultirun.PBExListviewplates.
        Handle, SB_HORZ);
      if scrpos <= lpMaxPos then
      begin
        N := scrpos - X;
        Multiruns[i].FrameMultirun.PBExListviewplates.Scroll(N, 0);
      end;
    end;
  end;
end;

procedure TFormMain.Syncscrollbars(Number: Longint);
Var
  lpMinPos, lpMaxPos, X, N, i, x2: Integer;
begin
  x2 := GetScrollPos(Multiruns[Number].FrameMultirun.PBExListviewplates.
    Handle, SB_HORZ);
  for i := 1 to NMultiruns do
  begin
    if i <> Number then
    begin
      GetScrollRange(Multiruns[i].FrameMultirun.PBExListviewplates.Handle,
        SB_HORZ, lpMinPos, lpMaxPos);
      X := GetScrollPos(Multiruns[i].FrameMultirun.PBExListviewplates.
        Handle, SB_HORZ);
      if x2 <= lpMaxPos then
      begin
        N := x2 - X;
        Multiruns[i].FrameMultirun.PBExListviewplates.Scroll(N, 0);
      end;
    end;
  end;
end;

procedure TFormMain.changemastertoSinglespread(mastercopyseparationset
  : Longint);
Var
  aktpairpos, antipairpos: Integer;
  // antinode,c : ttreenode;
  tmpl: TPlatetemplate;
  // platenumber : Integer;
  rotation: TPageNumbering;
  // Ligende : Boolean;
  NAktpairposes: Integer;
  Aktpairposes: pparray;
  IAktpairposes: Integer;
  TemplateID: Integer;
  pagetypes: TPageNumbering;

  APPOS: pparray;
  ANPPOS: Integer;
begin
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('select Distinct p1.templateid,p1.Copyflatseparationset,p1.pagepositions from pagetable p1 (NOLOCK)');
  Datam1.Query1.SQL.Add('where p1.mastercopyseparationset = ' +
    IntToStr(mastercopyseparationset));
  Datam1.Query1.SQL.Add('order by p1.Copyflatseparationset');
  Tryopen(Datam1.Query1);
  while not Datam1.Query1.Eof do
  begin
    inittypes.PPOSstrtoarray(Datam1.Query1.FieldByName('pagepositions')
      .AsString, Aktpairposes, NAktpairposes);
    TemplateID := inittypes.gettemplatenumberfromID
      (Datam1.Query1.FieldByName('templateid').AsInteger);
    tmpl := PlatetemplateArray[TemplateID];
    rotation := tmpl.PageRotationList;

    if tmpl.NupOnplate > 1 then
    begin

      for IAktpairposes := 1 to NAktpairposes do
      begin
        aktpairpos := Aktpairposes[IAktpairposes];

        antipairpos := Supergetantipos(aktpairpos, pagetypes, TemplateID, true);

        // antipairpos := getantinumber(TemplateID,aktpairpos);

        Datam1.Query2.SQL.Clear;
        Datam1.Query2.SQL.Add
          ('select Distinct p1.mastercopyseparationset,p1.pagepositions,p1.Copyflatseparationset from pagetable p1 (NOLOCK)');
        Datam1.Query2.SQL.Add('where p1.mastercopyseparationset <> ' +
          IntToStr(mastercopyseparationset));
        Datam1.Query2.SQL.Add('and p1.Copyflatseparationset = ' +
          Datam1.Query1.FieldByName('Copyflatseparationset').AsString);
        Tryopen(Datam1.Query2);
        while not Datam1.Query2.Eof do
        begin
          inittypes.PPOSstrtoarray(Datam1.Query2.FieldByName('pagepositions')
            .AsString, APPOS, ANPPOS);
          if inittypes.POSinPosarray(antipairpos, APPOS, ANPPOS) then
          begin
            Datam1.Query3.SQL.Clear;
            Datam1.Query3.SQL.Add('Update pagetable');
            Datam1.Query3.SQL.Add('set active = 1, pagetype = 0');
            Datam1.Query3.SQL.Add('where mastercopyseparationset = ' +
              Datam1.Query2.FieldByName('mastercopyseparationset').AsString);
            Datam1.Query3.SQL.Add('and Copyflatseparationset = ' +
              Datam1.Query2.FieldByName('Copyflatseparationset').AsString);
            Datam1.Query3.ExecSQL;
          end;
          Datam1.Query2.Next;
        end;
        Datam1.Query2.Close;
      end;
    end;
    Datam1.Query1.Next;
  end;
  Datam1.Query1.Close;

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('Update pagetable');
  Datam1.Query1.SQL.Add('set pagetype = 0');
  Datam1.Query1.SQL.Add('where mastercopyseparationset = ' +
    IntToStr(mastercopyseparationset));
  Datam1.Query1.ExecSQL;

end;

{ function TFormMain.getantinumber(TemplateID : Integer;
  aktpairpos : Longint):Integer;
  Var
  Ligende : Boolean;
  begin
  result := 1;
  if PlatetemplateArray[TemplateID].PageRotationList[1] mod 2 = 0 then
  begin // 'stående';
  Ligende := false;
  end
  else
  begin // liggende

  Ligende := true;
  end;
  case PlatetemplateArray[TemplateID].NupOnplate of
  1 : begin
  end;
  2 : begin
  if aktpairpos = 1 then
  result := 2
  else
  result := 1;
  end;
  3 : begin
  if Ligende then
  begin
  case aktpairpos of
  1 : result := 2;
  2 : result := 1;
  3 : result := 2;
  end;
  end
  else
  begin
  case aktpairpos of
  1 : result := 2;
  2 : result := 1;
  3 : result := 2;

  end;
  end;
  end;
  4 : begin
  if Ligende then
  begin
  case aktpairpos of
  1 : result := 3;
  2 : result := 4;
  3 : result := 1;
  4 : result := 2;
  end;
  end
  else
  begin
  case aktpairpos of
  1 : result := 2;
  2 : result := 1;
  3 : result := 4;
  4 : result := 3;
  end;
  end;
  end;

  6 : begin
  if Ligende then
  begin
  case aktpairpos of
  1 : result := 4;
  2 : result := 5;
  3 : result := 6;
  4 : result := 1;
  5 : result := 2;
  6 : result := 3;
  end;
  end
  else
  begin
  case aktpairpos of
  1 : result := 2;
  2 : result := 1;
  3 : result := 2;
  4 : result := 5;
  5 : result := 4;
  6 : result := 5;
  end;
  end;
  end;
  8 : begin
  if Ligende then
  begin
  case aktpairpos of
  1 : result := 5;
  2 : result := 6;
  3 : result := 7;
  4 : result := 8;
  5 : result := 1;
  6 : result := 2;
  7 : result := 3;
  8 : result := 4;
  end;
  end
  else
  begin
  case aktpairpos of
  1 : result := 2;
  2 : result := 1;
  3 : result := 4;
  4 : result := 3;
  5 : result := 6;
  6 : result := 5;
  7 : result := 8;
  8 : result := 7;
  end;
  end;
  end;

  16 : begin
  if Ligende then
  begin
  case aktpairpos of
  1 : result := 5;
  2 : result := 6;
  3 : result := 7;
  4 : result := 8;
  5 : result := 1;
  6 : result := 2;
  7 : result := 3;
  8 : result := 4;
  9 : result := 13;
  10 : result := 14;
  11 : result := 15;
  12 : result := 16;
  13 : result := 9;
  14 : result := 10;
  15 : result := 11;
  16 : result := 12;
  end;
  end
  else
  begin
  case aktpairpos of
  1 : result := 2;
  2 : result := 1;
  3 : result := 4;
  4 : result := 3;
  5 : result := 6;
  6 : result := 5;
  7 : result := 8;
  8 : result := 7;
  9 : result := 10;
  10 : result := 9;
  11 : result := 12;
  12 : result := 11;
  13 : result := 14;
  14 : result := 13;
  15 : result := 16;
  16 : result := 15;
  end;
  end;
  end;
  end;
  end;
}

{ procedure TFormMain.seteditionpopups;
  begin
  end;
}
{ procedure TFormMain.loadeditiongrid;
  begin

  end;
}

procedure TFormMain.ActionprogressrefreshfilterExecute(Sender: TObject);
begin
  loadAPagetree(TreeViewprodcontrol, '', '', ComboBoxpalocationNY.text,
    ComboBoxGlobalPubDateFilter.text);
end;

procedure TFormMain.TreeViewprogressChange(Sender: TObject; Node: TTreeNode);
begin
  newprogress;
end;

procedure TFormMain.newprogress;
Var
  wherestr: string;
begin
  PanelTotnpages.caption := '0';
  PanelTotnuniquepages.caption := '0';
  PanelTotnuniquepages.caption := '0';
  Panelpagesapproved.caption := '0';
  Panelplatesready.caption := '0';
  ProgressBarpagesapproved.Position := 0;
  ProgressBarpagesready.Position := 0;
  ProgressBarplatesready.Position := 0;
  Panelplatesimaged.caption := '0';
  Panelplatesimaged.caption := '0';
  PaneltotalNplates.caption := '0';

  if TreeViewprogress.Selected = nil then
  begin
    if TreeViewprogress.Items.Count > 1 then
    begin
      TreeViewprogress.Selected := TreeViewprogress.Items.GetFirstNode;
      TreeViewprogress.SetFocus;
    End
    else
      exit;
  end;

  try
    wherestr := 'Where p1.issueid <> -999 ';
    wherestr := wherestr + WP1editionStr;
    case TreeViewprogress.Selected.Level of
      1:
        begin
          wherestr := wherestr + ' and ' + Datam1.makedatastr('p1.',
            Progressdatatype(TreeViewprogress.Selected.Data^).Pubdate);
        end;
      2:
        begin
          wherestr := wherestr + ' and ' + Datam1.makedatastr('',
            Progressdatatype(TreeViewprogress.Selected.Data^).Pubdate);
          wherestr := wherestr + ' and p1.publicationid = ' +
            IntToStr(Progressdatatype(TreeViewprogress.Selected.Data^)
            .Publicationid);
        end;
      3:
        begin
          wherestr := wherestr + ' and ' + Datam1.makedatastr('',
            Progressdatatype(TreeViewprogress.Selected.Data^).Pubdate);
          wherestr := wherestr + ' and p1.publicationid = ' +
            IntToStr(Progressdatatype(TreeViewprogress.Selected.Data^)
            .Publicationid);
          wherestr := wherestr + ' and p1.editionid = ' +
            IntToStr(Progressdatatype(TreeViewprogress.Selected.Data^)
            .editionid);
        end;
      4:
        begin
          wherestr := wherestr + ' and ' + Datam1.makedatastr('',
            Progressdatatype(TreeViewprogress.Selected.Data^).Pubdate);
          wherestr := wherestr + ' and p1.publicationid = ' +
            IntToStr(Progressdatatype(TreeViewprogress.Selected.Data^)
            .Publicationid);
          wherestr := wherestr + ' and p1.editionid = ' +
            IntToStr(Progressdatatype(TreeViewprogress.Selected.Data^)
            .editionid);
          wherestr := wherestr + ' and p1.sectionid = ' +
            IntToStr(Progressdatatype(TreeViewprogress.Selected.Data^)
            .Sectionid);
        end;
    end;

    // antal sider
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select count(distinct p1.copyseparationset) as antal from pagetable p1 (NOLOCK)');
    Datam1.Query1.SQL.Add(wherestr);
    Datam1.Query1.SQL.Add(' and p1.active = 1');
    if Prefs.Debug then
      Datam1.Query1.SQL.SaveToFile
        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
        'napr.SQL');
    Tryopen(Datam1.Query1);

    if not Datam1.Query1.Eof then
    begin
      PanelTotnpages.caption := Datam1.Query1.Fields[0].AsString;
      ProgressBarpagesapproved.max := Datam1.Query1.Fields[0].AsInteger;
      ProgressBarpagesready.max := Datam1.Query1.Fields[0].AsInteger;
    end;
    Datam1.Query1.Close;

    // antal unique
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select count(distinct p1.copyseparationset) as antal from pagetable p1 (NOLOCK)');
    Datam1.Query1.SQL.Add(wherestr);
    Datam1.Query1.SQL.Add(' and p1.uniquepage = 1');
    Datam1.Query1.SQL.Add(' and p1.active = 1');
    Tryopen(Datam1.Query1);
    if not Datam1.Query1.Eof then
      PanelTotnuniquepages.caption := Datam1.Query1.Fields[0].AsString;

    Datam1.Query1.Close;

    // antal approved
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select count(distinct p1.copyseparationset) as antal from pagetable p1 (NOLOCK)');
    Datam1.Query1.SQL.Add(wherestr);
    Datam1.Query1.SQL.Add(' and p1.active = 1');
    Datam1.Query1.SQL.Add(' and ((p1.approved = -1) or (p1.approved = 1))');
    Datam1.Query1.SQL.Add(' and p1.status > 0');
    if Prefs.Debug then
      Datam1.Query1.SQL.SaveToFile
        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
        'napr.SQL');
    Tryopen(Datam1.Query1);
    if not Datam1.Query1.Eof then
    begin
      ProgressBarpagesapproved.Position := Datam1.Query1.Fields[0].AsInteger;
      Panelpagesapproved.caption := Datam1.Query1.Fields[0].AsString;
    end;
    Datam1.Query1.Close;

    // antal ready
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select count(distinct p1.copyseparationset) as antal from pagetable p1 (NOLOCK)');
    Datam1.Query1.SQL.Add(wherestr);
    Datam1.Query1.SQL.Add(' and p1.active = 1');
    Datam1.Query1.SQL.Add(' and p1.status > 0');

    if Prefs.Debug then
      Datam1.Query1.SQL.SaveToFile
        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
        'napr.SQL');
    Tryopen(Datam1.Query1);
    if not Datam1.Query1.Eof then
    begin
      ProgressBarpagesready.Position := Datam1.Query1.Fields[0].AsInteger;
      Panelpagesready.caption := Datam1.Query1.Fields[0].AsString;
    end;
    Datam1.Query1.Close;



    // antal plader

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select count(distinct p1.flatseparation) as antal from pagetable p1 (NOLOCK)');
    Datam1.Query1.SQL.Add(wherestr);
    Datam1.Query1.SQL.Add(' and p1.active = 1');
    if Prefs.Debug then
      Datam1.Query1.SQL.SaveToFile
        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
        'napr.SQL');
    Tryopen(Datam1.Query1);
    if not Datam1.Query1.Eof then
    begin
      ProgressBarplatesready.max := Datam1.Query1.Fields[0].AsInteger;
      ProgressBarplatesimaged.max := Datam1.Query1.Fields[0].AsInteger;
      PaneltotalNplates.caption := Datam1.Query1.Fields[0].AsString;
    end;
    Datam1.Query1.Close;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select count(distinct p1.flatseparation) as antal from pagetable p1 (NOLOCK)');
    Datam1.Query1.SQL.Add(wherestr);
    Datam1.Query1.SQL.Add(' and p1.uniquepage <> 0');
    Datam1.Query1.SQL.Add(' and p1.active = 1');
    Datam1.Query1.SQL.Add(' and ((p1.approved = -1) or (p1.approved = 1))');
    Datam1.Query1.SQL.Add(' and ((p1.status = 30))');

    Datam1.Query1.SQL.Add
      (' and not exists ( select p2.flatseparation from pagetable p2 (NOLOCK)');
    Datam1.Query1.SQL.Add(' where p1.flatseparation = p2.flatseparation');
    Datam1.Query1.SQL.Add(' and p2.active = 1');
    Datam1.Query1.SQL.Add('  and ((p2.approved = 1) or (p2.approved = 0 ))');
    Datam1.Query1.SQL.Add(' and ((p2.status <> 30)))');

    if Prefs.Debug then
      Datam1.Query1.SQL.SaveToFile
        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
        'napr.SQL');
    Tryopen(Datam1.Query1);
    if not Datam1.Query1.Eof then
    begin
      ProgressBarplatesready.Position := Datam1.Query1.Fields[0].AsInteger;
      Panelplatesready.caption := Datam1.Query1.Fields[0].AsString;
    end;
    Datam1.Query1.Close;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select count(distinct p1.flatseparation) as antal from pagetable p1 (NOLOCK)');
    Datam1.Query1.SQL.Add(wherestr);

    Datam1.Query1.SQL.Add(' and p1.active = 1');
    Datam1.Query1.SQL.Add(' and ((p1.approved = -1) or (p1.approved = 1))');
    Datam1.Query1.SQL.Add(' and ((p1.status = 50))');

    Datam1.Query1.SQL.Add
      (' and not exists ( select p2.flatseparation from pagetable p2 (NOLOCK)');
    Datam1.Query1.SQL.Add(' where p1.flatseparation = p2.flatseparation');
    Datam1.Query1.SQL.Add(' and p2.active = 1');
    Datam1.Query1.SQL.Add('  and ((p2.approved = 1) or (p2.approved = 0 ))');
    Datam1.Query1.SQL.Add(' and ((p2.status <> 50)))');

    if Prefs.Debug then
      Datam1.Query1.SQL.SaveToFile
        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
        'napr.SQL');
    Tryopen(Datam1.Query1);
    if not Datam1.Query1.Eof then
    begin
      ProgressBarplatesimaged.Position := Datam1.Query1.Fields[0].AsInteger;
      Panelplatesimaged.caption := Datam1.Query1.Fields[0].AsString;
    end;
    Datam1.Query1.Close;

  Except
  end;
end;

procedure TFormMain.PageControlprogressChange(Sender: TObject);
begin
  case PageControlprogress.ActivePageIndex of
    0:
      begin
        ActionProgressrefresh.Execute;
      end;
    1:
      begin
        Actionprogressrefreshfilter.Execute;
        newprogress;
      end;
  end;
end;

procedure TFormMain.ActionprogressreimageExecute(Sender: TObject);
var
  wherestr: string;
begin

  if TreeViewprodcontrol.Selected = nil then
    exit;

  if Formreimageproduction.ShowModal = mrOK then
  begin
    wherestr := makeprogwherestr('');

    try
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      Datam1.Query1.SQL.Add('set status = ' + Reimagetostat +
        ', inkstatus = 0, miscint4 = 0 ');
      if Formreimageproduction.CheckBox1.Checked then
        Datam1.Query1.SQL.Add(', deviceid = 0');

      if (Prefs.KeepOutputVersionOnReimage) then
        Datam1.Query1.SQL.Add
          (', OutputVersion = (case WHEN (OutputVersion <=0) THEN OutputVersion  else (OutputVersion -1) END) ');
      // Datam1.Query1.SQL.Add(', OutputVersion = OutputVersion - 1 ');

      Datam1.Query1.SQL.Add('where active = 1 and ' + wherestr);
      Datam1.Query1.SQL.Add(WeditionStr);
      Datam1.Query1.SQL.Add(' and status > 30');
      trysql(Datam1.Query1);

      Newrefreshprogress;
    Except
    end;
  end;
end;

procedure TFormMain.DateTimePickerprogressChange(Sender: TObject);
begin
  ActionProgressrefresh.Execute;
end;

procedure TFormMain.TimerblinkNotapprovedTimer(Sender: TObject);
// Var
// antal : Integer;
begin
  if not StartuPdone then
    exit;
  // memotestPrefs.Debug.Lines.Add('TimerblinkNotapprovedTimer');
  // memotestPrefs.Debug.refresh;
  if PBExListviewthumbnail.Items.Count > 0 then
  begin

    if (anynotapprovedblink) or (anyDisapprovedblink) then
    begin
      aproveblinkon := not aproveblinkon;
    end
    else
      aproveblinkon := false;

    if aproveblinkon then
    begin
      if anyDisapprovedblink then
        ActionCHKthumbstatus.ImageIndex := 144
      else
        ActionCHKthumbstatus.ImageIndex := 145;

    End
    else
      ActionCHKthumbstatus.ImageIndex := 142;

  end
  else
  begin
    ActionCHKthumbstatus.ImageIndex := 142;
    TimerblinkNotapproved.Enabled := false;
  end;
end;

procedure TFormMain.PBExListviewprogressColumnClick(Sender: TObject;
  Column: TListColumn);
begin
  if Column.Index < 6 then
  begin
    Firstprgorder := Column.Index;
    ActionProgressrefreshExecute(Self);
  end;
end;

{ procedure TFormMain.refreshprogresstree;
  Var
  pubdate : TDateTime;
  I,publicationid,editionid,sectionid,locationid,copynumber : Integer;
  All,pubdatenode,publicationidNode,editionidNode,sectionidNode,locationidNode,copynumberNode : ttreenode;
  trdat : ^Progressdatatype;

  procedure setprdat;
  begin
  Progressdatatype(trdat^).pubdate := pubdate;
  Progressdatatype(trdat^).publicationid:= publicationid;
  Progressdatatype(trdat^).editionid:=editionid;
  Progressdatatype(trdat^).sectionid:=sectionid;
  Progressdatatype(trdat^).locationid:=locationid;
  Progressdatatype(trdat^).copynumber:=copynumber;
  end;


  begin
  TreeViewprogress.Items.Clear;
  pubdate := 100;
  publicationid:=-1;
  editionid:=-1;
  sectionid:=-1;
  locationid:=-1;
  copynumber:=-1;
  New(trdat);
  All := TreeViewprogress.Items.addchildobject(nil,'All',trdat);

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('select Distinct pubdate,publicationid,editionid,sectionid from pagetable (NOLOCK)');
  Datam1.Query1.SQL.Add('Where issueid <> -999');
  Datam1.Query1.SQL.Add(WeditionStr);
  Datam1.Query1.SQL.Add('order by pubdate,publicationid,editionid,sectionid');

  tryopen(Datam1.Query1);

  while not Datam1.Query1.Eof do
  begin
  if pubdate <> Datam1.Query1.FieldByName('pubdate').AsDateTime then
  begin
  pubdate := Datam1.Query1.FieldByName('pubdate').AsDateTime;
  publicationid:=-1;
  editionid:=-1;
  sectionid:=-1;
  locationid:=-1;
  copynumber:=-1;
  New(trdat);
  setprdat;
  pubdatenode := TreeViewprogress.Items.addchildobject(all,datetostr(pubdate),trdat);
  pubdatenode.ImageIndex := 40;
  pubdatenode.SelectedIndex := 40;
  end;

  if publicationid <> Datam1.Query1.FieldByName('publicationid').AsInteger then
  begin
  publicationid:= Datam1.Query1.FieldByName('publicationid').AsInteger;
  editionid:=-1;
  sectionid:=-1;
  locationid:=-1;
  copynumber:=-1;
  New(trdat);
  setprdat;
  publicationidnode := TreeViewprogress.Items.addchildobject(pubdatenode,tnames1.publicationIDtoname(publicationid),trdat);
  publicationidnode.ImageIndex := 16;
  publicationidnode.SelectedIndex := 16;
  end;

  if editionid <> Datam1.Query1.FieldByName('editionid').AsInteger then
  begin
  editionid:= Datam1.Query1.FieldByName('editionid').AsInteger;
  sectionid:=-1;
  locationid:=-1;
  copynumber:=-1;
  New(trdat);
  setprdat;
  editionidnode := TreeViewprogress.Items.addchildobject(publicationidnode,tnames1.editionIDtoname(editionid),trdat);
  editionidnode.ImageIndex := 11;
  editionidnode.SelectedIndex := 11;
  end;

  if sectionid <> Datam1.Query1.FieldByName('sectionid').AsInteger then
  begin
  sectionid:= Datam1.Query1.FieldByName('sectionid').AsInteger;
  locationid:=-1;
  copynumber:=-1;
  New(trdat);
  setprdat;
  sectionidnode := TreeViewprogress.Items.addchildobject(editionidnode,tnames1.sectionIDtoname(sectionid),trdat);
  sectionidnode.ImageIndex := 0;
  sectionidnode.SelectedIndex := 0;

  end;


  Datam1.Query1.Next;
  end;


  Datam1.Query1.Close;

  for i := 0 to TreeViewprogress.Items.Count-1 do
  begin
  if TreeViewprogress.Items[i].Level < 3 then
  TreeViewprogress.Items[i].expand(false);
  end;


  end;
}

procedure TFormMain.TreeViewprodcontrolChange(Sender: TObject; Node: TTreeNode);
var
  anode, N: TTreeNode;
  iPubID: Integer;
  AllLocationSelected: Boolean;
begin
  AllLocationSelected := (ComboBoxpalocationNY.text = 'All');
  // if CheckBoxAllLocationsProd.Checked then
  if (AllLocationSelected) then
    Savekeeptrees('*', TreeViewprodcontrol)
  else
    Savekeeptrees(ComboBoxpalocationNY.text, TreeViewprodcontrol);

  try

    GSelpubdate := 0;
    GSelpubid := -1;
    N := TreeViewprodcontrol.Selected;
    while N.Level > 0 do
    begin
      case TTreeViewpagestype(N.Data^).kind of
        // 0=all,1=location,2=publication,pubdate,3=issue,4=edition,5=section
        1:
          GSelpubdate := TTreeViewpagestype(N.Data^).Pubdate;
        2:
          GSelpubid := TTreeViewpagestype(N.Data^).Publicationid;
      end;
      N := N.Parent;
    end;
  Except
  end;

  if TTreeViewpagestype(TreeViewprodcontrol.Selected.Data^).kind > 0 then
  begin
    if ((CheckListBoxprodpubldate <> TTreeViewpagestype
      (TreeViewprodcontrol.Selected.Data^).Pubdate) or
      (CheckListBoxprodpublalllocationsset <> AllLocationSelected) or
      (CheckListBoxprodpublaktlocation <> ComboBoxpalocationNY.text)) and
      (GroupBoxProdpupl.Visible) then
    begin
      CheckListBoxprodpublalllocationsset := AllLocationSelected;
      // CheckBoxAllLocationsProd.Checked;
      CheckListBoxprodpublaktlocation := ComboBoxpalocationNY.text;
      CheckListBoxprodpubldate :=
        TTreeViewpagestype(TreeViewprodcontrol.Selected.Data^).Pubdate;
      anode := TreeViewprodcontrol.Selected;
      while anode.Level > 1 do
        anode := anode.Parent;

      anode := anode.GetFirstChild;
      CheckListBoxprodpubl.Items.BeginUpdate;
      CheckListBoxprodpubl.Items.Clear;
      while anode <> nil do
      begin
        iPubID := TTreeViewpagestype(anode.Data^).Publicationid;
        CheckListBoxprodpubl.AddItem(anode.text, TObject(iPubID));
        CheckListBoxprodpubl.Checked[CheckListBoxprodpubl.Items.Count -
          1] := true;
        anode := anode.getNextSibling;
      end;

      CheckListBoxprodpubl.Items.EndUpdate;
    end;
  end;

  Newrefreshprogress;
  ActionEnable('TreeViewprodcontrolChange');
end;

procedure TFormMain.ActionProgressrefreshExecute(Sender: TObject);
begin
  Newrefreshprogress;
end;

procedure TFormMain.afterapproval(mastercopyseparationset: Integer;
  pdfmaster: Longint);
var
  i, i2, NCopyflatseparationset: Integer;

  Copyflatseparationsets: Array [1 .. 1000] of Integer;

  Canrelease: Boolean;

  // INPGpublications : String;

begin
  if Prefs.ReleaseOnApproval then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select distinct copyflatseparationset from pagetable (NOLOCK)');
    if mastercopyseparationset > -1 then
      Datam1.Query1.SQL.Add('where mastercopyseparationset = ' +
        IntToStr(mastercopyseparationset))
    else
    begin

      if (PDFMasterOK) then
        Datam1.Query1.SQL.Add('where pdfmaster = ' + IntToStr(pdfmaster))
      else
        Datam1.Query1.SQL.Add('where mastercopyseparationset = ' +
          IntToStr(pdfmaster));
    end;
    NCopyflatseparationset := 0;
    Tryopen(Datam1.Query1);
    while not Datam1.Query1.Eof do
    begin
      Inc(NCopyflatseparationset);
      Copyflatseparationsets[NCopyflatseparationset] :=
        Datam1.Query1.FieldByName('copyflatseparationset').AsInteger;
      Datam1.Query1.Next;
    end;

    Datam1.Query1.Close;
    Canrelease := true;
    if NCopyflatseparationset > 0 then
    begin
      for i := 1 to NCopyflatseparationset do
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('Select Count (Copyflatseparationset) as tal from pagetable (NOLOCK)');
        Datam1.Query1.SQL.Add('where Copyflatseparationset = ' +
          IntToStr(Copyflatseparationsets[i]));
        Datam1.Query1.SQL.Add
          ('and active = 1 and (approved = 0 or approved = 2)');
        Tryopen(Datam1.Query1);
        Canrelease := Datam1.Query1.Fields[0].AsInteger = 0;
        Datam1.Query1.Close;

        if Canrelease then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set hold = 0'); // ON
          if (Prefs.SetApproveTimeOnRelease) then
            Datam1.Query1.SQL.Add(', approvetime = getdate(),approveuser=' +
              '''' + Prefs.Username + '''');
          Datam1.Query1.SQL.Add('where copyflatseparationset = ' +
            IntToStr(Copyflatseparationsets[i]));

          if Prefs.UseCustomReleaseScript then
          begin
            for i2 := 0 to Prefs.CustomReleaseScript.Count - 1 do
            begin
              Datam1.Query1.SQL.Add(Prefs.CustomReleaseScript[i2]);
            end;
          end;
          if Prefs.Debug then
            Datam1.Query1.SQL.SaveToFile
              (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
              'sqllogs\' + 'afterparroval.SQL');
          trysql(Datam1.Query1);
        end;
      end;
    end;
  end;
end;

procedure TFormMain.ActionpageimagedExecute(Sender: TObject);
begin
  getpreselHS;
  setpagetablestddata('set status = 50, inkstatus = 0 ', ' and status >=30');
  loadSuperHSDB2(false);
  resetpreselHS;
end;

procedure TFormMain.ActionprogaddcopyExecute(Sender: TObject);
Var
  i, pressrunid { ,fromcopynumber } : Integer;
begin
  try
    pressrunid := -1;
    for i := 1 to StringGridprods.RowCount do
    begin
      if StringGridprodsdata[i].Selected then
      begin
        pressrunid := StringGridprodsdata[i].pressrunid;
        break;
      end;
    end;
    if pressrunid > 0 then
    begin
      if Setplanlock(true) then
      begin
        addcopytopressrun(pressrunid);
      end;
    end;
  Finally
    Setplanlock(false);
  end;
end;

function TFormMain.AddANewCopy(FromCopyFlatseparationset: string;
  FromCopyNumber: string; NewDeviceID: string; Newpressrunid: string): Integer;
var
  newcopynumber: string;
  ProductionID: Integer;
begin
  try
    newcopynumber := IntToStr(StrToInt(FromCopyNumber) + 1);
    Datam1.Query3.SQL.Clear;

    Datam1.Query3.SQL.Add('exec SPplancenterAddCopyToCopyFlatSeparationset3 ');
    Datam1.Query3.SQL.Add('@Newcopynumber = ' + newcopynumber);
    Datam1.Query3.SQL.Add(',@NewDeviceID = ' + NewDeviceID);
    Datam1.Query3.SQL.Add(',@fromcopyflatseparationset = ' +
      FromCopyFlatseparationset);
    Datam1.Query3.SQL.Add(',@fromcopynumber = ' + FromCopyNumber);

    Tryopen(Datam1.Query3);

    result := Datam1.Query3.Fields[0].AsInteger;

    Datam1.Query3.Close;

    if PDFMasterOK then
    begin
      Datam1.Query3.SQL.Clear;
      ProductionID := -1;
      Datam1.Query3.SQL.Add
        ('select TOP 1 productionid from pagetable (NOLOCK) ');
      Datam1.Query3.SQL.Add('where copyflatseparationset = ' +
        FromCopyFlatseparationset);
      Tryopen(Datam1.Query3);
      if not Datam1.Query3.Eof then
      begin
        ProductionID := Datam1.Query3.Fields[0].AsInteger;
      end;
      Datam1.Query3.Close;

      Datam1.Query2.SQL.Clear;
      Datam1.Query2.SQL.Add('update pagetable');
      Datam1.Query2.SQL.Add('set pdfmaster  = mastercopyseparationset');
      Datam1.Query2.SQL.Add('Where ProductionId = ' + IntToStr(ProductionID));
      // ## NAN changed 20150928..
      Datam1.Query2.SQL.Add('and pdfmaster < 1');
      trysql(Datam1.Query2);
    end;

  except
    result := 0;

  end;
end;

procedure TFormMain.addcopytopressrun(pressrunid: Longint);
var
  Newpressrunid: String;
  Copyflatseparationsets: Tstrings;
  Deviceids: Tstrings;
  ipl, maxcopynumber: Integer;
  wherestr: string;
  owerallstatus: Integer;
  anyerror: Boolean;
  aktpublicationid, aktproductionid: Integer;
  aktpubdate: TDateTime;
begin
   maxcopynumber := 1;
   owerallstatus := 0;
  anyerror := false;
  Copyflatseparationsets := Tstringlist.Create;
  Deviceids := Tstringlist.Create;
  aktpublicationid := 0;
  aktproductionid := 0;
  aktpubdate := Today;
  try
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select TOP 1 productionid,publicationid,pubdate from pagetable (NOLOCK)');
    Datam1.Query1.SQL.Add('where pressrunid = ' + IntToStr(pressrunid));
    Tryopen(Datam1.Query1);
    if not Datam1.Query1.Eof then
    begin
      aktproductionid := Datam1.Query1.Fields[0].AsInteger;
      aktpublicationid := Datam1.Query1.Fields[1].AsInteger;
      aktpubdate := Datam1.Query1.Fields[2].AsDateTime;
    end;
    Datam1.Query1.Close;

    wherestr := makeprogwherestr('');
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select Distinct CopyFlatSeparationSet from pagetable (NOLOCK)');
    Datam1.Query1.SQL.Add('where pressrunid = ' + IntToStr(pressrunid));
    Tryopen(Datam1.Query1);
    while not Datam1.Query1.Eof do
    begin
      Copyflatseparationsets.Add(IntToStr(Datam1.Query1.Fields[0].AsInteger));
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;
    ipl := 0;
    if Copyflatseparationsets.Count > 0 then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Select TOP 1 Copynumber from pagetable (NOLOCK)');
      Datam1.Query1.SQL.Add('where copyflatseparationset = ' + Copyflatseparationsets[ipl]);
      Datam1.Query1.SQL.Add('order by copynumber desc');
      Tryopen(Datam1.Query1);
      if not Datam1.Query1.Eof then
      begin
        maxcopynumber := Datam1.Query1.Fields[0].AsInteger;
      end;
      Datam1.Query1.Close;
    end;
    for ipl := 0 to Copyflatseparationsets.Count - 1 do
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Select TOP 1 deviceid from pagetable (NOLOCK)');
      Datam1.Query1.SQL.Add('where copyflatseparationset = ' +Copyflatseparationsets[ipl]);
      Datam1.Query1.SQL.Add('order by deviceid desc');
      // Datam1.Query1.SQL.SaveToFile(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'+'addcopy.SQL');
      Tryopen(Datam1.Query1);
      if not Datam1.Query1.Eof then
        Deviceids.Add(IntToStr(Datam1.Query1.Fields[0].AsInteger))
      else
        Deviceids.Add('0');
      Datam1.Query1.Close;

    end;
    owerallstatus := 1;
    for ipl := 0 to Copyflatseparationsets.Count - 1 do
    begin
      if AddANewCopy(Copyflatseparationsets[ipl], IntToStr(maxcopynumber),
        Deviceids[ipl], Newpressrunid) = 0 then
        owerallstatus := 0;
    end;

    if owerallstatus = 1 then
    begin
      if not productionIsok(aktproductionid, pressrunid, aktpublicationid,
        aktpubdate, maxcopynumber + 1) then
        owerallstatus := 0;
    end;

  Finally

    if owerallstatus = 0 then
    begin
      sleep(5000);

      Deleteproductionwitherror(aktproductionid, pressrunid, aktpublicationid,
        aktpubdate, maxcopynumber + 1);

      MessageDlg(InfraLanguage1.Translate
        ('Could not apply new data - please try again'), mtError, [mbOk], 0);

    end;
    Copyflatseparationsets.free;
    Deviceids.free;
    Newrefreshprogress;
    GroupBoxworking.Visible := false;
    screen.Cursor := crdefault;
  end;
end;

procedure TFormMain.PBExListviewthumbnailKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
var
  lastsel: Integer;
  Y: Integer;
begin

  if (Key = VK_RETURN) and (PBExListviewthumbnail.Selected <> nil) then
  begin
    Y := aktPBExListviewthumbnailvertpos;
    lastsel := PBExListviewthumbnail.Selected.Index;

    DothumbnailpreviewExecute(true, 0);
    // Actionthumbnailpreview.Execute;

    ActionThumbnailrefresh.Execute;

    if (PBExListviewthumbnail.Items.Count >= lastsel) then
    begin
      PBExListviewthumbnail.Selected := PBExListviewthumbnail.Items[lastsel];
      PBExListviewthumbnail.Selected.MakeVisible(false);
      PBExListviewthumbnail.Selected.Focused := true;
      // PBExListviewthumbnail.Scroll(0,y);
    end;
    PBExListviewthumbnail.Selected.Focused := true;

  end;
end;

procedure TFormMain.CheckBoxDatefilterClick(Sender: TObject);
begin
  if activated then
  begin
    case PageControlMain.ActivePageIndex of
      VIEW_SEPARATIONS:
        begin
          Actionrefreshpagefilter.Execute;
        end;
      VIEW_THUMBNAILS:
        begin
          ActionThumbnailFilterrefresh.Execute;
        end;
      VIEW_PLATES:
        begin
          if (ComboBoxpalocationNY.Enabled) and
            (ComboBoxpalocationNY.text <> 'All') then
            loadAPlatetree(TreeViewPlateview, '', '', ComboBoxpalocationNY.text,
              ComboBoxGlobalPubDateFilter.text)
          else
            loadAPlatetree(TreeViewPlateview, '', '', '*',
              ComboBoxGlobalPubDateFilter.text)
        end;
      VIEW_PRODUCTIONS:
        begin
          if (ComboBoxpalocationNY.Enabled) and
            (ComboBoxpalocationNY.text <> 'All') then
            loadAPagetree(TreeViewprodcontrol, '', '',
              ComboBoxpalocationNY.text, ComboBoxGlobalPubDateFilter.text)
          else
            loadAPagetree(TreeViewprodcontrol, '', '', '*',
              ComboBoxGlobalPubDateFilter.text);
        end;
      VIEW_EDITIONS:
        begin
          ActionEditionrefresh.Execute;
        end;
    end;
  end;

end;

procedure TFormMain.ActionprogressremovecopyExecute(Sender: TObject);
var
  remook: Integer;
  i: Integer;
  wherestr: string;
begin
  try
    try
      if Setplanlock(true) then
      begin
        remook := -1;

        if TreeViewprodcontrol.Selected = nil then
          exit;

        for i := 1 to StringGridprods.RowCount do
        begin
          if StringGridprodsdata[i].Selected then
          begin
            wherestr := 'where pressrunid = ' +
              IntToStr(StringGridprodsdata[i].pressrunid);
            break;
          end;
        end;

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('Select MAX(copynumber) from pagetable (NOLOCK)');
        Datam1.Query1.SQL.Add(wherestr);
        Tryopen(Datam1.Query1);
        while not Datam1.Query1.Eof DO
        begin
          remook := Datam1.Query1.Fields[0].AsInteger;
          Datam1.Query1.Next;
        end;
        Datam1.Query1.Close;

        if remook > 1 then
        begin
          if MessageDlg(InfraLanguage1.Translate('Remove copynumber') + ' ' +
            IntToStr(remook), mtConfirmation, [mbYes, mbNo], 0) = mryes then
          begin
            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add('delete pagetable');
            Datam1.Query1.SQL.Add(wherestr);
            Datam1.Query1.SQL.Add('and copynumber = ' + IntToStr(remook));
            Datam1.Query1.SQL.Add(WeditionStr);
            trysql(Datam1.Query1);
            Datam1.Query1.SQL.Clear;
          end;
        End
        else
        begin
          MessageDlg(InfraLanguage1.Translate
            ('Cannot remove last copy, there must be at least one copy'),
            mtError, [mbOk], 0);

        end;

        Newrefreshprogress;
      end;
    Except
    end;
  Finally
    Setplanlock(false);
  end;
end;

procedure TFormMain.ActionprogressforceExecute(Sender: TObject);
var
  wherestr: string;
begin

  if TreeViewprodcontrol.Selected = nil then
    exit;

  wherestr := makeprogwherestr('');
  try
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable');
    Datam1.Query1.SQL.Add('set uniquepage = 2');
    Datam1.Query1.SQL.Add('where active > -99 and ' + wherestr);
    Datam1.Query1.SQL.Add('and uniquepage = 0');
    Datam1.Query1.SQL.Add(WeditionStr);
    trysql(Datam1.Query1);

    Newrefreshprogress;
  Except
  end;

end;

function TFormMain.Configallowed: Boolean;
Var
  usernamefound: Boolean;
begin
  result := FormUsers.ISadministrator(Prefs.Username);
  if (not result) then
  begin
    if FormAdminlogin.DoLogin then
    begin
      if FormUsers.ISadministrator(FormAdminlogin.edit1.text) then
      begin
        result := true;
      end
      else
      begin
        MessageDlg(InfraLanguage1.Translate
          ('Wrong username, password, or user type, user must be administrator'),
          mtInformation, [mbOk], 0);
      end;
    end;
  end;
end;

(*
  ActionConnect.Enabled := formlogin.MayConfigure;
  Actioncreapagedef.Enabled := formlogin.MayConfigure;
  ActionShowinfo.Enabled := formlogin.MayConfigure;
  Actionprogram.Enabled := formlogin.MayConfigure;
  CustomizeActionBars2.Enabled := formlogin.MayConfigure;
  ActionUsers.Enabled := formlogin.MayConfigure;
*)

procedure TFormMain.ActionpagedeactivateExecute(Sender: TObject);
begin
  getpreselHS;
  setpagetablestddata('set active = 0', '');
  setpagetablestFlatdata('set status = 30, miscint3 = 4, inkstatus = 0',
    'and status > 30', false, false);
  // dodalim(1,-1,-1,false,-1);
  loadSuperHSDB2(false);
  resetpreselHS;
end;

procedure TFormMain.ActionPageactivateExecute(Sender: TObject);
begin
  getpreselHS;
  setpagetablestddata('set active = 1', '');
  setpagetablestFlatdata('set status = 30, miscint4 = 0, inkstatus = 0',
    'and status > 30', false, false);
  loadSuperHSDB2(false);
  resetpreselHS;
end;

(*
  procedure TFormMain.ActionToolBarPagepopupClick(Sender: TObject);
  begin
  sleep(1);
  end;
*)

procedure TFormMain.ActionToolBarPagepopupDragOver(Sender, Source: TObject;
  X, Y: Integer; State: TDragState; var Accept: Boolean);
begin
  // accept := accepttoolbardrag(Sender, Source);
  screen.Cursor := crnodrop;
  // listbox1.Items.Add()
  Accept := false;

end;

procedure TFormMain.ActionToolBarpagefilterDragOver(Sender, Source: TObject;
  X, Y: Integer; State: TDragState; var Accept: Boolean);
begin
  Accept := false;
end;

procedure TFormMain.GroupBoxPlatefilterDragOver(Sender, Source: TObject;
  X, Y: Integer; State: TDragState; var Accept: Boolean);
begin
  Accept := false;
end;

procedure TFormMain.ActionMainMenuBar1XDragOver(Sender, Source: TObject;
  X, Y: Integer; State: TDragState; var Accept: Boolean);
begin
  Accept := false;
end;

procedure TFormMain.ActionMakePageForcedExecute(Sender: TObject);
var
  PdfMaster: Integer;
  CopySeparationSet : Integer;
  MasterCopySeparationSet : Integer;
  i : Integer;
  EditionID : Integer;
  UniquePage : Integer;
  ProductionID : Integer;
  PressID : Integer;
begin
  PdfMaster := 0;

  ProductionID := 0;
  try
    ProductionID := TTreeViewpagestype(TreeViewThumbs.Selected.Data^).ProductionID;
    if (ProductionID = 0) then
      exit;
    for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
    begin
      CopySeparationSet := 0;
      MasterCopySeparationSet := 0;
      EditionID := 0;
      UniquePage := -1;

      if (PBExListviewthumbnail.Items[i].Selected) then
      begin
        MasterCopySeparationSet := Showthubms[i].mastercopyseparationset;
        //PdfMaster := Showthubms[i].pdfmaster;
        EditionID := Showthubms[i].edition;
        UniquePage := Showthubms[i].UniquePage;

        if (MasterCopySeparationSet = 0) OR (EditionID=0) then
          continue;


        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('SELECT TOP 1 CopySeparationSet,UniquePage,PDFMaster,PressID FROM PageTable WITH (NOLOCK)');
        Datam1.Query1.SQL.Add('WHERE MasterCopySeparationSet = ' + IntToStr(MasterCopySeparationSet));
        Datam1.Query1.SQL.Add('AND EditionID = ' + IntToStr(EditionID));
        Datam1.Query1.SQL.Add('AND ProductionID = ' + IntToStr(ProductionID));
        Datam1.Query1.SQL.Add('AND Active = 1');
        Datam1.Query1.SQL.Add('AND PageType <> 3');
        Datam1.Query1.SQL.Add('AND Dirty=0');
        Datam1.Query1.Open;
        if not Datam1.Query1.Eof then
        begin
          CopySeparationSet := Datam1.Query1.Fields[0].AsInteger;
          UniquePage := Datam1.Query1.Fields[1].AsInteger;
          PDFMaster := Datam1.Query1.Fields[2].AsInteger;
          PressID := Datam1.Query1.Fields[3].AsInteger;
        end;
        Datam1.Query1.Close;

        if (CopySeparationSet <= 0) then
          continue;
        if (UniquePage = 2) then
          continue;
        // ignore if fully unique (no master to link up to
        if (UniquePage = 1) AND (PDFMaster = MasterCopySeparationSet) then
          continue;


        // Easy case Common -> Forced
        if (UniquePage=0) then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('UPDATE PageTable SET UniquePage=2');
          Datam1.Query1.SQL.Add('WHERE CopySeparationSet = ' + IntToStr(CopySeparationSet));
          DataM1.Query1.SQL.SaveToFile('MakeForced1.sql');
          TrySql(Datam1.Query1);
        end;

        // complicated case.. Unique but pdfmaster on other press..
        if (UniquePage = 1) AND (PDFMaster <> MasterCopySeparationSet) AND (PDFMaster>0) then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('UPDATE PageTable SET UniquePage=2,MasterCopySeparationSet=PDFMaster');
          Datam1.Query1.SQL.Add('WHERE CopySeparationSet = ' + IntToStr(CopySeparationSet));
          DataM1.Query1.SQL.SaveToFile('MakeForced2.sql');
          TrySql(Datam1.Query1);
        end;

      end;
    end;
  Except
  end;

  ActionThumbnailrefresh.Execute;

end;

procedure TFormMain.ActionMakeUniqueExecute(Sender: TObject);
var
  PdfMaster: Integer;
  CopySeparationSet : Integer;
  MasterCopySeparationSet : Integer;
  i : Integer;
  EditionID : Integer;
  UniquePage : Integer;
  ProductionID : Integer;
begin
  //PdfMaster := 0;

  ProductionID := 0;
  try
    ProductionID := TTreeViewpagestype(TreeViewThumbs.Selected.Data^).ProductionID;
    if (ProductionID = 0) then
      exit;
    for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
    begin
      CopySeparationSet := 0;
      MasterCopySeparationSet := 0;
      EditionID := 0;
      UniquePage := -1;

      if (PBExListviewthumbnail.Items[i].Selected) then
      begin
        MasterCopySeparationSet := Showthubms[i].mastercopyseparationset;
        //PdfMaster := Showthubms[i].pdfmaster;
        EditionID := Showthubms[i].edition;
        UniquePage := Showthubms[i].UniquePage;

        if (MasterCopySeparationSet = 0) OR (EditionID=0) then
          continue;
        if (UniquePage = 1) then
          continue;

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('SELECT TOP 1 CopySeparationSet,UniquePage,PDFMaster FROM PageTable WITH (NOLOCK)');
        Datam1.Query1.SQL.Add('WHERE MasterCopySeparationSet = ' + IntToStr(MasterCopySeparationSet));
      //  Datam1.Query1.SQL.Add('AND PDFMaster = ' + IntToStr(PdfMaster));
        Datam1.Query1.SQL.Add('AND EditionID = ' + IntToStr(EditionID));
        Datam1.Query1.SQL.Add('AND ProductionID = ' + IntToStr(ProductionID));
        Datam1.Query1.SQL.Add('AND Active = 1');
        Datam1.Query1.SQL.Add('AND PageType <> 3');
        Datam1.Query1.SQL.Add('AND Dirty=0');
        Datam1.Query1.Open;
        if not Datam1.Query1.Eof then
          CopySeparationSet := Datam1.Query1.Fields[0].AsInteger;
        Datam1.Query1.Close;

        if (CopySeparationSet > 0) then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('UPDATE PageTable SET UniquePage=1, MasterCopySeparationSet=CopySeparationSet, Status=0,ProofStatus=0,Version=0');
          if (PDFMasterOK) then
            Datam1.Query1.SQL.Add(',PDFMaster=CopySeparationSet');
          Datam1.Query1.SQL.Add('WHERE CopySeparationSet = ' + IntToStr(CopySeparationSet));
          DataM1.Query1.SQL.SaveToFile('MakeUnique.sql');
          TrySql(Datam1.Query1);

        end;
      end;
    end;
  Except
  end;

  ActionThumbnailrefresh.Execute;

end;

procedure TFormMain.ActionToolBarinputerrorDragOver(Sender, Source: TObject;
  X, Y: Integer; State: TDragState; var Accept: Boolean);
begin
  Accept := false;
end;

procedure TFormMain.ActionToolBaroutputerrorDragOver(Sender, Source: TObject;
  X, Y: Integer; State: TDragState; var Accept: Boolean);
begin
  Accept := false;
end;

function TFormMain.accepttoolbardrag(Sender, Source: TObject): Boolean;
Var
  T: String;
begin
  result := false;

  if Source.ClassType = TActionDragObject then
  begin
    case PageControlMain.ActivePageIndex of
      VIEW_SEPARATIONS:
        begin
          if TActionDragObject(Source).ActionCount > 0 then
          begin
            T := Uppercase(TActionDragObject(Source).Actions[0].Category);
            if pos('PAGE', T) > 0 then
              result := true;
          end;
        end;
    end;
  end;
end;

procedure TFormMain.Myonclick(Sender: TObject);
begin
  // sleep(0);
end;



// procedure TFormMain.InfraCustomizeDlg1Close(Sender: TObject);
// begin
(* if not InfraCustomizeDlg1.ignoreonclose then
  begin
  Setbluebar;
  End
  else
  begin
  Setbluebar;
  end; *)
// end;

procedure TFormMain.ActionThumbnailrefreshExecute(Sender: TObject);
begin
  try
    aktPBExListviewthumbnailvertpos := 0;
    // off loadids;
    if TreeViewThumbs.Selected <> nil then
    begin
      if (TreeViewThumbs.Selected.Level > 0) then
      begin
        if (TreeViewThumbs.Selected <> nil) then
          loadthumbnails(true);
      End
      else
      begin
        PBExListviewthumbnail.Items.Clear;
        FormImage.ImageListthumbnails.Clear;
      end;
    End
    else
    begin
      PBExListviewthumbnail.Items.Clear;
      FormImage.ImageListthumbnails.Clear;
    end;
    if TreeViewThumbs.Visible then
      Setthumbstatbar;
    setdroptarget;
    ActionEnable('ActionThumbnailrefreshExecute');

  except
  end;
end;

procedure TFormMain.ActionEnable(FromProc: String);
var
  i, Treelev: Integer;
  somesel: Boolean;
  Apressid: Integer;
  NProdpresssel: Integer;
  NProd, Aktprod: Integer;
begin
  NProdpresssel := 0;
  Treelev :=0;
  try
    writeMainlogfile('ActionEnable start > ' + FromProc);
    ActionFileserverconnect.Enabled := false;
    ActionPlancombinepressruns.Enabled := false;

    ActionReSendInkbackup.Enabled := false;
    Actionuknowfiletool.Enabled := (Prefs.MayApprove) and
      (PageControlMain.ActivePageIndex < 2);
    ActionDebugunplan.Enabled := false;
    Actiondeletepublication.Enabled := Prefs.MayDeleteProducts;
    // MayRunProducts;
    Actiontoolholdrelse.Enabled := Prefs.MayReimage;
    ActionThumbresetversion.Enabled := false;

    Actionprodtreecreep.Enabled := false;
    Actionreportgenext.Enabled := false;
    ActionPressInfoImport.Enabled := false;
    ActionSepReprocess.Enabled := false;

    ActionnewplanMove.Enabled := false;
    ActionPlanCopytopress.Enabled := false;
    Actionpltrechangepress.Enabled := false;
    Actionproductionchrpress.Enabled := false;
    Actionprodcopytopress.Enabled := false;
    // Actiontoolcombinepressruns.Enabled := (tnames1.pressnames.Count = 1) and (CombinepressrunPoissible) and (Prefs.ISadministrator or Prefs.MayRunProducts);
    Actiontoolcombinepressruns.Enabled := (CombinepressrunPoissible) and
      (Prefs.ISadministrator or Prefs.MayRunProducts);

    if (Prefs.Proversion = 2) then
    begin
      FormMain.TabSheetEdition.TabVisible := false;
      FormMain.TabSheetNewplanner.TabVisible := true;
      FormMain.TabSheetprogress.TabVisible := true;
      FormMain.TabSheetplates.TabVisible := true;
      FormMain.TabSheetErrorLog.TabVisible := false;
      FormMain.TabSheetPages.TabVisible := true;
      FormMain.TabSheetThumbnails.TabVisible := true;
      FormMain.TabSheetReportmain.TabVisible := false;
      FormMain.TabSheetUnknownpages.TabVisible := true;
      FormMain.TabSheetactiivequeue.TabVisible := false;
    end
    else
    begin
      if Globalsystemtype <> 3 then
      begin
        FormMain.TabSheetEdition.TabVisible := Formtabs.CheckBoxEdtab.Checked or
          (Prefs.ISadministrator and Prefs.AdminTab);
        FormMain.TabSheetNewplanner.TabVisible :=
          Formtabs.CheckBoxplantab.Checked or
          (Prefs.ISadministrator and Prefs.AdminTab);
        FormMain.TabSheetprogress.TabVisible :=
          Formtabs.CheckBoxprodtab.Checked or
          (Prefs.ISadministrator and Prefs.AdminTab);
        FormMain.TabSheetplates.TabVisible :=
          Formtabs.CheckBoxplatetab.Checked or
          (Prefs.ISadministrator and Prefs.AdminTab);
        FormMain.TabSheetErrorLog.TabVisible :=
          Formtabs.CheckBoxlogtab.Checked or
          (Prefs.ISadministrator and Prefs.AdminTab);
        FormMain.TabSheetPages.TabVisible :=
          Formtabs.CheckBoxpagelist.Checked or
          (Prefs.ISadministrator and Prefs.AdminTab);
        FormMain.TabSheetThumbnails.TabVisible :=
          Formtabs.CheckBoxThumbnailtab.Checked or
          (Prefs.ISadministrator and Prefs.AdminTab);
        FormMain.TabSheetReportmain.TabVisible :=
          Formtabs.CheckBoxreporttab.Checked or
          (Prefs.ISadministrator and Prefs.AdminTab);
        FormMain.TabSheetUnknownpages.TabVisible :=
          Formtabs.CheckBoxunkowntab.Checked or
          (Prefs.ISadministrator and Prefs.AdminTab);
        FormMain.TabSheetactiivequeue.TabVisible :=
          Formtabs.CheckBoxactQtab.Checked or
          (Prefs.ISadministrator and Prefs.AdminTab);
      end;
    end;

    if Prefs.readonly then
    begin
      Actionpagetreerelease.Enabled := false;
      Actionpagetreemonrel.Enabled := false;
      ActionpagetreeHold.Enabled := false;
      ActionpagetreePriority.Enabled := false;
      ActionpagetreeApprove.Enabled := false;
      ActionpagetreeComment.Enabled := false;
      Actionpagetreecreep.Enabled := false;

      Actionuknowfiletool.Enabled := false;
      Actionprogressdele.Enabled := false;
      ActionProgresshold.Enabled := false;
      ActionProgressrelease.Enabled := false;
      ActionProgresspriority.Enabled := false;
      Actionprogressreimage.Enabled := false;
      Actionprogaddcopy.Enabled := false;
      ActionThumbFileCenterRetry.Enabled := false;
      // Actionplatetreeforce.Enabled        := false;

      Actionplatecombpressruns.Enabled := false;

      Actionprogressremovecopy.Enabled := false;
      Actionprogressforce.Enabled := false;
      Actionprogressdeadline.Enabled := false;
      Actionproddevice.Enabled := false;
      Actionplatesoftproof.Enabled := false;
      Actiontoolcombinepressruns.Enabled := false;
      ActionPressInfoImport.Enabled := false;

      if not PublicationEditionSectionAliasSetupPossible then
      begin
        ActionConfadvinp.Visible := false;
      end;

      Actionplaneditdates.Enabled := false;

      Actionpageimaged.Enabled := false;
      ActionPagereproof.Enabled := false;
      ActionPageactivate.Enabled := (false) and (Prefs.MayApprove);
      Actionpagedeactivate.Enabled := (false) and (Prefs.MayApprove);

      ActionPageApprove.Enabled := (false) and (Prefs.MayApprove);
      ActionPageDisapprove.Enabled := (false) and (Prefs.MayApprove);
      ActionPageHold.Enabled := (false) and (Prefs.MayReimage);
      ActionPagerelease.Enabled := (false) and (Prefs.MayReimage);
      ActionPagesblackrel.Enabled := (false) and (Prefs.MayReimage);
      ActionThumbresetversion.Enabled := (false) and (Prefs.MayReimage);
      Actionpagereapprove.Enabled := (false) and (Prefs.MayApprove);
      Actionpagechangeproofer.Enabled := (false) and (Prefs.MayApprove);
      Actionpagechangetower.Enabled := (false) and (Prefs.MayReimage);
      ActionPageCHHighlow.Enabled := (false) and (Prefs.MayReimage);
      ActionPageCHCyl.Enabled := (false) and (Prefs.MayReimage);
      ActionPageCHstack.Enabled := (false) and (Prefs.MayReimage);
      ActionpagePressZones.Enabled := (false) and (Prefs.MayReimage);
      ActionPagereimage.Enabled := (false) and (Prefs.MayReimage);
      Actionpagedevice.Enabled := (false) and (Prefs.MayReimage);
      // ActionPagemarks.Enabled        := (false) and (Prefs.MayReimage);

      ActionpageMissing.Enabled := (false);
      Actionpagepriority.Enabled := (false);
      Actionpageretransmit.Enabled := (false) and (Prefs.MayReimage) and
        (not Prefs.RestrictRetransmit);
      Actionnewplanapply.Enabled := (false);

      ActionpageInfo.Enabled := false;

      ActionPageExport.Enabled := TreeViewpagelist.Selected <> nil;

      ActionPageedit.Enabled := false;
      Actionpagessavehighres.Enabled := false;

      ActionPagereproof.Enabled := false;
      ActionPageApprove.Enabled := (false) and (Prefs.MayApprove);
      ActionPageDisapprove.Enabled := (false) and (Prefs.MayApprove);
      ActionPageHold.Enabled := (false) and (Prefs.MayReimage);
      ActionPagerelease.Enabled := (false) and (Prefs.MayReimage);
      ActionPagesblackrel.Enabled := (false) and (Prefs.MayReimage);
      Actionpagereapprove.Enabled := (false) and (Prefs.MayApprove);
      Actionpagechangetower.Enabled := false;
      ActionPageCHHighlow.Enabled := false;
      ActionPageCHCyl.Enabled := false;
      ActionPageCHstack.Enabled := false;
      ActionpagePressZones.Enabled := false;

      ActionPagereimage.Enabled := (false) and (Prefs.MayReimage);
      Actionpagedevice.Enabled := false;
      // ActionPagemarks.Enabled        := false;
      ActionpageMissing.Enabled := false;
      Actionpagepriority.Enabled := false;
      Actionpageretransmit.Enabled := (false) and (Prefs.MayReimage) and
        (not Prefs.RestrictRetransmit);
      ActionPageExport.Enabled := false;
      ActionPageedit.Enabled := false;
      Actionpagessavehighres.Enabled := false;

      Actionthumbnailpreview.Enabled := false;
      ActionThumbnailapprove.Enabled := false;
      ActionThumbresetversion.Enabled := false;
      ActionThumbnaildisapprove.Enabled := false;
      ActionThumbnailhold.Enabled := false;
      ActionthumbnailRelease.Enabled := false;
      Actionthumbrelmono.Enabled := false;

      ActionthumbnailReapprove.Enabled := false;
      Actionthumbnailtower.Enabled := false;
      Actionthumbnailhighlow.Enabled := false;
      Actionthumbnailcylinder.Enabled := false;
      Actionthumbnailstackpos.Enabled := false;
      ActionThumbnailMissing.Enabled := false;
      Actionthumbnailpriority.Enabled := false;
      Actionthumbnailretransmit.Enabled := false;
      Actionthumbnailreproof.Enabled := false;
      Actionthumbnailchangeproofer.Enabled := false;
      Actionthumbnaileditcolors.Enabled := false;
      Actionplateeditcolors.Enabled := false;
      ActionthumbnailCenterspread.Enabled := false;
      ActionthumbnailSinglespread.Enabled := false;

      ActionplateCenterSpread.Enabled := false;
      ActionplateSinglepage.Enabled := false;

      Actionprogaddcopy.Enabled := (StringGridprods.cells[0, 1] <> '') and
        (Prefs.MayRunProducts) and (NProdpresssel = 1);
      Actionplatesadd1copy.Enabled := false;
      ActionplatesaddNcopies.Enabled := false;
      ActionPlatelayout.Enabled := (false) and (Prefs.MayReimage);
      Actionplatepanorama.Enabled := (false) and (Prefs.MayReimage);
      Actionplatereimage.Enabled := (false) and (Prefs.MayReimage);
      Actionplateretrans.Enabled := (false) and (Prefs.MayReimage);
      ActionPlatehold.Enabled := (false) and (Prefs.MayReimage);
      ActionPlaterelease.Enabled := (false) and (Prefs.MayReimage);
      Actionplatedevice.Enabled := (false) and (Prefs.MayReimage);
      Actionplatemarks.Enabled := (false) and (Prefs.MayReimage);
      ActionPlateapprove.Enabled := (false) and (Prefs.MayApprove);
      Actionplatedisapprove.Enabled := (false) and (Prefs.MayApprove);
      Actionplatepriority.Enabled := false;
      Actionplatetower.Enabled := (false) and (Prefs.MayReimage);
      Actionplatestack.Enabled := (false) and (Prefs.MayReimage);
      Actionplateretransmit.Enabled := (false) and (Prefs.MayReimage);
      Actionplatesextstat.Enabled := false;

      Actionnewplanedit.Enabled := (false) and (Prefs.MayReimage);
      ActionnewplanLoad.Enabled := (false) and (Prefs.MayReimage);
      ActionnewplanCreate.Enabled := (false) and (Prefs.MayReimage);

      ActionnewplanMove.Enabled := (false) and (Prefs.MayReimage);
      ActionPlanCopytopress.Enabled := (false) and (Prefs.MayReimage);
      Actionnewplandelete.Enabled := (false) and (Prefs.MayDeleteProducts);
      Actionloadpressconf.Enabled := (false) and (Prefs.MayReimage);

      Actionlogsave.Enabled := (false) and (Prefs.MayReimage);
      Actionlogfind.Enabled := (false) and (Prefs.MayReimage);
      // Actionlogfindnext.Enabled          := (false) and (Prefs.MayReimage);

      Actiongensingleexcelrep.Enabled := false;
      Actionsendreportmail.Enabled := false;
    end
    else
    begin
      case PageControlMain.ActivePageIndex of
        VIEW_SEPARATIONS:
          begin

            PBExListviewHSselected := false;

            if not StringGridHSempty then
            begin
              for i := 1 to StringGridHS.RowCount do
              begin
                if SuperHSdata[i - 1].Selected then
                begin
                  PBExListviewHSselected := true;
                  break;
                end;
              end;
            End
            else
              PBExListviewHSselected := false;

            ActionPagereproof.Enabled := PBExListviewHSselected;
            ActionpageInfo.Enabled := PBExListviewHSselected;
            Actionpagechangeproofer.Enabled := (PBExListviewHSselected) and
              (Prefs.MayApprove);
            Actionpageimaged.Enabled := (PBExListviewHSselected) and
              (Prefs.MayApprove or Prefs.MayRunProducts);
            ActionPageApprove.Enabled := (PBExListviewHSselected) and
              (Prefs.MayApprove);
            ActionPageDisapprove.Enabled := (PBExListviewHSselected) and
              (Prefs.MayApprove);
            ActionPageHold.Enabled := (PBExListviewHSselected) and
              (Prefs.MayReimage);

            Actionplatesadd1copy.Enabled := false;
            ActionplatesaddNcopies.Enabled := false;
            ActionPagerelease.Enabled := (PBExListviewHSselected) and
              (Prefs.MayReimage);
            ActionPagesblackrel.Enabled := (PBExListviewHSselected) and
              (Prefs.MayReimage);
            Actionpagereapprove.Enabled := (PBExListviewHSselected) and
              (Prefs.MayApprove);
            Actionpagechangetower.Enabled := (PBExListviewHSselected) and
              (Prefs.MayReimage);
            ActionPageCHHighlow.Enabled := (PBExListviewHSselected) and
              (Prefs.MayReimage);
            ActionPageCHCyl.Enabled := (PBExListviewHSselected) and
              (Prefs.MayReimage);
            ActionPageCHstack.Enabled := (PBExListviewHSselected) and
              (Prefs.MayReimage);
            ActionpagePressZones.Enabled := (PBExListviewHSselected) and
              (Prefs.MayReimage);

            ActionPagereimage.Enabled := (PBExListviewHSselected) and
              (Prefs.MayReimage);
            Actionpagedevice.Enabled := (PBExListviewHSselected) and
              (Prefs.MayReimage);
            // ActionPagemarks.Enabled        := (PBExListviewHSselected) and (Prefs.MayReimage);

            ActionpageMissing.Enabled := (PBExListviewHSselected) and
              (Prefs.MayApprove);
            Actionpagepriority.Enabled := (PBExListviewHSselected);
            Actionpageretransmit.Enabled := (PBExListviewHSselected) and
              (Prefs.MayReimage) and (not Prefs.RestrictRetransmit);

            ActionPageExport.Enabled := PBExListviewHSselected;
            ActionPageedit.Enabled := false;
            Actionpagessavehighres.Enabled := (PBExListviewHSselected) and
              ((Prefs.MayReimage) or (Prefs.MayApprove));

            ActionPageactivate.Enabled := (PBExListviewHSselected) and
              (Prefs.MayKillColor);
            Actionpagedeactivate.Enabled := (PBExListviewHSselected) and
              (Prefs.MayKillColor);

            if (PBExListviewHSselected) and (Prefs.MayApprove) then
            begin
              ActionPageedit.Enabled := (Prefs.ExternalTiffEditorPath <> '');
            end;

            (* if CheckBoxAllLocationsPa.checked then
              begin
              Actionpagechangetower.Enabled := false;
              ActionPageCHHighlow.Enabled := false;
              ActionPageCHCyl.Enabled := false;
              ActionpagePressZones.Enabled := false;
              ActionPageCHstack.Enabled := false;
              Actionpagedevice.Enabled := false;
              end; *)

          end;
        VIEW_THUMBNAILS:
          begin

            Actionthumbnailpreview.Enabled :=
              PBExListviewthumbnail.Selected <> nil;
            ActionThumbnailapprove.Enabled :=
              (PBExListviewthumbnail.Selected <> nil) and
              (Prefs.MayApprove);
            ActionThumbresetversion.Enabled :=
              (PBExListviewthumbnail.Selected <> nil) and
              (Prefs.MayApprove);
            ActionThumbnaildisapprove.Enabled :=
              (PBExListviewthumbnail.Selected <> nil) and
              (Prefs.MayApprove);
            ActionthumbnailReapprove.Enabled :=
              (PBExListviewthumbnail.Selected <> nil) and
              (Prefs.MayApprove);
            Actionthumbtreeapprove.Enabled :=
              (PBExListviewthumbnail.Selected <> nil) and
              (Prefs.MayApprove);

            ActionThumbnailhold.Enabled :=
              (PBExListviewthumbnail.Selected <> nil) and
              (Prefs.MayReimage);
            ActionthumbnailRelease.Enabled :=
              (PBExListviewthumbnail.Selected <> nil) and
              (Prefs.MayReimage);
            Actionthumbrelmono.Enabled :=
              (PBExListviewthumbnail.Selected <> nil) and
              (Prefs.MayReimage);
            Actionthumbnailtower.Enabled :=
              (PBExListviewthumbnail.Selected <> nil) and
              (Prefs.MayReimage);
            Actionthumbnailhighlow.Enabled :=
              (PBExListviewthumbnail.Selected <> nil) and
              (Prefs.MayReimage);
            Actionthumbnailcylinder.Enabled :=
              (PBExListviewthumbnail.Selected <> nil) and
              (Prefs.MayReimage);
            Actionthumbnailstackpos.Enabled :=
              (PBExListviewthumbnail.Selected <> nil) and
              (Prefs.MayReimage);
            ActionThumbnailMissing.Enabled :=
              (PBExListviewthumbnail.Selected <> nil) and
              (Prefs.MayApprove);
            ActionThumbFileCenterRetry.Enabled :=
              (PBExListviewthumbnail.Selected <> nil) and
              (Prefs.MayApprove);
            Actionthumbnailpriority.Enabled :=
              (PBExListviewthumbnail.Selected <> nil) and
              (Prefs.MayApprove or Prefs.MayReimage);

            Actionthumbnailretransmit.Enabled :=
              (PBExListviewthumbnail.Selected <> nil) and
              (Prefs.MayApprove or Prefs.MayReimage) and
              (not Prefs.RestrictRetransmit);

            Actionthumbnailreproof.Enabled :=
              (PBExListviewthumbnail.Selected <> nil) and
              (Prefs.MayApprove or Prefs.MayReimage);
            Actionthumbnailchangeproofer.Enabled :=
              (PBExListviewthumbnail.Selected <> nil) and
              (Prefs.MayApprove or Prefs.MayReimage);
            Actionthumbnaileditcolors.Enabled :=
              (PBExListviewthumbnail.Selected <> nil) and
              (Prefs.MayKillColor);
            ActionthumbnailCenterspread.Enabled :=
              (PBExListviewthumbnail.Selected <> nil) and
              (Prefs.MayApprove or Prefs.MayReimage);
            ActionthumbnailSinglespread.Enabled :=
              (PBExListviewthumbnail.Selected <> nil) and
              (Prefs.MayApprove or Prefs.MayReimage);
            Action1.Enabled := (PBExListviewthumbnail.Selected <> nil);
            Actionthumbhardproof.Enabled :=
              (PBExListviewthumbnail.Selected <> nil);

            (* if CheckBoxThumball.checked then
              begin
              Actionthumbnailtower.Checked := false;
              Actionthumbnailhighlow.Checked := false;
              Actionthumbnailcylinder.Checked := false;
              Actionthumbnailstackpos.Checked := false;
              end;
            *)
          end;

        VIEW_PLATES:
          begin
            // memo1.lines.Clear;
            // memo1.lines.Add('GUGU2 ' + IntToStr(Integer(AnyPlatesselected)) + ',' + IntToStr(Integer(Prefs.MayReimage)) ) ;
            Actionplatecombpressruns.Enabled :=
              (TreeViewPlateview.Selected <> nil) and (Prefs.MayRunProducts)
              and (CombinepressrunPoissible);
            Actionplatesextstat.Enabled := (AnyPlatesselected) and
              (Prefs.MayReimage);
            ActionSplitProduct.Enabled := false;
            Actionpltrechangepress.Enabled := false;
            if TreeViewPlateview.Selected <> nil then
            begin
              Actionpltrechangepress.Enabled :=
                (TreeViewPlateview.Selected.Level > 1) and
                (Prefs.MayRunProducts);
              ActionSplitProduct.Enabled :=
                (TreeViewPlateview.Selected.Level > 1) and
                (Prefs.MayRunProducts);
              Treelev := TreeViewPlateview.Selected.Level;
            end;
            Actionplatesoftproof.Enabled := (AnyPlatesselected) and
              (Prefs.MayReimage);
            ActionPlatelayout.Enabled := (AnyPlatesselected) and
              (Prefs.MayReimage);
            Actionplatepanorama.Enabled := (AnyPlatesselected) and
              (Prefs.MayReimage);
            Actionplatereimage.Enabled := (AnyPlatesselected) and
              (Prefs.MayReimage);
            Actionplateretrans.Enabled := (AnyPlatesselected) and
              (Prefs.MayReimage);
            ActionPlatehold.Enabled := (AnyPlatesselected) and
              (Prefs.MayReimage);
            ActionPlaterelease.Enabled := (AnyPlatesselected) and
              (Prefs.MayReimage);
            Actionplatedevice.Enabled := (AnyPlatesselected) and
              (Prefs.MayReimage);
            Actionplatemarks.Enabled := (AnyPlatesselected) and
              (Prefs.MayReimage);
            ActionPlateapprove.Enabled := (AnyPlatesselected) and
              (Prefs.MayApprove);
            Actionplatedisapprove.Enabled := (AnyPlatesselected) and
              (Prefs.MayApprove);

            Actionplatetreeapprove.Enabled := (AnyPlatesselected) and
              (Prefs.MayApprove);

            Actionplatepriority.Enabled := AnyPlatesselected;
            Actionplatetower.Enabled := (AnyPlatesselected) and
              (Prefs.MayReimage);
            Actionplatestack.Enabled := (AnyPlatesselected) and
              (Prefs.MayReimage);
            Actionplateretransmit.Enabled := (AnyPlatesselected) and
              (Prefs.MayReimage);
            ActionPlateproduce.Enabled := (AnyPlatesselected) and
              (Prefs.MayReimage);
            Actionplateeditcolors.Enabled := (AnyPlatesselected) and
              (Prefs.MayKillColor);
            Actionplatetocommon.Enabled := (AnyPlatesselected) and
              (Prefs.MayKillColor);
            ActionplateCenterSpread.Enabled := (AnyPlatesselected) and
              (Prefs.MayApprove or Prefs.MayReimage);
            ActionplateSinglepage.Enabled := (AnyPlatesselected) and
              (Prefs.MayApprove or Prefs.MayReimage);
            ActionPlateregenink.Enabled := (AnyPlatesselected) and
              (Prefs.AllowInkfileRegenerate) and (Prefs.MayReimage) and
              ((FormMain.getinkfolder(4,
              tNames1.locationnametoid(FormMain.ComboBoxpalocationNY.text)) <>
              '') or (Prefs.NewInkRegeneration));
            ActionplateresendInkFiles.Enabled := (AnyPlatesselected) and
              (Prefs.MayReimage) and (Prefs.DatabaseQueueInkResend);
            Actionplatesadd1copy.Enabled := (AnyPlatesselected) and
              (Prefs.MayReimage);
            ActionplatesaddNcopies.Enabled := (AnyPlatesselected) and
              (Prefs.MayReimage);
            Actionplatepecom.Enabled := (Treelev > 1) and
              (Prefs.MayRunProducts);
            Actionplatetreepdfbook.Enabled := (MakePdfBookFlatsPosible) and
              (TreeViewPlateview.Selected <> nil);
            ActionChangeStacker.Enabled := (AnyPlatesselected);

          end;
        VIEW_PRODUCTIONS:
          begin
            Apressid := -1;
            NProdpresssel := 0;
            NProd := 0;
            Aktprod := -1;
            for i := 1 to StringGridprods.RowCount do
            begin
              if StringGridprodsdata[i].Selected then
              begin
                if Aktprod <> StringGridprodsdata[i].ProductionID then
                begin
                  Aktprod := StringGridprodsdata[i].ProductionID;
                  Inc(NProd);
                end;

                if Apressid = -1 then
                begin
                  Apressid := StringGridprodsdata[i].pressid;
                  NProdpresssel := 1;
                End
                else
                begin
                  if Apressid <> StringGridprodsdata[i].pressid then
                  begin
                    Inc(NProdpresssel);
                  end;
                end;
              end;
            end;
            Actionprogressdele.Enabled := (StringGridprods.cells[0, 1] <> '')
              and (Prefs.MayDeleteProducts) and (NProdpresssel >= 1);
            ActionProgresshold.Enabled := (StringGridprods.cells[0, 1] <> '')
              and (Prefs.MayReimage) and (NProdpresssel >= 1);
            ActionProgressrelease.Enabled := (StringGridprods.cells[0, 1] <> '')
              and (Prefs.MayReimage) and (NProdpresssel >= 1);
            ActionProgressTowerRelease.Enabled :=
              (StringGridprods.cells[0, 1] <> '') and (Prefs.MayReimage) and
              (NProdpresssel >= 1);
            ActionProgresspriority.Enabled :=
              (StringGridprods.cells[0, 1] <> '') and (Prefs.MayReimage) and
              (NProdpresssel >= 1);
            Actionprogressreimage.Enabled := (StringGridprods.cells[0, 1] <> '')
              and (Prefs.MayReimage) and (NProdpresssel >= 1);
            Actionprogaddcopy.Enabled := (StringGridprods.cells[0, 1] <> '') and
              (Prefs.MayRunProducts) and (NProdpresssel = 1);
            Actionprogressremovecopy.Enabled :=
              (StringGridprods.cells[0, 1] <> '') and (Prefs.MayRunProducts)
              and (NProdpresssel = 1);
            Actionprogressforce.Enabled := (StringGridprods.cells[0, 1] <> '')
              and (Prefs.MayRunProducts) and (NProdpresssel >= 1);
            Actionprogressdeadline.Enabled :=
              (StringGridprods.cells[0, 1] <> '') and (Prefs.MayRunProducts)
              and (NProdpresssel >= 1);
            Actionproddevice.Enabled := (StringGridprods.cells[0, 1] <> '') and
              (Prefs.MayReimage) and (NProdpresssel = 1);
            Actionprodchangepress.Enabled := (StringGridprods.cells[0, 1] <> '')
              and (Prefs.MayRunProducts) and (NProdpresssel = 1);
            Actionprodlayout.Enabled := (StringGridprods.cells[0, 1] <> '') and
              (Prefs.MayReimage) and (NProdpresssel = 1);
            ActionChangeStacker.Enabled := (StringGridprods.cells[0, 1] <> '')
              and (NProdpresssel >= 1);

            if TreeViewprodcontrol.Selected <> nil then
            begin
              Actionprodtreecreep.Enabled :=
                (TreeViewprodcontrol.Selected.Level > 1) and
                (Prefs.MayRunProducts);
            end;
            ActionProdordernum.Enabled := (StringGridprods.cells[0, 1] <> '')
              and (Prefs.MayRunProducts) and (NProdpresssel >= 1);
            ActionProdRipsetup.Enabled := (StringGridprods.cells[0, 1] <> '')
              and (Prefs.MayRunProducts) and (NProdpresssel >= 1);
            Actionproductionchrpress.Enabled :=
              (StringGridprods.cells[0, 1] <> '') and (Prefs.MayRunProducts)
              and (NProd = 1);
            ActionSplitProduct.Enabled := (StringGridprods.cells[0, 1] <> '')
              and (Prefs.MayRunProducts) and (NProd = 1);
            Actionprodcopytopress.Enabled := (StringGridprods.cells[0, 1] <> '')
              and (Prefs.MayRunProducts) and (NProd = 1);
            Actionprodinkcomment.Enabled := (StringGridprods.cells[0, 1] <> '')
              and (NProd = 1);
            ActionSepReprocess.Enabled := (StringGridprods.cells[0, 1] <> '')
              and (NProd = 1);

            if (UTypes.RipSetupIDInPageTable = false) then
              ActionSepReprocess.Enabled := false;

            if not ComboBoxpalocationNY.Enabled then
            begin
              (*
                Actionproddevice.Enabled := false;
                Actionproductionchrpress.Enabled := false;
                Actionprogressreimage.Enabled := false;
              *)
            end;

          end;
        VIEW_EDITIONS:
          begin

            ActionEditionapply.Enabled := false;
            ActionEditionrefresh.Enabled := true;
            ActioneditionAdd.Enabled := false;
            ActionAddtimedition.Enabled := false;
            Actioneditiondelete.Enabled := false;
            if (ListViewEdto.Items.Count > 0) and (Prefs.MayRunProducts)
            then
            begin
              ActioneditionAdd.Enabled :=
                not editiontype(ListViewEdto.Items[0].Data^).adding;
              Actioneditiondelete.Enabled := true;
            end;
            if TimedEdPossible then
            begin

              if TreeViewNeweddtree.Selected <> nil then
              begin
                ActionAddtimedition.Enabled :=
                  (TreeViewNeweddtree.Selected.Level > 1) and
                  (Prefs.AllowTimedEditions) and (Prefs.MayRunProducts);
              end;
            end;
          end;
        VIEW_PLANS:
          begin
            // ## NAN 20180103
            ActionUnapplyandsplit.Enabled := false;
            ActionSplitProduct.Enabled := false;

            ActionPlancombinepressruns.Enabled := (TreeViewplan.Selected <> nil)
              and (Prefs.MayRunProducts) and (CombinepressrunPoissible);
            Actionnewplanedit.Enabled := false;
            ActionnewplanLoad.Enabled := false;
            ActionnewplanCreate.Enabled := false;

            ActionnewplanMove.Enabled := false;
            ActionPlanCopytopress.Enabled := false;
            Actionloadpressconf.Enabled := false;
            Actionnewplandelete.Enabled := false;
            Actionnewplanapply.Enabled := false;
            Actionplaneditdates.Enabled := false;
            if TreeViewplan.Selected = nil then
              exit;
            Actionnewplanedit.Enabled := (TreeViewplan.Selected.Level > 1) and
              (Prefs.MayRunProducts);
            // ActionnewplanLoad.Enabled   := (TreeViewplan.Selected.Level > 0) and  (Prefs.MayRunProducts);
            ActionnewplanLoad.Enabled := (Prefs.MayRunProducts);
            // ActionnewplanCreate.Enabled := (TreeViewplan.Selected.Level > 0) and  (Prefs.MayRunProducts);
            ActionnewplanCreate.Enabled := (Prefs.MayRunProducts);
            Actionloadpressconf.Enabled := (TreeViewplan.Selected.Level > 1) and
              (Prefs.MayRunProducts);

            ActionnewplanMove.Enabled := (TreeViewplan.Selected.Level > 1) and
              (Prefs.MayRunProducts);
            ActionPlanCopytopress.Enabled := (TreeViewplan.Selected.Level > 1)
              and (Prefs.MayRunProducts);
            Actionnewplandelete.Enabled := (TreeViewplan.Selected.Level > 1) and
              (Prefs.MayDeleteProducts);

            // ActionnewplanMove.Enabled := (TreeViewplan.Selected.Level > 1) and (Prefs.MayDeleteProducts);

            ActionSplitProduct.Enabled := (TreeViewplan.Selected.Level > 1) and
              (Prefs.MayRunProducts);

            if TreeViewplan.Selected.Level > 1 then
            begin
              if (Prefs.MayRunProducts) then
              begin
                if (Tplantreedata(TreeViewplan.Selected.Data^).plantype = 0)
                then
                  Actionnewplanapply.ImageIndex := 137
                else
                  Actionnewplanapply.ImageIndex := 138;

                Actionplaneditdates.Enabled := true;
                Actionnewplanapply.Enabled := true;
                Actionnewplanedit.Enabled := true;
                ActionnewplanLoad.Enabled := false;
                ActionnewplanCreate.Enabled := false;

                ActionnewplanMove.Enabled := true;
                Actionloadpressconf.Enabled := false;
                ActionDebugunplan.Enabled := true;
                ActionPlanCopytopress.Enabled := true;
              end;
            end;

            if TreeViewplan.Selected.Level > 1 then
            begin
              if (Prefs.MayRunProducts) then
              begin
                ActionnewplanLoad.Enabled := true;
                ActionnewplanCreate.Enabled := true;

                ActionnewplanMove.Enabled := true;
                ActionPlanCopytopress.Enabled := true;
                Actionplaneditdates.Enabled := true;
              end;
            end;

          end;
        VIEW_LOGS:
          begin

            case PageControlLog.ActivePageIndex of
              0:
                begin
                  Actionlogfind.Enabled := PBExListviewOKLog.Items.Count > 0;
                  Actionlogsave.Enabled := PBExListviewOKLog.Items.Count > 0;
                  Actionlogtoexcel.Enabled := PBExListviewOKLog.Items.Count > 0;
                end;
              1:
                begin
                  Actionlogfind.Enabled := PBExListviewErrorLog.Items.Count > 0;
                  Actionlogsave.Enabled := PBExListviewErrorLog.Items.Count > 0;
                  Actionlogtoexcel.Enabled :=
                    PBExListviewErrorLog.Items.Count > 0;
                end;
            end;
          end;
        VIEW_REPORTS:
          begin
            Actiongensingleexcelrep.Enabled := true;
            Actionsendreportmail.Enabled := false;
            if TreeViewreportfilter.Selected <> nil then
            begin
              if (TreeViewreportfilter.Selected.Level > 1) and
                ((Prefs.MayRunProducts)) then
              begin
                Actiongensingleexcelrep.Enabled := true;
              end;

              if (Prefs.EmailServer <> '') and (Prefs.MayRunProducts) and
                (TreeViewreportfilter.Selected.Level >= 1) then
              begin
                Actionsendreportmail.Enabled := true;
              end;
            end;
          end;

      end;
    end;

    if (PageControlMain.ActivePageIndex < 3) And (Prefs.MayReimage) then
    begin

      case PageControlMain.ActivePageIndex of
        VIEW_SEPARATIONS:
          begin
            if TreeViewpagelist.Selected <> nil then
            begin
              if TreeViewpagelist.Selected.Level > 1 then
                ActionSepReprocess.Enabled := true;
            end;
          end;
        VIEW_THUMBNAILS:
          begin
            if TreeViewThumbs.Selected <> nil then
            begin
              if TreeViewThumbs.Selected.Level > 1 then
                ActionSepReprocess.Enabled := true;
            end;
          end;
        VIEW_PLATES:
          begin
            if TreeViewPlateview.Selected <> nil then
            begin
              if TreeViewPlateview.Selected.Level > 1 then
                ActionSepReprocess.Enabled := true;
            end;
          end;
      end;
    end;

    if (UTypes.RipSetupIDInPageTable = false) then
    begin
      ActionSepReprocess.Enabled := false;
      ActionSepReprocess.Visible := false;
    end;

    if not CCMesagePossible then
    begin
      ActionsystemreadCCmes.Visible := false;
    end;
    // NAN
    ActionsystemreadCCmes.Visible := false;

    ActiondongAink.Visible := Prefs.DongAInkVisible;

    if not ActionThumbFileCenterRetryPossible then
      ActionThumbFileCenterRetry.Visible := false;

    FormActionconfig.applyactionEnable;
    ActionPressInfoImport.Enabled := (Prefs.MayReimage) or (Prefs.MayRunProducts);
    ActionPressInfoImport.Visible := Prefs.PressDataRequestLevel > 0;
    Actionthumbfalse.Visible := Prefs.ThumbnailAllowSetFalseSpread;
    writeMainlogfile('ActionEnable End > ' + FromProc);

    /// Action5.Enabled := true;
    // PopupActionBarExProduction.Items[25].Enabled := true;
  except
  end;

end;

procedure TFormMain.ActionnewplanrefreshExecute(Sender: TObject);
begin
  LoadIDs('Actionnewplanrefresh', false);
  Makeplantree(-1);
  try
    ActionEnable('ActionnewplanrefreshExecute');
  Except
  end;
end;

function TFormMain.Supergetantipos(frompos: Integer; pagetypes: TPageNumbering;
  tmpl: Integer; makeit: Boolean): Integer;
var
  akttmpl: TPlatetemplate;
  Standing: Boolean;
  posipos1: Integer;
  posipos2: Integer;

  procedure getposi;
  begin
    if (Standing) OR (akttmpl.PagesDown = 1) then
    // enten til højre eller til venstre
    begin
      if (frompos = 1) then
      begin
        posipos1 := 2;
        exit;
      end;
      if (frompos = akttmpl.NupOnplate) then
      begin
        posipos1 := akttmpl.NupOnplate - 1;
        exit;
      end;

      if (akttmpl.PagesAcross = 4) AND (akttmpl.PagesDown = 1) then
      begin
        if (frompos = 2) OR (frompos = 4) then
          posipos1 := frompos - 1;
        if (frompos = 1) OR (frompos = 3) then
          posipos1 := frompos + 1;
        exit;
      end;

      if (frompos - 1) mod akttmpl.PagesAcross = 0 then
      begin
        posipos1 := frompos + 1;
        exit;
      end;

      if (frompos) mod akttmpl.PagesAcross = 0 then
      begin
        posipos1 := frompos - 1;
        exit;
      end;
      posipos1 := frompos + 1;
      posipos2 := frompos - 1;
    end
    else
    begin // enten oppe eller nede
      (*
        1  2  3  4         1 2
        5  6  7  8         3 4
        9  10 11 12
        13 14 15 16
      *)

      posipos1 := frompos + akttmpl.PagesAcross;
      if posipos1 > akttmpl.NupOnplate then
      begin
        posipos1 := frompos - akttmpl.PagesAcross;
        exit;
      end;

      posipos2 := frompos - akttmpl.PagesAcross;
      if posipos2 < 0 then
      begin
        posipos2 := -1;
        exit;
      end;
    end;
  end;

Var
  i, r: Integer;

begin

  result := -1;
  posipos1 := -1;
  posipos2 := -1;
  if (tmpl > 0) AND (tmpl <= NPlatetemplateArray) then
  begin
    akttmpl := PlatetemplateArray[tmpl];
    if akttmpl.NupOnplate < 64 then
    begin
      for i := akttmpl.NupOnplate + 1 to akttmpl.NupOnplate do
        pagetypes[i] := -1;
    end;
    Standing := akttmpl.PageRotationList[1] mod 2 = 0;

    getposi;

    if (posipos2 > 0) and (posipos1 > 0) then
    begin
      if not makeit then
      begin
        if (pagetypes[posipos1] = 2) and (pagetypes[posipos2] = 2) then
        begin
          if not Standing then
          begin
            r := frompos DIV akttmpl.PagesAcross;
            if r mod 2 = 0 then
            begin
              if posipos1 > posipos2 then
                result := posipos1
              else
                result := posipos2;
            end
            else
            begin
              if posipos1 > posipos2 then
                result := posipos2
              else
                result := posipos1;
            end;

          end
          else
          begin
            if frompos mod 2 = 0 then
            begin
              if posipos1 > posipos2 then
                result := posipos2
              else
                result := posipos1;
            end
            else
            begin
              if posipos1 > posipos2 then
                result := posipos1
              else
                result := posipos2;
            end;
          end;
        end
        else
        begin
          if pagetypes[posipos1] = 2 then
          begin
            result := posipos1;
          End
          else
          begin
            if pagetypes[posipos2] = 2 then
            begin
              result := posipos2;
            End
          end;
        end;
      End
      else
      begin
        if not Standing then
        begin
          r := frompos DIV akttmpl.PagesAcross;
          if r mod 2 = 0 then
          begin
            if posipos1 > posipos2 then
              result := posipos1
            else
              result := posipos2;
          end
          else
          begin
            if posipos2 = 0 then
            begin
              result := posipos1;
            end
            else
            begin
              if posipos1 > posipos2 then
                result := posipos2
              else
                result := posipos1;
            end;
          end;

        end
        else
        begin
          if frompos mod 2 = 0 then
          begin
            if posipos1 > posipos2 then
              result := posipos2
            else
              result := posipos1;
          end
          else
          begin
            if posipos1 > posipos2 then
              result := posipos1
            else
              result := posipos2;
          end;
        end;
      end;
    end
    else
    begin
      result := posipos1;
    end;
  End
  else
  begin
    i := 6;

  end;
end;

procedure TFormMain.changemastertocenterspread(mastercopyseparationset
  : Longint);
Var
  aktpairpos, antipairpos: Integer;
  tmpl: TPlatetemplate;
  rotation: TPageNumbering;
  Ligende: Boolean;
  NAktpairposes: Integer;
  Aktpairposes: pparray;
  IAktpairposes: Integer;
  TemplateID: Integer;
  pagetypes: TPageNumbering;
  APPOS: pparray;
  ANPPOS: Integer;
  copyflatseparationset,copyflatseparationset2: Integer;
  mastercopyseparationset2 : Integer;
begin
  copyflatseparationset := 0;
  if Prefs.ThumbnailAllowSetFalseSpread then
  begin
    FormSetCenterspread.initmarks(mastercopyseparationset);

    if FormSetCenterspread.ShowModal <> mrOK then
      exit;

    FormSetCenterspread.setcreeptofalsespread(mastercopyseparationset);

  end;

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('select Distinct templateid,Copyflatseparationset,pagepositions from pagetable WITH(NOLOCK)');
  Datam1.Query1.SQL.Add('where mastercopyseparationset = ' + IntToStr(mastercopyseparationset));
  Datam1.Query1.SQL.Add('order by Copyflatseparationset');
  if Prefs.Debug then
    Datam1.Query1.SQL.SaveToFile
      (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
      'centerspread1.SQL');
  Tryopen(Datam1.Query1);

  while not Datam1.Query1.Eof do
  begin

    TemplateID := inittypes.gettemplatenumberfromID(Datam1.Query1.Fields[0].AsInteger);
    copyflatseparationset := Datam1.Query1.Fields[1].AsInteger;
    inittypes.PPOSstrtoarray(Datam1.Query1.Fields[2].AsString, Aktpairposes, NAktpairposes);

    tmpl := PlatetemplateArray[TemplateID];
    rotation := tmpl.PageRotationList;

    for IAktpairposes := 1 to NAktpairposes do
    begin
      aktpairpos := Aktpairposes[IAktpairposes];

      antipairpos := Supergetantipos(aktpairpos, pagetypes, TemplateID, true);
      // antipairpos := getantinumber(TemplateID,aktpairpos);

      Datam1.Query2.SQL.Clear;
      Datam1.Query2.SQL.Add('select Distinct mastercopyseparationset,pagepositions,Copyflatseparationset from pagetable WITH (NOLOCK)');
      Datam1.Query2.SQL.Add('where mastercopyseparationset <> ' +IntToStr(mastercopyseparationset));
      Datam1.Query2.SQL.Add('and Copyflatseparationset = ' + IntToStr(copyflatseparationset));
      if Prefs.Debug then
        Datam1.Query2.SQL.SaveToFile
          (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'
          + 'centerspread2.SQL');
      Tryopen(Datam1.Query2);
      while not Datam1.Query2.Eof do
      begin
        mastercopyseparationset2   := Datam1.Query2.Fields[0].AsInteger;
        inittypes.PPOSstrtoarray(Datam1.Query2.Fields[1].AsString, APPOS, ANPPOS);
        copyflatseparationset2   := Datam1.Query2.Fields[2].AsInteger;
        if inittypes.POSinPosarray(antipairpos, APPOS, ANPPOS) then
        begin
          Datam1.Query3.SQL.Clear;
          Datam1.Query3.SQL.Add('Update pagetable');
          Datam1.Query3.SQL.Add('set active = 0, pagetype = 2');
          if not Prefs.ThumbnailMakeChangesOnSubeditions then
          begin
            Datam1.Query3.SQL.Add(',uniquepage=1, mastercopyseparationset = copyseparationset');;
          end;
          Datam1.Query3.SQL.Add('where mastercopyseparationset = ' + InttoStr(mastercopyseparationset2));
          Datam1.Query3.SQL.Add('and Copyflatseparationset = ' + IntToStr(copyflatseparationset2));
          if Prefs.Debug then
            Datam1.Query3.SQL.SaveToFile
              (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
              'sqllogs\' + 'centerspread3.SQL');
          Datam1.Query3.ExecSQL;
        end;
        Datam1.Query2.Next;
      end;
      Datam1.Query2.Close;
    end;
    Datam1.Query1.Next;
  end;
  Datam1.Query1.Close;

  Datam1.Query2.SQL.Clear;
  Datam1.Query2.SQL.Add('Update pagetable');
  Datam1.Query2.SQL.Add('set pagetype = 1');
  Datam1.Query2.SQL.Add('where mastercopyseparationset = ' + IntToStr(mastercopyseparationset));
  Datam1.Query2.ExecSQL;

  // Set ReadyTime if applicaple
  Datam1.Query2.SQL.Clear;
  Datam1.Query2.SQL.Add('UPDATE PageTable SET ReadyTime=GETDATE() ');
  Datam1.Query2.SQL.Add('WHERE CopyFlatSeparationSet = ' +
    IntToStr(copyflatseparationset));
  Datam1.Query2.SQL.Add('AND DATEPART(year,ReadyTime) <= 2000');
  Datam1.Query2.SQL.Add('AND ACTIVE=1');
  Datam1.Query2.SQL.Add('AND Status>=10');
  Datam1.Query2.SQL.Add('AND Dirty=0');
  Datam1.Query2.SQL.Add('AND PageType < 3');
  Datam1.Query2.SQL.Add('AND NOT EXISTS (SELECT P2.CopyFlatSeparationSet, P2.Status FROM PageTable P2 WITH (NOLOCK) WHERE PageTable.CopyFlatSeparationSet=P2.CopyFlatSeparationSet AND P2.Status<10 AND P2.Active=1 AND P2.Dirty=0 AND P2.PageType<2 and P2.UniquePage<>0)');
  Datam1.Query2.ExecSQL;

end;

procedure TFormMain.ActionpageExtstatusExecute(Sender: TObject);
begin
  getpreselHS;
  if FormChangeextstatus.ShowModal = mrOK then
  begin
    setpagetablestddata('set externalstatus = ' +
      IntToStr(FormChangeextstatus.selectedexternalstatus), '');
    loadSuperHSDB2(false);
    resetpreselHS;
  end;
end;

procedure TFormMain.ActionpagechangecolsExecute(Sender: TObject);
begin
  if FormColorder.ShowModal = mrOK then
  begin

  end;
  loadSuperHSDB2(true);
end;

procedure TFormMain.ActionthumbnailextstausExecute(Sender: TObject);
begin
  if FormChangeextstatus.ShowModal = mrOK then
  begin
    setpagetablethumbdata('set externalstatus = ' +
      IntToStr(FormChangeextstatus.selectedexternalstatus), '');
    ActionThumbnailrefresh.Execute;
  end;
end;

procedure TFormMain.CheckBoxsmallplanimageClick(Sender: TObject);
begin
end;

// STARTNewplanning Newplanning Newplanning Newplanning Newplanning
// TreeViewplan

procedure TFormMain.TreeViewplanChange(Sender: TObject; Node: TTreeNode);
begin
  selecttheplanfromtree(Node);
end;

procedure TFormMain.selecttheplanfromtree(Node: TTreeNode);
var
  IPLF: Integer;
  N: TTreeNode;
begin
  try
    Multisecplan := true;
    screen.Cursor := crhourglass;
    ScrollBoxplanmain.Visible := false;
    FormMain.Deallocateplateframes;
    try
      N := Node;
      if Node.Level > 1 then
      begin
        while N.Level > 2 do
          N := N.Parent;

        plateframesproductionid := Tplantreedata(N.Data^).ProductionID;
        plateframesPubdate := Tplantreedata(N.Data^).Pubdate;
        plateframesPublicationid := Tplantreedata(N.Data^).Publicationid;
        plateframeslocationid := Tplantreedata(N.Data^).LocationID;
        plateframespressid := Tplantreedata(N.Data^).pressid;

        Keeptreeselection.Anyselect := true;
        Keeptreeselection.Pubdate := plateframesPubdate;
        Keeptreeselection.Publicationid := plateframesPublicationid;
        Keeptreeselection.pressid := plateframespressid;

        makeplateframes(ScrollBoxplanmain, ActionnewplanSmallimages.Checked);
        if PageControlplanning.ActivePageIndex = 1 then
          Formprodplan.makepagelist(PBExListviewPlandata, 0);

        Formprodplan.loadpressruniddata;
        Setselectedplanframe;
        Multisecplan := Formprodplan.PlanContainsMultiblesections;
      end
      else
      begin
        Nplateframes := 0;
        if Node.Level > 0 then
        begin
          plateframeslocationid := Tplantreedata(N.Data^).LocationID;
          plateframespressid := Tplantreedata(N.Data^).pressid;
        end;
      end;
    Except
    end;
  finally
    ScrollBoxplanmain.Visible := true;
    screen.Cursor := crdefault;
    aktnewplannode := N;
  end;
  try
    ActionEnable('selecttheplanfromtree');
  Except
  end;
end;

procedure TFormMain.ActionnewplaneditExecute(Sender: TObject);
Var
  N, IPLF: Integer;
begin
  try
    Formprodplan.ItsArepair := false;
    Planloggingtype := 992;
    Planloggingmessage := 'Plan edited';
    Formprodplan.PartialPlanning := false;

    if PartialeditOK then
    begin

      plateframesloadedname := '';
      N := 0;
      for IPLF := 1 to Nplateframes do
      begin
        if plateframes[IPLF].Selected then
        begin
          Inc(N);
        end;
      end;
      if N = 1 then
      begin
        plateframesloadedname := '';
        Formprodplan.planningaction := 6;
        MainEditplanpart;
      end
      else
      begin
        plateframesloadedname := '';
        Formprodplan.planningaction := 1;
        MainEditplan;
      end;
    end
    else
    begin // gammel db
      plateframesloadedname := '';
      Formprodplan.planningaction := 1;
      MainEditplan;
    end;

  finally
    Setplanlock(false);
  end;
end;

procedure TFormMain.ActionnewplanLoadExecute(Sender: TObject);
Var
  pressname: string;
begin

  if (plateframespressid <= 0) then
  begin
    if (tNames1.Pnpressnames = 1) then
      plateframespressid := tNames1.GetFirstPressID()
    else

      if (tNames1.pressnametoid(ComboBoxPressGrp.text) > 0) then
    begin
      plateframespressid := tNames1.pressnametoid(ComboBoxPressGrp.text);
    end
  end;

  pressname := tNames1.pressnameIDtoname(plateframespressid);

  if ((Prefs.UseExternalPlanLoad) AND (FileExists(Prefs.ExternalPlanLoaderExe)))
  then
  begin
    TUtils.ExecNewProcess(Prefs.ExternalPlanLoaderExe,
      IntToStr(plateframespressid));
    exit;
  end;

  Formprodplan.ItsArepair := false;
  Planloggingtype := 990;
  Planloggingmessage := 'Plan created';
  Formprodplan.PartialPlanning := false;

  // totally HARDCODED sCHIBSTED HACK!
  if (Prefs.CustomBuildName = 'STB') and (plateframespressid = 3) and
    (pressname = 'STB') then
  begin
    FormLoadstbplan.CheckBoxApplyonlyplannedcolors.Checked := false;
    FormLoadstbplan.Itspartial := false;
    planloadingSTB(false);
  end
  else
  begin
    Formloadpressplan.CheckBoxApplyonlyplannedcolors.Checked := false;
    Formloadpressplan.Itspartial := false;
    planloading(false);
  end;
end;

procedure TFormMain.ApplyOutputMetode(ProductionID: Integer; Tekst: String);
Var
  PosPressRunID: Array of String;
  iPressrunIDs, i: Integer;
begin
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('SELECT DISTINCT PressRunID FROM PageTable WITH (NOLOCK) WHERE ProductionID='''
    + IntToStr(ProductionID) + '''');
  Datam1.Query1.Open;

  iPressrunIDs := -1;
  while NOT Datam1.Query1.Eof do
  Begin
    Inc(iPressrunIDs);
    SetLength(PosPressRunID, iPressrunIDs + 1);
    PosPressRunID[iPressrunIDs] := Datam1.Query1.FieldByName
      ('PressRunID').AsString;
    Datam1.Query1.Next;
  End;
  Datam1.Query1.Close;

  for i := 0 to iPressrunIDs do
  Begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('INSERT INTO PressRunOutputMethod ');
    Datam1.Query1.SQL.Add('(PressRunID, OutputMethodName) VALUES(');
    Datam1.Query1.SQL.Add('''' + PosPressRunID[i] + '''');
    Datam1.Query1.SQL.Add(',''' + FormApplyproduction.ComboBoxOutputMetode.
      text + ''')');
    // DataM1.Query1.SQL.SaveToFile('001.sql');
    trysql(Datam1.Query1);
  End;
  Datam1.Query1.Close;
End;

procedure TFormMain.ApplyRipSetups(ProductionID: Integer; RipSetupName: string;
  PreflightSetupName: string; InkSaveSetupName: string);
var
  i1, i2, i3: Integer;
begin
  i1 := 0;
  i2 := 0;
  i3 := 0;

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('SELECT RipSetupID FROM RipSetupNames WHERE Name = ''' +
    RipSetupName + '''');
  Tryopen(Datam1.Query1);
  if not Datam1.Query1.Eof then
  begin
    i1 := Datam1.Query1.Fields[0].AsInteger;
  end;
  Datam1.Query1.Close;

  if (UTypes.PreflightSetupNamesPossible = true) AND (PreflightSetupName <> '')
  then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('SELECT PreflightSetupID FROM PreflightSetupNames WHERE Name = ''' +
      PreflightSetupName + '''');
    Tryopen(Datam1.Query1);
    if not Datam1.Query1.Eof then
    begin
      i2 := Datam1.Query1.Fields[0].AsInteger;
    end;
    Datam1.Query1.Close;
  end;

  if (UTypes.InkSaveSetupNamesPossible = true) AND (InkSaveSetupName <> '') then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('SELECT InksaveSetupID FROM InksaveSetupNames WHERE Name = ''' +
      InkSaveSetupName + '''');
    Tryopen(Datam1.Query1);
    if not Datam1.Query1.Eof then
    begin
      i3 := Datam1.Query1.Fields[0].AsInteger;
    end;
    Datam1.Query1.Close;
  end;

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('UPDATE PageTable');
  Datam1.Query1.SQL.Add('SET RipSetupID = ' + IntToStr(i1 + (i2 * 256) +
    (i3 * 256 * 256)));
  Datam1.Query1.SQL.Add('where productionid = ' + IntToStr(ProductionID));
  trysql(Datam1.Query1);
  Datam1.Query1.Close;
end;

procedure TFormMain.ApplySortingPositionIfEmpty(ProductionID: Integer; sortingposition: string);
begin
  writeMainlogfile('ApplySortingPositionIfEmpty(' + IntToStr(ProductionID) + ',' + sortingposition);

  Datam1.Query1.SQL.Clear;

  Datam1.Query1.SQL.Add('UPDATE PageTable');
  Datam1.Query1.SQL.Add('SET SortingPosition = ''' + sortingposition + '''');
  Datam1.Query1.SQL.Add('WHERE ProductionID = ' + IntToStr(ProductionID));
  Datam1.Query1.SQL.Add('AND LTRIM(RTRIM(SortingPosition))=''''');
  trysql(Datam1.Query1);
end;

procedure TFormMain.ApplySepecifikdeviceid(id: Integer; ProductionID: Longint);
begin
  try

    if (id < 100) then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      Datam1.Query1.SQL.Add('set deviceid = ' + IntToStr(id));
      if (DeviceGroupNamesPossible) then
        Datam1.Query1.SQL.Add(',devicegroupid = 0');
      Datam1.Query1.SQL.Add('where productionid = ' + IntToStr(ProductionID));
      trysql(Datam1.Query1);
    end
    else if (DeviceGroupNamesPossible) and (id > 100) then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      Datam1.Query1.SQL.Add('set deviceid=0,devicegroupid = ' +
        IntToStr(id - 100));
      Datam1.Query1.SQL.Add('where productionid = ' + IntToStr(ProductionID));
      trysql(Datam1.Query1);

    end;

  except
  end;
end;

procedure TFormMain.ApplySpecificPageFormat(pageFormatName: string; ProductionID: Integer);
var
   id : Integer;
begin
   id :=  0;
   try
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('SELECT PageFormatID FROM PageFormatNames WHERE PageFormatName=''' +pageFormatName+'''');
    Tryopen(Datam1.Query1);
    if not Datam1.Query1.Eof then
      id :=  Datam1.Query1.Fields[0].AsInteger;
    Datam1.Query1.Close;

    if (id > 0) then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('UPDATE pagetable');
      Datam1.Query1.SQL.Add('SET PageFormatID = ' + IntToStr(id));
      Datam1.Query1.SQL.Add('WHERE productionid = ' + IntToStr(ProductionID));
      trysql(Datam1.Query1);
    end;
  except
  end;
end;

procedure TFormMain.Setselectedplanframe;
var
  seliplf: Integer;
  IPLF: Integer;
  i: Integer;
  ednode, secnode: TTreeNode;
begin
  if TreeViewplan.Selected = nil then
    exit;
  if TreeViewplan.Selected.Level < 2 then
    exit;
  if Formprodplan.planningaction = 6 then
    exit;
  for i := 1 to Nplateframes do
  begin
    plateframes[i].Panelborder.Color := clBtnFace;
    plateframes[i].GroupBoxtop.Repaint;
    plateframes[i].Selected := false;

  end;
  seliplf := -1;
  case TreeViewplan.Selected.Level of
    2:
      begin
        ednode := TreeViewplan.Selected.GetFirstChild;
        while ednode <> nil do
        begin
          secnode := ednode.GetFirstChild;
          while secnode <> nil do
          begin
            seliplf := Tplantreedata(secnode.Data^).pressrunid;
            for IPLF := 1 to Nplateframes do
            begin
              if (plateframesdata[IPLF].prodplates[0].editionid = Tplantreedata
                (secnode.Data^).editionid) and
                ((plateframesdata[IPLF].prodplates[0].runid = seliplf) or
                (seliplf = -1)) then
              begin
                plateframes[IPLF].Panelborder.Color := clblue;
                plateframes[IPLF].GroupBoxtop.Repaint;
                plateframes[IPLF].Selected := true;
              end;
            end;
            secnode := secnode.getNextSibling;
          end;

          ednode := ednode.getNextSibling;
        end;
      end;

    3:
      begin
        secnode := TreeViewplan.Selected.GetFirstChild;
        while secnode <> nil do
        begin
          seliplf := Tplantreedata(secnode.Data^).pressrunid;
          for IPLF := 1 to Nplateframes do
          begin
            if (plateframesdata[IPLF].prodplates[0].editionid = Tplantreedata
              (secnode.Data^).editionid) and
              ((plateframesdata[IPLF].prodplates[0].runid = seliplf) or
              (seliplf = -1)) then
            begin
              plateframes[IPLF].Panelborder.Color := clblue;
              plateframes[IPLF].GroupBoxtop.Repaint;
              plateframes[IPLF].Selected := true;
            end;
          end;
          secnode := secnode.getNextSibling;
        end;
      end;

    4:
      begin
        seliplf := Tplantreedata(TreeViewplan.Selected.Data^).pressrunid;
        for IPLF := 1 to Nplateframes do
        begin
          if (plateframesdata[IPLF].prodplates[0].editionid = Tplantreedata
            (TreeViewplan.Selected.Data^).editionid) and
            ((plateframesdata[IPLF].prodplates[0].runid = seliplf) or
            (seliplf = -1)) then
          begin
            plateframes[IPLF].Panelborder.Color := clblue;
            plateframes[IPLF].GroupBoxtop.Repaint;
            plateframes[IPLF].Selected := true;
          end;
        end;
      end;

  end;
end;

function TFormMain.findplantreenode: Boolean;
Var
  i, IPLF: Integer;
  found: Boolean;
begin
  found := false;
  for i := 0 to TreeViewplan.Items.Count - 1 do
  begin
    if TreeViewplan.Items[i].Level = 2 then
    begin
      if (Tplantreedata(TreeViewplan.Items[i].Data^).LocationID = plateframeslocationid) and
        (Tplantreedata(TreeViewplan.Items[i].Data^).pressid = plateframespressid) and
        (Tplantreedata(TreeViewplan.Items[i].Data^)  .Pubdate = plateframesPubdate) and
        (Tplantreedata(TreeViewplan.Items[i].Data^).ProductionID = plateframesproductionid) then
      begin
        TreeViewplan.Selected := TreeViewplan.Items[i];
        TreeViewplan.Selected.Expand(false);
        TreeViewplan.SetFocus;
        found := true;
        break;
      end;
    end;
  end;
  if not found then
  begin
    if Nplateframes > 0 then
    begin
      for IPLF := 1 to Nplateframes do
      begin
        plateframes[IPLF].Visible := false;

      end;
      Nplateframes := 0;
    end;

  end;

  try
    if (TreeViewplan.Selected = nil) then
      TreeViewplan.Selected := TreeViewplan.Items[0];

    if (TreeViewplan.Selected.Level = 0) then
    begin
      if (tNames1.locationnames.Count < 2) And (tNames1.pressnames.Count < 2)
      then
      begin
        for i := 0 to TreeViewplan.Items.Count - 1 do
        begin
          if TreeViewplan.Items[i].Level = 1 then
          begin
            TreeViewplan.Selected := TreeViewplan.Items[i];

            break;
          end;
        end;
      end;
    end;
    TreeViewplan.SetFocus;
  Except
  end;
  result := found;
end;

procedure TFormMain.ActionnewplandeleteExecute(Sender: TObject);
begin
  try
    FormMain.planlogging('ActionnewplandeleteExecute');
    if Prefs.NewProductDeleteSystem then
      Formdelpublication2.ShowModal
    else
      Formdelpublication.ShowModal;
    LoadIDs('After newplandelete', false);
    Actionnewplanrefresh.Execute;
  finally
    Setplanlock(false);
  end;
end;

// ENDNewplanning Newplanning Newplanning Newplanning Newplanning

procedure TFormMain.PBExListviewPlandataEdited(Sender: TObject; Item: TListItem;
  var S: String);
begin
  (*
    T := item.SubItems[21];
    t1 := copy(t,1,pos(',',t)-1);
    IPLF := StrToInt(t1);
    Delete(t,1,pos(',',t));
    t1 := copy(t,1,pos(',',t)-1);
    IPL := StrToInt(t1);
    Delete(t,1,pos(',',t));
    t1 := copy(t,1,pos(',',t)-1);
    IP := StrToInt(t1);
    plateframesdata[iplf].prodplates[ipl].Pages[ip].pagename := s;
    for il := 0 to PBExListviewPlandata.Items.Count-1 do
    begin
    if PBExListviewPlandata.Items[il].SubItems[22] = item.SubItems[22] then
    begin
    PBExListviewPlandata.Items[il].Caption := s;
    end;
    end;
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable set pagename = ' + ''''+s+'''');
    Datam1.Query1.SQL.Add('where mastercopyseparationset = '+item.SubItems[22]);
    trysql(Datam1.Query1);
  *)
end;

procedure TFormMain.PageControlplanningChange(Sender: TObject);
begin
  if PageControlplanning.ActivePageIndex = 1 then
    Formprodplan.makepagelist(PBExListviewPlandata, 0);
end;

procedure TFormMain.Onidlehandler(Sender: TObject; var Done: Boolean);
Var
  i, X, Y: Integer;
  p1, p2: TPoint;

begin
  try
    if not Runningdll then
    begin
      X := mouse.CursorPos.X;
      Y := mouse.CursorPos.Y;

      p1.X := 0;
      p1.Y := 0;
      if Formprodplan.Showing then
      begin
        p1 := Tcontrol(Formprodplan.ActionToolBar1).ClientToScreen(p1);
        p2.X := p1.X + Formprodplan.ActionToolBar1.width;
        p2.Y := p1.Y + Formprodplan.ActionToolBar1.Height;
        if (X < p1.X) or (X > p2.X) or (Y < p1.Y) or (Y > p2.Y) then
        begin
          for i := 0 to Formprodplan.ActionToolBar1.ControlCount - 1 do
          begin
            TCustomButtonControl(Formprodplan.ActionToolBar1.Controls[i]).State
              := bsDisabled;
          end;
        end;
      end
      else
      begin
        p1 := Tcontrol(activetoolbar).ClientToScreen(p1);
        p2.X := p1.X + activetoolbar.width;
        p2.Y := p1.Y + activetoolbar.Height;
        if (X < p1.X) or (X > p2.X) or (Y < p1.Y) or (Y > p2.Y) then
        begin
          for i := 0 to activetoolbar.ControlCount - 1 do
          begin
            TCustomButtonControl(activetoolbar.Controls[i]).State := bsDisabled;
          end;
        end;
      end;
    end;
  Except
    sleep(10);
  end;
end;

procedure TFormMain.WMTHEMECHANGED(var msg: TMessage);
begin
  // LogTestPrefs.Debug('In themechanges.');

  msg.result := 0;
end;

procedure TFormMain.ActionsettingstabsExecute(Sender: TObject);
begin
  if Configallowed then
  begin
    if Formtabs.ShowModal = mrOK then
    begin
      Formtabs.settabvisible;
    end;
  end;
end;

procedure TFormMain.sendedisapprovemail(mastercopyseparationset: Integer;
  Toptext: string; fromform: Integer); // 0 main 1 preview

Var
  edSMTPServer: String; // smtp.mail.dk
  edSenderName: string; // plancenter eller bruger navn
  edSenderEMail: string; // CC@mail.com
  edNRecipients: Integer;
  edRecipients: RecipientArrayType;
  edSubject: String; // overskrift på mail
  edAttachment: String; // path og filnavn på preview fil
  edpriority: Integer; // 0 højeste 4 laveste
  Edtoptext: string; // text før billede
  edbottomtext: string;
  pagename: string;

  procedure makeemailtitle;
  Var
    i: Integer;
    insideapar: Boolean;
  begin
    insideapar := false;
    edSubject := '';
    for i := 1 to Length(Prefs.EmailTitleDefinition) do
    begin
      if Prefs.EmailTitleDefinition[i] = '(' then
      begin
        insideapar := true;
      end;

      if (not insideapar) and (Prefs.EmailTitleDefinition[i] <> '(') and
        (Prefs.EmailTitleDefinition[i] <> ')') then
      begin
        edSubject := edSubject + Prefs.EmailTitleDefinition[i];
      end;

      if insideapar then
      begin
        if i < Length(Prefs.EmailTitleDefinition) then
        begin
          if Prefs.EmailTitleDefinition[i + 1] = 'N' then
            edSubject := edSubject + pagename;

          if Prefs.EmailTitleDefinition[i + 1] = 'U' then
            edSubject := edSubject + Prefs.Username;
        end;
      end;

      if Prefs.EmailTitleDefinition[i] = ')' then
      begin
        insideapar := false;
      end;
    end;
  end;

Var
  sendit: Boolean;
  i: Integer;
  imaster: Integer;
  attach: Boolean;
  lrespath: string;
  Pubdate: TDateTime;
  guid: string;
begin
  Pubdate := Today;
  sendit := false;
  try
    if Prefs.SendEmailMode = 0 then
      exit;
    if Nselectedmasters = 0 then
      exit;
    if Nselectedmasters > 1 then
    begin

    end;

    pagename := makeapagenametext(selectedmasters[1],
      Prefs.EmailPagenameDefinition);
    makeemailtitle;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('SELECT TOP 1 PublicationID,FileServer,PubDate FROM PageTable (NOLOCK)');
    Datam1.Query1.SQL.Add('WHERE MasterCopySeparationSet = ' +
      IntToStr(selectedmasters[1]));
    Datam1.Query1.SQL.Add('AND PageType <= 1 AND UniquePage=1 AND Dirty=0');

    Tryopen(Datam1.Query1);
    Formsendemail.Publicationid := -1;
    if not Datam1.Query1.Eof then
    begin
      Formsendemail.Publicationid := Datam1.Query1.FieldByName('PublicationID')
        .AsInteger;
      lrespath := FormMain.getfileserverpath(PATHTYPE_CCPREVIEWS,
        Datam1.Query1.FieldByName('FileServer').AsString);
      Pubdate := Datam1.Query1.FieldByName('PubDate').AsDateTime;
    end;
    Datam1.Query1.Close;
    if Formsendemail.Publicationid = -1 then
      exit;
    Formsendemail.initialize;
    Formsendemail.Edittitle.text := edSubject;
    Edtoptext := Toptext + DateTimeToStr(NOW);
    Formsendemail.Editextrainfo.text := Toptext + DateTimeToStr(NOW);
    if Prefs.SendEmailMode = 1 then
    begin
      sendit := Formsendemail.ShowModal = mrOK;
      Edtoptext := Formsendemail.Editextrainfo.text;
      edSubject := Formsendemail.Edittitle.text;
      case fromform of
        0:
          FormMain.Repaint;
        1:
          formprev2.Repaint;
      end;
    end
    else
    begin
      Formsendemail.Editextrainfo.text := '';
    end;
    if sendit then
    begin
      edSMTPServer := Prefs.EmailServer;
      if Prefs.EmailLoginNameAsSenderName then
        edSenderName := Prefs.Username
      else
      begin
        if Prefs.EmailSenderName = '' then
          edSenderName := 'PlanCenter'
        else
          edSenderName := Prefs.EmailSenderName;
      end;
      edSenderEMail := Prefs.MailFrom;
      edpriority := 2;

      edNRecipients := 0;
      attach := false;
      for i := 0 to Formsendemail.PBExListview1.Items.Count - 1 do
      begin
        if Formsendemail.PBExListview1.Items[i].Checked then
        begin
          if Formsendemail.PBExListview1.Items[i].SubItems[2] = 'Yes' then
            attach := true;
          Inc(edNRecipients);
          edRecipients[edNRecipients].Name := Formsendemail.PBExListview1.Items
            [i].SubItems[0];
          edRecipients[edNRecipients].adress :=
            Formsendemail.PBExListview1.Items[i].SubItems[0];
          edRecipients[edNRecipients].CCname := '';
          edRecipients[edNRecipients].CCadress := '';
          if Formsendemail.PBExListview1.Items[i].SubItems[1] <> '' then
          begin
            edRecipients[edNRecipients].CCname :=
              Formsendemail.PBExListview1.Items[i].SubItems[1];
            edRecipients[edNRecipients].CCadress :=
              Formsendemail.PBExListview1.Items[i].SubItems[1];
          end;
        end;
      end;
      if edNRecipients = 0 then
        exit;

      if edNRecipients > 0 then
      begin
        Formemail.Show;
        Formemail.Refresh;
        Application.ProcessMessages;
        sleep(1000);
      end;

      screen.Cursor := crhourglass;

      for imaster := 1 to Nselectedmasters do
      begin
        if Nselectedmasters > 1 then
        begin
          pagename := makeapagenametext(selectedmasters[imaster], Prefs.EmailPagenameDefinition);
          makeemailtitle;
        end;
        edAttachment := '';
        if attach then
        begin

          guid := inittypes.GeneratePreviewGUID(Formsendemail.Publicationid, Pubdate);

          if FileExists(Includetrailingpathdelimiter(lrespath) + guid + '====' +
            IntToStr(selectedmasters[imaster]) + '.jpg') then
            edAttachment := Includetrailingpathdelimiter(lrespath) + guid +
              '====' + IntToStr(selectedmasters[imaster]) + '.jpg';
          if FileExists(Includetrailingpathdelimiter(lrespath) +
            IntToStr(selectedmasters[imaster]) + '.jpg') then
            edAttachment := Includetrailingpathdelimiter(lrespath) +
              IntToStr(selectedmasters[imaster]) + '.jpg';
        end;
        edbottomtext := '-';

        Application.ProcessMessages;
        Formemail.sendemailmessage(edSMTPServer, edSenderName, edSenderEMail,
          edNRecipients, edRecipients, edSubject, edAttachment, edpriority,
          Edtoptext, edbottomtext, false, Prefs.EmailImageFormat);
      end;
      sleep(5);

      Formemail.Repaint;

      if Formemail.Showing then
        Formemail.Close;

    end;
  Finally
    if Formemail.Showing then
      Formemail.Close;

    screen.Cursor := crdefault;
  end;
end;

function TFormMain.makeapagenametext(mastercopyseparationset: Integer;
  pagenamesetup: string): String;
var
  publ, sec, ed, pagename, Pubdate: String;
  i: Integer;
  T: string;
begin
  result := '';
  try
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select TOP 1 publicationid,sectionid,pagename,editionid,pubdate from pagetable (NOLOCK)');
    Datam1.Query1.SQL.Add('where mastercopyseparationset = ' +
      IntToStr(mastercopyseparationset));
    Datam1.Query1.SQL.Add('and uniquepage = 1');
    Tryopen(Datam1.Query1);
    if not Datam1.Query1.Eof then
    begin
      publ := tNames1.publicationIDtoname
        (Datam1.Query1.FieldByName('publicationid').AsInteger);
      ed := tNames1.editionIDtoname(Datam1.Query1.FieldByName('editionid')
        .AsInteger);
      sec := tNames1.sectionidtoname(Datam1.Query1.FieldByName('sectionid')
        .AsInteger);
      pagename := Datam1.Query1.FieldByName('pagename').AsString;
      Pubdate := datetostr(Datam1.Query1.FieldByName('pubdate').AsDateTime);
    end;
    Datam1.Query1.Close;
    i := 1;
    T := '';
    repeat
      if pagenamesetup[i] = '%' then
      begin
        Inc(i);
        case pagenamesetup[i] of
          'P':
            T := T + publ;
          'E':
            T := T + ed;
          'S':
            T := T + sec;
          'D':
            T := T + Pubdate;
          'N':
            T := T + pagename;
        end;
        Inc(i);
      end
      else
      begin
        T := T + pagenamesetup[i];
        Inc(i);
      end;

    until i >= Length(pagenamesetup);
    result := T;
  Except
  end;
end;

procedure TFormMain.addtoselectedmasters(mastercopyseparationset: Longint);
Var
  i: Integer;
  foundit: Boolean;
begin
  foundit := false;
  for i := 1 to Nselectedmasters do
  begin
    if selectedmasters[i] = mastercopyseparationset then
    begin
      foundit := true;
      break;
    end;
  end;
  if not foundit then
  begin
    if Nselectedmasters < 255 then
    begin
      Inc(Nselectedmasters);
      selectedmasters[Nselectedmasters] := mastercopyseparationset;
    end;
  end;
end;

procedure TFormMain.ComboBoxPlatelocationChange(Sender: TObject);
Var
  chtype: Integer;
begin
  MainUpdateing := true;
  chtype := setalllocationcombos(TComboBox(Sender).text);

  if chtype = 2 then
  begin
    MainUpdateing := true;
    TreeViewpagelist.Items.Clear;
    TreeViewThumbs.Items.Clear;
    TreeViewPlateview.Items.Clear;
    TreeViewprodcontrol.Items.Clear;
    TreeViewNeweddtree.Items.Clear;
    TreeViewplan.Items.Clear;
    TreeViewLogfilter.Items.Clear;
    TreeViewreportfilter.Items.Clear;
    screen.Cursor := crhourglass;
  end
  else
  begin
    MainUpdateing := true;
    loadAPlatetree(TreeViewPlateview, '', '', ComboBoxpalocationNY.text,
      ComboBoxGlobalPubDateFilter.text);
    if TreeViewPlateview.Items.Count > 0 then
      TreeViewPlateview.Selected := TreeViewPlateview.Items[0];
  end;
end;

procedure TFormMain.PBExListviewplateinfoCustomDrawSubItem
  (Sender: TCustomListView; Item: TListItem; SubItem: Integer;
  State: TCustomDrawState; var DefaultDraw: Boolean);
var
  T: string;
begin
  PBExListviewplateinfo.Canvas.Brush.Color := clWhite;
  PBExListviewplateinfo.Canvas.Brush.Color := clWhite;
  PBExListviewplateinfo.Canvas.Font := FormMain.Font;
  PBExListviewplateinfo.Canvas.Font.Color := clblack;
  if Item.Selected then
  begin
    PBExListviewplateinfo.Canvas.Brush.Color := clActiveCaption;
    PBExListviewplateinfo.Canvas.Font := FormMain.Font;
    PBExListviewplateinfo.Canvas.Font.Color := clHighlightText;
  end;
  DefaultDraw := true;
  if SubItem = 0 then
    beep;
  SubItem := SubItem - 1;
  if Item.SubItems.Count < SubItem then
    exit;
  T := Item.SubItems[SubItem];

  try
    if not Item.Selected then
    begin
      case SubItem of
        1:
          begin
            PBExListviewplateinfo.Canvas.Brush.Color :=
              Colorsnames[tNames1.Colornametoid(T)].Colorlook;
          end;
        4:
          begin
            PBExListviewplateinfo.Canvas.Brush.Color :=
              inittypes.getstatuscolorfromname(T);
            PBExListviewplateinfo.Canvas.Font.Color := clblack;
            DefaultDraw := true;
          end;
        5:
          begin // aproval
            PBExListviewplateinfo.Canvas.Brush.Color :=
              inittypes.getapprovecolorfromname(T);
          end;
        6:
          begin
            if Holdrealesarray[0] = T then
              PBExListviewplateinfo.Canvas.Brush.Color := cllime
            else
              PBExListviewplateinfo.Canvas.Brush.Color := RGB(255, 157, 157);

          end;
      end;
    end;

    if (ColorToRGB(PBExListviewplateinfo.Canvas.Brush.Color) < 100) then
      PBExListviewplateinfo.Canvas.Font.Color := clWhite
    else
      PBExListviewplateinfo.Canvas.Font.Color := clblack;
  Except
    beep;
  end;
  DefaultDraw := true;
end;

procedure TFormMain.ActionconfigcolorsExecute(Sender: TObject);
var
  resulttat: Integer;
begin
  if Configallowed then
  begin

    Runningdll := true;
    resulttat := ReConnectDB(DLLErrormessage);
    if resulttat = 1 then
      resulttat := colorSetup(DLLErrormessage);
    // off loadids;
    inittypes.LoadColorNames;
    Runningdll := false;
  end;
end;

procedure TFormMain.ActionconfigjobnamesExecute(Sender: TObject);
var
  resulttat: Integer;
begin
  if Configallowed then
  begin

    writeMainlogfile('Start call jobnames');
    MainUpdateing := true;
    writeMainlogfile('Mainupdating true');
    TreeStopit := true;
    writeMainlogfile('treestate stoped');
    Runningdll := true;
    writeMainlogfile('Runningdll');

    try
      writeMainlogfile('Call reconnect');
      resulttat := ReConnectDB(DLLErrormessage);
      writeMainlogfile('call jobnamesetup');
      resulttat := JobNamesSetup(DLLErrormessage);

      writeMainlogfile('return from jobnamesetup');
    Except
      on E: Exception do
      begin
        writeMainlogfile('except1 ' + E.Message);
        TreeStopit := false;
      end;
    end;

    Try
      writeMainlogfile('call loadids');

      // Reload to local cache
      LoadIDs('Actionconfigjobnames', false);
      writeMainlogfile('return from loadids');

      MainUpdateing := false;
      Runningdll := false;
      writeMainlogfile('End');

    Except
      on E: Exception do
      begin
        writeMainlogfile('except2 ' + E.Message);
        TreeStopit := false;
      end;

    end;

    TreeStopit := false;
  end;
end;

procedure TFormMain.ComboBoxLoglocationChange(Sender: TObject);
var
  chtype: Integer;
begin
  chtype := setalllocationcombos(TComboBox(Sender).text);

  if chtype = 2 then
  begin
    TreeViewpagelist.Items.Clear;
    TreeViewThumbs.Items.Clear;
    TreeViewPlateview.Items.Clear;
    TreeViewprodcontrol.Items.Clear;
    TreeViewNeweddtree.Items.Clear;
    TreeViewplan.Items.Clear;
    TreeViewLogfilter.Items.Clear;
    TreeViewreportfilter.Items.Clear;
    screen.Cursor := crhourglass;
  end
  else
  begin
    ActionLogrefreshfilter.Execute;
  end;
end;

procedure TFormMain.ActionLogrefreshfilterExecute(Sender: TObject);
begin
  try
    if activated then
    begin
      LoadIDs('ActionLogrefreshfilter', false);
      loadAPagetree(TreeViewLogfilter, '', '', ComboBoxpalocationNY.text,
        ComboBoxGlobalPubDateFilter.text);
      // ActionEnable;
    end;
  Except

  end;
end;

function TFormMain.dateplustime(Adate: TDateTime; ATime: TDateTime): TDateTime;
var
  adatetime: TDateTime;
  Hour, Min, sec, MSec: Word;
begin
  adatetime := Adate;
  DecodeTime(ATime, Hour, Min, sec, MSec);
  adatetime := RecodeTime(adatetime, Hour, Min, sec, MSec);
  result := adatetime;
end;

procedure TFormMain.saveloggridsize;
Var
  ini: TIniFile;
  i: Integer;
begin
  ini := TIniFile.Create(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()
    ) + 'LogGrids.ini');

  for i := 0 to PBExListviewOKLog.Columns.Count - 1 do
    ini.writeinteger('PBExListviewOKLog', IntToStr(i),
      PBExListviewOKLog.Columns[i].width);
  for i := 0 to PBExListviewErrorLog.Columns.Count - 1 do
    ini.writeinteger('PBExListviewerrorLog', IntToStr(i),
      PBExListviewErrorLog.Columns[i].width);
  ini.free;
end;

procedure TFormMain.Loadloggridsize;
var
  ini: TIniFile;
  i: Integer;
begin
  ini := TIniFile.Create(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()
    ) + 'LogGrids.ini');

  for i := 0 to PBExListviewOKLog.Columns.Count - 1 do
    PBExListviewOKLog.Columns[i].width := ini.ReadInteger('PBExListviewOKLog',
      IntToStr(i), PBExListviewOKLog.Columns[i].width);
  for i := 0 to PBExListviewErrorLog.Columns.Count - 1 do
    PBExListviewErrorLog.Columns[i].width :=
      ini.ReadInteger('PBExListviewerrorLog', IntToStr(i),
      PBExListviewErrorLog.Columns[i].width);
  ini.free;
end;

procedure TFormMain.PageControlLogChange(Sender: TObject);
begin
  if TreeViewLogfilter.Selected = nil then
    exit;
  if PageControlLog.ActivePageIndex < 9 then
  begin
    ActionLogrefresh.Execute;
  end;
end;

procedure TFormMain.Addlogentry(Event: Integer; ErrorMsg: string;
  Var eventtime: TDateTime; Separation: Int64; separationset: Integer;
  copyseparationset: Integer; mastercopyseparationset: Integer;
  FlatSeparation: Int64; flatseparationset: Integer;
  copyflatseparationset: Longint);
begin
  try

    Datam1.Query5.SQL.Clear;
    Datam1.Query5.SQL.Add('exec spAddLogEntrySets');
    Datam1.Query5.SQL.Add('@ProcessID = 0,');
    Datam1.Query5.SQL.Add('@Event = ' + IntToStr(Event) + ',');
    Datam1.Query5.SQL.Add('@separation = ' + IntToStr(Separation) + ',');
    Datam1.Query5.SQL.Add('@separationset = ' + IntToStr(separationset) + ',');
    Datam1.Query5.SQL.Add('@copyseparationset = ' +
      IntToStr(copyseparationset) + ',');
    Datam1.Query5.SQL.Add('@Mastercopyseparationset = ' +
      IntToStr(mastercopyseparationset) + ',');
    Datam1.Query5.SQL.Add('@flatseparation = ' +
      IntToStr(FlatSeparation) + ',');
    Datam1.Query5.SQL.Add('@flatseparationset = ' +
      IntToStr(flatseparationset) + ',');
    Datam1.Query5.SQL.Add('@copyflatseparationset = ' +
      IntToStr(copyflatseparationset) + ',');
    Datam1.Query5.SQL.Add('@ErrorMsg = ' + '''' + ErrorMsg + '''' + ',');
    if eventtime <> -1 then
    begin
      Datam1.Query5.SQL.Add('@eventtime = :eventtime');
      Datam1.Query5.parambyname('eventtime').AsDateTime := eventtime;
    end
    else
      Datam1.Query5.SQL.Add('@eventtime = -1');

    if Prefs.Debug then
      Datam1.Query5.SQL.SaveToFile
        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
        'Addlogentry.SQL');
    Datam1.Query5.ExecSQL(false);
    (*
      Datam1.Query5.Open;
      if eventtime = -1 then
      eventtime := Datam1.Query5.Fields[0].AsDateTime;
      Datam1.Query5.Close;
    *)
  except
  end;

end;

procedure TFormMain.ActionlogsaveExecute(Sender: TObject);
Var
  i, X: Integer;
  T: String;
  APBExListview: TPBExListview;

  separationchar: string;

Var
  Alist: Tstrings;
begin

  Alist := Tstringlist.Create;
  try
    case PageControlLog.ActivePageIndex of
      0:
        APBExListview := PBExListviewOKLog;
      1:
        APBExListview := PBExListviewErrorLog;
    end;
    if SaveDialoglog.Execute then
    begin

      separationchar := ',';
      T := '';
      T := T + APBExListview.Columns[0].caption;
      for i := 1 to APBExListview.Columns.Count - 1 do
      begin
        T := T + separationchar + APBExListview.Columns[i].caption;
      end;
      Alist.Add(T);
      for i := 0 to APBExListview.Items.Count - 1 do
      begin
        T := APBExListview.Items[i].caption;
        for X := 0 to APBExListview.Items[i].SubItems.Count - 2 do
        begin
          T := T + separationchar + APBExListview.Items[i].SubItems[X];
        end;
        Alist.Add(T);
      end;

      Alist.SaveToFile(SaveDialoglog.filename);

    end;
  finally
    Alist.free;

  end;
end;

procedure TFormMain.ComboBoxreportlocationChange(Sender: TObject);
var
  chtype: Integer;
begin
  chtype := setalllocationcombos(TComboBox(Sender).text);

  if chtype = 2 then
  begin
    TreeViewpagelist.Items.Clear;
    TreeViewThumbs.Items.Clear;
    TreeViewPlateview.Items.Clear;
    TreeViewprodcontrol.Items.Clear;
    TreeViewNeweddtree.Items.Clear;
    TreeViewplan.Items.Clear;
    TreeViewLogfilter.Items.Clear;
    TreeViewreportfilter.Items.Clear;
    screen.Cursor := crhourglass;
  end
  else
  begin
    ActionreportfilterExecute(Self);
  end;
end;

procedure TFormMain.ActionreportfilterExecute(Sender: TObject);
begin
  try
    loadAPagetree(TreeViewreportfilter, '', '', ComboBoxpalocationNY.text,
      LabelAlldays.caption);
  finally
    Loadkeeptrees(ComboBoxpalocationNY.text, TreeViewreportfilter);
    TreeViewreportfilter.Visible := true;
  end;
end;

procedure TFormMain.ActionreportrefreshExecute(Sender: TObject);
var
  waitHndl: HWND;
begin
  if (TreeViewreportfilter.Selected = nil) then
    exit;
  if ((TreeViewreportfilter.Selected = nil) And
    (PageControlreport.ActivePageIndex < 3)) then
    exit;
  if ((TreeViewreportfilter.Selected.Level < 2) And
    (PageControlreport.ActivePageIndex < 3)) then
    exit;

  waitHndl := TUtils.CreateStatusWindow('Generating data - please wait..',
    Self.Handle);

  Actiondeletedead.Enabled := false;
  case PageControlreport.ActivePageIndex of
    0:
      maketextreport;
    1:
      makegraphicreport;
    2:
      makeLiveDetailsreport;
    3:
      makedevicereport;
  end;

  // if (waitHndl <> nil) then
  TUtils.RemoveStatusWindow(waitHndl);

end;

procedure TFormMain.maketextreport;
begin
  maketextreportVer3;
end;

procedure TFormMain.ActionreportsaveExecute(Sender: TObject);
Var
  oktodel: Boolean;
begin

  case PageControlreport.ActivePageIndex of
    0:
      begin
        if SaveDialogsavetextreport.Execute then
        begin
          RichEditreport.Lines.SaveToFile(SaveDialogsavetextreport.filename);
        end;
      end;
    1:
      begin
        Savergaprhrep;
      end;
    2:
      begin
        if SaveDialogreportdetails.Execute then
        begin

          oktodel := true;
          if FileExists(SaveDialogreportdetails.filename) Then
          begin
            oktodel := false;
            if MessageDlg(InfraLanguage1.Translate('Overwrite ' +
              SaveDialogreportdetails.filename), mtConfirmation, [mbOk], 0) = mrOK
            then
              oktodel := true;

          end;

          if oktodel then
          begin
            DeleteFile(SaveDialogreportdetails.filename);
            case SaveDialogreportdetails.FilterIndex of
              1:
                begin
                  if Makereportdetails then
                  begin
                    RichEditprintreportdetails.Lines.SaveToFile
                      (SaveDialogreportdetails.filename);
                  end;
                end;
              2:
                begin
                  savereportdetails(SaveDialogreportdetails.filename);
                end;
            else
              savereportdetails(SaveDialogreportdetails.filename);
            end;
          end;

        end;

      end;
  end;
end;

procedure TFormMain.ActionreportprintExecute(Sender: TObject);
begin

  if PrintDialog1.Execute then
  begin
    case PageControlreport.ActivePageIndex of
      0:
        begin
          RichEditreport.Print('CCreport');
        end;
      1:
        begin
          Printrgaprhrep;
        end;
      2:
        begin
          Printreportdetails;
        end;
    end;
  end;
end;

procedure TFormMain.TreeViewreportfilterChange(Sender: TObject;
  Node: TTreeNode);
begin
  Actionreportrefresh.Execute;
  Savekeeptrees(ComboBoxpalocationNY.text, TreeViewreportfilter);
  ActionEnable('TreeViewreportfilterChange');
end;

procedure TFormMain.Logtoexcel(Var APBExListview: TPBExListview);
var
  { excel }
  Sheet, objExcel, wb: OleVariant;
  Title, T: String;
  X, Y: Integer;
  FormatSettings: TFormatSettings;
  timeformatstr: string;
  NExcelcols, Iexcelcol: Integer;
  Ycel: Integer;

begin

  if SaveDialogxsllogfile.Execute then
  begin
    screen.Cursor := crhourglass;
    try
      GetLocaleFormatSettings(0, FormatSettings);

      timeformatstr := localdatetimesettings.ShortDateFormat + ' ' +
        localdatetimesettings.ShortTimeFormat + ':ss';

      Title := 'CC log ' + TTabSheet(APBExListview.Parent).caption;
      { create an instance of excel }
      objExcel := CreateOleObject('Excel.Application');
      objExcel.Visible := false;
      objExcel.caption := 'CC log ' + TTabSheet(APBExListview.Parent).caption;
      { add the sheet }
      wb := objExcel.Workbooks.Add;
      // wb.WorkSheets[1].Name  := Title;
      Sheet := wb.ActiveSheet;

      // objExcel.Workbooks[1].WorkSheets[1].Name := Title;

      for X := 0 to APBExListview.Columns.Count - 1 do
        Sheet.cells[(2), (X + 1)] := APBExListview.Columns[X].caption;

      { create the columns }
      NExcelcols := APBExListview.Columns.Count - 1;

      Ycel := -1;
      for Y := 0 to (APBExListview.Items.Count - 1) do
      begin
        Iexcelcol := -1;

        Inc(Ycel);
        for X := 0 to APBExListview.Columns.Count - 1 do
        begin
          try
            { check if output is date and add to excel in correct format }
            Inc(Iexcelcol);

            if X = 0 then
              T := APBExListview.Items[Y].caption
            else
              T := APBExListview.Items[Y].SubItems[X - 1];

            Sheet.cells[(Ycel + 3), (Iexcelcol + 1)] := T;

          except
            on EConvertError do
            begin
              { if there was a conversion error then just add as normal i.e. string }
              // Sheet.Cells[(y + 3), (x + 2)] := PBExListviewdatalist.Items.Item[y].SubItems.Strings[x];
            end;
          end;

        end;
      end;

      { Select cells and format }
      objExcel.cells.select;
      objExcel.Selection.Font.Name := 'Arial';
      objExcel.Selection.Font.Size := 9;
      objExcel.Selection.Columns.AutoFit;
      wb.SaveAs(SaveDialogxsllogfile.filename);
      wb.Close;
      // objExcel.Workbooks[1].SaveAs(SaveDialogxsllogfile.filename);
      // objExcel.Workbooks[1].Close;
      objExcel := Unassigned;

    except
      begin
        screen.Cursor := crdefault;
        if objExcel <> Unassigned then
          objExcel := Unassigned;
        exit;
      end;
    end;
    if objExcel <> Unassigned then
      objExcel := Unassigned;

    screen.Cursor := crdefault;
  end;
end;

procedure TFormMain.ActionlogtoexcelExecute(Sender: TObject);
begin
  case PageControlLog.ActivePageIndex of
    0:
      Logtoexcel(PBExListviewOKLog);
    1:
      Logtoexcel(PBExListviewErrorLog);
  end;
end;

procedure TFormMain.ActionreportfontExecute(Sender: TObject);
begin
  if FontDialog1.Execute then
  begin
    RichEditreport.Font := FontDialog1.Font;
  end;
end;

procedure TFormMain.PageControlreportChange(Sender: TObject);
begin
  Actionreportrefresh.Execute;
end;

procedure dojobsetupno;
Var
  skaldeklarerespgadll: Integer;
  resulttat: Integer;
begin

  skaldeklarerespgadll := random(10);
  Runningdll := true;

  resulttat := ReConnectDB(DLLErrormessage);
  // if resulttat = 1 then
  // resulttat := JobNamesSetup(DLLErrormessage);

  Runningdll := false;
  if skaldeklarerespgadll > 20 then
    sleep(10);

end;

procedure TFormMain.dojobsetup;
var
  skaldeklarerespgadll: Integer;
  resulttat: Integer;
begin
  skaldeklarerespgadll := random(10);
  Runningdll := true;

  resulttat := ReConnectDB(DLLErrormessage);
  if resulttat = 1 then
    resulttat := JobNamesSetup(DLLErrormessage);

  Runningdll := false;
  if skaldeklarerespgadll > 20 then
    sleep(10);
  LoadIDs('Job Names', false);

end;

procedure TFormMain.dopageformatsetup;
Var
  skaldeklarerespgadll: Integer;
  resulttat: Integer;
begin

  skaldeklarerespgadll := random(10);
  Runningdll := true;

  resulttat := ReConnectDB(DLLErrormessage);
  if resulttat = 1 then
    resulttat := PageFormatSetup(DLLErrormessage);

  Runningdll := false;
  if skaldeklarerespgadll > 20 then
    sleep(10);
end;

procedure TFormMain.ActionnewplanapplyExecute(Sender: TObject);
Var
  N: TTreeNode;
  isapplied: Boolean;
begin
  try
    Formprodplan.prodplanforceapply := false;
    Formprodplan.ItsArepair := false;
    Planloggingtype := 991;
    Planloggingmessage := 'Plan applied';

    N := TreeViewplan.Selected;

    plateframesApplyproductionid := Tplantreedata(N.Data^).ProductionID;
    while N.Level > 1 do
      N := N.Parent;

    plateframespressid := Tplantreedata(N.Data^).pressid;
    plateframeslocationid := Tplantreedata(N.Data^).LocationID;
    (* if Prefs. then
      begin
      plateframes[1].Selected := true;
      Dopartappl(true);

      end
      else *)

    isapplied := false;
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('SELECT PlanType FROM ProductionNames WITH (NOLOCK) ');
    Datam1.Query1.SQL.Add('WHERE ProductionID = ' + IntToStr(plateframesApplyproductionid));
    Tryopen(Datam1.Query1);
    if not Datam1.Query1.Eof then
      isapplied := (Datam1.Query1.Fields[0].AsInteger <> 0);
    Datam1.Query1.Close;

    if (isapplied) then
    begin
      if (Application.MessageBox('Plan is already applied - continue?',
        'Warning', MB_OKCANCEL) = IDCANCEL) then
        exit
      else
        Formprodplan.prodplanforceapply := true;
    end;

    Formprodplan.PartialPlanning := false;
    Formprodplan.planningaction := 5;
    // 0 load,1 edit,2 create,3 copy, 4 move, 5 apply

    if Formapplytounplanned.ShowModal = mryes then
      ApplytoPlan(false);

    Actionnewplanrefresh.Execute;
  finally
    Setplanlock(false);
  end;
end;

procedure TFormMain.ApplytoPlan(AllIsSet: Boolean);
var
  applymode: Integer; // 1 load, 2 wizard same press 3 wizard other press
  Aktlocationid, aktpressid: Integer;
  Newlocationid, Newpressid: Integer;
  stepcancel: Boolean;
  stepi, stepdir, prevstep: Integer;

  NEditions, i: Integer;
  Editions: Array [1 .. 100] of Integer;
  editionlist: string;
  Maxpages: Integer;
  TotalPages: Integer;
  Nsections: Integer;
  sections: Array [1 .. 100] of record Sectionid: Integer;
  Npages: Integer;
  Pageoffset: Integer;
end;
sectionlist:
string;
SpecificDeviceID:
Integer;

dounapplyallfirst:
Boolean;

PressRunIDList:
Array [1 .. 100] of Integer;
NPressRunIDList:
Integer;

function checkpagename(Name: string): Integer;
begin
  result := -1;
  try
    result := StrToInt(name);
  except
  end;
end;

procedure Preparewizardtounplanned(ProductionID: Integer; LocationID: Integer;
  pressid: Longint);
var
  i: Integer;
  L: TListItem;

begin
  try

    plateframeslocationid := LocationID;
    plateframespressid := pressid;
    Formprodplan.ComboBoxLocation.Items := tNames1.locationnames;
    Formprodplan.ComboBoxLocation.ItemIndex :=
      Formprodplan.ComboBoxLocation.Items.IndexOf
      (tNames1.locationIDtoname(plateframeslocationid));
    Formprodplan.possiblepressesonlocation(plateframeslocationid,
      Formprodplan.ComboBoxpress.Items);
    Formprodplan.ComboBoxpress.ItemIndex :=
      Formprodplan.ComboBoxpress.Items.IndexOf
      (tNames1.pressnameIDtoname(plateframespressid));
    Formprodplan.ComboBoxpublication.Items := tNames1.publicationnames;
    Formprodplan.Anychange := true;
    Formaddplan.DateTimePicker1.Date :=
      Tplantreedata(TreeViewplan.Selected.Data^).Pubdate;
    Formaddplan.ComboBoxedition.Items := tNames1.editionnames;
    Formaddplan.ComboBoxedition.ItemIndex :=
      Formaddplan.ComboBoxedition.Items.IndexOf
      (Formeditionorder.ListBox1.Items[0]);

    plateframesproductionid := Tplantreedata(TreeViewplan.Selected.Data^)
      .ProductionID;
    Formaddplan.planname := tNames1.productionrunIDtoname
      (plateframesproductionid);
    Formaddplan.Editplanname.text := Formaddplan.planname;

    Formaddplan.Publicationid := Tplantreedata(TreeViewplan.Selected.Data^)
      .Publicationid;

    FormAddpressrun.PBExListviewSections.Items.Clear;
    for i := 1 to Nsections do
    begin
      L := FormAddpressrun.PBExListviewSections.Items.Add;
      L.caption := tNames1.sectionidtoname(sections[i].Sectionid);
      L.SubItems.Add(IntToStr(sections[i].Npages));
      L.SubItems.Add('');
      L.SubItems.Add('');
      L.SubItems.Add('0');
      L.SubItems.Add('0');
      L.SubItems.Add(IntToStr(sections[i].Pageoffset));
      L.SubItems.Add('1');

    end;
  Except
  end;
end;

begin
  FormMain.planlogging('ActionnewplanapplyExecute');
  writeMainlogfile('ApplytoPlan(' + BoolToStr(AllIsSet, true) + ')');
  try
    dounapplyallfirst := false;

    // 138: Green applied icon
    if ((Actionnewplanapply.ImageIndex = 138) and
      ((not Prefs.OnlyApplyOnUnapplied) OR (Formprodplan.prodplanforceapply)))
    then
      dounapplyallfirst := true;

    // 20200908 - force fullunapply if uding new press template apply
    if (Prefs.UseMultiPressTemplateLoad) then
      dounapplyallfirst := true;

    // writeMainlogfile('ApplytoPlan: dounapplyallfirst='+ BoolToStr(dounapplyallfirst,true));
    if TreeViewplan.Selected = nil then
      exit;
    if TreeViewplan.Selected.Level < 1 then
      exit;
    Aktlocationid := Tplantreedata(TreeViewplan.Selected.Data^).LocationID;
    aktpressid := Tplantreedata(TreeViewplan.Selected.Data^).pressid;
    Newlocationid := plateframeslocationid;
    Newpressid := plateframespressid;
    (* newlocationid := Tplantreedata(TreeViewplan.Selected.Data^).locationid;
      newpressid    := Tplantreedata(TreeViewplan.Selected.Data^).pressid;
    *)
    stepcancel := false;
    stepi := 0;
    stepdir := 1;
    prevstep := 0;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Select distinct editionid from pagetable (NOLOCK)');
    Datam1.Query1.SQL.Add('where productionid = ' +
      IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
    Datam1.Query1.SQL.Add('And pagetype < 3 ');
    Datam1.Query1.SQL.Add('order by editionid');
    Tryopen(Datam1.Query1);
    NEditions := 0;
    editionlist := '(';
    while not Datam1.Query1.Eof do
    begin
      Inc(NEditions);
      Editions[NEditions] := Datam1.Query1.FieldByName('editionid').AsInteger;
      editionlist := editionlist + IntToStr(Editions[NEditions]) + ',';
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;

    editionlist[Length(editionlist)] := ')';
    sectionlist := '(';

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Select distinct sectionid from pagetable (NOLOCK)');
    Datam1.Query1.SQL.Add('where productionid = ' +
      IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
    Datam1.Query1.SQL.Add('And pagetype < 3 ');
    Datam1.Query1.SQL.Add('order by sectionid');
    Tryopen(Datam1.Query1);
    Nsections := 0;
    while not Datam1.Query1.Eof do
    begin
      Inc(Nsections);
      sections[Nsections].Sectionid := Datam1.Query1.FieldByName('sectionid')
        .AsInteger;
      sections[Nsections].Pageoffset := 0;
      sectionlist := sectionlist +
        IntToStr(sections[Nsections].Sectionid) + ',';
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;

    sectionlist[Length(sectionlist)] := ')';

    if (not Prefs.AlwaysUseOffset0OnApply) then
    begin
      for i := 1 to Nsections do
      begin
        Datam1.Query1.Close;
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('Select min(pageindex) from pagetable (NOLOCK)');
        Datam1.Query1.SQL.Add('where productionid = ' +
          IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
        Datam1.Query1.SQL.Add('And sectionid = ' +
          IntToStr(sections[i].Sectionid));
        Datam1.Query1.SQL.Add('And pagetype < 3 ');

        Tryopen(Datam1.Query1);

        if not Datam1.Query1.Eof then
        begin
          sections[i].Pageoffset := Datam1.Query1.Fields[0].AsInteger;
          if (sections[i].Pageoffset > 0) then
            Dec(sections[i].Pageoffset);
        end;
        Datam1.Query1.Close;
      end;
    end;

    applyColorproofids := -1;
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Select distinct proofid from pagetable (NOLOCK)');
    Datam1.Query1.SQL.Add('where productionid = ' +
      IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
    Datam1.Query1.SQL.Add('and colorid <> ' +
      IntToStr(tNames1.Colornametoid('K')));
    Tryopen(Datam1.Query1);
    while not Datam1.Query1.Eof do
    begin
      applyColorproofids := Datam1.Query1.Fields[0].AsInteger;
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;

    applyMonoproofids := -1;
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Select distinct proofid from pagetable (NOLOCK)');
    Datam1.Query1.SQL.Add('where productionid = ' +
      IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
    Datam1.Query1.SQL.Add('and colorid = ' +
      IntToStr(tNames1.Colornametoid('K')));
    Datam1.Query1.SQL.Add('And pagetype < 3 ');
    Tryopen(Datam1.Query1);
    while not Datam1.Query1.Eof do
    begin
      applyMonoproofids := Datam1.Query1.Fields[0].AsInteger;
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;

    if applyColorproofids = -1 then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Select distinct proofid from pagetable (NOLOCK)');
      Datam1.Query1.SQL.Add('where productionid = ' +
        IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
      Datam1.Query1.SQL.Add('And pagetype < 3 ');
      Tryopen(Datam1.Query1);
      while not Datam1.Query1.Eof do
      begin
        applyColorproofids := Datam1.Query1.Fields[0].AsInteger;
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;

    end;
    if applyMonoproofids = -1 then
      applyMonoproofids := applyColorproofids;

    TotalPages := 0;
    // Find number of pages per section
    for i := 1 to Nsections do
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Select count(distinct(pageindex)),Max(pageindex) from pagetable (NOLOCK)');
      Datam1.Query1.SQL.Add('where productionid = ' + IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
      Datam1.Query1.SQL.Add('and sectionid = ' + IntToStr(sections[i].Sectionid));
      Datam1.Query1.SQL.Add('And pagetype < 3 ');
      Tryopen(Datam1.Query1);
      sections[i].Npages := 0;
      if not Datam1.Query1.Eof then
      begin
        Maxpages := Datam1.Query1.Fields[0].AsInteger;
        if (Datam1.Query1.Fields[1].AsInteger > Maxpages) AND
          (sections[i].Pageoffset = 0) then
          Maxpages := Datam1.Query1.Fields[1].AsInteger;
        sections[i].Npages := Maxpages;
        TotalPages := TotalPages + Maxpages;
      end;
      Datam1.Query1.Close;
      if sections[i].Npages mod 2 = 1 then
        Inc(sections[i].Npages);
    end;

    Formeditionorder.ListBox1.Items.Clear;
    for i := 1 to NEditions do
    begin
      Formeditionorder.ListBox1.Items.Add(tNames1.editionIDtoname(Editions[i]));
    end;
    Formeditionorder.ComboBox1.Items := tNames1.editionnames;
    Formeditionorder.ComboBox1.ItemIndex := 0;

    Maxpages := 0;
    for i := 1 to Nsections do
    begin
      if Maxpages < sections[i].Npages then
        Maxpages := sections[i].Npages;
    end;

    // ### NAN 20160301 -- Added Active>0
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('SELECT distinct colorid from PageTable WITH (NOLOCK)');
    Datam1.Query1.SQL.Add('where ProductionID = ' +
      IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
    Datam1.Query1.SQL.Add('And pagetype < 3 And Active>0');
    Datam1.Query1.SQL.Add('ORDER BY colorid');
    Tryopen(Datam1.Query1);
    Formprodplan.NApplymodecolors := 0;
    Formprodplan.ApplyingToPDF := false;
    while not Datam1.Query1.Eof do
    begin
      Inc(Formprodplan.NApplymodecolors);
      if Formprodplan.NApplymodecolors <= 16 then
      begin
        if Datam1.Query1.Fields[0].AsInteger = tNames1.PDFCOLORID then
          Formprodplan.ApplyingToPDF := true;
        Formprodplan.Applymodecolors[Formprodplan.NApplymodecolors] :=
          Datam1.Query1.Fields[0].AsInteger;
      end;
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;

    Formprodplan.moveunplannedfromprodcutionid :=
      Tplantreedata(TreeViewplan.Selected.Data^).ProductionID;
    Formprodplan.moveunplannedfrompressid :=
      Tplantreedata(TreeViewplan.Selected.Data^).pressid;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select TOP 1 p1.pressrunid,p2.comment,p2.ordernumber from pagetable p1 (NOLOCK), pressrunid p2 (NOLOCK)');
    Datam1.Query1.SQL.Add('Where p1.productionid = ' +
      IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
    Datam1.Query1.SQL.Add('and p1.pressrunid = p2.pressrunid');
    Datam1.Query1.SQL.Add('And p1.pagetype < 3 ');
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
    begin
      Formprodplan.Movepressruncomment := Datam1.Query1.Fields[1].AsString;
      Formprodplan.movepressrunorder := Datam1.Query1.Fields[2].AsString;
    end;
    Datam1.Query1.Close;

    stepi := 1;

    // SKAL FLYTTES!!!!!! NAN ####
    if (dounapplyallfirst) then
    begin
      UnapplyAll();
      Actionnewplanapply.ImageIndex := 137;
    end;

    if AllIsSet then
    begin
      applymode := PLANAPPLYMODE_WIZARD;
      Preparewizardtounplanned(Tplantreedata(TreeViewplan.Selected.Data^)
        .ProductionID, Newlocationid, Newpressid);
      Formprodplan.Editmode := PLANADDMODE_APPLY; // Applyt mode
      Mainwizard(true);
    end
    else
    begin
      if Actionnewplanapply.ImageIndex = 137 then
      begin
        Repeat
          case stepi of
            0:
              begin

              end;
            1:
              begin

                if Formapplytounplanned.RadioButtonload.Checked then
                begin
                  stepi := 3;
                end;

                if Formapplytounplanned.RadioButtonwizard.Checked then
                begin
                  if (Prefs.Proversion > 0) then
                  begin
                    stepi := 2;
                  end
                  else
                  begin
                    case Formeditionorder.ShowModal of
                      mryes:
                        begin
                          prevstep := 1;
                          stepi := 2;
                        end;
                      mrNo:
                        begin
                          stepi := prevstep;
                        end;
                    else
                      begin
                        exit;
                      end;
                    end;
                  end;
                end;
              end;
          end;
        until (stepi >= 2);

        if (Formapplytounplanned.RadioButtonload.Checked) then
        begin
          applymode := PLANAPPLYMODE_LOAD;
          Formprodplan.Editmode := PLANADDMODE_APPLY;
          plateframespressid := Newpressid;
          plateframeslocationid := Newlocationid;
          Formloadpressplan.editionlist := editionlist;
          Formloadpressplan.sectionlist := sectionlist;
          Formloadpressplan.Maxpages := Maxpages;
          Formloadpressplan.TotalPages := TotalPages;
          Formloadpressplan.defaultpublid :=
            Tplantreedata(TreeViewplan.Selected.Data^).Publicationid;
          Formloadpressplan.Applytodate :=
            Tplantreedata(TreeViewplan.Selected.Data^).Pubdate;
          Formloadpressplan.Applytopublid :=
            Tplantreedata(TreeViewplan.Selected.Data^).Publicationid;

          // tnames1.loadalist(9);
          plateframesproductionid := Tplantreedata(TreeViewplan.Selected.Data^).ProductionID;
          Formloadpressplan.Applytopprodname := tNames1.productionrunIDtoname(plateframesproductionid);

          (* NAN 20171223 - tnames1.productionrunIDtoname already tries this
            if Formloadpressplan.Applytopprodname = '' then
            begin
            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add('SELECT Name FROM ProductionNames (NOLOCK)');
            Datam1.Query1.SQL.Add('WHERE ProductionID = '+IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));

            tryopen(Datam1.Query1);
            if not Datam1.Query1.Eof then
            begin
            Formloadpressplan.Applytopprodname := Datam1.Query1.Fields[0].AsString;
            Datam1.Query1.Next;
            end;
            Datam1.Query1.Close;
            end; *)

          if Formapplytounplanned.RadioButtonload.Checked then
          begin
            if Formprodplan.loadpressplan(ScrollBoxplanmain, true, ActionnewplanSmallimages.Checked, true, false) then
            begin
              //FormApplyproduction.GroupBoxdevice.Visible := true;
              FormApplyproduction.initialize(false);

              if FormApplyproduction.ShowModal = mrOK then
              begin
                if Setplanlock(true) then
                begin
                  if Formprodplan.runproduction(true) then
                  begin
                    if FormApplyproduction.ComboBoxdevice.ItemIndex > 0 then
                    begin
                      SpecificDeviceID := tNames1.devicenametoid(FormApplyproduction.ComboBoxdevice.text);
                      if (SpecificDeviceID <= 0) then
                      begin
                        SpecificDeviceID := inittypes.DeviceGroupnametoID (FormApplyproduction.ComboBoxdevice.text);
                        if (SpecificDeviceID > 0) then
                          SpecificDeviceID := SpecificDeviceID + 100;
                      end;
                      applysepecifikdeviceid(SpecificDeviceID, plateframesproductionid);
                    end;

                    if (FormApplyproduction.ComboBoxPageFormat.ItemIndex > 0) then
                      ApplySpecificPageFormat( FormApplyproduction.ComboBoxPageFormat.Text, plateframesproductionid);


                    if (RipSetupIDInPageTable) AND
                          (FormApplyproduction.ComboBoxRipSetupname.ItemIndex >= 0)
                          and (FormApplyproduction.ComboBoxPreflightSetup.ItemIndex
                          >= 0) and (FormApplyproduction.ComboBoxInksaveSetup.ItemIndex >= 0) then
                      ApplyRipSetups(plateframesproductionid,
                                    FormApplyproduction.ComboBoxRipSetupname.text,
                                    FormApplyproduction.ComboBoxPreflightSetup.text,
                                    FormApplyproduction.ComboBoxInksaveSetup.text);


                     writeMainlogfile('ApplySortingPositionIfEmpty:' + FormApplyproduction.ComboBoxPlatesorting.text);

                    if (FormApplyproduction.ComboBoxPlatesorting.text <> '') then
                      ApplySortingPositionIfEmpty(plateframesproductionid,
                                    FormApplyproduction.ComboBoxPlatesorting.text);

                    if (Prefs.ApplyDoPostPressRunProcedure) then
                    begin
                      Datam1.Query1.SQL.Clear;
                      Datam1.Query1.SQL.Add('Select distinct PressRunID from pagetable (NOLOCK)');
                      Datam1.Query1.SQL.Add('where productionid = ' + IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
                      Tryopen(Datam1.Query1);
                      NPressRunIDList := 0;

                      while not Datam1.Query1.Eof do
                      begin
                        Inc(NPressRunIDList);
                        PressRunIDList[NPressRunIDList] := Datam1.Query1.Fields[0].AsInteger;
                        Datam1.Query1.Next;
                      end;
                      Datam1.Query1.Close;

                      for i := 1 to NPressRunIDList do
                      begin
                        Datam1.Query1.SQL.Clear;
                        Datam1.Query1.SQL.Add('Exec spImportCenterPressRunCustom');
                        Datam1.Query1.SQL.Add('@PressRunID = ' + IntToStr(PressRunIDList[i]));
                        if PDFMasterOK then
                        begin
                          if FormApplyproduction.CheckBoxpressspecifik.Checked
                          then
                            Datam1.Query1.SQL.Add(',@PressSpecificPages = 1')
                          else
                            Datam1.Query1.SQL.Add(',@PressSpecificPages = 0');
                        end;
                        trysql(Datam1.Query1);
                      end;
                    end;

                    if (Prefs.ApplyDoPostProductionProcedure) AND (ImportCenterProductionCustomPossible3) then
                    begin
                      Datam1.Query1.SQL.Clear;
                      Datam1.Query1.SQL.Add('Exec spImportCenterProductionCustom');
                      Datam1.Query1.SQL.Add('@ProductionID = ' + IntToStr(plateframesproductionid));
                      trysql(Datam1.Query1);
                    end;

                    // 20210908
                    Datam1.Query1.SQL.Clear;
                    Datam1.Query1.SQL.Add('UPDATE PageTable');
                    Datam1.Query1.SQL.Add('SET HardProofStatus=0 WHERE ProductionID= ' + IntToStr(plateframesproductionid));
                    trysql(Datam1.Query1);
                  end;
                end;
              end;
            end;
          end;
        end
        else // Apply plan using wizard
        begin
          applymode := PLANAPPLYMODE_WIZARD;
          Preparewizardtounplanned(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID, Newlocationid, Newpressid);
          Formprodplan.Editmode := PLANADDMODE_APPLY;

          Mainwizard(false);
        end;
      end;
    end;

  Finally
    Setplanlock(false);
  end;

end;

// forcetoproductionid : force selection to this ProductionID

procedure TFormMain.Makeplantree(forcetoproductionid: Longint);
var
  N: TTreeNode;
  aktproduction: Integer;
  // Adate,
  Pubdate: TDateTime;
  plantype: Integer;
  LocationID, pressid, ProductionID, Publicationid, pressrunid, editionid,
    Sectionid: Integer;
  plantreedata: ^Tplantreedata;
  i
  // ,il
    , im: Integer;
  T: string;
  startpage, endpage: String;
  locationnode, pressnode, curstartendnode: TTreeNode;

  procedure setplantredata;
  begin
    ReplaceTime(Pubdate, EncodeTime(0, 0, 0, 0));
    Tplantreedata(plantreedata^).Pubdate := Pubdate;
    Tplantreedata(plantreedata^).LocationID := LocationID;
    Tplantreedata(plantreedata^).pressid := pressid;
    Tplantreedata(plantreedata^).ProductionID := ProductionID;
    Tplantreedata(plantreedata^).Publicationid := Publicationid;
    Tplantreedata(plantreedata^).pressrunid := pressrunid;
    Tplantreedata(plantreedata^).editionid := editionid;
    Tplantreedata(plantreedata^).Sectionid := Sectionid;
    Tplantreedata(plantreedata^).plantype := plantype;
  end;

  procedure setendstart;
  begin
    if startpage <> '' then
    begin
      curstartendnode.text := tNames1.sectionidtoname
        (Tplantreedata(curstartendnode.Data^).Sectionid) + ' ' + startpage +
        ' - ' + endpage;
    end;
    startpage := '';
  end;

begin
  try

    if (GSelpubid > 0) AND (GSelpubdate <> 0) AND (forcetoproductionid <= 0)
    then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select TOP 1 ProductionID FROM PageTable (NOLOCK) WHERE');
      Datam1.Query1.SQL.Add('pubdate = :pubdate and');
      Datam1.Query1.SQL.Add('publicationid = ' + IntToStr(GSelpubid));
      Datam1.Query1.parambyname('pubdate').AsDate := GSelpubdate;
      if Pressvisibilylimited then
        Datam1.Query1.SQL.Add('and Pressid IN ' + PressvisibilyIN);

      // Only show one location in planning view
      Datam1.Query1.SQL.Add('and Locationid = ' +
        IntToStr(tNames1.locationnametoid(ComboBoxplanlocation.text)));
      Datam1.Query1.Open;

      if not Datam1.Query1.Eof then
        forcetoproductionid := Datam1.Query1.Fields[0].AsInteger;
      Datam1.Query1.Close;
      GSelpubid := 0; // Only change to selected node first time..
      GSelpubdate := 0;
    end;

    checkfiltercount := -1;

    startpage := '';
    Pubdate := 0;
    LocationID := -1;
    pressid := -1;
    ProductionID := -1;
    Publicationid := -1;
    pressrunid := -1;
    editionid := -1;
    Sectionid := -1;
    plantype := 0;

    aktproduction := -1;

    if TreeViewplan.Items.Count > 1 then
    begin
      if TreeViewplan.Selected <> nil then
      begin
        if TreeViewplan.Selected.Level >= 2 then
        begin
          N := TreeViewplan.Selected;
          while N.Level > 2 do
            N := N.Parent;
          aktproduction := Tplantreedata(N.Data^).ProductionID;
        end;
      end;
    end;

    TreeViewplan.Items.Clear;
    TreeViewplan.Items.BeginUpdate;

    sleep(10);
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select distinct ln1.name, prn1.pressname,ln1.locationid,prn1.pressid');
    Datam1.Query1.SQL.Add('from locationnames ln1, pressnames prn1  (nolock)');
    Datam1.Query1.SQL.Add('where ln1.locationid = prn1.locationid');
    if Pressvisibilylimited then
      Datam1.Query1.SQL.Add('and prn1.pressid IN ' + PressvisibilyIN);

    Datam1.Query1.SQL.Add('and ln1.locationid = ' +
      IntToStr(tNames1.locationnametoid(ComboBoxplanlocation.text)));

    Datam1.Query1.SQL.Add('order by ln1.name, prn1.pressname');

    Tryopen(Datam1.Query1);
    sleep(10);
    while not Datam1.Query1.Eof do
    begin
      new(plantreedata);
      if LocationID <> Datam1.Query1.Fields[2].AsInteger then
      begin
        N := TreeViewplan.Items.AddChildObject(nil,
          Datam1.Query1.Fields[0].AsString, plantreedata);
        N.ImageIndex := 59;
        N.selectedIndex := 59;
        LocationID := Datam1.Query1.Fields[2].AsInteger;
        pressid := -1;
      end;
      if pressid <> Datam1.Query1.Fields[3].AsInteger then
      begin
        while N.Level > 0 do
          N := N.Parent;
        N := TreeViewplan.Items.AddChildObject(N,Datam1.Query1.Fields[1].AsString, plantreedata);
        pressid := Datam1.Query1.Fields[3].AsInteger;

        N.ImageIndex := 42;
        N.selectedIndex := 42;
      end;
      Tplantreedata(plantreedata^).LocationID := LocationID;
      Tplantreedata(plantreedata^).pressid := pressid;
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;

    locationnode := TreeViewplan.Items.GetFirstNode;
    while locationnode <> nil do
    begin
      pressnode := locationnode.GetFirstChild;
      pressrunid := -1;

      while pressnode <> nil do
      begin
        Pubdate := 0;
        ProductionID := -1;
        Publicationid := -1;
        editionid := -1;
        Sectionid := -1;

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('Select distinct p1.productionid,p1.pubdate,p1.publicationid,p1.pressrunid,');
        Datam1.Query1.SQL.Add('p1.editionid,p1.sectionid,p1.pagination,p1.pagename,pn1.name,pr1.plantype,pr1.name,p1.miscint2, edn.name');
       // Datam1.Query1.SQL.Add('from pagetable p1 (nolock), publicationnames pn1 (nolock), productionnames pr1 (nolock)');
       // Datam1.Query1.SQL.Add('where pn1.publicationid = p1.publicationid');
       // Datam1.Query1.SQL.Add('and pr1.productionid = p1.productionid');
       // Datam1.Query1.SQL.Add('and p1.dirty = 0 and P1.PageType<>3');
       // Datam1.Query1.SQL.Add('and DATEPART(year,P1.PubDate) < 2100');

        Datam1.Query1.SQL.Add('from pagetable p1 (nolock)');
        Datam1.Query1.SQL.Add('inner join publicationnames pn1 (nolock) on pn1.publicationid = p1.publicationid');
        Datam1.Query1.SQL.Add('inner join productionnames pr1 (nolock) on pr1.productionid = p1.productionid');
        Datam1.Query1.SQL.Add('inner join editionnames edn (nolock) on edn.editionid = p1.editionid');
        Datam1.Query1.SQL.Add('where p1.dirty = 0 and P1.PageType<>3');
        Datam1.Query1.SQL.Add('and DATEPART(year,P1.PubDate) < 2100');

        Datam1.Query1.SQL.Add(WP1publicationStr);

        Datam1.Query1.SQL.Add('and p1.locationid = ' +
          IntToStr(Tplantreedata(pressnode.Data^).LocationID));
        Datam1.Query1.SQL.Add('and p1.pressid = ' +
          IntToStr(Tplantreedata(pressnode.Data^).pressid));

        if (Prefs.TreeOrderByEditionID) then
           Datam1.Query1.SQL.Add('order by pubdate,pn1.name,p1.editionid,p1.sectionid,p1.pressrunid,p1.pagination')
        else
          Datam1.Query1.SQL.Add('order by pubdate,pn1.name,edn.name,p1.editionid,p1.sectionid,p1.pressrunid,p1.pagination');
        sleep(5);
        N := pressnode;
        // Datam1.Query1.Open;
        Tryopen(Datam1.Query1);
        while not Datam1.Query1.Eof do
        begin
          new(plantreedata);
          LocationID := Tplantreedata(pressnode.Data^).LocationID;
          pressid := Tplantreedata(pressnode.Data^).pressid;

          if (ProductionID <> Datam1.Query1.FieldByName('productionid').AsInteger) or (TUtils.DateOfDateTime(Pubdate) <>
            TUtils.DateOfDateTime(Datam1.Query1.FieldByName('pubdate').AsDateTime)) or (Publicationid <> Datam1.Query1.FieldByName('publicationid')
            .AsInteger) then
          begin
            while N.Level > 1 do
              N := N.Parent;

            if Prefs.ShowPlannameInTree then
              T := Datam1.Query1.Fields[10].AsString
            else
            begin
              if NOT Prefs.ShowWeekNumberInTree then
              Begin
                T := datetostr(Datam1.Query1.FieldByName('pubdate').AsDateTime)
                  + '   ' + tNames1.publicationIDtonameReload
                  (Datam1.Query1.FieldByName('publicationid').AsInteger);
                if (Prefs.TreeExtraPublicationText[0]) and
                  (Datam1.Query1.FieldByName('miscint2').AsInteger > 0) then
                  T := T + '  ' + Datam1.Query1.FieldByName('miscint2')
                    .AsString;
              End
              else
              Begin
                T := 'Week ' + TUtils.LeadingZeroes
                  (WeekOf(Datam1.Query1.FieldByName('pubdate').AsDateTime), 2) +
                  '   ' + tNames1.publicationIDtonameReload
                  (Datam1.Query1.FieldByName('publicationid').AsInteger);
              End;

            end;
            N := TreeViewplan.Items.AddChildObject(N, T, plantreedata);
            ProductionID := Datam1.Query1.FieldByName('productionid').AsInteger;
            Publicationid := Datam1.Query1.FieldByName('publicationid').AsInteger;
            Pubdate := Datam1.Query1.FieldByName('pubdate').AsDateTime;

            pressrunid := -1;
            editionid := -1;
            Sectionid := -1;

            case Datam1.Query1.FieldByName('plantype').AsInteger of
              0:
                begin
                  N.ImageIndex := 137;
                  N.selectedIndex := 137;
                end;
              1:
                begin
                  N.ImageIndex := 138;
                  N.selectedIndex := 138;
                end;
              2:
                begin
                  N.ImageIndex := 139;
                  N.selectedIndex := 139;
                end;
            else
              begin
                N.ImageIndex := 140;
                N.selectedIndex := 140;
              end;
            end;

          end;

          if editionid <> Datam1.Query1.FieldByName('editionid').AsInteger then
          begin

            while N.Level > 2 do
              N := N.Parent;
            N := TreeViewplan.Items.AddChildObject(N, tNames1.editionIDtoname(Datam1.Query1.FieldByName('editionid').AsInteger), plantreedata);
            editionid := Datam1.Query1.FieldByName('editionid').AsInteger;
            N.ImageIndex := 11;
            N.selectedIndex := 11;
            Sectionid := -1;
            pressrunid := -1;

          end;

          if (Sectionid <> Datam1.Query1.FieldByName('sectionid').AsInteger) or (pressrunid <> Datam1.Query1.FieldByName('pressrunid').AsInteger)
          then
          begin
            setendstart;
            while N.Level > 3 do
              N := N.Parent;
            N := TreeViewplan.Items.AddChildObject(N,
              tNames1.sectionidtoname(Datam1.Query1.FieldByName('sectionid').AsInteger), plantreedata);
            Sectionid := Datam1.Query1.FieldByName('sectionid').AsInteger;
            pressrunid := Datam1.Query1.FieldByName('pressrunid').AsInteger;
            N.ImageIndex := 0;
            N.selectedIndex := 0;
            startpage := Datam1.Query1.FieldByName('pagename').AsString;
            curstartendnode := N;
          end;
          endpage := Datam1.Query1.FieldByName('pagename').AsString;
          plantype := Datam1.Query1.FieldByName('plantype').AsInteger;
          setplantredata;
          Datam1.Query1.Next;
        end;

        Datam1.Query1.Close;
        setendstart;

        pressnode := pressnode.getNextSibling;
      end;
      sleep(5);
      locationnode := locationnode.getNextSibling;
    end;

    if (Prefs.ShowNewProductSign) then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select Count (Distinct Pressrunid) from pressrunid (NOLOCK)');
      Datam1.Query1.Open;
      checkfiltercount := Datam1.Query1.Fields[0].AsInteger;
      Datam1.Query1.Close;
      Actionnewprods.Visible := false;
      Resetfilterrefreshsign;
    end;
  finally
    sleep(5);
    TreeViewplan.Items.EndUpdate;
  end;

  try
    for i := 0 to TreeViewplan.Items.Count - 1 do
    begin
      if TreeViewplan.Items[i].Level < 2 then
        TreeViewplan.Items[i].Expand(false);
    end;
    if TreeViewplan.Items.Count > 1 then
    begin
      if TreeViewplan.Selected = nil then
        TreeViewplan.Selected := TreeViewplan.Items[0];
    end;

    if (tNames1.locationnames.Count < 2) And (tNames1.pressnames.Count < 2) then
    begin
      for i := 0 to TreeViewplan.Items.Count - 1 do
      begin
        if TreeViewplan.Items[i].Level = 1 then
        begin
          TreeViewplan.Selected := TreeViewplan.Items[i];
          break;
        end;
      end;
    end;
    if PageControlMain.ActivePageIndex = VIEW_PLANS then
      TreeViewplan.SetFocus;
  except
  end;

  try
    if forcetoproductionid > 0 then
      aktproduction := forcetoproductionid;
    if aktproduction > 0 then
    begin
      for i := 0 to TreeViewplan.Items.Count - 1 do
      begin
        if TreeViewplan.Items[i].Level = 2 then
        begin
          if aktproduction = Tplantreedata(TreeViewplan.Items[i].Data^).ProductionID
          then
          begin
            TreeViewplan.Items[i].Expand(true);
            TreeViewplan.Items[i].Selected := true;
            if PageControlMain.ActivePageIndex = VIEW_PLANS then
              TreeViewplan.SetFocus;
            break;
          end;
        end;
      end;
    end;
  except

  end;
end;

function TFormMain.testconnecttion: Boolean;
// Var
// I : Integer;
begin
  result := false;
  try
    if Datam1.SQLQueryTestserver.Active then
      Datam1.SQLQueryTestserver.Close;
    Datam1.SQLQueryTestserver.Open;
    Datam1.SQLQueryTestserver.Close;

    result := true;
  Except
    on E: Exception do
    begin
      Inc(Ntrysqllogfile);

      if Ntrysqllogfile > 1000 then
      begin
        CloseFile(trysqllogfile);
        DeleteFile(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
          'SQLExceptionTRY.log');
        sleep(10);
        Ntrysqllogfile := 0;
        Assignfile(trysqllogfile,
          IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
          'SQLExceptionTRY.log');
        ReWrite(trysqllogfile);
        Writeln(trysqllogfile, 'Plancenter sql error log file ' +
          DateTimeToStr(NOW));
        Writeln(trysqllogfile, '');
      end;

      Append(trysqllogfile);
      Writeln(trysqllogfile, E.Message);
      Writeln(trysqllogfile, '');
    end;
  end;
end;

// Used by SELECTs
function TFormMain.Tryopen(Var Aquery: TSQLQuery): Boolean;
const
  MAXRETRIES = 10;
  WAITTIMEBETWEENRETRIES = 1000;
  MAXLINESINERRORLOGFILE = 1000;
var
  Retries, i: Integer;
  success: Boolean;
  Serverok: Boolean;
  mr: Integer;
  starttime: TDateTime;
  DLLError: Boolean;
  Deadlocked: Boolean;
  S: string;
  logFile: string;
begin
  Serverok := false;
  Retries := 0;
  success := false;
  DLLError := false;
  Deadlocked := false;
  starttime := NOW;
  logFile := IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
    'SQLException.log';

  // 1 - set lock timeout into query
  try
    if Aquery.Active then
      Aquery.Close;

   // if Prefs.DeadlockDelay > 5000 then
   //   Aquery.SQL.insert(0, 'set lock_timeout ' + IntToStr(Prefs.DeadlockDelay));

  Except
  end;

  repeat

    try
      Inc(Retries);

      if Aquery.Active then
        Aquery.Close;

      // The actual open operation..
      Aquery.Open;

      success := true;
      DLLError := false;
    except
      on E: Exception do
      begin
        Inc(Ntrysqllogfile);
        if Ntrysqllogfile > MAXLINESINERRORLOGFILE then
        begin
          CloseFile(trysqllogfile);
          DeleteFile(logFile);
          sleep(5);
          Ntrysqllogfile := 0;
          Assignfile(trysqllogfile, logFile);
          ReWrite(trysqllogfile);
          Writeln(trysqllogfile, 'Plancenter sql error log file ' +
            DateTimeToStr(NOW));
          Writeln(trysqllogfile, '');
        end;

        Append(trysqllogfile);
        S := E.Message;
        Writeln(trysqllogfile, S);
        Writeln(trysqllogfile, '');
        for i := 0 to Aquery.SQL.Count - 1 do
          Writeln(trysqllogfile, Aquery.SQL[i]);
        Writeln(trysqllogfile, '');

        sleep(WAITTIMEBETWEENRETRIES);

        success := false;

        Uppercase(S);
        if (pos('DBEXPSDA.DLL', S) > 0) OR (pos('DBNETLIB', S) > 0) then
          DLLError := true;

        if pos('DEADLOCK', S) > 0 then
          Deadlocked := true;

      end;

    end;

    if DLLError then
    begin
      DataM1.ConnectToServer();
    end;

  until (success) or (Retries > MAXRETRIES);

  if not success then
  begin

    if not testconnecttion then
    begin
      if not DataM1.ConnectToServer() then
      begin
        Serverok := false;
        mr := mrRetry;

        while (not Serverok) and (mr = mrRetry) Do
        begin
          mr := MessageDlg
            (InfraLanguage1.Translate
            ('Error server connection lost - check network'), mtError,
            [mbRetry, Mbabort], 0);
          if mr = mrRetry then
            Serverok := DataM1.ConnectToServer();
        end;
      end;
    end;

    if Serverok then
    begin
      sleep(WAITTIMEBETWEENRETRIES);
      try
        Aquery.Open;
      Except
      end;
    end;
  end;

  result := success;
end;

// Used for UPDATE,INSERT,DELETE,SP execution (with no return values)
function TFormMain.TrySql(Var Aquery: TSQLQuery): Boolean;
const
  MAXRETRIES = 10;
  WAITTIMEBETWEENRETRIES = 1000;
var
  tries, i, mr: Integer;
  success, Serverok, DLLError: Boolean;
  S: string;
  logFile: string;

begin

  tries := 0;
  DLLError := false;
  success := false;
  logFile := IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'SQLException.log';

  Datam1.SQLQueryTmp.SQL := Aquery.SQL;
  Datam1.SQLQueryTmp.params := Aquery.params;

  // Shuffle in timeout ..
  //if Prefs.DeadlockDelay >= 10000 then
  //  Datam1.SQLQueryTmp.SQL.insert(0, 'set lock_timeout ' + IntToStr(Prefs.DeadlockDelay));

  Datam1.SQLQueryTmp.Prepared := true;
  repeat
    try
      Inc(tries);
      Datam1.SQLQueryTmp.ExecSQL(false);
      success := true;
      DLLError := false;
    except
      on E: Exception do
      begin
        Inc(Ntrysqllogfile);
        if Ntrysqllogfile > 5000 then
        begin
          CloseFile(trysqllogfile);

          RenameFile(logFile, logFile + '2');
          sleep(10);
          Ntrysqllogfile := 0;
          Assignfile(trysqllogfile, logFile);
          ReWrite(trysqllogfile);
          Writeln(trysqllogfile, 'Plancenter sql error log file ' +
            DateTimeToStr(NOW));
          Writeln(trysqllogfile, '');
        end;

        Append(trysqllogfile);
        S := E.Message;
        Writeln(trysqllogfile, S);
        Writeln(trysqllogfile, '');
        for i := 0 to Aquery.SQL.Count - 1 do
        begin
          Writeln(trysqllogfile, Aquery.SQL[i]);
        end;
        Writeln(trysqllogfile, '');

        Uppercase(S);
        if (pos('DBEXPSDA.DLL', S) > 0) OR (pos('DBNETLIB', S) > 0) then
        begin
          DLLError := true;
        end;

        Sleep(WAITTIMEBETWEENRETRIES);
      end;
    end;

    if DLLError then
    begin
      Writeln(trysqllogfile,
        'DLLError detected - trying to reconnect to server..');
      DataM1.ConnectToServer();
    end;

  until (success) or (tries > MAXRETRIES);

  if not success then
  begin
    if Tryopen(Datam1.SQLQueryTestATry) then
    // SQLQueryTestATry : SELECT ServerName FROM GeneralPreferences
    begin
      try
        Datam1.SQLQueryTestATry.Close;
        Inc(tries);
        Datam1.SQLQueryTmp.ExecSQL(false);
        success := true;
      except
        on E: Exception do
        begin
          Inc(Ntrysqllogfile);
          if Ntrysqllogfile > 5000 then
          begin
            CloseFile(trysqllogfile);
            DeleteFile(logFile);
            sleep(10);
            Ntrysqllogfile := 0;
            Assignfile(trysqllogfile, logFile);
            ReWrite(trysqllogfile);
            Writeln(trysqllogfile, 'Plancenter sql error log file ' +
              DateTimeToStr(NOW));
            Writeln(trysqllogfile, '');
          end;

          Append(trysqllogfile);
          Writeln(trysqllogfile, E.Message);
          Writeln(trysqllogfile, '');
          for i := 0 to Aquery.SQL.Count - 1 do
          begin
            Writeln(trysqllogfile, Aquery.SQL[i]);
          end;
          Writeln(trysqllogfile, '');
          sleep(1000);
        end;
      end;
    end;

  end;

  result := success;
end;

procedure TFormMain.ActionnewplandeletetemplateExecute(Sender: TObject);
begin
  FormMain.planlogging('ActionnewplandeletetemplateExecute');
  Formdelplan.ShowModal;
end;

procedure TFormMain.ActionThumbnailFilterrefreshExecute(Sender: TObject);
var
  foundlastsel: Boolean;
  Pubdate: string;
  Publication: String;
  Issue: string;
  edition: string;
  section: String;
  DTpubdate: TDateTime;
begin
  try
    if activated then
    begin

      aktPBExListviewthumbnailvertpos := 0;
      PBExListviewthumbnail.Items.Clear;
      FormImage.ImageListthumbnails.Clear;

      if (ComboBoxGlobalPubDateFilter.text = '') then
        ComboBoxGlobalPubDateFilter.ItemIndex := 0;

      // off loadids;
      if (ComboBoxpalocationNY.Enabled) and (ComboBoxpalocationNY.text <> 'All')
      then
        loadAPagetree(TreeViewThumbs, '', '', ComboBoxpalocationNY.text,
          ComboBoxGlobalPubDateFilter.text)
      else
        loadAPagetree(TreeViewThumbs, '', '', '*',
          ComboBoxGlobalPubDateFilter.text);

      if TreeViewThumbs.Selected <> nil then
      begin
        if (TreeViewThumbs.Selected.Level > 0) then
        begin
          if (TreeViewThumbs.Selected <> nil) then
            loadthumbnails(true);
        end;
      end;
      setdroptarget;
      ActionEnable('ActionThumbnailFilterrefreshExecute');
      ActionToolBarthumbfilter.SetFocus;
    end;
  except
  end;
end;

procedure TFormMain.ActionThumbnailsreimageExecute(Sender: TObject);
Var
  dorem: Boolean;
begin
  if (Prefs.ShowReimgeDialog) then
  begin
    dorem := MessageDlg(InfraLanguage1.Translate('Reimage ?'), mtConfirmation,
      [mbYes, mbNo], 0) = mryes;
  end
  else
    dorem := true;

  if dorem then
  begin
    setpagetablethumbdata('set status = ' + Reimagetostat +
      ', miscint4 = 0, inkstatus = 0, outputtime = 0, ImagingProcessID = 0 ',
      'and status > 30');
    ActionrefreshpagesExecute(Self);
  end;
end;

procedure TFormMain.TreeViewThumbsChange(Sender: TObject; Node: TTreeNode);
Var
  N: TTreeNode;
  isone: Boolean;
begin
  try
    Changingthumborder := true;
    formprev2.Clearprev2;
    if TreeViewThumbs.Selected <> nil then
    begin
      GSelpubdate := 0;
      GSelpubid := -1;
      N := TreeViewThumbs.Selected;
      while N.Level > 0 do
      begin
        case TTreeViewpagestype(N.Data^).kind of
          // 0=all,1=location,2=publication,pubdate,3=issue,4=edition,5=section
          1:
            GSelpubdate := TTreeViewpagestype(N.Data^).Pubdate;
          2:
            GSelpubid := TTreeViewpagestype(N.Data^).Publicationid;
        end;
        N := N.Parent;
      end;

      if TreeViewThumbs.Selected.Level < 1 then
      begin
        ActionCHKthumbreadorder.Enabled := false;

        PBExListviewthumbnail.Items.Clear;

        // NAN 20151220
        // PBExListviewthumbnail.refresh;

        FormImage.ImageListthumbnails.Clear;

      end
      else
      begin
        isone := true;

        if TreeViewThumbs.Selected.Level < 5 then
        begin
          if TreeViewThumbs.Selected.Count > 1 then
            isone := false;
          if (TreeViewThumbs.Selected.HasChildren) then
          begin

            N := TreeViewThumbs.Selected.GetFirstChild;
            while N.HasChildren do
            begin
              if N.Count > 1 then
                isone := false;
              N := N.GetFirstChild;
            end;
          end;
        end;
        ActionCHKthumbreadorder.Enabled := isone;
      end;

      if TreeViewThumbs.Selected.Level >= Prefs.ThumbnailTreeMinimumLevel then
      begin
        PBExListviewthumbnail.Visible := true;

        if (TreeViewThumbs.Selected.Level >= 3) and
          (Prefs.ThumbnailForceReadorder) then
          ActionCHKthumbreadorder.Checked := true;

        loadthumbnails(true);
      End
      else
      begin
        PBExListviewthumbnail.Visible := false;
      end;
    end;
    if (ComboBoxpalocationNY.text = 'All') then
      Savekeeptrees('*', TreeViewThumbs)
    else
      Savekeeptrees(ComboBoxpalocationNY.text, TreeViewThumbs);
    ActionEnable('TreeViewThumbsChange');

    if TreeViewThumbs.Visible then
      Setthumbstatbar;

  except
  end;
end;

procedure TFormMain.ActionCHKpageautorefreshExecute(Sender: TObject);
begin
  ActionCHKpageautorefresh.Checked := not ActionCHKpageautorefresh.Checked;
  if ActionCHKpageautorefresh.Checked then
  begin
    if TreeViewpagelist.Selected = nil then
    begin
      ActionCHKpageautorefresh.Checked := false;
    end
    else
    begin
      if TreeViewpagelist.Selected.Level < 1 then
        ActionCHKpageautorefresh.Checked := false;
    end;
  end;

  if TreeViewpagelist.Selected <> nil then
  begin
    if TreeViewpagelist.Selected.Level < 1 then
      ActionCHKpageautorefresh.Checked := false;
  end;

  Timerautorefreshcount := 1;
  ActionCHKpageautorefresh.ImageIndex := 149;

end;

procedure TFormMain.ActionpageselectplateExecute(Sender: TObject);
begin
  ActionPageSelectTop.caption := Actionpageselectplate.caption;
  PageselectionType := 2;
  resetsuperhsselection;
end;

procedure TFormMain.ActionpageselectpageExecute(Sender: TObject);
begin
  ActionPageSelectTop.caption := Actionpageselectpage.caption;
  PageselectionType := 1;
  resetsuperhsselection;
end;

procedure TFormMain.ActionpageselectSeparationExecute(Sender: TObject);

begin
  ActionPageSelectTop.caption := ActionpageselectSeparation.caption;
  resetsuperhsselection;
  PageselectionType := 0;
end;

procedure TFormMain.ActionpageselectplatesetExecute(Sender: TObject);
begin
  ActionPageSelectTop.caption := Actionpageselectplateset.caption;
  PageselectionType := 3;
  resetsuperhsselection;
end;

procedure TFormMain.ActionPageSelectTopExecute(Sender: TObject);
begin
  sleep(1);
end;

procedure TFormMain.ActionCHKthumbautorefreshExecute(Sender: TObject);
begin
  ActionCHKthumbautorefresh.Checked := not ActionCHKthumbautorefresh.Checked;
  Timerautorefreshcount := 1;
  ActionCHKthumbautorefresh.ImageIndex := 149;
end;

procedure TFormMain.ActionCHKthumbreadorderExecute(Sender: TObject);
begin
  ActionCHKthumbreadorder.Checked := not ActionCHKthumbreadorder.Checked;
  Changingthumborder := true;
  ActionThumbnailrefresh.Execute;
end;

procedure TFormMain.ActionCHKthumbonlyuniqueExecute(Sender: TObject);
begin
  ActionCHKthumbonlyunique.Checked := not ActionCHKthumbonlyunique.Checked;
  ActionThumbnailrefreshExecute(Self);
end;

procedure TFormMain.ActionCHKthumbnextnotapprovedExecute(Sender: TObject);
Var
  i: Integer;
begin
  for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
  begin
    PBExListviewthumbnail.Items[i].Selected := false;
  end;

  if (firstnotappr > -1) And (firstnotappr < PBExListviewthumbnail.Items.Count)
  then
  begin
    PBExListviewthumbnail.Selected := PBExListviewthumbnail.Items[firstnotappr];
    PBExListviewthumbnail.Selected.MakeVisible(false);
    PBExListviewthumbnail.Selected.Focused := true;
    PBExListviewthumbnail.SetFocus;
  end;
end;

procedure TFormMain.ActionCHKthumbnextdisapprovedExecute(Sender: TObject);
Var
  i: Integer;
begin
  for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
  begin
    PBExListviewthumbnail.Items[i].Selected := false;
  end;

  if (firstDisappr > -1) And (firstDisappr < PBExListviewthumbnail.Items.Count)
  then
  begin
    PBExListviewthumbnail.Selected := PBExListviewthumbnail.Items[firstDisappr];
    PBExListviewthumbnail.Selected.MakeVisible(false);
    PBExListviewthumbnail.Selected.Focused := true;
    PBExListviewthumbnail.SetFocus;
  end;
end;

procedure TFormMain.ActionplateautorefreshExecute(Sender: TObject);
begin
  Actionplateautorefresh.Checked := not Actionplateautorefresh.Checked;
  Timerautorefreshcount := 1;
  Actionplateautorefresh.ImageIndex := 149;
end;

procedure TFormMain.ActionplateSmallimagesExecute(Sender: TObject);
begin
  ActionplateSmallimages.Checked := not ActionplateSmallimages.Checked;
  Actionplaterefresh.Execute;
end;

procedure TFormMain.ActionplateThumbnailsExecute(Sender: TObject);
begin
  ActionplateThumbnails.Checked := not ActionplateThumbnails.Checked;
  if Nviews > 0 then
    if not loadplateview(true, false) then
      plateviewtreedeselect;
end;

procedure TFormMain.ActionplateHidecommonExecute(Sender: TObject);
begin

  ActionplateHidecommon.Checked := not ActionplateHidecommon.Checked;
  if not loadplateview(false, false) then
    plateviewtreedeselect;
end;

procedure TFormMain.ActionnewplanSmallimagesExecute(Sender: TObject);
Var
  i: Integer;
begin
  ActionnewplanSmallimages.Checked := not ActionnewplanSmallimages.Checked;
  if Nplateframes > 0 then
  begin
    PlateviewImage.width := 23; // 204
    PlateviewImage.Height := 51; // 176
    for i := 1 to Nplateframes do
    begin
      plateframes[i].PBExListview1.Clear;
      plateframes[i].ImageListplanframe.Clear;
      drawtheplates(ActionnewplanSmallimages.Checked, i);
    end;
  end;
end;

procedure TFormMain.ActionprogressdeadlineExecute(Sender: TObject);
Var
  i: Integer;
  L: TListItem;
  wherestr: string;
  AYear, AMonth, ADay, AHour, AMinute, ASecond, AMilliSecond: Word;
  loca, press: Integer;
begin

  if TreeViewprodcontrol.Selected = nil then
    exit;

  wherestr := makeprogwherestr('');

  Datam1.Query2.SQL.Clear;
  Datam1.Query2.SQL.Add('select MAX(deadline) from PageTable (NOLOCK) ');
  Datam1.Query2.SQL.Add('where active > -99 and ' + wherestr);
  Datam1.Query2.SQL.Add('and DATEPART(year,DeadLine) > 2005');

  Datam1.Query2.SQL.Add(WeditionStr);
  Datam1.Query2.Open;
  if not Datam1.Query2.Eof then
  begin
    Formsetdeadline.DateTimePicker1.Date := Datam1.Query2.Fields[0].AsDateTime;
    Formsetdeadline.DateTimePicker2.Time := Datam1.Query2.Fields[0].AsDateTime;
  end
  else
  begin
    Formsetdeadline.DateTimePicker1.Date := NOW;
    Formsetdeadline.DateTimePicker2.Time := EncodeTime(12, 0, 0, 0);
  end;
  Datam1.Query2.Close;

  if Formsetdeadline.ShowModal = mrOK then
  begin
    try
      Datam1.Query2.SQL.Clear;
      Datam1.Query2.SQL.Add('UPDATE Pagetable SET Deadline = :deadline');
      Datam1.Query2.SQL.Add('where active > -99 and ' + wherestr);
      Datam1.Query2.SQL.Add(WeditionStr);
      Decodedate(Formsetdeadline.DateTimePicker1.Date, AYear, AMonth, ADay);
      DecodeTime(Formsetdeadline.DateTimePicker2.Time, AHour, AMinute, ASecond,
        AMilliSecond);
      Datam1.Query2.parambyname('deadline').AsDateTime :=
        EncodeDateTime(AYear, AMonth, ADay, AHour, AMinute, ASecond,
        AMilliSecond);
      FormMain.trysql(Datam1.Query2);

      Newrefreshprogress;
    Except
    end;
  end;

  Formsetdeadline.DateTimePicker1.Date := NOW;
  Formsetdeadline.DateTimePicker2.Time := EncodeTime(12, 0, 0, 0);
end;

procedure TFormMain.ActionnewplanquickExecute(Sender: TObject);
begin
  Formloadcombi.ShowModal;
end;

procedure TFormMain.ActiondbtoolsExecute(Sender: TObject);
begin
  if Configallowed then
    Formadmintool.ShowModal;
end;

procedure TFormMain.Action6Execute(Sender: TObject);
var
  N: TTreeNode;
begin
  Formprodplan.Multiplanid := getpressplanid;

  if Formprodplan.Multiplanid = -1 then
  begin
    exit;
  end;

  N := TreeViewplan.Selected;
  while N.Level > 1 do
    N := N.Parent;

  plateframeslocationid := Tplantreedata(N.Data^).LocationID;
  plateframespressid := Tplantreedata(N.Data^).pressid;
  Formprodplan.ComboBoxLocation.Items := tNames1.locationnames;
  Formprodplan.ComboBoxLocation.ItemIndex :=
    Formprodplan.ComboBoxLocation.Items.IndexOf
    (tNames1.locationIDtoname(plateframeslocationid));
  Formprodplan.possiblepressesonlocation(plateframeslocationid,
    Formprodplan.ComboBoxpress.Items);
  Formprodplan.ComboBoxpress.ItemIndex :=
    Formprodplan.ComboBoxpress.Items.IndexOf
    (tNames1.pressnameIDtoname(plateframespressid));
  Formprodplan.ComboBoxpublication.Items := tNames1.publicationnames;
  Formprodplan.Anychange := false;
  N := TreeViewplan.Selected;
  while N.Level > 2 do
    N := N.Parent;

  plateframesproductionid := Tplantreedata(N.Data^).ProductionID;
  plateframesPubdate := Tplantreedata(N.Data^).Pubdate;
  plateframesPublicationid := Tplantreedata(N.Data^).Publicationid;
  plateframeslocationid := Tplantreedata(N.Data^).LocationID;
  plateframespressid := Tplantreedata(N.Data^).pressid;

  Formprodplan.getcurrentplan;
  Formprodplan.SetprodrundataToUI;

  Formprodplan.ComboBoxpublication.ItemIndex :=
    Formprodplan.ComboBoxpublication.Items.IndexOf
    (tNames1.publicationIDtoname(plateframesPublicationid));
  plateframesPubdate := Tplantreedata(N.Data^).Pubdate;
  Formprodplan.EditProductionname.text := tNames1.productionrunIDtoname
    (plateframesproductionid);
  Formprodplan.DateTimePickerPubdate.Date := plateframesPubdate;

  Formprodplan.Editmode := PLANADDMODE_MULTISAVE;
  Formprodplan.ActionSaveExecute(Self);
  Formprodplan.Editmode := PLANADDMODE_CREATE;
end;

procedure TFormMain.ActiondeletepublicationExecute(Sender: TObject);
begin
  if (Prefs.NewProductDeleteSystem) then
    Formdelpublication2.ShowModal
  else
    Formdelpublication.ShowModal;

  case PageControlMain.ActivePageIndex of
    VIEW_SEPARATIONS:
      begin
        Actionrefreshpagefilter.Execute;
      end;
    VIEW_THUMBNAILS:
      begin
        ActionThumbnailFilterrefresh.Execute;
      end;
    VIEW_PLATES:
      begin
        ActionPlaterefreshtree.Execute;
      end;
    VIEW_PRODUCTIONS:
      begin
        ActionProgressrefresh.Execute;
      end;
    VIEW_EDITIONS:
      begin
        ActionEditionrefresh.Execute;
      end;
    VIEW_PLANS:
      begin
        Actionnewplanrefresh.Execute;
      end;
  end;
end;

procedure TFormMain.ActionDeleteUnkownPageExecute(Sender: TObject);
var
  index,i : Integer;
  t1,t2 : string;
begin

   try
    for i:= 0 to  ListViewUnknownPage.Items.Count-1 do
    begin
      if ListViewUnknownPage.Items[i].Selected then
      begin

        t1 := ListViewUnknownPage.Items[i].Caption;
        t2 := IncludeTrailingBackSlash(ListViewUnknownPage.Items[i].SubItems[0]);
        if (FileExists(t2 + t1)) then
        begin
          DeleteFile(t2 + t1);
          Datam1.Query2.SQL.Clear;
          Datam1.Query2.SQL.Add('DELETE FROM IllegalFiles WHERE FileName=''' + t1 + '''');
          FormMain.trysql(Datam1.Query2);
        end;
      end;
    end;
    ListViewUnknownPage.DeleteSelected;
  except
  end;
end;

procedure TFormMain.StringGridHSMouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
var
  onoff: Boolean;
  fr, tr, nsel, i1, ACol, ARow, upon, i: Integer;
  Colwchanged: Boolean;
begin
  TStringGrid(Sender).MouseToCell(X - 2, Y, ACol, ARow);
  upon := ARow;

  if (ARow = 0) then
  begin

    Colwchanged := false;
    if stringgridhswidthdownA <> -1 then
    begin
      if stringgridhswidthdownA <> StringGridHS.ColWidths[ACol] then
        Colwchanged := true;
    end;

    (*
      if stringgridhswidthdownL <> -1 then
      begin
      if stringgridhswidthdownL <> StringGridHS.ColWidths[Acol-1] then
      Colwchanged := true;
      end;


      stringgridhswidthdownL := -1;
      stringgridhswidthdownR := -1;

      stringgridhswidthdownA := StringGridHS.ColWidths[Acol];
      if Acol > 0 then
      stringgridhswidthdownL := StringGridHS.ColWidths[Acol-1];
      if Acol < StringGridHS.ColCount then
      stringgridhswidthdownR := StringGridHS.ColWidths[Acol+1];
    *)

    if Colwchanged then
    begin
      HSCols[HSOrder[ACol]].width := StringGridHS.ColWidths[ACol];

      // HSCols[aktHScols[Acol]].width := StringGridHS.ColWidths[Acol];
    end
    else
    begin
      if Prefs.FirstSortColumnName = HSCols[aktHScols[ACol]].Name then
        Prefs.FirstColumnDescentingSort := not Prefs.FirstColumnDescentingSort
      else
        Prefs.FirstColumnDescentingSort := false;

      Prefs.FirstSortColumnName := HSCols[aktHScols[ACol]].Name;
      Firstsortcolnumber := ACol;
      loadSuperHSDB2(false);

    end;

  end
  else
  begin
    if (Superdownon > 0) and (Superdownon <> upon) And
      (Superdownon <= StringGridHS.RowCount) and (upon <= StringGridHS.RowCount)
    then
    begin
      if (not(ssShift in gridshiftstate)) and (not(ssCtrl in gridshiftstate))
      then
      begin
        // Musen er blevet draged

        if Superdownon < upon then
        begin
          fr := Superdownon;
          tr := upon;
        end
        else
        begin
          fr := upon;
          tr := Superdownon;
        end;

        for i := 1 to StringGridHS.RowCount do
        begin

          if (i >= fr) And (i <= tr) then
          begin
            SuperHSdata[i - 1].changed := true;
            SuperHSdata[i - 1].Selected := true;
          End
          else
          begin
            SuperHSdata[i - 1].changed := true;
            SuperHSdata[i - 1].Selected := false;
          end;
          onoff := true;
        end;
        StringGridHS.Repaint;

        if PageselectionType > -1 then
        begin
          for i := 1 to StringGridHS.RowCount do
          begin
            if SuperHSdata[i - 1].changed then
            begin
              case PageselectionType of
                0:
                  begin
                    if Actionselectallcopies.Checked then
                    begin
                      for i1 := 1 to StringGridHS.RowCount do
                      begin
                        if (SuperHSdata[i1 - 1].copyseparationset = SuperHSdata
                          [i - 1].copyseparationset) and
                          (SuperHSdata[i1 - 1].Colorid = SuperHSdata[i - 1]
                          .Colorid) then
                        begin
                          SuperHSdata[i1 - 1].Selected :=
                            SuperHSdata[i - 1].Selected;
                        end;
                      end;
                    end;
                  end;
                1:
                  begin // Separationset
                    for i1 := 1 to StringGridHS.RowCount do
                    begin
                      if (SuperHSdata[i1 - 1].separationset = SuperHSdata[i - 1]
                        .separationset) or
                        ((Actionselectallcopies.Checked) and
                        (SuperHSdata[i1 - 1].copyseparationset = SuperHSdata
                        [i - 1].copyseparationset)) then
                      begin
                        SuperHSdata[i1 - 1].Selected :=
                          SuperHSdata[i - 1].Selected;
                      end;
                    end;
                  end;
                2:
                  begin // flatSeparation
                    for i1 := 1 to StringGridHS.RowCount do
                    begin
                      if (SuperHSdata[i1 - 1].FlatSeparation = SuperHSdata
                        [i - 1].FlatSeparation) or
                        ((Actionselectallcopies.Checked) and
                        (SuperHSdata[i1 - 1].copyflatseparationset = SuperHSdata
                        [i - 1].copyflatseparationset) and
                        (SuperHSdata[i1 - 1].Colorid = SuperHSdata[i - 1]
                        .Colorid)) then
                      // if SuperHSdata[i1-1].FlatSeparation = SuperHSdata[i-1].FlatSeparation then
                      begin
                        SuperHSdata[i1 - 1].Selected :=
                          SuperHSdata[i - 1].Selected;
                      end;
                    end;

                  end;
                3:
                  begin // flatSeparationset
                    for i1 := 1 to StringGridHS.RowCount do
                    begin
                      if (SuperHSdata[i1 - 1].flatseparationset = SuperHSdata
                        [i - 1].flatseparationset) or
                        ((Actionselectallcopies.Checked) and
                        (SuperHSdata[i1 - 1].copyflatseparationset = SuperHSdata
                        [i - 1].copyflatseparationset)) then
                      begin
                        SuperHSdata[i1 - 1].Selected :=
                          SuperHSdata[i - 1].Selected;
                      end;
                    end;
                  end;

              end;

            end;
          end;
          StringGridHS.Repaint;
        end;
        nsel := 0;

        for i := 1 to StringGridHS.RowCount do
        begin
          SuperHSdata[i - 1].changed := false;
          if SuperHSdata[i - 1].Selected then
            Inc(nsel);
        end;
        StatusBar1.Panels[4].text := IntToStr(nsel);
        ActionEnable('StringGridHSMouseUp');
      end;
    end;
  end;

  try
    if (formprev2.Showing) and (Prefs.AllowParalelView) then
    begin
      formprev2.Clearprev2;
      Actionpagespreview.Execute;
    end;
  Except
  end;

end;

procedure TFormMain.StringGridHSDrawCell(Sender: TObject; ACol, ARow: Integer;
  Rect: TRect; State: TGridDrawState);
Var
  r: TRect;
  isblackbrg: Boolean;
  fi, ti: Integer;
  tohigh: Boolean;
  bpos: Integer;
  DefaultDraw: Boolean;
  Curbr, cutp, curf: tcolor;
  Y: Integer;
  SmallFontsPixelsPerInch: Integer;
begin
  SmallFontsPixelsPerInch := 96;
  Curbr := StringGridHS.Canvas.Brush.Color;
  cutp := StringGridHS.Canvas.pen.Color;
  curf := StringGridHS.Canvas.Font.Color;

  // Compensate for styling error
  // Rect.Left := Rect.Left-4;
  Y := 1;

  if ARow = 0 then
  begin


    // StringGridHS.Canvas.Brush.Color := Clwhite;
    // StringGridHS.Canvas.pen.Color := Clwhite;

    StringGridHS.Canvas.Brush.Color := clBtnFace;
    // Curbr; //clLtGray;//clWindow; //Curbr;
    StringGridHS.Canvas.pen.Color := clblack; // cutp;

    if Firstsortcolnumber = ACol then
      StringGridHS.Canvas.Font.Color := clblue
    else
      StringGridHS.Canvas.Font.Color := clblack;

    TStringGrid(Sender).Canvas.Rectangle(Rect.left, Rect.Top, Rect.right,
      Rect.bottom);

    // y :=  ((rect.bottom-rect.top)  - FormMain.Font.Height) DIV 2;
    Y := 2;
    // if (Screen.PixelsPerInch > 96) then
    Y := 0;
    // Tstringgrid(Sender).Canvas.Textout(rect.left+2,rect.top+2,Tstringgrid(Sender).cells[acol,arow]);
    TStringGrid(Sender).Canvas.Textout(Rect.left + 2, Rect.Top + Y,
      TStringGrid(Sender).cells[ACol, ARow]);

    exit;
  end;
  if StringGridHS.cells[0, 1] = '' then
    exit;

  StringGridHS.Canvas.Brush.Color := clWhite;
  StringGridHS.Canvas.pen.Color := clWhite;
  StringGridHS.Canvas.Font := FormMain.Font;
  StringGridHS.Canvas.Font.Color := clblack;

  if (SuperHSdata[ARow - 1].Selected)
  (* OR ((State = [gdSelected]) OR (State = [gdFocused])) *) then
  begin
    StringGridHS.Canvas.Brush.Color := clActiveCaption;
    StringGridHS.Canvas.Font := FormMain.Font;
    StringGridHS.Canvas.Font.Color := clHighlightText;
  end;

  case aktsubitemkinds[ACol] of
    15:
      begin
        StringGridHS.Canvas.Font.Color := clblack;
        if SuperHSdata[ARow - 1].Active = 1 then
        begin
          StringGridHS.Canvas.Brush.Color := cllime;
        end
        else
          StringGridHS.Canvas.Brush.Color := clWhite;

      end;

    16:
      begin
        StringGridHS.Canvas.Font.Color := clblack;
        case SuperHSdata[ARow - 1].Unique of
          0:
            begin
              StringGridHS.Canvas.Brush.Color := clblue;
              StringGridHS.Canvas.Font.Color := clWhite;
            end;
          1:
            StringGridHS.Canvas.Brush.Color := cllime;
          2:
            StringGridHS.Canvas.Brush.Color := cllime;
        end;

      end;
    14:
      begin
        StringGridHS.Canvas.Font.Color := clblack;
        if SuperHSdata[ARow - 1].hold = 0 then
          StringGridHS.Canvas.Brush.Color := cllime
        else
          StringGridHS.Canvas.Brush.Color := RGB(255, 157, 157);
      end;
    9:
      begin // -1 auto 0 not approved 1 approved 2 disapproved  i status 20 +
        case SuperHSdata[ARow - 1].approved of
          - 1:
            StringGridHS.Canvas.Brush.Color := clWhite; // Auto approval
          0:
            StringGridHS.Canvas.Brush.Color := clYellow; // not approved
          1:
            StringGridHS.Canvas.Brush.Color := cllime; // Approved
          2:
            StringGridHS.Canvas.Brush.Color := clred; // Disapproved
          3:
            StringGridHS.Canvas.Brush.Color := clWhite; // No Approval
        else
          StringGridHS.Canvas.Brush.Color := clWhite;
        end;
        StringGridHS.Canvas.Font.Color := clblack;
      end;
    13:
      begin // color
        StringGridHS.Canvas.Brush.Color :=
          Colorsnames[SuperHSdata[ARow - 1].Colorid].Colorlook;
        if (ColorToRGB(StringGridHS.Canvas.Brush.Color) < 100) then
          StringGridHS.Canvas.Font.Color := clWhite
        else
          StringGridHS.Canvas.Font.Color := clblack;
      end;
    5:
      begin // status
        StringGridHS.Canvas.Brush.Color :=
          statusarray[SuperHSdata[ARow - 1].status].Color;
        StringGridHS.Canvas.Font.Color := clblack;
      end;

    20:
      begin // extarnal status
        StringGridHS.Canvas.Brush.Color := externalstatusarray
          [SuperHSdata[ARow - 1].externalstatus].Color;
        StringGridHS.Canvas.Font.Color := clblack;

      end;
  else
    begin
      if not(SuperHSdata[ARow - 1].Selected) then
        StringGridHS.Canvas.Font.Color := clblack;
    end;

  end;

  if SuperHSdata[ARow - 1].Active = 0 then
    StringGridHS.Canvas.Font.Color := clred;

  TStringGrid(Sender).Canvas.Rectangle(Rect.left, Rect.Top, Rect.right,
    Rect.bottom);
  TStringGrid(Sender).Canvas.Textout(Rect.left + 2, Rect.Top + Y,
    TStringGrid(Sender).cells[ACol, ARow]);
end;

procedure TFormMain.StringGridHSMouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
Var
  i, i1: Integer;
  ACol, ARow: Integer;
  onoff: Boolean;
  nsel: Integer;
begin
  nsel := 0;

  StatusBar1.Panels[4].text := '';
  gridshiftstate := Shift;
  if Button = mbLeft then
  begin
    TStringGrid(Sender).MouseToCell(X, Y, ACol, ARow);
    Superdownon := ARow;

    gridButton := Button;
    onoff := false;

    stringgridhswidthdownA := -1;
    stringgridhswidthdownL := -1;
    stringgridhswidthdownR := -1;

    stringgridhswidthdownA := StringGridHS.ColWidths[ACol];
    if ACol > 0 then
      stringgridhswidthdownL := StringGridHS.ColWidths[ACol - 1];
    if ACol < StringGridHS.ColCount then
      stringgridhswidthdownR := StringGridHS.ColWidths[ACol + 1];
    if Superdownon = 0 then
    begin

      for i := 1 to StringGridHS.RowCount do
      begin
        SuperHSdata[i - 1].changed := false;
        SuperHSdata[i - 1].Selected := false;

      end;
    end
    else
    begin

      if ssShift in gridshiftstate then
      begin
        for i := 1 to StringGridHS.RowCount do
        begin
          SuperHSdata[i - 1].Selected := false;
          if (i >= StringGridHS.Selection.Top) and
            (i <= StringGridHS.Selection.bottom) then
          begin
            SuperHSdata[i - 1].changed := not SuperHSdata[i - 1].Selected;
            SuperHSdata[i - 1].Selected := true;

            onoff := true;
          end;
        end;
      end
      else
      begin
        if ssCtrl in gridshiftstate then
        begin
          SuperHSdata[ARow - 1].changed := true;
          SuperHSdata[ARow - 1].Selected := not SuperHSdata[ARow - 1].Selected;
        end
        else
        begin
          for i := 1 to StringGridHS.RowCount do
          begin
            SuperHSdata[i - 1].changed := SuperHSdata[i - 1].Selected;
            SuperHSdata[i - 1].Selected := false;
            if i = ARow then
            begin
              SuperHSdata[i - 1].changed := true;
              SuperHSdata[i - 1].Selected := true;
              onoff := true;
            end;
          end;
          StringGridHS.Repaint;
        end;
      end;

      if PageselectionType > 0 then
      begin
        for i := 1 to StringGridHS.RowCount do
        begin
          if SuperHSdata[i - 1].changed then
          begin
            case PageselectionType of
              0:
                begin
                  for i1 := 1 to StringGridHS.RowCount do
                  begin
                    if (SuperHSdata[i1 - 1].separationset = SuperHSdata[i - 1]
                      .separationset) or
                      ((Actionselectallcopies.Checked) and
                      (SuperHSdata[i1 - 1].copyseparationset = SuperHSdata
                      [i - 1].copyseparationset)) then
                    begin
                      SuperHSdata[i1 - 1].Selected :=
                        SuperHSdata[i - 1].Selected;
                    end;
                  end;
                end;
              1:
                begin // Separationset
                  for i1 := 1 to StringGridHS.RowCount do
                  begin
                    if (SuperHSdata[i1 - 1].separationset = SuperHSdata[i - 1]
                      .separationset) or
                      ((Actionselectallcopies.Checked) and
                      (SuperHSdata[i1 - 1].copyseparationset = SuperHSdata
                      [i - 1].copyseparationset)) then
                    begin
                      SuperHSdata[i1 - 1].Selected :=
                        SuperHSdata[i - 1].Selected;
                    end;
                  end;
                end;
              2:
                begin // flatSeparation
                  for i1 := 1 to StringGridHS.RowCount do
                  begin
                    if (SuperHSdata[i1 - 1].FlatSeparation = SuperHSdata[i - 1]
                      .FlatSeparation) or
                      ((Actionselectallcopies.Checked) and
                      (SuperHSdata[i1 - 1].copyflatseparationset = SuperHSdata
                      [i - 1].copyflatseparationset) and
                      (SuperHSdata[i1 - 1].Colorid = SuperHSdata[i - 1].Colorid))
                    then
                    // if SuperHSdata[i1-1].FlatSeparation = SuperHSdata[i-1].FlatSeparation then
                    begin
                      SuperHSdata[i1 - 1].Selected :=
                        SuperHSdata[i - 1].Selected;
                    end;
                  end;

                end;
              3:
                begin // flatSeparationset
                  for i1 := 1 to StringGridHS.RowCount do
                  begin
                    if (SuperHSdata[i1 - 1].flatseparationset = SuperHSdata
                      [i - 1].flatseparationset) or
                      ((Actionselectallcopies.Checked) and
                      (SuperHSdata[i1 - 1].copyflatseparationset = SuperHSdata
                      [i - 1].copyflatseparationset)) then
                    begin
                      SuperHSdata[i1 - 1].Selected :=
                        SuperHSdata[i - 1].Selected;
                    end;
                  end;
                end;

            end;
          end;
        end;
        StringGridHS.Repaint;
      end;

      StatusBar1.Panels[4].text := IntToStr(nsel);
    end;
    nsel := 0;
    for i := 1 to StringGridHS.RowCount do
    begin
      SuperHSdata[i - 1].changed := false;
      if SuperHSdata[i - 1].Selected then
        Inc(nsel);
    end;
    ActionEnable('StringGridHSMouseDown');
  end;
end;

procedure TFormMain.ActionpagesarchiveExecute(Sender: TObject);
begin
  if Configallowed then
    Formarchive.ShowModal;
end;

function TFormMain.StringToPAnsiChar(stringVar: string): PAnsiChar;
Var
  AnsString: AnsiString;
  InternalError: Boolean;
begin
  InternalError := false;
  result := '';
  try
    if stringVar <> '' Then
    begin
      AnsString := AnsiString(stringVar);
      result := PAnsiChar(PAnsiString(AnsString));
    end;
  Except
    InternalError := true;
  end;
  if InternalError or (String(result) <> stringVar) then
  begin
    Raise Exception.Create('Conversion from string to PAnsiChar failed!');
  end;
end;

procedure TFormMain.ActionpageInfoExecute(Sender: TObject);
Var
  i, i2: Integer;
  plres: Integer;
  filname: PChar; { komplet sti }
  Xres: Single;
  Yres: Single;
  width: Single;
  Height: Single;
  CompRatio: Single;
  aktstat: Integer;
  Orgfilename: String;
  szInfo: MemoTextType;
  szFile: PAnsiChar;
  TmpS: String;
begin
  try
    try
      for i := 1 to StringGridHS.RowCount do
      begin
        if SuperHSdata[i - 1].Selected then
        begin
          if SuperHSdata[i - 1].status >= 10 then
          begin
            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add
              ('select TOP 1 filename,status from pagetable WITH (NOLOCK) where separation = '
              + IntToStr(SuperHSdata[i - 1].Separation));
            Datam1.Query1.Open;
            if not Datam1.Query1.Eof then
            begin
              Orgfilename := Datam1.Query1.Fields[0].AsString;
              aktstat := Datam1.Query1.Fields[1].AsInteger;
            end;
            Datam1.Query1.Close;

            filname := PChar(getfileserverFrommaster(1,
              SuperHSdata[i - 1].mastercopyseparationset) + Orgfilename + '===='
              + IntToStr(SuperHSdata[i - 1].mastercopyseparationset) + '.' +
              tNames1.ColornameIDtoname(SuperHSdata[i - 1].Colorid));
            if (not FileExists(filname)) then
              filname :=
                PChar(getfileserverFrommaster(1,
                SuperHSdata[i - 1].mastercopyseparationset) +
                IntToStr(SuperHSdata[i - 1].mastercopyseparationset) + '.' +
                tNames1.ColornameIDtoname(SuperHSdata[i - 1].Colorid));

            if NyFileInfoOK then
            begin
              plres := IsPDFFile(filname);
              if plres <> 0 then
              begin
                szFile := AnsiStrAlloc(256);
                strpcopy(szFile, filname);

                plres := NyFileInfo(szFile, Xres, Yres, width, Height,
                  CompRatio);
                if plres <> 0 then
                begin
                  FormPDFfileInfo.FWidth := width;
                  FormPDFfileInfo.FHeight := Height;
                  FormPDFfileInfo.Orgfilename := Orgfilename;
                  FormPDFfileInfo.filename := strpas(filname);
                  plres := FileInfoEx(filname, szInfo, 64000);
                  FormPDFfileInfo.memo1.Lines.Clear;
                  if plres <> 0 then
                    FormPDFfileInfo.memo1.Lines.Add(szInfo);
                  FormPDFfileInfo.ShowModal;
                end
                else
                  ShowMessage('Tiff file is missing');
              end
              else
              begin
                szFile := AnsiStrAlloc(256);
                strpcopy(szFile, filname);
                plres := PlotInfo(szFile, Xres, Yres, width, Height, CompRatio);

                if plres <> 0 then
                begin

                  FormFileinfo.Xres := Xres;
                  FormFileinfo.Yres := Yres;
                  FormFileinfo.FWidth := width;
                  FormFileinfo.FHeight := Height;
                  FormFileinfo.CompRatio := CompRatio;
                  FormFileinfo.filename := strpas(filname);
                  FormFileinfo.Orgfilename := Orgfilename;
                  plres := FileInfoEx(filname, szInfo, 64000);
                  FormFileinfo.memo1.Lines.Clear;
                  if plres <> 0 then
                    FormFileinfo.memo1.Lines.Add(szInfo);
                  FormFileinfo.ShowModal;
                end
                else
                  ShowMessage('Tiff file is missing');
              end;
            End
            else
            begin
              szFile := AnsiStrAlloc(256);
              strpcopy(szFile, filname);
              plres := PlotInfo(szFile, Xres, Yres, width, Height, CompRatio);
              if plres <> 0 then
              begin
                FormFileinfo.Xres := Xres;
                FormFileinfo.Yres := Yres;
                FormFileinfo.FWidth := width;
                FormFileinfo.FHeight := Height;
                FormFileinfo.CompRatio := CompRatio;
                FormFileinfo.filename := strpas(filname);
                FormFileinfo.Orgfilename := Orgfilename;
                FormFileinfo.ShowModal;
              end
              else
                ShowMessage('Tiff file is missing');
            end;
          end
          else
          begin
            MessageDlg(InfraLanguage1.Translate('The page is still missing'),
              mtInformation, [mbOk], 0);
          end;
          break;
        end;
      end;
    Except
      on E: Exception do
      begin
        MessageDlg(E.Message, mtInformation, [mbOk], 0);
      end;
    end;
  Finally
  end;
end;

procedure TFormMain.ActionThumbmissigExecute(Sender: TObject);
begin
  ActionThumbmissig.Checked := not ActionThumbmissig.Checked;
  ActionThumbnailrefreshExecute(Self);
end;

procedure TFormMain.AddlogentryById(Event: Integer; ErrorMsg: string;
  LocationID: Integer; pressid: Integer; pressrunid: Integer;
  Publicationid: Integer; editionid: Integer; Sectionid: Integer;
  Colorid: Integer; Pubdate: TDateTime);
var
  i: Integer;

begin

  try

    Datam1.Query5.SQL.Clear;

    Datam1.Query5.SQL.Add('exec spAddLogEntryOnIds');
    Datam1.Query5.SQL.Add('@ProcessID = 0,');
    Datam1.Query5.SQL.Add('@Event = ' + IntToStr(Event) + ',');
    Datam1.Query5.SQL.Add('@LocationId = ' + IntToStr(LocationID) + ',');
    Datam1.Query5.SQL.Add('@PressId = ' + IntToStr(pressid) + ',');
    Datam1.Query5.SQL.Add('@Publicationid = ' + IntToStr(Publicationid) + ',');
    Datam1.Query5.SQL.Add('@Editionid = ' + IntToStr(editionid) + ',');
    Datam1.Query5.SQL.Add('@Sectionid = ' + IntToStr(Sectionid) + ',');
    Datam1.Query5.SQL.Add('@Colorid = ' + IntToStr(Colorid) + ',');
    Datam1.Query5.SQL.Add('@PressrunId = ' + IntToStr(pressrunid) + ',');

    if Pubdate <> -1 then
    begin
      Datam1.Query5.SQL.Add('@Pubdate = :Pubdate,');
      Datam1.Query5.parambyname('Pubdate').AsDateTime := Pubdate;
    end
    else
      Datam1.Query5.SQL.Add('@Pubdate = -1,');
    Datam1.Query5.SQL.Add('@ErrorMsg = ' + '''' + ErrorMsg + '''');

    // Datam1.Query5.SQL.SaveToFile(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'+'spAddLogEntryOnIds.SQL');
    trysql(Datam1.Query5);

  except
  end;

end;

procedure TFormMain.ActionpagetreereleaseExecute(Sender: TObject);
begin
  Pagetreerelease(false);
end;

procedure TFormMain.Pagetreerelease(mononly: Boolean);
var
  Alocationid: Integer;
begin
  try
    if TreeViewpagelist.Selected = nil then
      exit;
    if TreeViewpagelist.Selected.Level = 0 then
      exit;

    if TreeViewpagelist.Selected.Level < 2 then
      exit;

    if Prefs.MustSetDeviceOnRelease then
    begin
      Releaseproductionids.Clear;
      ReleasePressrunids.Clear;
      ReleasePlates.Clear;
      if TreeViewpagelist.Selected.Level > 1 then
        Releaseproductionids.Add
          (IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
          .ProductionID));
      if TreeViewpagelist.Selected.Level > 2 then
        ReleasePressrunids.Add
          (IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
          .pressrunid));

      if not checkdevbeforerelease then
        exit;
    end;

    // NAN 20160115 Ensure where is not empty
    if (TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Publicationid <= 0)
      OR (TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Pubdate <= 0) then
      exit;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable');
    Datam1.Query1.SQL.Add('Set hold = 0'); // OK
    if (Prefs.SetApproveTimeOnRelease) then
      Datam1.Query1.SQL.Add(', approvetime = getdate(),approveuser=' + '''' +
        Prefs.Username + '''');
    Datam1.Query1.SQL.Add('Where active <> -999');
    if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Publicationid > -1
    then
      Datam1.Query1.SQL.Add('and publicationid = ' +
        IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
        .Publicationid));
    if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).editionid > -1 then
      Datam1.Query1.SQL.Add('and editionid = ' +
        IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
        .editionid));
    if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Sectionid > -1 then
      Datam1.Query1.SQL.Add('and sectionid = ' +
        IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
        .Sectionid));
    if mononly then
      Datam1.Query1.SQL.Add('and colorid = 4');
    if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Pubdate > 0 then
      Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
        TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Pubdate));
    Alocationid := GetSelectedLocationID();
    if (Alocationid > 0) then
      Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

    if Prefs.Debug then
      Datam1.Query1.SQL.SaveToFile
        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
        'pagetreerelease.SQL');

    trysql(Datam1.Query1);
    if Prefs.LogRelease then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select filename,version,separation,productionid from pagetable WITH (NOLOCK)');
      Datam1.Query1.SQL.Add('Where active <> -999');
      if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Publicationid > -1
      then
        Datam1.Query1.SQL.Add('and publicationid = ' +
          IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
          .Publicationid));
      if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).editionid > -1 then
        Datam1.Query1.SQL.Add('and editionid = ' +
          IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
          .editionid));
      if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Sectionid > -1 then
        Datam1.Query1.SQL.Add('and sectionid = ' +
          IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
          .Sectionid));
      if mononly then
        Datam1.Query1.SQL.Add('and colorid = 4');

      if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Pubdate > 0 then
        Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
          TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Pubdate));
      Alocationid := GetSelectedLocationID();
      if (Alocationid > 0) then
        Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

      Datam1.Query1.Open;
      while not Datam1.Query1.Eof do
      begin
        FormMain.SaveEventlog(80, Datam1.Query1.Fields[2].AsInteger, 0, '',
          Datam1.Query1.Fields[0].AsString, Datam1.Query1.Fields[1].AsInteger,
          Datam1.Query1.Fields[3].AsInteger);
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;
    end;
    getpreselHS;
    Actionrefreshpages.Execute;
    resetpreselHS;

  Except
  end;
end;

procedure TFormMain.ActionpagetreeHoldExecute(Sender: TObject);
var
  Alocationid: Integer;
  doHold: Boolean;
begin
  try
    if TreeViewpagelist.Selected = nil then
      exit;

    doHold := true;
    if TreeViewpagelist.Selected.Level < 2 then
      doHold := MessageDlg
        (InfraLanguage1.Translate('Really hold all productions on this date?'),
        mtConfirmation, [mbYes, mbNo], 0) = mryes;

    if (doHold = false) then
      exit;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable');
    Datam1.Query1.SQL.Add('Set hold = 1');
    Datam1.Query1.SQL.Add('Where active <> -999');
    if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Publicationid > -1
    then
      Datam1.Query1.SQL.Add('and publicationid = ' +
        IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
        .Publicationid));
    if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).editionid > -1 then
      Datam1.Query1.SQL.Add('and editionid = ' +
        IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
        .editionid));
    if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Sectionid > -1 then
      Datam1.Query1.SQL.Add('and sectionid = ' +
        IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
        .Sectionid));
    if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Pubdate > 0 then
      Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
        TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Pubdate));

    Alocationid := GetSelectedLocationID();
    if Alocationid > 0 then
      Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

    trysql(Datam1.Query1);
    if (Prefs.LogHold) then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select filename,version,separation,productionid from pagetable WITH (NOLOCK) ');
      Datam1.Query1.SQL.Add('Where active <> -999');
      if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Publicationid > -1
      then
        Datam1.Query1.SQL.Add('and publicationid = ' +
          IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
          .Publicationid));
      if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).editionid > -1 then
        Datam1.Query1.SQL.Add('and editionid = ' +
          IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
          .editionid));
      if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Sectionid > -1 then
        Datam1.Query1.SQL.Add('and sectionid = ' +
          IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
          .Sectionid));
      if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Pubdate > 0 then
        Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
          TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Pubdate));
      Alocationid := GetSelectedLocationID();
      if Alocationid > 0 then
        Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

      Datam1.Query1.Open;
      while not Datam1.Query1.Eof do
      begin
        FormMain.SaveEventlog(81, Datam1.Query1.Fields[2].AsInteger, 0, '',
          Datam1.Query1.Fields[0].AsString, Datam1.Query1.Fields[1].AsInteger,
          Datam1.Query1.Fields[3].AsInteger);
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;
    end;
    getpreselHS;
    Actionrefreshpages.Execute;
    resetpreselHS;

  Except
  end;

end;

procedure TFormMain.ActionpagetreePriorityExecute(Sender: TObject);
var
  Alocationid: Integer;
begin
  try
    if TreeViewpagelist.Selected = nil then
      exit;

    if TreeViewpagelist.Selected.Level < 2 then
      exit;

    if Formpriority.ShowModal = mrOK then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      Datam1.Query1.SQL.Add('Set priority = ' + Formpriority.edit1.text);
      Datam1.Query1.SQL.Add('Where active <> -999');
      if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Publicationid > -1
      then
        Datam1.Query1.SQL.Add('and publicationid = ' +
          IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
          .Publicationid));
      if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).editionid > -1 then
        Datam1.Query1.SQL.Add('and editionid = ' +
          IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
          .editionid));
      if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Sectionid > -1 then
        Datam1.Query1.SQL.Add('and sectionid = ' +
          IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
          .Sectionid));
      if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Pubdate > 0 then
        Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
          TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Pubdate));

      Alocationid := GetSelectedLocationID();
      if Alocationid > 0 then
        Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

      trysql(Datam1.Query1);

    end;
    getpreselHS;
    Actionrefreshpages.Execute;
    resetpreselHS;
  Except
  end;
end;

procedure TFormMain.ActionpagetreeApproveExecute(Sender: TObject);
Var
  Alocationid: Integer;
begin
  try
    if TreeViewpagelist.Selected = nil then
      exit;

    if TreeViewpagelist.Selected.Level < 2 then
      exit;

    if (Prefs.LogApproval) then
    begin
      try
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('Select filename,version,separation,productionid from pagetable WITH (NOLOCK) ');
        Datam1.Query1.SQL.Add('Where active <> -999');
        Datam1.Query1.SQL.Add('and approved <> 1');
        if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Publicationid > -1
        then
          Datam1.Query1.SQL.Add('and publicationid = ' +
            IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
            .Publicationid));
        if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).editionid > -1
        then
          Datam1.Query1.SQL.Add('and editionid = ' +
            IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
            .editionid));
        if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Sectionid > -1
        then
          Datam1.Query1.SQL.Add('and sectionid = ' +
            IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
            .Sectionid));
        if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Pubdate > 0 then
          Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
            TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Pubdate));

        Alocationid := GetSelectedLocationID();
        if Alocationid > 0 then
          Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

        Datam1.Query1.SQL.Add
          ('order by publicationid,editionid,separation,pagename,colorid ');
        Datam1.Query1.Open;
        while not Datam1.Query1.Eof do
        begin
          FormMain.SaveEventlog(70, Datam1.Query1.Fields[2].AsInteger, 0, '',
            Datam1.Query1.Fields[0].AsString, Datam1.Query1.Fields[1].AsInteger,
            Datam1.Query1.Fields[3].AsInteger);
          Datam1.Query1.Next;
        end;
        Datam1.Query1.Close;
      Except
      end;
    end;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable');
    Datam1.Query1.SQL.Add('Set approved = 1');
    Datam1.Query1.SQL.Add('Where active <> -999');
    if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Publicationid > -1
    then
      Datam1.Query1.SQL.Add('and publicationid = ' +
        IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
        .Publicationid));
    if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).editionid > -1 then
      Datam1.Query1.SQL.Add('and editionid = ' +
        IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
        .editionid));
    if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Sectionid > -1 then
      Datam1.Query1.SQL.Add('and sectionid = ' +
        IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
        .Sectionid));
    if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Pubdate > 0 then
      Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
        TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Pubdate));

    Alocationid := GetSelectedLocationID();
    if Alocationid > 0 then
      Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

    trysql(Datam1.Query1);
    getpreselHS;

    Actionrefreshpages.Execute;
    resetpreselHS;
  Except
  end;
end;

procedure TFormMain.ActionthumbtreerealseExecute(Sender: TObject);
begin
  thumbtreerealse(false);
end;

procedure TFormMain.thumbtreerealse(Monoonly: Boolean);
Var
  Alocationid: Integer;
begin
  try
    if TreeViewThumbs.Selected = nil then
      exit;

    if TreeViewThumbs.Selected.Level < 2 then
      exit;

    Releaseproductionids.Clear;
    ReleasePressrunids.Clear;
    ReleasePlates.Clear;

    if (Prefs.MustSetDeviceOnRelease) then
    begin
      Releaseproductionids.Add
        (IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
        .ProductionID));
      if not checkdevbeforerelease then
        exit;

    end;

    // NAN 20160115 Ensure where is not empty
    if (TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Publicationid <= 0) OR
      (TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate <= 0) then
      exit;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable');
    Datam1.Query1.SQL.Add('Set hold = 0'); // OK
    if (Prefs.SetApproveTimeOnRelease) then
      Datam1.Query1.SQL.Add(', approvetime = getdate(),approveuser=' + '''' +
        Prefs.Username + '''');
    Datam1.Query1.SQL.Add('Where active <> -999');
    if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Publicationid > -1 then
      Datam1.Query1.SQL.Add('and publicationid = ' +
        IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
        .Publicationid));
    if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid > -1 then
      Datam1.Query1.SQL.Add('and editionid = ' +
        IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid));
    if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Sectionid > -1 then
      Datam1.Query1.SQL.Add('and sectionid = ' +
        IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Sectionid));
    if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate > 0 then
      Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
        TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate));
    if Monoonly then
      Datam1.Query1.SQL.Add(' and colorid = 4 ');

    Alocationid := GetSelectedLocationID();
    if (Alocationid > 0) then
      Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

    trysql(Datam1.Query1);
    if (Prefs.LogRelease) then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select filename,version,separation,productionid from pagetable WITH (NOLOCK) ');
      Datam1.Query1.SQL.Add('Where active <> -999');
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Publicationid > -1
      then
        Datam1.Query1.SQL.Add('and publicationid = ' +
          IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
          .Publicationid));
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid > -1 then
        Datam1.Query1.SQL.Add('and editionid = ' +
          IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
          .editionid));
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Sectionid > -1 then
        Datam1.Query1.SQL.Add('and sectionid = ' +
          IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
          .Sectionid));
      if Monoonly then
        Datam1.Query1.SQL.Add(' and colorid = 4 ');
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate > 0 then
        Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
          TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate));

      Alocationid := GetSelectedLocationID();
      if (Alocationid > 0) then
        Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

      Datam1.Query1.Open;
      while not Datam1.Query1.Eof do
      begin
        FormMain.SaveEventlog(80, Datam1.Query1.Fields[2].AsInteger, 0, '',
          Datam1.Query1.Fields[0].AsString, Datam1.Query1.Fields[1].AsInteger,
          Datam1.Query1.Fields[3].AsInteger);
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;

    end;
    ActionThumbnailrefresh.Execute;
  Except
  end;
end;

procedure TFormMain.ActionthumbtreeholdExecute(Sender: TObject);
Var
  Alocationid: Integer;
  doHold: Boolean;
begin
  try
    if TreeViewThumbs.Selected = nil then
      exit;

    doHold := true;
    if TreeViewThumbs.Selected.Level < 2 then
      doHold := MessageDlg
        (InfraLanguage1.Translate('Really hold all productions on this date?'),
        mtConfirmation, [mbYes, mbNo], 0) = mryes;

    if (doHold = false) then
      exit;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable');
    Datam1.Query1.SQL.Add('Set hold = 1');
    Datam1.Query1.SQL.Add('Where active <> -999');
    if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Publicationid > -1 then
      Datam1.Query1.SQL.Add('and publicationid = ' +
        IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
        .Publicationid));
    if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid > -1 then
      Datam1.Query1.SQL.Add('and editionid = ' +
        IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid));
    if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Sectionid > -1 then
      Datam1.Query1.SQL.Add('and sectionid = ' +
        IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Sectionid));
    if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate > 0 then
      Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
        TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate));

    Alocationid := GetSelectedLocationID();
    if (Alocationid > 0) then
      Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

    trysql(Datam1.Query1);
    if (Prefs.LogHold) then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select filename,version,separation,productionid from pagetable WITH (NOLOCK) ');
      Datam1.Query1.SQL.Add('Where active <> -999');
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Publicationid > -1
      then
        Datam1.Query1.SQL.Add('and publicationid = ' +
          IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
          .Publicationid));
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid > -1 then
        Datam1.Query1.SQL.Add('and editionid = ' +
          IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
          .editionid));
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Sectionid > -1 then
        Datam1.Query1.SQL.Add('and sectionid = ' +
          IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
          .Sectionid));
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate > 0 then
        Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
          TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate));

      Alocationid := GetSelectedLocationID();
      if (Alocationid > 0) then
        Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

      Datam1.Query1.Open;
      while not Datam1.Query1.Eof do
      begin
        FormMain.SaveEventlog(81, Datam1.Query1.Fields[2].AsInteger, 0, '',
          Datam1.Query1.Fields[0].AsString, Datam1.Query1.Fields[1].AsInteger,
          Datam1.Query1.Fields[3].AsInteger);
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;

    end;
    ActionThumbnailrefresh.Execute;

  Except
  end;
end;

procedure TFormMain.ActionthumbtreepriorityExecute(Sender: TObject);
Var
  Alocationid: Integer;
begin
  try
    if TreeViewThumbs.Selected = nil then
      exit;

    if TreeViewThumbs.Selected.Level < 2 then
      exit;

    if Formpriority.ShowModal = mrOK then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      Datam1.Query1.SQL.Add('Set priority = ' + Formpriority.edit1.text);
      Datam1.Query1.SQL.Add('Where active <> -999');
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Publicationid > -1
      then
        Datam1.Query1.SQL.Add('and publicationid = ' +
          IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
          .Publicationid));
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid > -1 then
        Datam1.Query1.SQL.Add('and editionid = ' +
          IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
          .editionid));
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Sectionid > -1 then
        Datam1.Query1.SQL.Add('and sectionid = ' +
          IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
          .Sectionid));
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate > 0 then
        Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
          TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate));

      Alocationid := GetSelectedLocationID();
      if (Alocationid > 0) then
        Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

      trysql(Datam1.Query1);

    end;
    ActionThumbnailrefresh.Execute;
  Except
  end;
end;

procedure TFormMain.ActionthumbtreeapproveExecute(Sender: TObject);
Var
  Alocationid: Integer;
begin
  try
    if TreeViewThumbs.Selected = nil then
      exit;
    if TreeViewThumbs.Selected.Level < 2 then
      exit;

    if (Prefs.LogApproval) then
    begin
      try
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('Select filename,version,separation,productionid from pagetable WITH (NOLOCK)');
        Datam1.Query1.SQL.Add('Where active <> -999');
        Datam1.Query1.SQL.Add('and approved <> 1 ');

        if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Publicationid > -1
        then
          Datam1.Query1.SQL.Add('and publicationid = ' +
            IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
            .Publicationid));
        if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid > -1 then
          Datam1.Query1.SQL.Add('and editionid = ' +
            IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
            .editionid));
        if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Sectionid > -1 then
          Datam1.Query1.SQL.Add('and sectionid = ' +
            IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
            .Sectionid));
        if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate > 0 then
          Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
            TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate));

        Alocationid := GetSelectedLocationID();
        if (Alocationid > 0) then
          Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

        Datam1.Query1.SQL.Add
          ('order by publicationid,editionid,separationid,pagename,colorid ');

        Datam1.Query1.Open;
        while not Datam1.Query1.Eof do
        begin
          FormMain.SaveEventlog(70, Datam1.Query1.Fields[2].AsInteger, 0, '',
            Datam1.Query1.Fields[0].AsString, Datam1.Query1.Fields[1].AsInteger,
            Datam1.Query1.Fields[3].AsInteger);
          Datam1.Query1.Next;
        end;
        Datam1.Query1.Close;
      except
      end;
    end;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable');
    Datam1.Query1.SQL.Add('Set approved = 1');
    Datam1.Query1.SQL.Add('Where active <> -999');
    if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Publicationid > -1 then
      Datam1.Query1.SQL.Add('and publicationid = ' +
        IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
        .Publicationid));
    if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid > -1 then
      Datam1.Query1.SQL.Add('and editionid = ' +
        IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid));
    if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Sectionid > -1 then
      Datam1.Query1.SQL.Add('and sectionid = ' +
        IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Sectionid));
    if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate > 0 then
      Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
        TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate));

    Alocationid := GetSelectedLocationID();
    if (Alocationid > 0) then
      Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

    trysql(Datam1.Query1);

    ActionThumbnailrefresh.Execute;
  Except
  end;
end;

procedure TFormMain.ActionplatetreereleaseExecute(Sender: TObject);
begin
  platetreerelease(false);
end;

procedure TFormMain.platetreerelease(Monoonly: Boolean);
var
  runnode: TTreeNode;
  pressid: Integer;
  LocationID, pressrunid: Integer;

  Pressrunselstr: string;
  anode, n1, n2, n3: TTreeNode;
  ProductionID: Integer;
begin
  try
    if TreeViewPlateview.Selected = nil then
      exit;
    runnode := TreeViewPlateview.Selected;
    if runnode = nil then
      exit;
    if runnode.Level < 2 then
      exit;
    Pressrunselstr := '(-48';
    ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;
    n1 := runnode;

    if (Prefs.MustSetDeviceOnRelease) then
    begin
      Releaseproductionids.Clear;
      ReleasePressrunids.Clear;
      ReleasePlates.Clear;
      Releaseproductionids.Add(IntToStr(TTreeViewpagestype(runnode.Data^)
        .ProductionID));
      ReleasePressrunids.Add(IntToStr(TTreeViewpagestype(runnode.Data^)
        .pressrunid));

      if not checkdevbeforerelease then
        exit;
    end;

    try
      anode := n1;
      if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
      begin
        if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
          Pressrunselstr) = 0 then
          Pressrunselstr := Pressrunselstr + ',' +
            IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
      end;
      n2 := n1.GetFirstChild;
      while n2 <> nil do
      begin
        anode := n2;
        if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
        begin
          if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
            Pressrunselstr) = 0 then
            Pressrunselstr := Pressrunselstr + ',' +
              IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
        end;

        n3 := n2.GetFirstChild;
        while n3 <> nil do
        begin
          anode := n3;
          if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
          begin
            if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
              Pressrunselstr) = 0 then
              Pressrunselstr := Pressrunselstr + ',' +
                IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
          end;
          n3 := n3.getNextSibling;
        end;
        n2 := n2.getNextSibling;
      end;

    except
    end;

    Pressrunselstr := Pressrunselstr + ') ';

    while runnode.Level > 1 do
      runnode := runnode.Parent;

    pressid := tNames1.pressnametoid(runnode.Parent.text);
    // pressrunid := runnode.StateIndex;
    LocationID := tNames1.locationnametoid(ComboBoxpalocationNY.text);

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable');
    Datam1.Query1.SQL.Add('Set hold = 0'); // OK
    if (Prefs.SetApproveTimeOnRelease) then
      Datam1.Query1.SQL.Add(', approvetime = getdate(),approveuser=' + '''' +
        Prefs.Username + '''');
    Datam1.Query1.SQL.Add('Where active <> -999');
    // Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
    Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
    Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
    // if (locationid > 0) then
    // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(locationid));
    if Monoonly then
      Datam1.Query1.SQL.Add('and colorid = 4 ');

    trysql(Datam1.Query1);

    if (Prefs.LogRelease) then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select filename,version,separation,productionid from pagetable WITH (NOLOCK) ');
      Datam1.Query1.SQL.Add('Where active <> -999');
      // Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
      Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
      Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
      // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(locationid));

      Datam1.Query1.Open;
      while not Datam1.Query1.Eof do
      begin
        FormMain.SaveEventlog(80, Datam1.Query1.Fields[2].AsInteger, 0, '',
          Datam1.Query1.Fields[0].AsString, Datam1.Query1.Fields[1].AsInteger,
          Datam1.Query1.Fields[3].AsInteger);
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;
    end;

    Actionplaterefresh.Execute;

  Except
  end;

end;

procedure TFormMain.ActionplatetreeholdExecute(Sender: TObject);
Var
  runnode: TTreeNode;
  pressid: Integer;
  LocationID, pressrunid: Integer;
  Pressrunselstr: string;
  anode, n1, n2, n3: TTreeNode;
  ProductionID: Integer;
  doHold: Boolean;
begin
  try
    if TreeViewPlateview.Selected = nil then
      exit;
    runnode := TreeViewPlateview.Selected;
    if runnode = nil then
      exit;

    doHold := true;
    if runnode.Level < 2 then
      doHold := MessageDlg
        (InfraLanguage1.Translate('Really hold all productions on this date?'),
        mtConfirmation, [mbYes, mbNo], 0) = mryes;

    if (doHold = false) then
      exit;

    Pressrunselstr := '(-48';
    ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;
    n1 := runnode;

    try
      anode := n1;
      if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
      begin
        if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
          Pressrunselstr) = 0 then
          Pressrunselstr := Pressrunselstr + ',' +
            IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
      end;
      n2 := n1.GetFirstChild;
      while n2 <> nil do
      begin
        anode := n2;
        if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
        begin
          if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
            Pressrunselstr) = 0 then
            Pressrunselstr := Pressrunselstr + ',' +
              IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
        end;

        n3 := n2.GetFirstChild;
        while n3 <> nil do
        begin
          anode := n3;
          if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
          begin
            if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
              Pressrunselstr) = 0 then
              Pressrunselstr := Pressrunselstr + ',' +
                IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
          end;
          n3 := n3.getNextSibling;
        end;
        n2 := n2.getNextSibling;
      end;

    except
    end;

    Pressrunselstr := Pressrunselstr + ') ';

    while runnode.Level > 1 do
      runnode := runnode.Parent;

    pressid := tNames1.pressnametoid(runnode.Parent.text);
    // pressrunid := runnode.StateIndex;
    LocationID := tNames1.locationnametoid(ComboBoxpalocationNY.text);

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable');
    Datam1.Query1.SQL.Add('Set hold = 1');
    Datam1.Query1.SQL.Add('Where active <> -999');
    // Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
    Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
    Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
    // if (locationid > 0) then
    // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(locationid));

    trysql(Datam1.Query1);
    if (Prefs.LogHold) then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select filename,version,separation,productionid from pagetable WITH (NOLOCK)');
      Datam1.Query1.SQL.Add('Where active <> -999');
      // Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
      Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
      Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
      // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(locationid));

      Datam1.Query1.Open;
      while not Datam1.Query1.Eof do
      begin
        FormMain.SaveEventlog(81, Datam1.Query1.Fields[2].AsInteger, 0, '',
          Datam1.Query1.Fields[0].AsString, Datam1.Query1.Fields[1].AsInteger,
          Datam1.Query1.Fields[3].AsInteger);
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;

    end;

    Actionplaterefresh.Execute;
  Except
  end;
end;

procedure TFormMain.ActionplatetreeapproveExecute(Sender: TObject);
Var
  runnode: TTreeNode;
  pressid: Integer;
  LocationID, pressrunid: Integer;

  Pressrunselstr: string;
  anode, n1, n2, n3: TTreeNode;
  ProductionID: Integer;
begin
  try
    if TreeViewPlateview.Selected = nil then
      exit;
    runnode := TreeViewPlateview.Selected;
    if runnode = nil then
      exit;
    if runnode.Level < 2 then
      exit;
    Pressrunselstr := '(-48';
    ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;
    n1 := runnode;

    try
      anode := n1;
      if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
      begin
        if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
          Pressrunselstr) = 0 then
          Pressrunselstr := Pressrunselstr + ',' +
            IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
      end;
      n2 := n1.GetFirstChild;
      while n2 <> nil do
      begin
        anode := n2;
        if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
        begin
          if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
            Pressrunselstr) = 0 then
            Pressrunselstr := Pressrunselstr + ',' +
              IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
        end;

        n3 := n2.GetFirstChild;
        while n3 <> nil do
        begin
          anode := n3;
          if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
          begin
            if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
              Pressrunselstr) = 0 then
              Pressrunselstr := Pressrunselstr + ',' +
                IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
          end;
          n3 := n3.getNextSibling;
        end;
        n2 := n2.getNextSibling;
      end;

    except
    end;

    Pressrunselstr := Pressrunselstr + ') ';

    while runnode.Level > 1 do
      runnode := runnode.Parent;

    pressid := tNames1.pressnametoid(runnode.Parent.text);
    // pressrunid := runnode.StateIndex;
    LocationID := tNames1.locationnametoid(ComboBoxpalocationNY.text);

    if (Prefs.LogRelease) then
    begin
      try
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('Select filename,version,separation,productionid from pagetable WITH (NOLOCK) ');
        Datam1.Query1.SQL.Add('Where active <> -999');
        Datam1.Query1.SQL.Add('and approved <> 1');
        // Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
        Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
        Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
        // if (locationid > 0) then
        // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(locationid));
        Datam1.Query1.SQL.Add
          ('order by publicationid,editionid,sectionid,pageindex,colorid ');
        Datam1.Query1.Open;
        while not Datam1.Query1.Eof do
        begin
          FormMain.SaveEventlog(70, Datam1.Query1.Fields[2].AsInteger, 0, '',
            Datam1.Query1.Fields[0].AsString, Datam1.Query1.Fields[1].AsInteger,
            Datam1.Query1.Fields[3].AsInteger);
          Datam1.Query1.Next;
        end;
        Datam1.Query1.Close;
      Except
      end;
    end;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable');
    Datam1.Query1.SQL.Add('Set approved = 1');
    Datam1.Query1.SQL.Add('Where active <> -999');
    // Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
    Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
    Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
    // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(locationid));

    trysql(Datam1.Query1);

    Actionplaterefresh.Execute;
  Except
  end;
end;

procedure TFormMain.ActionplatetreepriorityExecute(Sender: TObject);
Var
  runnode: TTreeNode;
  pressid: Integer;
  LocationID, pressrunid: Integer;
  Pressrunselstr: string;
  anode, n1, n2, n3: TTreeNode;
  ProductionID: Integer;
begin
  try
    if TreeViewPlateview.Selected = nil then
      exit;
    runnode := TreeViewPlateview.Selected;
    if runnode = nil then
      exit;
    if runnode.Level < 2 then
      exit;

    Pressrunselstr := '(-48';
    ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;
    n1 := runnode;

    try
      anode := n1;
      if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
      begin
        if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
          Pressrunselstr) = 0 then
          Pressrunselstr := Pressrunselstr + ',' +
            IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
      end;
      n2 := n1.GetFirstChild;
      while n2 <> nil do
      begin
        anode := n2;
        if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
        begin
          if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
            Pressrunselstr) = 0 then
            Pressrunselstr := Pressrunselstr + ',' +
              IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
        end;

        n3 := n2.GetFirstChild;
        while n3 <> nil do
        begin
          anode := n3;
          if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
          begin
            if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
              Pressrunselstr) = 0 then
              Pressrunselstr := Pressrunselstr + ',' +
                IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
          end;
          n3 := n3.getNextSibling;
        end;
        n2 := n2.getNextSibling;
      end;

    except
    end;

    Pressrunselstr := Pressrunselstr + ') ';

    while runnode.Level > 1 do
      runnode := runnode.Parent;

    pressid := tNames1.pressnametoid(runnode.Parent.text);
    pressrunid := runnode.StateIndex;
    LocationID := tNames1.locationnametoid(ComboBoxpalocationNY.text);
    if Formpriority.ShowModal = mrOK then
    begin

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      Datam1.Query1.SQL.Add('Set priority = ' + Formpriority.edit1.text);
      Datam1.Query1.SQL.Add('Where active <> -999');
      // Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
      Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
      Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));

      // if (locationid > 0) then
      // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(locationid));

      trysql(Datam1.Query1);

    end;

  Except
  end;
end;

procedure TFormMain.ActionplatetreeforceExecute(Sender: TObject);
Var
  runnode: TTreeNode;
  pressid: Integer;
  LocationID, pressrunid: Integer;
  Pressrunselstr: string;
  anode, n1, n2, n3: TTreeNode;
  ProductionID: Integer;
begin
  try
    if TreeViewPlateview.Selected = nil then
      exit;
    runnode := TreeViewPlateview.Selected;
    if runnode = nil then
      exit;
    if runnode.Level < 2 then
      exit;
    if runnode.Level < 2 then
      exit;
    Pressrunselstr := '(-48';
    ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;
    n1 := runnode;

    try
      anode := n1;
      if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
      begin
        if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
          Pressrunselstr) = 0 then
          Pressrunselstr := Pressrunselstr + ',' +
            IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
      end;
      n2 := n1.GetFirstChild;
      while n2 <> nil do
      begin
        anode := n2;
        if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
        begin
          if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
            Pressrunselstr) = 0 then
            Pressrunselstr := Pressrunselstr + ',' +
              IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
        end;

        n3 := n2.GetFirstChild;
        while n3 <> nil do
        begin
          anode := n3;
          if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
          begin
            if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
              Pressrunselstr) = 0 then
              Pressrunselstr := Pressrunselstr + ',' +
                IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
          end;
          n3 := n3.getNextSibling;
        end;
        n2 := n2.getNextSibling;
      end;

    except
    end;

    Pressrunselstr := Pressrunselstr + ') ';

    while runnode.Level > 1 do
      runnode := runnode.Parent;

    pressid := tNames1.pressnametoid(runnode.Parent.text);

    pressrunid := runnode.StateIndex;
    LocationID := tNames1.locationnametoid(ComboBoxpalocationNY.text);
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable');
    Datam1.Query1.SQL.Add('Set Uniquepage = 2');
    Datam1.Query1.SQL.Add('Where active <> -999 and Uniquepage = 0');
    // Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
    Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
    Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
    // if (LocationID > 0) then
    // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(locationid));
    trysql(Datam1.Query1);

    ActionPlaterefreshtree.Execute;

  Except
  end;

end;

procedure TFormMain.ActionpagecommaExecute(Sender: TObject);
Var
  X, Y: Integer;
  Alist: Tstrings;
  T: string;
  NCols: Integer;
  Sepa: string;
  FromY: Integer;
begin
  if SaveDialog1.Execute then
  begin
    Sepa := ',';
    if Uppercase(Prefs.CommaSeparatorChar) = 'TAB' then
      Sepa := #9
    else
      Sepa := Prefs.CommaSeparatorChar;
    NCols := StringGridHS.ColCount - 1;
    if not Prefs.Debug then
      NCols := NCols - 9;
    Alist := Tstringlist.Create;
    Alist.Clear;
    try
      if (Prefs.PageListExportIncludeHeaders) then
        FromY := 0
      else
        FromY := 1;

      for Y := FromY to StringGridHS.RowCount - 1 do
      begin
        T := '';
        for X := 0 to NCols do
        begin
          T := T + StringGridHS.cells[X, Y];
          if X < StringGridHS.ColCount - 1 then
            T := T + Sepa;
        end;
        Alist.Add(T)
      end;
      Alist.SaveToFile(SaveDialog1.filename);
    finally
      Alist.free;
    end;
  end;

end;

procedure TFormMain.ActioncustomtoolsExecute(Sender: TObject);
begin
  Formcustomtools.ShowModal;
end;

procedure TFormMain.ActionselectallcopiesExecute(Sender: TObject);
begin
  Actionselectallcopies.Checked := not Actionselectallcopies.Checked;
end;

procedure TFormMain.TreeViewLogfilterChange(Sender: TObject; Node: TTreeNode);
begin
  Savekeeptrees(ComboBoxpalocationNY.text, TreeViewLogfilter);
  ActionLogrefresh.Execute;
end;

procedure TFormMain.TreeViewPlateviewKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  platetreeMouseShift := Shift;
end;

procedure TFormMain.TreeViewPlateviewChange(Sender: TObject; Node: TTreeNode);
var
  N: TTreeNode;
begin
  pagetableloadstatus := false;
  if TreeViewPlateview.Visible then
  begin
    try
      formprev2.Clearprev2;
      GSelpubdate := 0;
      GSelpubid := -1;
      N := TreeViewPlateview.Selected;
      while N.Level > 0 do
      begin
        case TTreeViewpagestype(N.Data^).kind of
          // 0=all,1=location,2=publication,pubdate,3=issue,4=edition,5=section
          1:
            GSelpubdate := TTreeViewpagestype(N.Data^).Pubdate;
          2:
            GSelpubid := TTreeViewpagestype(N.Data^).Publicationid;
        end;
        N := N.Parent;
      end;

    except
    end;

    Actionplatetreelayout.Enabled := (Node.Level > 1) and (Prefs.MayReimage);
    Savekeeptrees(ComboBoxpalocationNY.text, TreeViewPlateview);
    plateviewrefresh(false, 'TreeViewPlateviewChange');

  end;
end;

procedure TFormMain.TreeViewPlateviewKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  platetreeMouseShift := [];
end;

procedure TFormMain.CheckBoxthumbapprovalfilterClick(Sender: TObject);
var
  ini: TIniFile;
begin
  ActionThumbnailFilterrefresh.Execute;

  Prefs.DefaultThumbnailOnlyPagePlans := CheckBoxthumbappliedfilter.Checked;
  try
    ini := TIniFile.Create(TUtils.GetPlanCenterIniFilePath(Prefs.PlanCenterConfigFileName));
    ini.Writebool('system', 'CheckBoxDefaultThumbnailOnlyPagePlans',
      Prefs.DefaultThumbnailOnlyPagePlans);
    ini.free;
  except
  end;
end;

procedure TFormMain.StringGridHSKeyPress(Sender: TObject; var Key: Char);
var
  i: Integer;
  T, k: Char;

begin
  if Key in ['A' .. 'Z', 'a' .. 'z', '0' .. '9'] then
  begin
    k := upcase(Key);
    for i := 1 to StringGridHS.RowCount do
    begin
      if StringGridHS.cells[pagenamecol, i] <> '' then
      begin
        T := upcase(StringGridHS.cells[pagenamecol, i][1]);
        if T = k then
        begin
          StringGridHS.TopRow := i;
          break;
        end;
      end;
    end;
  end;
end;

procedure TFormMain.PBExListviewthumbnailKeyPress(Sender: TObject;
  var Key: Char);
var
  i: Integer;
  T, k: Char;
begin
  if Key in ['A' .. 'Z', 'a' .. 'z', '0' .. '9'] then
  begin
    if PBExListviewthumbnail.Items.Count = 0 then
      exit;
    k := upcase(Key);
    for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
    begin
      if PBExListviewthumbnail.Items[i].caption <> '' then
      begin
        T := upcase(PBExListviewthumbnail.Items[i].caption[1]);
        if T = k then
        begin
          PBExListviewthumbnail.Items[i].MakeVisible(false);
          break;
        end;
      end;
    end;
  end;
end;

procedure TFormMain.ActionCurretstateExecute(Sender: TObject);
var
  runnode: TTreeNode;
begin
  Formcurrentstate.Pubdate := 0;
  Formcurrentstate.Publicationid := -1;
  Formcurrentstate.editionid := -1;
  Formcurrentstate.Sectionid := -1;
  Formcurrentstate.LocationID := -1;
  Formcurrentstate.pressid := -1;
  Formcurrentstate.pressrunid := -1;

  if (PageControlMain.ActivePageIndex < 5) and (ComboBoxpalocationNY.Enabled)
    AND (ComboBoxpalocationNY.text <> 'All') then
    Formcurrentstate.LocationID := tNames1.locationnametoid
      (ComboBoxpalocationNY.Items[ComboBoxpalocationNY.ItemIndex]);

  case PageControlMain.ActivePageIndex of
    VIEW_SEPARATIONS:
      begin
        if TreeViewpagelist.Selected = nil then
          exit;
        if TreeViewpagelist.Selected.Level < 2 then
          exit;
        if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Publicationid > -1
        then
          Formcurrentstate.Publicationid :=
            TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Publicationid;
        if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).editionid > -1
        then
          Formcurrentstate.editionid :=
            TTreeViewpagestype(TreeViewpagelist.Selected.Data^).editionid;
        if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Sectionid > -1
        then
          Formcurrentstate.Sectionid :=
            TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Sectionid;
        if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Pubdate > 0 then
          Formcurrentstate.Pubdate :=
            TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Pubdate;

      end;
    VIEW_THUMBNAILS:
      begin
        if TreeViewThumbs.Selected = nil then
          exit;
        if TreeViewThumbs.Selected.Level < 2 then
          exit;
        if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Publicationid > -1
        then
          Formcurrentstate.Publicationid :=
            TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Publicationid;
        if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid > -1 then
          Formcurrentstate.editionid :=
            TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid;
        if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Sectionid > -1 then
          Formcurrentstate.Sectionid :=
            TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Sectionid;
        if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate > 0 then
          Formcurrentstate.Pubdate :=
            TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate;

      end;
    VIEW_PLATES:
      begin
        if TreeViewPlateview.Selected = nil then
          exit;
        runnode := TreeViewPlateview.Selected;
        if runnode = nil then
          exit;
        if runnode.Level < 2 then
          exit;
        while runnode.Level > 2 do
          runnode := runnode.Parent;

        Formcurrentstate.pressid := tNames1.pressnametoid(runnode.Parent.text);
        Formcurrentstate.pressrunid := runnode.StateIndex;
      end;
    VIEW_PRODUCTIONS:
      begin
        if TreeViewprodcontrol.Selected = nil then
          exit;
        runnode := TreeViewprodcontrol.Selected;
        if runnode = nil then
          exit;
        if runnode.Level < 2 then
          exit;
        while runnode.Level > 2 do
          runnode := runnode.Parent;

        Formcurrentstate.pressid := tNames1.pressnametoid(runnode.Parent.text);
        Formcurrentstate.pressrunid := runnode.StateIndex;

      end;

  end;
  Formcurrentstate.Show;
end;

procedure TFormMain.ActionfiledropdownExecute(Sender: TObject);
begin
  sleep(1);
end;

procedure TFormMain.ActionProgexitExecute(Sender: TObject);
begin
  // Application.Terminate;
  Close;
end;

procedure TFormMain.ActionloadpressconfExecute(Sender: TObject);
Var
  IPLF, ipl, IP, ic: Integer;
  N: TTreeNode;
  aktproductionid: Integer;
  aktpubdate: TDateTime;
  aktpublicationid: Integer;
  Aktlocationid: Integer;
  aktpressid: Integer;
  aktpressRunid: Integer;
  Lpageindex: Integer;
  Lip: Integer;
  Npressinfo: Integer;
  flatseparationset: Integer;
  pressinfo: array [1 .. 100] of record Colorid: Integer;
  priority: Integer;
  TowerID: string;
  CylinderID: String;
  ZoneID: string;
  High: string;
  Comment: string;
  sortingposition: string;
end;

begin
  try
    Formprodplan.ItsArepair := false;
    Formprodplan.planningaction := 0;
    // 0 load,1 edit,2 create,3 copy, 4 move, 5 apply
    if TreeViewplan.Selected = nil then
      exit;
    if TreeViewplan.Selected.Level < 2 then
      exit;

    if not(Formloadpressconf.ShowModal = mrOK) then
      exit;
    screen.Cursor := crhourglass;
    N := TreeViewplan.Selected;
    if N.Level > 1 then
    begin

      aktproductionid := Tplantreedata(N.Data^).ProductionID;
      aktpubdate := Tplantreedata(N.Data^).Pubdate;
      aktpublicationid := Tplantreedata(N.Data^).Publicationid;
      Aktlocationid := Tplantreedata(N.Data^).LocationID;
      aktpressid := Tplantreedata(N.Data^).pressid;
      if N.Level > 2 then
        aktpressRunid := Tplantreedata(N.Data^).pressrunid;

      for IPLF := 1 to Nplateframes do
      begin
        if plateframes[IPLF].Selected then
        begin
          for ipl := 0 to plateframes[IPLF].Nprodplates do
          begin
            Lpageindex := 10000;
            flatseparationset := plateframesdata[IPLF].prodplates[ipl]
              .flatseparationset;
            for IP := 1 to PlatetemplateArray
              [plateframesdata[IPLF].prodplates[ipl].templatelistid]
              .NupOnplate do
            begin
              if Lpageindex > plateframesdata[IPLF].prodplates[ipl].pages[IP].pageindex
              then
              begin
                Lpageindex := plateframesdata[IPLF].prodplates[ipl].pages[IP]
                  .pageindex;
                Lip := IP;
              end;
            end;

            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add
              ('SELECT PressConfID,PageIndex,ColorID,Priority,TowerID,CylinderID,ZoneID,High,Comment,SortingPosition FROM Pressconfig');
            Datam1.Query1.SQL.Add('WHERE PressconfID = ' +
              IntToStr(Formloadpressconf.aktpressconfid));
            Datam1.Query1.SQL.Add('AND PageIndex = ' + IntToStr(Lpageindex));
            Datam1.Query1.Open;
            Npressinfo := 0;
            while not Datam1.Query1.Eof do
            begin
              Inc(Npressinfo);
              pressinfo[Npressinfo].Colorid := Datam1.Query1.Fields[2]
                .AsInteger;
              pressinfo[Npressinfo].priority := Datam1.Query1.Fields[3]
                .AsInteger;
              pressinfo[Npressinfo].TowerID := Datam1.Query1.Fields[4].AsString;
              pressinfo[Npressinfo].CylinderID := Datam1.Query1.Fields
                [5].AsString;
              pressinfo[Npressinfo].ZoneID := Datam1.Query1.Fields[6].AsString;
              pressinfo[Npressinfo].High := Datam1.Query1.Fields[7].AsString;
              pressinfo[Npressinfo].Comment := Datam1.Query1.Fields[8].AsString;
              pressinfo[Npressinfo].sortingposition := Datam1.Query1.Fields
                [9].AsString;
              Datam1.Query1.Next;
            end;
            Datam1.Query1.Close;

            for ic := 1 to Npressinfo do
            begin
              Datam1.Query2.SQL.Clear;
              Datam1.Query2.SQL.Add('update pagetable');
              Datam1.Query2.SQL.Add('Set ');
              Datam1.Query2.SQL.Add('SortingPosition = ' + '''' + pressinfo[ic]
                .sortingposition + '''' + ',');
              Datam1.Query2.SQL.Add('priority = ' +
                IntToStr(pressinfo[ic].priority) + ',');
              Datam1.Query2.SQL.Add('PressTower = ' + '''' + pressinfo[ic]
                .TowerID + '''' + ',');
              Datam1.Query2.SQL.Add('PressCylinder = ' + '''' + pressinfo[ic]
                .CylinderID + '''' + ',');
              Datam1.Query2.SQL.Add('comment = ' + '''' + pressinfo[ic].Comment
                + '''' + ',');
              Datam1.Query2.SQL.Add('PressZone = ' + '''' + pressinfo[ic].ZoneID
                + '''' + ',');
              Datam1.Query2.SQL.Add('PressHighLow = ' + '''' + pressinfo[ic]
                .High + '''');
              Datam1.Query2.SQL.Add('where flatseparation = ' +
                IntToStr((flatseparationset * 100) + pressinfo[ic].Colorid));
              trysql(Datam1.Query2);

            end;
          end;
        end;
      end;

    end;
  finally
    screen.Cursor := crdefault;
  end;

end;

procedure TFormMain.ActionreimallExecute(Sender: TObject);
var
  dorem: Boolean;
begin
  getpreselHS;
  if (Prefs.ShowReimgeDialog) then
  begin
    dorem := MessageDlg(InfraLanguage1.Translate
      ('Reimage all and reset device ?'), mtConfirmation, [mbYes, mbNo],
      0) = mryes;
  end
  else
    dorem := true;

  if dorem then
  begin
    setpagetablestFlatdata
      ('set deviceid = 0,outputtime = 0, ImagingProcessID = 0 ', '',
      true, false);
    setpagetablestFlatdata('set status = 30, miscint4 = 0, inkstatus = 0',
      'and status > 30', true, false);

    loadSuperHSDB2(false);
    resetpreselHS;
  end;
end;

procedure TFormMain.FormPaint(Sender: TObject);
begin
  // paintbackground;
end;

procedure TFormMain.InitProdCols;
var
  i: Integer;
begin
  StringGridprods.ColCount := Length(Prefs.ProductionColumns);
  for i := 0 to Length(Prefs.ProductionColumns) - 1 do
  begin
    if (not Prefs.ProductionColumns[i].Visible) then
      Prefs.ProductionColumns[i].width := 0;

    StringGridprods.ColWidths[i] := Prefs.ProductionColumns[i].width;
    StringGridprods.cells[i, 0] := Prefs.ProductionColumns[i].ColumnName;

  end;
  if (Prefs.ProductionShowPressTime) then
    StringGridprods.cells[2, 0] := 'Priority';

  FirstProductionRefresh := false;

end;

procedure TFormMain.StringGridprodsDrawCell(Sender: TObject;
  ACol, ARow: Integer; Rect: TRect; State: TGridDrawState);
var
  r, S: TRect;
  o, i: Integer;
  fo, pros: double;
begin
  // Compensate for styling error
  // Rect.Left := Rect.Left-4;
  o := 0;
  i := 0;
  try
    if ARow = 0 then
      exit;
    if StringGridprods.cells[0, 1] = '' then
      exit;

    if (ACol >= 9) and (ACol <= 15) then // Dette er barene
    begin
      StringGridprods.Canvas.Brush.Color := clWhite;
      StringGridprods.Canvas.pen.Color := clWhite;
      StringGridprods.Canvas.Font.Name := Prefs.ProductionGridFonts[ACol].Name;
      StringGridprods.Canvas.Font.Style := Prefs.ProductionGridFonts
        [ACol].Style;
      StringGridprods.Canvas.Font.Size := Prefs.ProductionGridFonts[ACol].Size;

      if (Prefs.ProductionColumns[ACol].width = 0) then
        StringGridprods.ColWidths[ACol] := -1;

      StringGridprods.Canvas.Font.Color := clblack;
      r := Rect;

      r.left := r.left + 1;
      // r.Left := r.Left - 2;
      r.right := r.right - 1;
      r.Top := r.Top + 1;
      r.bottom := r.bottom - 1;
      S.Top := 0;
      S.left := 0;
      S.right := 10;
      S.bottom := 13;

      // StringGridprods.Canvas.Brush.Color := Clwhite;
      // StringGridprods.Canvas.FillRect(r);
      // Tstringgrid(Sender).Canvas.StretchDraw(r,FormImage.Imageprgbargray.Picture.Bitmap);
      case ACol of
        9:
          begin
            o := StringGridprodsdata[ARow].pages;
            i := StringGridprodsdata[ARow].FTPCount;
          end;
        10:
          begin
            o := StringGridprodsdata[ARow].pages;
            i := StringGridprodsdata[ARow].PRECount;
          end;
        11:
          begin
            o := StringGridprodsdata[ARow].pages;
            i := StringGridprodsdata[ARow].INKCount;
          end;
        12:
          begin
            o := StringGridprodsdata[ARow].pages;
            i := StringGridprodsdata[ARow].RIPCount;
          end;
        13:
          begin
            o := StringGridprodsdata[ARow].pages;
            i := StringGridprodsdata[ARow].pagesArrived;
          end;
        14:
          begin
            o := StringGridprodsdata[ARow].pages;
            i := StringGridprodsdata[ARow].pagesApproved;
          end;
        15:
          begin
            o := StringGridprodsdata[ARow].plates;
            i := StringGridprodsdata[ARow].platesimaged;
          end;
      end;

      pros := 0.0;
      if (o > 0) then
      begin
        pros := i;
        fo := o;
        pros := pros / fo;
      end;
      (* try
        if o > 0 then
        pros := (i * 100) div o
        else
        pros := 0;
        except
        pros := 0;
        end;
      *)
      fo := (r.right - r.left);
      fo := fo * pros;

      if (i > 0) and (pros < 1.0) then
      begin
        // r.Right := r.Right - round(fo);
        r.right := r.left + round(fo);

        StringGridprods.Canvas.Brush.Color := clYellow;
        StringGridprods.Canvas.FillRect(r);
        // Tstringgrid(Sender).Canvas.StretchDraw(r,FormImage.Imageprgbaryellow.Picture.Bitmap);
      end;

      if pros = 1.0 then
      begin

        StringGridprods.Canvas.Brush.Color := cllime;
        StringGridprods.Canvas.FillRect(r);
        // Tstringgrid(Sender).Canvas.StretchDraw(r,FormImage.Imageprgbargreen.Picture.Bitmap);

      end;

      if pros = 0.0 then
      begin

        StringGridprods.Canvas.Brush.Color := clWhite;
        StringGridprods.Canvas.FillRect(r);


      end;


      // StringGridprods.Canvas.Brush.Style := bsClear;
      // Tstringgrid(Sender).Canvas.Textout(rect.left+2,rect.top+2,Tstringgrid(Sender).cells[acol,arow]);
      StringGridprods.Canvas.Textout(Rect.left + 2, Rect.Top + 2, TStringGrid(Sender).cells[ACol, ARow]);

    End
    else
    begin

      StringGridprods.Canvas.Brush.Color := clWhite;
      StringGridprods.Canvas.pen.Color := clWhite;
      StringGridprods.Canvas.Font.Name := Prefs.ProductionGridFonts[ACol].Name;
      StringGridprods.Canvas.Font.Style := Prefs.ProductionGridFonts
        [ACol].Style;
      StringGridprods.Canvas.Font.Size := Prefs.ProductionGridFonts[ACol].Size;
      StringGridprods.Canvas.Font.Color := clblack;

      if ACol = 1 then
      begin
        if StringGridprodsdata[ARow].hold > 0 then
          StringGridprods.Canvas.Brush.Color := RGB(255, 157, 157)
        else
          StringGridprods.Canvas.Brush.Color := cllime;
      End
      else
      begin
        if StringGridprodsdata[ARow].plates > 0 then
        begin
          StringGridprods.Canvas.Brush.Color := clWhite;
          StringGridprods.Canvas.pen.Color := clWhite;
          StringGridprods.Canvas.Font.Name := Prefs.ProductionGridFonts
            [ACol].Name;
          StringGridprods.Canvas.Font.Style := Prefs.ProductionGridFonts
            [ACol].Style;
          StringGridprods.Canvas.Font.Size := Prefs.ProductionGridFonts
            [ACol].Size;
          StringGridprods.Canvas.Font.Color := clblack;
        End
        else
        begin
          StringGridprods.Canvas.Brush.Color := ClSilver;
          StringGridprods.Canvas.pen.Color := clWhite;
          StringGridprods.Canvas.Font.Name := Prefs.ProductionGridFonts
            [ACol].Name;
          StringGridprods.Canvas.Font.Style := Prefs.ProductionGridFonts
            [ACol].Style;
          StringGridprods.Canvas.Font.Size := Prefs.ProductionGridFonts
            [ACol].Size;
          StringGridprods.Canvas.Font.Color := clblack;
        end;

        if (StringGridprodsdata[ARow].Selected) then
        begin
          StringGridprods.Canvas.Brush.Color := clActiveCaption;
          StringGridprods.Canvas.Font.Name := Prefs.ProductionGridFonts
            [ACol].Name;
          StringGridprods.Canvas.Font.Style := Prefs.ProductionGridFonts
            [ACol].Style;
          StringGridprods.Canvas.Font.Size := Prefs.ProductionGridFonts
            [ACol].Size;
          StringGridprods.Canvas.Font.Color := clHighlightText;
        end;
      end;
      // Tstringgrid(Sender).Canvas.rectangle(rect.left,rect.top,rect.right,rect.bottom);
      // Tstringgrid(Sender).Canvas.Textout(rect.left+2,rect.top+2,Tstringgrid(Sender).cells[acol,arow]);

      StringGridprods.Canvas.Rectangle(Rect.left, Rect.Top, Rect.right,
        Rect.bottom);
      StringGridprods.Canvas.Textout(Rect.left + 2, Rect.Top + 2,
        TStringGrid(Sender).cells[ACol, ARow]);
    end;
  except

  end;
end;

function TFormMain.makeprogwherestr(p1: string): String;
Var
  i: Integer;
  wherestr: string;
  INcopies, INpressrunids: String;
begin
  if TreeViewprodcontrol.Selected = nil then
    exit;
  if TreeViewprodcontrol.Selected.Level < 0 then
    exit;

  wherestr := '(';

  for i := 1 to StringGridprods.RowCount do
  begin
    if StringGridprodsdata[i].Selected then
    begin
      if Length(wherestr) > 1 then
        wherestr := wherestr + ' OR ';

      wherestr := wherestr + '(pressrunid = ' +
        IntToStr(StringGridprodsdata[i].pressrunid) + ' and ' + 'Copynumber = '
        + IntToStr(StringGridprodsdata[i].copynumber) + ')';

    end;
  end;

  if Length(wherestr) > 1 then
    wherestr := wherestr + ')'
  else
    wherestr := '';

  result := wherestr;
end;

function TFormMain.makeprogINrunStr(p1: string): String;
Var
  i: Integer;
  wherestr: string;
  INcopies, INpressrunids: String;
begin
  if TreeViewprodcontrol.Selected = nil then
    exit;
  if TreeViewprodcontrol.Selected.Level < 0 then
    exit;

  wherestr := '(-99';
  for i := 1 to StringGridprods.RowCount do
  begin
    if StringGridprodsdata[i].Selected then
    begin
      wherestr := wherestr + ',' + IntToStr(StringGridprodsdata[i].pressrunid);
    end;
  end;
  wherestr := wherestr + ')';
  result := wherestr;
end;

(*
  procedure TFormMain.ActionsystemDebugsettimeExecute(Sender: TObject);


  procedure setmiscdata;
  begin
  if FormDebugtools.CheckBoxMisc.Checked then
  begin
  Datam1.Query1.SQL.Add(', miscint1 = 1,miscint2 = 2,miscint3 = 3, Miscstring1 ='+''''+'1'+''''+', Miscstring2 ='+''''+'2'+''''+', Miscstring3 ='+''''+'3'+''''+', FileServer ='+''''+'KCHLPT'+'''');
  end;
  end;

  Var
  I,Aktmas : Integer;
  PrepollN,DtimePart : String;
  settime : TDateTime;
  Dtimecount : Integer;
  Mres : Integer;
  begin
  exit;

  Dtimecount := 0;
  Mres := FormDebugtools.showmodal;
  case Mres of
  mrok : begin
  settime := encodedatetime(yearof(FormDebugtools.DateTimePicker1.date),
  monthof(FormDebugtools.DateTimePicker1.date),
  dayof(FormDebugtools.DateTimePicker1.date),
  hourof(FormDebugtools.DateTimePicker2.date),
  minuteof(FormDebugtools.DateTimePicker2.date),0,0);
  for i := 1 to StringGridHS.RowCount do
  begin
  if SuperHSdata[i-1].Selected then
  begin
  Inc(Dtimecount);
  case FormDebugtools.RadioGroup2.ItemIndex of
  0 : begin
  settime := IncSecond(settime,StrToInt(FormDebugtools.edit1.Text));
  end;
  1 : begin
  settime := Incminute(settime,StrToInt(FormDebugtools.edit1.Text));
  end;
  2 : begin
  settime := Inchour(settime,StrToInt(FormDebugtools.edit1.Text));
  end;
  end;

  if FormDebugtools.CheckBoxoutputver.checked then
  begin
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('Update pagetable');
  Datam1.Query1.SQL.Add('set outputversion = ' + FormDebugtools.Editouptver.Text );
  Datam1.Query1.SQL.Add('where separation = ' + IntToStr(SuperHSdata[i-1].separation));
  Datam1.Query1.execsql;
  end;


  case FormDebugtools.RadioGroup1.ItemIndex of
  0 : begin
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('Update pagetable');

  if (Prefs.PlateTransmissionSystem) then
  begin
  Datam1.Query1.SQL.Add('set status=20, inkstatus = 0 , inputtime = :inputtime');
  end
  else
  begin
  if FormDebugtools.CheckBoxtrans.Checked then
  Datam1.Query1.SQL.Add('set status=30, inkstatus = 0 , inputtime = :inputtime')
  else
  Datam1.Query1.SQL.Add('set status=10, inkstatus = 0 , inputtime = :inputtime');
  end;


  setmiscdata;
  Datam1.Query1.SQL.Add('where separation = ' + IntToStr(SuperHSdata[i-1].separation));
  Datam1.Query1.ParamByName('inputtime').AsDateTime := settime;
  Datam1.Query1.execsql;

  end;
  1 : begin
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('Update pagetable');
  Datam1.Query1.SQL.Add('set approved=1,approvetime = :inputtime');
  setmiscdata;
  Datam1.Query1.SQL.Add('where separation = ' + IntToStr(SuperHSdata[i-1].separation));
  Datam1.Query1.ParamByName('inputtime').AsDateTime := settime;
  Datam1.Query1.execsql;

  end;
  2 : begin
  Datam1.Query1.execsql;
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('Update pagetable');
  Datam1.Query1.SQL.Add('set status = 50');
  Datam1.Query1.SQL.Add(', outputtime = :inputtime');
  setmiscdata;
  Datam1.Query1.SQL.Add('where flatseparation = ' + IntToStr(SuperHSdata[i-1].flatseparation));
  Datam1.Query1.ParamByName('inputtime').AsDateTime := settime;
  Datam1.Query1.execsql;
  end;
  3 : begin

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('Update pagetable');
  Datam1.Query1.SQL.Add('set status = 46');
  Datam1.Query1.SQL.Add('where flatseparation = ' + IntToStr(SuperHSdata[i-1].flatseparation));
  Datam1.Query1.execsql;

  end;

  end;
  end;
  end;
  end;

  mryes : begin
  settime := encodedatetime(yearof(FormDebugtools.DateTimePicker1.date),
  monthof(FormDebugtools.DateTimePicker1.date),
  dayof(FormDebugtools.DateTimePicker1.date),
  hourof(FormDebugtools.DateTimePicker2.date),
  minuteof(FormDebugtools.DateTimePicker2.date),0,0);
  Aktmas := -1;
  Dtimecount := 0;

  for i := 1 to StringGridHS.RowCount do
  begin

  if (SuperHSdata[i-1].Selected) and (Aktmas <> SuperHSdata[i-1].MasterCopySeparationSet) then
  begin
  Aktmas := SuperHSdata[i-1].MasterCopySeparationSet;

  case FormDebugtools.RadioGroup2.ItemIndex of
  0 : begin
  Inc(Dtimecount);
  DtimePart := 'ss';
  settime := IncSecond(settime,StrToInt(FormDebugtools.edit1.Text));
  end;
  1 : begin
  Inc(Dtimecount,60);
  DtimePart :=  'ss';
  settime := Incminute(settime,StrToInt(FormDebugtools.edit1.Text));
  end;
  2 : begin
  Inc(Dtimecount);
  DtimePart := 'hh';
  settime := Inchour(settime,StrToInt(FormDebugtools.edit1.Text));
  end;
  end;


  PrepollN := FormDebugtools.RadioGroup3.Items[FormDebugtools.RadioGroup3.ItemIndex];

  Delete(PrepollN,pos(' ',PrepollN),100);
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('Insert PrepollPageTable(MasterCopySeparationSet,ProcessID,ProcessType,Event,Message,EventTime) ');
  Datam1.Query1.SQL.Add('Values (' + IntToStr(SuperHSdata[i-1].MasterCopySeparationSet));
  Datam1.Query1.SQL.Add(',1,2,'+PrepollN+','+''''+'Message'+''''+', ');

  Datam1.Query1.SQL.Add('DATEADD ('+DtimePart+','+IntToStr(Dtimecount)+',getdate() ))  ');
  //
  //                Datam1.Query1.ParamByName('inputtime').AsDateTime := settime;
  if Prefs.Debug then Datam1.Query1.SQL.SaveToFile(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory())+ 'sqllogs\'+'setprepollstat.SQL');

  Datam1.Query1.execsql;



  end;
  end;

  end;
  end;
  end; *)

procedure TFormMain.ActiongraphinputExecute(Sender: TObject);
begin
  Actiongraphinput.Checked := not Actiongraphinput.Checked;
  if (not Actiongraphinput.Checked) and (not Actiongraphapproval.Checked) and
    (not Actiongraphoutput.Checked) then
  begin
    MessageDlg(InfraLanguage1.Translate('At least one graph must be selected'),
      mtInformation, [mbOk], 0);
    Actiongraphinput.Checked := true;
  end;
  makegraphicreport;
end;

procedure TFormMain.ActiongraphapprovalExecute(Sender: TObject);
begin
  Actiongraphapproval.Checked := not Actiongraphapproval.Checked;
  if (not Actiongraphinput.Checked) and (not Actiongraphapproval.Checked) and
    (not Actiongraphoutput.Checked) then
  begin
    MessageDlg(InfraLanguage1.Translate('At least one graph must be selected'),
      mtInformation, [mbOk], 0);
    Actiongraphapproval.Checked := true;
  end;

  makegraphicreport;
end;

procedure TFormMain.ActiongraphoutputExecute(Sender: TObject);
begin
  Actiongraphoutput.Checked := not Actiongraphoutput.Checked;
  if (not Actiongraphinput.Checked) and (not Actiongraphapproval.Checked) and
    (not Actiongraphoutput.Checked) then
  begin
    MessageDlg(InfraLanguage1.Translate('At least one graph must be selected'),
      mtInformation, [mbOk], 0);
    Actiongraphoutput.Checked := true;
  end;
  makegraphicreport;
end;

procedure TFormMain.StringGridReportTopLeftChanged(Sender: TObject);
begin
  if reportselmode = 1 then
    StringGridReport.LeftCol := reportleftwhenSel;
  reportselmode := 0;

end;

procedure TFormMain.StringGridReportSelectCell(Sender: TObject;
  ACol, ARow: Integer; var CanSelect: Boolean);
begin
  CanSelect := true;
  reportselmode := 1;
  reportleftwhenSel := StringGridReport.LeftCol;
end;

procedure TFormMain.makeLiveDetailsreport;
var
  N: TTreeNode;
  wherestr: string;
  Nrows, Irows, i: Integer;
  Inputtime, approvetime, outputtime, Deadline: TDateTime;
  LocationID: Integer;
begin
  try
    StringGridReport.Visible := false;
    screen.Cursor := crhourglass;
    reportselmode := -1;
    reportleftwhenSel := 0;

    Nrows := 1000;
    Irows := 0;

    if TreeViewreportfilter.Selected.Level < 1 then
      exit;
    wherestr := 'where p.dirty <> 1 and p.active = 1 and p.pagetype < 2 ';
    if TreeViewreportfilter.Selected.Level > 0 then
    begin

      if ComboBoxpalocationNY.Enabled then
        LocationID := tNames1.locationnametoid(ComboBoxpalocationNY.text)
      else
        LocationID := -1;

      if LocationID > 0 then
        wherestr := wherestr + ' and p.locationid = ' + IntToStr(LocationID);

      N := TreeViewreportfilter.Selected;
      while N.Level > 0 do
      begin
        case TTreeViewpagestype(N.Data^).kind of
          1:
            begin // date
              wherestr := wherestr + ' and ' + Datam1.makedatastr('p.',
                TTreeViewpagestype(N.Data^).Pubdate);

            end;
          2:
            begin // date + publ
              wherestr := wherestr + 'and p.publicationid = ' +
                IntToStr(TTreeViewpagestype(N.Data^).Publicationid);

            end;
          4:
            begin // date + publ + ed
              wherestr := wherestr + 'and p.editionid = ' +
                IntToStr(TTreeViewpagestype(N.Data^).editionid);

            end;
          5:
            begin // date + publ + ed +sec
              wherestr := wherestr + 'and p.sectionid = ' +
                IntToStr(TTreeViewpagestype(N.Data^).Sectionid);

            end;

        end;
        N := N.Parent;
      end;
    end;
    Datam1.Query1.SQL.Clear;
    // 0             1              2             3      4            5          6            7           8           9       10        11          12
    Datam1.Query1.SQL.Add
      ('SELECT p.Pubdate,p.Publicationid,p.Editionid,p.Sectionid,p.Locationid,p.Pressid,p.Pagename,p.UniquePage,p.CopyNumber,p.Colorid,p.Status,p.Approved,p.Hold,');
    // 13          14             15           16        17        18       19             20           21                22                      23               24
    Datam1.Query1.SQL.Add
      ('p.Inputtime,p.Approvetime,p.Outputtime,p.Deviceid,p.Deadline,p.Comment,p.Pageindex,p.Separation,p.Flatseparation,p.MasterCopySeparationSet,p.PressRunID,p.ProductionID');
    Datam1.Query1.SQL.Add('from pagetable p WITH (NOLOCK) ');
    Datam1.Query1.SQL.Add(wherestr);
    Datam1.Query1.SQL.Add
      ('order by p.Inputtime,p.Approvetime,p.Outputtime,p.MasterCopySeparationSet');

    if Prefs.Debug then
      Datam1.Query1.SQL.SaveToFile
        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
        'livestat.SQL');
    StringGridReport.RowCount := Nrows;

    Tryopen(Datam1.Query1);
    while not Datam1.Query1.Eof do
    begin
      Inc(Irows);
      if Irows + 1 > Nrows then
      begin
        Inc(Nrows, 1000);
        StringGridReport.RowCount := Nrows;
      end;

      for i := 0 to Datam1.Query1.Fields.Count - 1 do
      begin
        case i of
          1:
            StringGridReport.cells[i, Irows] :=
              tNames1.publicationIDtoname(Datam1.Query1.Fields[i].AsInteger);
          2:
            StringGridReport.cells[i, Irows] :=
              tNames1.editionIDtoname(Datam1.Query1.Fields[i].AsInteger);
          3:
            StringGridReport.cells[i, Irows] :=
              tNames1.sectionidtoname(Datam1.Query1.Fields[i].AsInteger);
          4:
            StringGridReport.cells[i, Irows] :=
              tNames1.locationIDtoname(Datam1.Query1.Fields[i].AsInteger);
          5:
            StringGridReport.cells[i, Irows] :=
              tNames1.pressnameIDtoname(Datam1.Query1.Fields[i].AsInteger);
          7:
            StringGridReport.cells[i, Irows] :=
              Uniquearray[Datam1.Query1.Fields[i].AsInteger];
          9:
            StringGridReport.cells[i, Irows] :=
              tNames1.ColornameIDtoname(Datam1.Query1.Fields[i].AsInteger);
          10:
            StringGridReport.cells[i, Irows] :=
              statusarray[Datam1.Query1.Fields[i].AsInteger].Name;
          11:
            StringGridReport.cells[i, Irows] :=
              apprnamearray[Datam1.Query1.Fields[i].AsInteger + 1];
          12:
            StringGridReport.cells[i, Irows] := Holdrealesarray
              [Datam1.Query1.Fields[i].AsInteger];
          13 .. 15:
            begin
              if Datam1.Query1.Fields[i].AsDateTime > EncodeDateTime(2000, 1, 1,
                1, 1, 1, 1) then
              begin
                StringGridReport.cells[i, Irows] :=
                  FormaTDateTime(Prefs.ReportDateFormat,
                  Datam1.Query1.Fields[i].AsDateTime)

              end
              else
                StringGridReport.cells[i, Irows] := '';
            end;
          16:
            StringGridReport.cells[i, Irows] :=
              tNames1.deviceIDtoname(Datam1.Query1.Fields[i].AsInteger);

          17:
            begin
              if Datam1.Query1.Fields[i].AsDateTime > EncodeDateTime(2000, 1, 1,
                1, 1, 1, 1) then
              begin
                StringGridReport.cells[i, Irows] :=
                  FormaTDateTime(Prefs.ReportDateFormat,
                  Datam1.Query1.Fields[i].AsDateTime)

              end
              else
                StringGridReport.cells[i, Irows] := '';

            end;

        else
          StringGridReport.cells[i, Irows] := Datam1.Query1.Fields[i].AsString;
        end;
      end;

      Inputtime := Datam1.Query1.Fields[13].AsDateTime;
      approvetime := Datam1.Query1.Fields[14].AsDateTime;
      outputtime := Datam1.Query1.Fields[15].AsDateTime;
      Deadline := Datam1.Query1.Fields[17].AsDateTime;

      StringGridReport.cells[Datam1.Query1.Fields.Count, Irows] :=
        FloatToStr(Inputtime);
      StringGridReport.cells[Datam1.Query1.Fields.Count + 1, Irows] :=
        FloatToStr(approvetime);
      StringGridReport.cells[Datam1.Query1.Fields.Count + 2, Irows] :=
        FloatToStr(outputtime);
      StringGridReport.cells[Datam1.Query1.Fields.Count + 3, Irows] :=
        FloatToStr(Deadline);

      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;
    if Irows > 0 then
    begin
      StringGridReport.RowCount := Irows + 1;

    end;
  Finally

    StringGridReport.Visible := true;
    screen.Cursor := crdefault;
  end;

end;

procedure TFormMain.savereportdetails(filename: string);
var
  i, Y, fcol: Integer;
  statfile: Tstrings;
  T: string;
  separator: string;

begin
  try
    statfile := Tstringlist.Create;
    fcol := 1;
    if (Prefs.ReportIncludeHeaders) then
      fcol := 0;
    try
      if pos('TAB', Uppercase(Prefs.ReportSeparator)) > 0 then
        separator := #9
      else
        separator := Prefs.ReportSeparator;


      for Y := fcol to StringGridReport.RowCount - 1 do
      begin
        T := '';
        for i := 0 to Length(Prefs.SeparationsReportColumns) - 1 do
        begin
          if Prefs.SeparationsReportColumns[i] then
          begin
            T := T + StringGridReport.cells[i, Y] + separator;
          end;
        end;

        if Length(T) > 0 then
        begin
          Delete(T, Length(T), 1);
          statfile.Add(T);
        end;
        statfile.SaveToFile(filename);
      end;
    Except

    end;
  finally
    statfile.free;
  end;

end;

procedure TFormMain.Printreportdetails;
begin
  if Makereportdetails then
    RichEditprintreportdetails.Print('Plancenter report ' + DateTimeToStr(NOW));
end;

function TFormMain.Makereportdetails: Boolean;
Var
  i, Y: Integer;
  // oktodel : Boolean;
  // statfile : TStrings;
  T: string;
  Maxcolwidth: Array [0 .. 100] of Integer;
  // tabstring,tbs : String;
  L, fcol: Integer;
begin
  try
    fcol := 1;
    if (Prefs.ReportIncludeHeaders) then
      fcol := 0;

    result := false;
    RichEditprintreportdetails.Lines.Clear;
    try
      RichEditprintreportdetails.Paragraph.TabCount := 40;
      for i := 0 to 100 do
        Maxcolwidth[i] := 0;

      for Y := fcol to StringGridReport.RowCount - 1 do
      begin
        L := 0;
        for i := 0 to Length(Prefs.SeparationsReportColumns) - 1 do
        begin
          if StringGridReport.Canvas.TextWidth(StringGridReport.cells[i, Y]) + 8
            > Maxcolwidth[i] then
            Maxcolwidth[i] := StringGridReport.Canvas.TextWidth
              (StringGridReport.cells[i, Y]) + 8;
        end;
      end;
      L := 0;
      for i := 0 to Length(Prefs.SeparationsReportColumns) - 1 do
      begin
        if (Prefs.SeparationsReportColumns[i]) then
        begin
          RichEditprintreportdetails.Paragraph.Tab[i] := Maxcolwidth[i] + L;
          L := RichEditprintreportdetails.Paragraph.Tab[i];
        end;
      end;

      for Y := fcol to StringGridReport.RowCount - 1 do
      begin
        T := '';
        for i := 0 to Length(Prefs.SeparationsReportColumns) - 1 do
        begin
          if (Prefs.SeparationsReportColumns[i]) then
          begin
            if i > 0 then
            begin
              T := T + #9;
              (* if (y > 0) and (i = 9) then
                t := t + #9; *)
            end;

            T := T + StringGridReport.cells[i, Y];
          end;
        end;
        RichEditprintreportdetails.Lines.Add(T);

      end;

      result := true;

    Except

    end;
  finally

  end;
end;

procedure TFormMain.ActionplatetreelayoutExecute(Sender: TObject);
Var
  tmpl: string;
  i: Integer;
  runnode: TTreeNode;
  pressid: Integer;
  LocationID, pressrunid: Integer;
  Fromtemplateid, Fromtemplatelistid: Integer;
  Pressrunselstr: string;
  anode, n1, n2, n3: TTreeNode;
  ProductionID: Integer;
begin
  Fromtemplateid := 0;
  Fromtemplatelistid := 0;
  try
    if TreeViewPlateview.Selected = nil then
      exit;
    runnode := TreeViewPlateview.Selected;
    if runnode = nil then
      exit;
    if runnode.Level < 2 then
      exit;
    if runnode.Level < 2 then
      exit;
    Pressrunselstr := '(-48';
    ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;
    n1 := runnode;

    try
      anode := n1;
      if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
      begin
        if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
          Pressrunselstr) = 0 then
          Pressrunselstr := Pressrunselstr + ',' +
            IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
      end;
      n2 := n1.GetFirstChild;
      while n2 <> nil do
      begin
        anode := n2;
        if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
        begin
          if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
            Pressrunselstr) = 0 then
            Pressrunselstr := Pressrunselstr + ',' +
              IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
        end;

        n3 := n2.GetFirstChild;
        while n3 <> nil do
        begin
          anode := n3;
          if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
          begin
            if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
              Pressrunselstr) = 0 then
              Pressrunselstr := Pressrunselstr + ',' +
                IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
          end;
          n3 := n3.getNextSibling;
        end;
        n2 := n2.getNextSibling;
      end;

    except
    end;

    Pressrunselstr := Pressrunselstr + ') ';

    while runnode.Level > 1 do
      runnode := runnode.Parent;

    pressid := tNames1.pressnametoid(runnode.Parent.text);

    pressrunid := runnode.StateIndex;
    LocationID := tNames1.locationnametoid(ComboBoxpalocationNY.text);

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Select TOP 1 templateid from pagetable WITH (NOLOCK) ');
    Datam1.Query1.SQL.Add('Where active <> -999');
    // Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
    Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
    Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
    // if (locationid > 0) then
    // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(locationid));

    FormMain.Tryopen(Datam1.Query1);
    tmpl := '';
    if not Datam1.Query1.Eof then
    begin
      Fromtemplateid := Datam1.Query1.Fields[0].AsInteger;
      Fromtemplatelistid := inittypes.gettemplatenumberfromID(Fromtemplateid);
      tmpl := PlatetemplateArray[Fromtemplatelistid].TemplateName;
    end;
    Datam1.Query1.Close;

    inittypes.getdevicelistfromtemplate(Fromtemplatelistid);

    FormChlayout.Aktpressname := tNames1.pressnameIDtoname(pressid);
    FormChlayout.Curtemplate := PlatetemplateArray[Fromtemplatelistid]
      .TemplateName;

    FormChlayout.GroupBoxspecifikcopy.Visible := true;
    if FormChlayout.ShowModal = mrOK then
    begin
      if FormChlayout.Newtemplatelistid <> Fromtemplatelistid then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('update pagetable');
        Datam1.Query1.SQL.Add('set deviceid = 0');
        Datam1.Query1.SQL.Add(', templateid = ' +
          IntToStr(PlatetemplateArray[FormChlayout.Newtemplatelistid]
          .TemplateID));
        Datam1.Query1.SQL.Add('Where active <> -999');
        // Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
        Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
        Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
        // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(locationid));

        if FormChlayout.ComboBoxcopynumber.ItemIndex > 0 then
          Datam1.Query1.SQL.Add('and copynumber = ' +
            IntToStr(FormChlayout.ComboBoxcopynumber.ItemIndex));

        Datam1.Query1.SQL.Add(WeditionStr);
        trysql(Datam1.Query1);
      end;

    end;

  Finally
    if not loadplateview(true, false) then
      plateviewtreedeselect;
  end;
end;

procedure TFormMain.ActionfilespasteExecute(Sender: TObject);
begin
  beep;
end;

procedure TFormMain.ActionfilesmoveExecute(Sender: TObject);
begin
  beep;
end;

procedure TFormMain.PopupActionBarExpagetreePopup(Sender: TObject);
begin
  Popupmenunumber := 1;
end;

procedure TFormMain.PopupActionBarEx1PagesPopup(Sender: TObject);
begin
  Popupmenunumber := 2;
end;

procedure TFormMain.PopupActionBarExThumbtreePopup(Sender: TObject);
begin
  Popupmenunumber := 3;
end;

procedure TFormMain.PopupActionBarEx1ThumbnailsPopup(Sender: TObject);
begin
  Popupmenunumber := 4;
  ActionEnable('PopupActionBarEx1ThumbnailsPopup');
end;

procedure TFormMain.ActionfilescopyExecute(Sender: TObject);
begin
  FormCopyfileclip.Masterlist.Clear;

  try
    case Popupmenunumber of
      1:
        begin
          if TreeViewpagelist.Selected = nil then
            exit;
          if TreeViewpagelist.Selected.Level < 2 then
            exit;
          FormCopyfileclip.ShowModal;
        end;
      2:
        begin // pagelist
          if TreeViewpagelist.Selected = nil then
            exit;
          if TreeViewpagelist.Selected.Level < 2 then
            exit;
          FormCopyfileclip.ShowModal;
        end;
      3:
        begin
          if TreeViewThumbs.Selected = nil then
            exit;
          if TreeViewThumbs.Selected.Level < 2 then
            exit;
          FormCopyfileclip.ShowModal;
        end;
      4:
        begin
          beep;
        end;
    end;

  Finally
  end;
end;

procedure TFormMain.ActiontoolholdrelseExecute(Sender: TObject);
begin
  FormHoldrelesepubl.ShowModal;

  case PageControlMain.ActivePageIndex of
    VIEW_SEPARATIONS:
      begin
        Actionrefreshpages.Execute;
      end;
    VIEW_THUMBNAILS:
      begin
        ActionThumbnailrefresh.Execute;
      end;
    VIEW_PLATES:
      begin
        Actionplaterefresh.Execute;
      end;
    VIEW_PRODUCTIONS:
      begin
        ActionProgressrefresh.Execute;
      end;
  end;
end;

function TFormMain.Userloginonserver(Username: string; Password: string;
  _drvLetter: string; _netPath: string; _showError: Boolean;
  _reconnect: Boolean; showerror: Boolean): DWORD;
var
  nRes: TNetResource;
  errCode: DWORD;
  dwFlags: DWORD;
begin
  FillChar(nRes, SizeOf(nRes), #0);
  nRes.dwType := RESOURCETYPE_DISK;
  nRes.dwScope := RESOURCETYPE_ANY;
  nRes.dwDisplayType := RESOURCEDISPLAYTYPE_GENERIC;
  nRes.lpLocalName := PChar(_drvLetter);
  nRes.lpRemoteName := PChar(_netPath); { Example: \\Test\C }
  nRes.lpComment := nil;
  nRes.lpProvider := nil;
  if _reconnect then
    dwFlags := CONNECT_UPDATE_PROFILE and CONNECT_INTERACTIVE
  else
    dwFlags := CONNECT_INTERACTIVE;

  errCode := WNetAddConnection3(FormMain.Handle, nRes, PChar(Password),
    PChar(Username), dwFlags);
  if (errCode <> NO_ERROR) and (_showError) then
  begin
    if showerror then
    begin
      Application.MessageBox(PChar('An error occured while connecting:' + #13#10
        + SysErrorMessage(GetLastError)), 'Error while connecting!', MB_OK);
    end;
  end;
  result := errCode; { NO_ERROR }
end;

procedure TFormMain.StringGridprodsMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
Var
  i, i2: Integer;
  ACol, ARow: Integer;
  Apressid, lastselrow: Integer;

begin
  lastselrow := -1;
  i := 0;
  if Button = mbLeft then
  begin
    TStringGrid(Sender).MouseToCell(X, Y, ACol, ARow);
    if ssShift in Shift then
    begin

    end
    else
    begin
      if ssCtrl in Shift then
      begin
        StringGridprodsdata[ARow].Selected := not StringGridprodsdata[ARow].Selected;
        if Actionprodallcopies.Checked then
        begin
          for i2 := 1 to StringGridprods.RowCount do
          begin

            if StringGridprodsdata[i2].pressrunid = StringGridprodsdata[ARow].pressrunid
            then
            begin
              StringGridprodsdata[i2].Selected := StringGridprodsdata
                [ARow].Selected;
              GSelpubid := StringGridprodsdata[i2].Publicationid;
              GSelpubdate := StringGridprodsdata[i2].Pubdate;
              // SelectProductionTreeNode(GSelpubID, GSelPubDate);
            end;
          end;
        end;
        lastselrow := i;
      end
      else
      begin
        for i := 1 to StringGridprods.RowCount do
        begin
          StringGridprodsdata[i].Selected := false;
          if i = ARow then
          begin
            StringGridprodsdata[i].Selected := true;
            GSelpubid := StringGridprodsdata[i].Publicationid;
            GSelpubdate := StringGridprodsdata[i].Pubdate;
            // SelectProductionTreeNode(GSelpubID, GSelPubDate);
            lastselrow := i;
          end;
        end;

        if Actionprodallcopies.Checked then
        begin
          for i2 := 1 to StringGridprods.RowCount do
          begin

            if StringGridprodsdata[i2].pressrunid = StringGridprodsdata[ARow].pressrunid
            then
            begin
              StringGridprodsdata[i2].Selected := StringGridprodsdata
                [ARow].Selected;
              GSelpubid := StringGridprodsdata[i2].Publicationid;
              GSelpubdate := StringGridprodsdata[i2].Pubdate;
              // SelectProductionTreeNode(GSelpubID, GSelPubDate);
            end;
          end;
        end;
      end;
      StringGridprods.Repaint;
    end;
  end;

  ActionEnable('StringGridprodsMouseDown');
end;

procedure TFormMain.ActionprodchangepressExecute(Sender: TObject);
var
  stepcancel: Boolean;
  Newpressid, NewNmarkgroups, Newtemplatelistid, Newproductionid, stepi,
    stepres: Integer;
  Newmarkgroups: marksarray;
  Newplanname: String;

  pressid, pressrunid, LocationID, Publicationid, editionid: Integer;
  Pubdate: TDateTime;
  PagesAcross, PagesDown: Integer;
  npagesok: Boolean;
  IListNum, NListNums: Integer;
  ListNums: Array [1 .. 100] of Integer;
  fromlocationid, frompressid, Newlocationid: Integer;
  ic: Integer;
  OKtochange: Boolean;
  Newpressrunid, isec: Integer;
  INsections: String;

  Topressid, Aktsheet, aktsheetside: Integer;
  aktseparationset, Aktcopyflatseparationset: Integer;
  Ncolors, ncopiesonnewpress: Integer;
  removefromcopy: Integer;

begin
  PagesAcross := 1;
  PagesDown := 1;
  pressid := 0;
  pressrunid := 0;
  Ncolors := 0;
  try

    if TreeViewprodcontrol.Selected = nil then
      exit;
    if TreeViewprodcontrol.Selected.Level < 2 then
      exit;

    Aktsheet := -1;
    aktsheetside := -1;
    for IListNum := 1 to StringGridprods.RowCount do
    begin
      if StringGridprodsdata[IListNum].Selected then
      begin
        pressrunid := StringGridprodsdata[IListNum].pressrunid;
        pressid := StringGridprodsdata[IListNum].pressid;
        LocationID := StringGridprodsdata[IListNum].LocationID;
        Formnewlocation.aktlocation := tNames1.locationIDtoname(LocationID);
        Formnewlocation.aktpress := tNames1.pressnameIDtoname(StringGridprodsdata[IListNum].pressid);
        break;
      end;
    end;
    stepi := 1;
    stepcancel := false;

    frompressid := pressid;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Select TOP 1 p1.templateid,pt.PagesAcross,pt.PagesDown from pagetable p1 (nolock), TemplateConfigurations pt (nolock)');
    Datam1.Query1.SQL.Add('Where p1.templateid = pt.templateid');
    Datam1.Query1.SQL.Add('and pressrunid = ' + IntToStr(pressrunid));
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
    begin
      PagesAcross := Datam1.Query1.Fields[1].AsInteger;
      PagesDown := Datam1.Query1.Fields[2].AsInteger;
    end;
    Datam1.Query1.Close;
    stepres := mryes;
    Repeat
      case stepi of
        1:
          begin
            stepres := Formnewlocation.ShowModal;
          end;
        3:
          begin

            Formselecttemplate.Panelwizard.Visible := true;
            Formselecttemplate.Panel2.Visible := false;
            Formselecttemplate.Panel3.Visible := true;
            Formselecttemplate.Panel4.Visible := false;
            Formselecttemplate.Panelmovepress.Visible := false;
            Formselecttemplate.Aktpressname :=
              Formnewlocation.ComboBoxpress.text;
            Formselecttemplate.PagesAcross := PagesAcross;
            Formselecttemplate.PagesDown := PagesDown;
            Formselecttemplate.aktpressid := -1;
            Formselecttemplate.aktpublicationid := -1;

            stepres := Formselecttemplate.ShowModal;

            Formselecttemplate.Panel2.Visible := true;
            Formselecttemplate.Panel4.Visible := false;
            Formselecttemplate.Panelmovepress.Visible := false;
          end;
      end;

      case stepres of
        mryes:
          Inc(stepi);
        mrNo:
          begin
            Dec(stepi);
          end;
        mrcancel:
          stepcancel := true;
      end;

    Until (stepi = 0) or (stepi = 4) or (stepcancel);

    if (stepi = 4) And (not stepcancel) then
    begin

      Newlocationid := tNames1.locationnametoid
        (Formnewlocation.ComboBoxLocation.text);
      Newtemplatelistid := inittypes.gettemplatenumberfromID
        (Formselecttemplate.selectedtemplateid);
      NewNmarkgroups := Formselecttemplate.Nmarkgroups;
      Newmarkgroups := Formselecttemplate.markgroups;
      Newpressid := tNames1.pressnametoid(Formselecttemplate.Aktpressname);

      if FormMain.Setplanlock(true) then
      begin

        for IListNum := 1 to StringGridprods.RowCount do
        begin
          if StringGridprodsdata[IListNum].Selected then
          begin
            pressrunid := StringGridprodsdata[IListNum].pressrunid;
            pressid := StringGridprodsdata[IListNum].pressid;
            frompressid := pressid;
            LocationID := StringGridprodsdata[IListNum].LocationID;
            Newplanname := Formprodplan.createproductionname
              (StringGridprodsdata[IListNum].Publicationid, Newpressid,
              StringGridprodsdata[IListNum].Pubdate);

            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add
              ('Select TOP 1 pressrunid from pagetable (NOLOCK)');
            Datam1.Query1.SQL.Add('Where publicationid = ' +
              IntToStr(StringGridprodsdata[IListNum].Publicationid));
            Datam1.Query1.SQL.Add('and editionid = ' +
              IntToStr(StringGridprodsdata[IListNum].Publicationid));
            Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
              StringGridprodsdata[IListNum].Pubdate));
            Datam1.Query1.SQL.Add('and copynumber = ' +
              IntToStr(StringGridprodsdata[IListNum].copynumber));
            Datam1.Query1.SQL.Add(' and pressid = ' + IntToStr(Newpressid));
            Datam1.Query1.Open;
            OKtochange := Datam1.Query1.Eof;
            Datam1.Query1.Close;

            if OKtochange then
            begin
              Newproductionid := tNames1.productionrunnametoid(Newplanname);
              if Newproductionid = -1 then
                tNames1.Addname(9, Newplanname);
              Newproductionid := tNames1.productionrunnametoid(Newplanname);

              INsections := 'and Sectionid IN (';
              for isec := 1 to StringGridprodsdata[IListNum].NSectionids do
              begin
                INsections := INsections +
                  IntToStr(StringGridprodsdata[IListNum].Sectionids[isec]);
                if isec < StringGridprodsdata[IListNum].NSectionids then
                  INsections := INsections + ',';
              end;
              INsections := INsections + ')';

              Newpressrunid := -1;
              Datam1.Query1.SQL.Clear;
              Datam1.Query1.SQL.Add
                ('Select TOP 1 pressrunid from pagetable (NOLOCK)');
              Datam1.Query1.SQL.Add('Where publicationid = ' +
                IntToStr(StringGridprodsdata[IListNum].Publicationid));
              Datam1.Query1.SQL.Add('and editionid = ' +
                IntToStr(StringGridprodsdata[IListNum].editionid));
              Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
                StringGridprodsdata[IListNum].Pubdate));
              Datam1.Query1.SQL.Add(' and pressid = ' + IntToStr(Newpressid));
              Datam1.Query1.SQL.Add(INsections);
              // check sections
              if Prefs.Debug then
                Datam1.Query1.SQL.SaveToFile
                  (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
                  'sqllogs\' + 'ChangepressNpressrunid.SQL');
              Aktcopyflatseparationset := 0;
              Datam1.Query1.Open;
              if not Datam1.Query1.Eof then
              begin
                Newpressrunid := Datam1.Query1.Fields[0].AsInteger;
              end;
              Datam1.Query1.Close;
              ncopiesonnewpress := 1;
              Newlocationid := tNames1.locationnametoid
                (Formnewlocation.ComboBoxLocation.text);

              // get new PressRunID..
              if Newpressrunid = -1 then
              begin
                Datam1.Query1.SQL.Clear;
                Datam1.Query1.SQL.Add
                  ('Select MAX( pressrunid) from pagetable WITH (NOLOCK)');
                Datam1.Query1.Open;
                if not Datam1.Query1.Eof then
                begin
                  Newpressrunid := Datam1.Query1.Fields[0].AsInteger + 2;
                end;
                Datam1.Query1.Close;
              end
              else
              begin
                Datam1.Query1.SQL.Clear;
                Datam1.Query1.SQL.Add
                  ('Select MAX( copynumber) from pagetable (NOLOCK)');
                Datam1.Query1.SQL.Add('Where pressrunid = ' +
                  IntToStr(Newpressrunid));
                Datam1.Query1.Open;
                if not Datam1.Query1.Eof then
                begin
                  ncopiesonnewpress := Datam1.Query1.Fields[0].AsInteger + 1;
                end;
                Datam1.Query1.Close;
              end;
              aktseparationset := -1;

              if ncopiesonnewpress > 1 then
              begin
                removefromcopy := StringGridprodsdata[IListNum].copynumber;
                addcopytopressrun(Newpressrunid);
                Datam1.Query1.SQL.Add('delete pagetable');
                Datam1.Query1.SQL.Add('where Pressrunid = ' +
                  IntToStr(pressrunid));
                Datam1.Query1.SQL.Add('and Copynumber = ' +
                  IntToStr(removefromcopy));
                trysql(Datam1.Query1);
                Datam1.Query1.SQL.Clear;
              end
              else
              begin
                Datam1.Query1.SQL.Clear;
                Datam1.Query1.SQL.Add('Select ' + Allpagetablestr +
                  ' from pagetable (NOLOCK)');
                Datam1.Query1.SQL.Add('Where Pressrunid = ' +
                  IntToStr(pressrunid));
                Datam1.Query1.SQL.Add('and Copynumber = ' +
                  IntToStr(StringGridprodsdata[IListNum].copynumber));
                Datam1.Query1.SQL.Add
                  ('Order by sheetnumber,sheetside,PagePosition,separationset,colorid');
                Datam1.Query1.Open;
                while not Datam1.Query1.Eof do
                begin
                  if aktseparationset <> Datam1.Query1.FieldByName
                    ('separationset').AsInteger then
                  begin
                    aktseparationset := Datam1.Query1.FieldByName
                      ('separationset').AsInteger;
                    Datam1.Query3.SQL.Clear;
                    Datam1.Query3.SQL.Add
                      ('Select count(separation) from pagetable (NOLOCK)');
                    Datam1.Query3.SQL.Add('Where separationset = ' +
                      IntToStr(aktseparationset));
                    Datam1.Query3.Open;
                    Ncolors := Datam1.Query3.Fields[0].AsInteger;
                    Datam1.Query3.Close;
                  end;

                  Datam1.Query2.SQL.Clear;
                  Datam1.Query2.SQL.Add
                    ('Exec spPlancenterImportCenterAddSeparation3');
                  Datam1.Query2.SQL.Add('@PageCountChanged=0');
                  Datam1.Query2.SQL.Add(',@KeepColors=1');
                  Datam1.Query2.SQL.Add(',@KeepApproval=1');
                  Datam1.Query2.SQL.Add(',@KeepUnique=1');
                  Datam1.Query2.SQL.Add(',@UseMainLocation=1');
                  if (Aktsheet <> Datam1.Query1.FieldByName('sheetnumber')
                    .AsInteger) or
                    (aktsheetside <> Datam1.Query1.FieldByName('sheetside')
                    .AsInteger) then
                  begin
                    Aktsheet := Datam1.Query1.FieldByName('sheetnumber')
                      .AsInteger;
                    aktsheetside := Datam1.Query1.FieldByName('sheetside')
                      .AsInteger;
                    Datam1.Query2.SQL.Add(',@FirstPagePosition=1');
                  end
                  else
                    Datam1.Query2.SQL.Add(',@FirstPagePosition=0');

                  Datam1.Query2.SQL.Add(',@CopyFlatSeparationSet=' + IntToStr(Aktcopyflatseparationset));
                  Datam1.Query2.SQL.Add(',@NumberOfColors = ' + IntToStr(Ncolors));
                  Datam1.Query2.SQL.Add(',@Copies = ' + IntToStr(ncopiesonnewpress));
                  Datam1.Query2.SQL.Add(',@PublicationID = ' +
                    IntToStr(Datam1.Query1.FieldByName('Publicationid')
                    .AsInteger));
                  Datam1.Query2.SQL.Add(',@SectionID = ' +
                    IntToStr(Datam1.Query1.FieldByName('sectionid').AsInteger));
                  Datam1.Query2.SQL.Add(',@EditionID = ' +
                    IntToStr(Datam1.Query1.FieldByName('editionid').AsInteger));
                  Datam1.Query2.SQL.Add(',@IssueID  = ' +
                    IntToStr(Datam1.Query1.FieldByName('issueid').AsInteger));
                  Datam1.Query2.SQL.Add(',@PubDate = :pubdate');
                  Datam1.Query2.SQL.Add(',@PageName = ' + '''' +
                    Datam1.Query1.FieldByName('pagename').AsString + '''');
                  Datam1.Query2.SQL.Add(',@ColorID = ' +
                    IntToStr(Datam1.Query1.FieldByName('colorid').AsInteger));
                  Datam1.Query2.SQL.Add(',@TemplateID = ' +
                    IntToStr(Formselecttemplate.selectedtemplateid));
                  Datam1.Query2.SQL.Add(',@ProofID = ' +
                    IntToStr(Datam1.Query1.FieldByName('proofid').AsInteger));
                  Datam1.Query2.SQL.Add(',@DeviceID = 0');
                  Datam1.Query2.SQL.Add(',@Version = ' +
                    IntToStr(Datam1.Query1.FieldByName('version').AsInteger));
                  Datam1.Query2.SQL.Add(',@Pagination = ' +
                    IntToStr(Datam1.Query1.FieldByName('pagination')
                    .AsInteger));
                  Datam1.Query2.SQL.Add(',@Approval = ' +
                    IntToStr(Datam1.Query1.FieldByName('Approved').AsInteger));
                  Datam1.Query2.SQL.Add
                    (',@Hold = ' + IntToStr(Datam1.Query1.FieldByName('hold')
                    .AsInteger));
                  Datam1.Query2.SQL.Add
                    (',@Active = ' +
                    IntToStr(Datam1.Query1.FieldByName('active').AsInteger));
                  Datam1.Query2.SQL.Add(',@Priority = ' +
                    IntToStr(Datam1.Query1.FieldByName('priority').AsInteger));
                  Datam1.Query2.SQL.Add(',@PagePositions = ' + '''' +
                    Datam1.Query1.FieldByName('pagepositions').AsString + '''');
                  Datam1.Query2.SQL.Add(',@PageType = ' +
                    IntToStr(Datam1.Query1.FieldByName('pagetype').AsInteger));
                  Datam1.Query2.SQL.Add(',@PagesOnPlate = ' +
                    IntToStr(PlatetemplateArray[Newtemplatelistid].NupOnplate));
                  Datam1.Query2.SQL.Add(',@SheetNumber = ' +
                    IntToStr(Datam1.Query1.FieldByName('sheetnumber')
                    .AsInteger));
                  Datam1.Query2.SQL.Add(',@SheetSide = ' +
                    IntToStr(Datam1.Query1.FieldByName('sheetside').AsInteger));
                  Datam1.Query2.SQL.Add(',@PressId = ' + IntToStr(Newpressid));
                  Datam1.Query2.SQL.Add(',@PressSectionNumber = ' +
                    IntToStr(Datam1.Query1.FieldByName('presssectionnumber')
                    .AsInteger));
                  Datam1.Query2.SQL.Add(',@SortingPosition = ' + '''' +
                    Datam1.Query1.FieldByName('SortingPosition')
                    .AsString + '''');
                  Datam1.Query2.SQL.Add(',@PressTower = ' + '''' +
                    Datam1.Query1.FieldByName('PressTower').AsString + '''');
                  Datam1.Query2.SQL.Add(',@PressZone = ' + '''' +
                    Datam1.Query1.FieldByName('PressZone').AsString + '''');
                  Datam1.Query2.SQL.Add(',@PressCylinder = ' + '''' +
                    Datam1.Query1.FieldByName('PressCylinder').AsString + '''');
                  Datam1.Query2.SQL.Add(',@PressHighlow = ' + '''' +
                    Datam1.Query1.FieldByName('PressHighlow').AsString + '''');
                  Datam1.Query2.SQL.Add(',@ProductionID = ' +
                    IntToStr(Newproductionid));
                  Datam1.Query2.SQL.Add(',@PressrunID = ' +
                    IntToStr(Newpressrunid));
                  Datam1.Query2.SQL.Add(',@PlanPageName = ' + '''' +
                    Datam1.Query1.FieldByName('PlanPageName').AsString + '''');
                  Datam1.Query2.SQL.Add(',@IssueSequenceNumber = ' +
                    IntToStr(Datam1.Query1.FieldByName('issuesequencenumber')
                    .AsInteger));
                  Datam1.Query2.SQL.Add(',@UniquePage = ' +
                    IntToStr(Datam1.Query1.FieldByName('uniquepage')
                    .AsInteger));
                  Datam1.Query2.SQL.Add(',@LocationID = ' +
                    IntToStr(Newlocationid));
                  Datam1.Query2.SQL.Add(',@FlatProofID = ' +
                    IntToStr(Datam1.Query1.FieldByName
                    ('FlatProofConfigurationID').AsInteger));
                  Datam1.Query2.SQL.Add(',@Creep = :creep');
                  Datam1.Query2.SQL.Add(',@MarkGroups = ' + '''' +
                    Datam1.Query1.FieldByName('MarkGroups').AsString + '''');
                  Datam1.Query2.SQL.Add(',@PageIndex = ' +
                    IntToStr(Datam1.Query1.FieldByName('pageindex').AsInteger));
                  Datam1.Query2.SQL.Add(',@HardProofID = ' +
                    IntToStr(Datam1.Query1.FieldByName
                    ('HardProofConfigurationID').AsInteger));
                  Datam1.Query2.SQL.Add(',@DeadLine = :DeadLine');
                  Datam1.Query2.SQL.Add(',@Comment = ' + '''' +
                    Datam1.Query1.FieldByName('Comment').AsString + '''');
                  Datam1.Query2.SQL.Add(',@MasterEditionID = ' +
                    IntToStr(Datam1.Query1.FieldByName('Editionid').AsInteger));
                  Datam1.Query2.SQL.Add(',@MasterLocationID = ' +
                    IntToStr(Datam1.Query1.FieldByName('Locationid')
                    .AsInteger));
                  Datam1.Query2.SQL.Add(',@ColorIndex  = ' +
                    IntToStr(Datam1.Query1.FieldByName('Colorid').AsInteger));
                  Datam1.Query2.SQL.Add(',@CopiesToProduce= 1');
                  Datam1.Query2.SQL.Add(',@Miscint1= ' +
                    Datam1.Query1.FieldByName('Miscint1').AsString);
                  Datam1.Query2.SQL.Add(',@Miscint2= ' +
                    Datam1.Query1.FieldByName('Miscint2').AsString);
                  Datam1.Query2.SQL.Add(',@Miscint3= ' +
                    Datam1.Query1.FieldByName('Miscint3').AsString);
                  Datam1.Query2.SQL.Add(',@Miscint4= ' +
                    Datam1.Query1.FieldByName('Miscint4').AsString);
                  Datam1.Query2.SQL.Add(',@Miscstring1= ' + '''' +
                    Datam1.Query1.FieldByName('Miscstring1').AsString + '''');
                  Datam1.Query2.SQL.Add(',@Miscstring2= ' + '''' +
                    Datam1.Query1.FieldByName('Miscstring2').AsString + '''');
                  Datam1.Query2.SQL.Add(',@Miscstring3= ' + '''' +
                    Datam1.Query1.FieldByName('Miscstring3').AsString + '''');
                  Datam1.Query2.SQL.Add(',@Miscdate= :miscdate');

                  if (spPlancenterImportCenterAddSeparation3PageCategoryParamPossible)
                  then
                  begin
                    Datam1.Query2.SQL.Add(',@PageFormatID= ' +
                      Datam1.Query1.FieldByName('PageFormatID').AsString);
                    Datam1.Query2.SQL.Add(',@RipSetupID= ' +
                      Datam1.Query1.FieldByName('RipSetupID').AsString);
                    Datam1.Query2.SQL.Add(',@FanoutID=0');
                    Datam1.Query2.SQL.Add(',@PageCategoryID= ' +
                      Datam1.Query1.FieldByName('PageCategoryID').AsString);
                  end;

                  Datam1.Query2.parambyname('miscdate').AsDateTime :=
                    Datam1.Query1.FieldByName('miscdate').AsDateTime;
                  Datam1.Query2.parambyname('pubdate').AsDateTime :=
                    Datam1.Query1.FieldByName('Pubdate').AsDateTime;
                  Datam1.Query2.parambyname('DeadLine').AsDateTime :=
                    Datam1.Query1.FieldByName('DeadLine').AsDateTime;
                  Datam1.Query2.parambyname('Creep').AsFloat :=
                    Datam1.Query1.FieldByName('creep').AsFloat;

                  if Prefs.Debug then
                    Datam1.Query2.SQL.SaveToFile
                      (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory())
                      + 'sqllogs\' + 'spimport.SQL');
                  Datam1.Query2.Open;
                  Aktcopyflatseparationset := Datam1.Query2.Fields[1].AsInteger;
                  Datam1.Query2.Close;
                  Datam1.Query1.Next;
                end;
                Datam1.Query1.Close;
              end;
              Datam1.Query1.SQL.Clear;

              Datam1.Query1.SQL.Add('delete pagetable');
              Datam1.Query1.SQL.Add('where Pressrunid = ' +
                IntToStr(pressrunid));
              Datam1.Query1.SQL.Add('and Copynumber = ' +
                IntToStr(StringGridprodsdata[IListNum].copynumber));
              trysql(Datam1.Query1);
              Datam1.Query1.SQL.Clear;

              // dodalim(2,frompressid,newpressid,false,Newpressrunid);
            end;

          end;
        end;
      end;

      // ## NAN 20150222
      // if (Newproductionid > 0) AND (Prefs.PressSpecificd) then
      // begin

      // end

    end;
  finally
    Setplanlock(false);
    Newrefreshprogress;
    ActionEnable('ActionprodchangepressExecute');
  end;
end;

procedure TFormMain.ActionrefreshhedtreeExecute(Sender: TObject);
begin
  loadAPagetree(TreeViewNeweddtree, '', '', ComboBoxpalocationNY.text,
    ComboBoxGlobalPubDateFilter.text);
end;

procedure TFormMain.TreeViewNeweddtreeChange(Sender: TObject; Node: TTreeNode);
var
  N: TTreeNode;
  isone: Boolean;
  LocationID: Integer;
  Pubdate: TDateTime;
  Publicationid: Integer;
  editionid: Integer;
  ProductionID: Integer;
  Sectionid: Integer;
begin
  try
    GSelpubdate := 0;
    GSelpubid := -1;
    N := TreeViewNeweddtree.Selected;
    while N.Level > 0 do
    begin
      case TTreeViewpagestype(N.Data^).kind of
        // 0=all,1=location,2=publication,pubdate,3=issue,4=edition,5=section
        1:
          GSelpubdate := TTreeViewpagestype(N.Data^).Pubdate;
        2:
          GSelpubid := TTreeViewpagestype(N.Data^).Publicationid;
      end;
      N := N.Parent;
    end;
  Except
  end;

  try
    Savekeeptrees(ComboBoxpalocationNY.text, TreeViewNeweddtree);
    ListViewEdto.Items.Clear;
    ListViewedfrom.Items.Clear;
    ListViewEdtodink.Items.Clear;
    if TreeViewNeweddtree.Selected <> nil then
    begin
      if TreeViewNeweddtree.Selected.Level < 1 then
      begin
      end
      else
      begin
        isone := true;

        if TreeViewNeweddtree.Selected.Level < 5 then
        begin
          if TreeViewNeweddtree.Selected.Count > 1 then
            isone := false;
          if (TreeViewNeweddtree.Selected.HasChildren) then
          begin

            N := TreeViewNeweddtree.Selected.GetFirstChild;
            while N.HasChildren do
            begin
              if N.Count > 1 then
                isone := false;
              N := N.GetFirstChild;
            end;
          end;
        end;

      end;

      if TreeViewNeweddtree.Selected.Level > 2 then
      begin
        if Getedtreedata(LocationID, Pubdate, Publicationid, editionid,
                                  ProductionID, Sectionid) then
          loadedition(LocationID, Pubdate, Publicationid, editionid,
            ProductionID, Sectionid);

      End
      else
      begin

      end;
    end;

    ActionEnable('TreeViewNeweddtreeChange');
  except
  end;
end;

function TFormMain.Getedtreedata(Var LocationID: Integer;
  Var Pubdate: TDateTime; Var Publicationid: Integer; Var editionid: Integer;
  Var ProductionID: Integer; Var Sectionid: Longint): Boolean;
var
  fromlevel, fromnode, fromsel, N: TTreeNode;

begin
  result := false;

  LocationID := -1;
  Publicationid := -1;
  editionid := -1;
  Sectionid := -1;
  if TreeViewNeweddtree.Items.Count < 2 then
    exit;
  if TreeViewNeweddtree.Selected <> nil then
  begin
    if TreeViewNeweddtree.Selected.Level <= 2 then
      exit;
    LocationID := tNames1.locationnametoid
      (ComboBoxpalocationNY.Items[ComboBoxpalocationNY.ItemIndex]);

    fromnode := TreeViewNeweddtree.Selected;
    fromsel := TreeViewNeweddtree.Selected;
    fromlevel := fromsel;
    while fromlevel.Level > 5 do
      fromlevel := fromlevel.Parent;

    N := fromlevel;

    while N.Level > 0 do
    begin
      case TTreeViewpagestype(N.Data^).kind of
        1:
          begin
            Pubdate := TTreeViewpagestype(N.Data^).Pubdate;
          end;
        2:
          begin
            Publicationid := TTreeViewpagestype(N.Data^).Publicationid;
            ProductionID := TTreeViewpagestype(N.Data^).ProductionID;

          end;

        4:
          begin
            editionid := TTreeViewpagestype(N.Data^).editionid;
          end;
        5:
          Sectionid := TTreeViewpagestype(N.Data^).Sectionid;

      end;
      N := N.Parent;
    end;
  end;
  result := (LocationID <> -1) And (Publicationid <> -1) And (editionid <> -1);
end;

procedure TFormMain.loadedition(LocationID: Integer; Pubdate: TDateTime;
  Publicationid: Integer; editionid: Integer; ProductionID: Integer;
  Sectionid: Longint);
Var
  i: Integer;

  wherestr, wherejustpub, akteditionname: string;
  L: TListItem;
  Pedition: ^editiontype;
  Akteditionid: Integer;
  CanBeTimmed, istimed: Boolean;

  Tozone: Integer;
  TimedTo: Integer;
  TimedFrom: Integer;
  LocationIDSelected: Integer;
  PressIDSelected : Integer;
begin
  PressIDSelected := 0;
  ListViewEdto.Items.Clear;
  ListViewedfrom.Items.Clear;
  ListViewEdtodink.Items.Clear;

  wherejustpub := 'Where active = 1 ';
  wherestr := 'Where locationid = ' + IntToStr(LocationID);

  wherestr := wherestr + ' and ' + Datam1.makedatastr('', Pubdate);
  wherejustpub := wherejustpub + ' and ' + Datam1.makedatastr('', Pubdate);
  FormAddeditionview.wherestr := wherejustpub;
  editionlogpubdate := Pubdate;

  editionlogpublicationid := Publicationid;
  wherestr := wherestr + ' and publicationid = ' + IntToStr(Publicationid);
  wherejustpub := wherejustpub + ' and publicationid = ' +
    IntToStr(Publicationid);
  FormAddeditionview.wherestr := wherejustpub;

  wherestr := wherestr + ' and editionid = ' + IntToStr(editionid);

  if (Prefs.PressSpecific) then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Select TOP 1 PressID FROM Pagetable WITH (NOLOCK) ');
    Datam1.Query1.SQL.Add('Where Productionid = ' + IntToStr(ProductionID));
    Tryopen(Datam1.Query1);
    if not Datam1.Query1.Eof then
      PressIDSelected := Datam1.Query1.Fields[0].AsInteger;
    Datam1.Query1.Close();

    wherestr := wherestr + ' and PressID = ' + IntToStr(PressIDSelected);
  end;

  akteditionname := tNames1.editionIDtoname(editionid);

  if (Sectionid <> -1) and (Prefs.EditionViewOnlySecInEd) then
  begin
    wherestr := wherestr + ' and Sectionid = ' + IntToStr(Sectionid);
  end;

  Akteditionid := tNames1.editionnametoid(akteditionname);

  wherestr := wherestr + ' and copynumber = 1 and pagetype < 3';
  wherejustpub := wherejustpub + ' and uniquepage = 1 ';

  istimed := false;
  CanBeTimmed := false;

  TimedTo := 0;
  TimedFrom := 0;
  Tozone := 0;
  if (TimedEdPossible) then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select TOP 1 p.pressrunid,pr.TimedEditionTo,pr.TimedEditionState,pr.TimedEditionFrom,pr.tozone from pagetable p (NOLOCK), pressrunid pr (NOLOCK) ');
    Datam1.Query1.SQL.Add('Where p.productionid = ' + IntToStr(ProductionID));
    Datam1.Query1.SQL.Add('And p.editionid = ' + IntToStr(editionid));
    Datam1.Query1.SQL.Add('And (pr.TimedEditionTo > 0 or pr.TimedEditionFrom > 0)');
    Datam1.Query1.SQL.Add('And pr.pressrunid = p.pressrunid');

    Tryopen(Datam1.Query1);
    if not Datam1.Query1.Eof then
    begin
      istimed := (Datam1.Query1.Fields[2].AsInteger > 0) or
        (Datam1.Query1.Fields[3].AsInteger > 0);
      CanBeTimmed := Datam1.Query1.Fields[1].AsInteger > 0;
      TimedTo := Datam1.Query1.Fields[1].AsInteger;
      TimedFrom := Datam1.Query1.Fields[3].AsInteger;
      Tozone := Datam1.Query1.Fields[4].AsInteger;
    end;
    Datam1.Query1.Close;

    if (not istimed) and (CanBeTimmed) And (Prefs.TimedEditionRule < 3) then
    begin
      (*
        All plates are imaged
        All pages are received and approved
        All pages are received
        no rule (not recommended)
      *)

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Select top 1 copyseparationset from pagetable (NOLOCK)');
      Datam1.Query1.SQL.Add('Where productionid = ' + IntToStr(ProductionID));
      Datam1.Query1.SQL.Add('And editionid = ' + IntToStr(editionid));
      Datam1.Query1.SQL.Add('And active = 1');
      Datam1.Query1.SQL.Add('And pagetype <> 3');

      case (Prefs.TimedEditionRule) of
        0:
          begin
            Datam1.Query1.SQL.Add('and (status < 50)');
          end;
        1:
          begin
            // -1 = autoapproved, 0= not approved , 1 = approved, 2 = disapproved
            Datam1.Query1.SQL.Add('and (status < 30 or approved in (0,2))');
          end;
        2:
          begin
            Datam1.Query1.SQL.Add('and (status < 30)');
          end;

      end;
      Tryopen(Datam1.Query1);

      if not Datam1.Query1.Eof then
      begin
        CanBeTimmed := false;
      end;
      Datam1.Query1.Close;
    end;
  end;

  Datam1.Query1.SQL.Clear;
  // 0           1       2            3                     4         5          6                  7           8       9
  Datam1.Query1.SQL.Add
    ('Select distinct sectionid,pagename,pageindex,mastercopyseparationset,uniquepage,locationid,copyseparationset,pressrunid,pressid,productionid from pagetable (NOLOCK)');
  Datam1.Query1.SQL.Add(wherestr);
  Datam1.Query1.SQL.Add('Order by pressrunid,sectionid,pageindex');
  Datam1.Query1.Open;

  if Prefs.Debug then
    Datam1.Query1.SQL.SaveToFile
      (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
      'Geteitionpages.SQL');

  ListViewEdto.Items.Clear;
  ListViewEdtodink.Items.Clear;
  while not Datam1.Query1.Eof do
  begin
    L := ListViewEdto.Items.Add;
    new(Pedition);
    L.Data := Pedition;
    editiontype(L.Data^).TimedFrom := TimedFrom;
    editiontype(L.Data^).TimedTo := TimedTo;
    editiontype(L.Data^).istimed := istimed;
    editiontype(L.Data^).Unique := Datam1.Query1.Fields[4].AsInteger;
    editiontype(L.Data^).Changeto := -1;
    editiontype(L.Data^).adding := false;
    editiontype(L.Data^).mastercopyseparationset := Datam1.Query1.Fields[3]
      .AsInteger;
    editiontype(L.Data^).copyseparationset := Datam1.Query1.Fields[6].AsInteger;

    editiontype(L.Data^).pressrunid := Datam1.Query1.Fields[7].AsInteger;
    editiontype(L.Data^).ProductionID := Datam1.Query1.Fields[9].AsInteger;
    editiontype(L.Data^).Mastereditionid := Akteditionid;
    editiontype(L.Data^).Masterlocationid := Datam1.Query1.Fields[5].AsInteger;
    editiontype(L.Data^).editionid := Akteditionid;
    editiontype(L.Data^).LocationID := Datam1.Query1.Fields[5].AsInteger;
    editiontype(L.Data^).Sectionid := Datam1.Query1.Fields[0].AsInteger;
    editiontype(L.Data^).pressid := Datam1.Query1.Fields[8].AsInteger;
    editiontype(L.Data^).OrgMasterpressid := Datam1.Query1.Fields[8].AsInteger;
    editiontype(L.Data^).OrgMasterlocationid := Datam1.Query1.Fields[5]
      .AsInteger;
    editiontype(L.Data^).OrgMastereditionid := Akteditionid;
    editiontype(L.Data^).OrgMastersectionid := Datam1.Query1.Fields[0]
      .AsInteger;
    editiontype(L.Data^).Orgmastercopyseparationset := Datam1.Query1.Fields[3]
      .AsInteger;
    editiontype(L.Data^).Orgpagemasterpagename := Datam1.Query1.Fields
      [1].AsString;

    L.caption := tNames1.sectionidtoname(Datam1.Query1.Fields[0].AsInteger);
    L.SubItems.Add(Datam1.Query1.Fields[1].AsString);
    if Datam1.Query1.Fields[4].AsInteger = 1 then // Unique!
    begin
      L.SubItems.Add(tNames1.pressnameIDtoname(editiontype(L.Data^).pressid));
      L.SubItems.Add(akteditionname);
      L.SubItems.Add(tNames1.sectionidtoname(editiontype(L.Data^).Sectionid));
      L.SubItems.Add(Datam1.Query1.Fields[1].AsString);
      if Tozone > 0 then
        L.SubItems.Add(tNames1.editionIDtoname(Tozone))
      else
        L.SubItems.Add('');
      L.ImageIndex := 0;
    end
    else
    begin
      L.SubItems.Add(tNames1.pressnameIDtoname(editiontype(L.Data^).pressid));
      L.SubItems.Add(Datam1.Query1.Fields[3].AsString);
      L.SubItems.Add('');
      L.SubItems.Add('');
      if Tozone > 0 then
        L.SubItems.Add(tNames1.editionIDtoname(Tozone))
      else
        L.SubItems.Add('');

      L.ImageIndex := 2;

    end;
    Datam1.Query1.Next;
  end;
  Datam1.Query1.Close;

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('Select distinct editionid,mastercopyseparationset,uniquepage,locationid,pagename,sectionid,pressid,productionid from pagetable (NOLOCK)');
  Datam1.Query1.SQL.Add(wherejustpub);

  LocationIDSelected := GetSelectedLocationID();

  if (Prefs.PressSpecific) and (PressIDSelected > 0) then
    Datam1.Query1.SQL.Add('and pressID = ' + IntToStr(PressIDSelected));
  Datam1.Query1.SQL.Add('Order by mastercopyseparationset');

  if Prefs.Debug then
    Datam1.Query1.SQL.SaveToFile
      (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
      'GetOrgeitionpages.SQL');
  Datam1.Query1.Open;

  while not Datam1.Query1.Eof do
  begin
    for i := 0 to ListViewEdto.Items.Count - 1 do
    begin
      if ListViewEdto.Items[i].SubItems[3] = '' then
      begin
        if (Datam1.Query1.Fields[1].AsString = ListViewEdto.Items[i].SubItems[2])
        then
        begin
          ListViewEdto.Items[i].SubItems[2] :=
            tNames1.editionIDtoname(Datam1.Query1.Fields[0].AsInteger);
          // ListViewEdto.Items[i].SubItems[1] := tnames1.pressnameIDtoname(Datam1.Query1.Fields[6].AsInteger);
          editiontype(ListViewEdto.Items[i].Data^).mastercopyseparationset :=
            Datam1.Query1.Fields[1].AsInteger;
          editiontype(ListViewEdto.Items[i].Data^).Masterlocationid :=
            Datam1.Query1.Fields[3].AsInteger;
          editiontype(ListViewEdto.Items[i].Data^).Mastereditionid :=
            Datam1.Query1.Fields[0].AsInteger;
          editiontype(ListViewEdto.Items[i].Data^).Masterlocationid :=
            Datam1.Query1.Fields[3].AsInteger;
          editiontype(ListViewEdto.Items[i].Data^).OrgMasterpressid :=
            Datam1.Query1.Fields[6].AsInteger;
          editiontype(ListViewEdto.Items[i].Data^).OrgMasterlocationid :=
            Datam1.Query1.Fields[3].AsInteger;
          editiontype(ListViewEdto.Items[i].Data^).OrgMastereditionid :=
            Datam1.Query1.Fields[0].AsInteger;
          editiontype(ListViewEdto.Items[i].Data^).OrgMastersectionid :=
            Datam1.Query1.Fields[5].AsInteger;
          editiontype(ListViewEdto.Items[i].Data^).Orgmastercopyseparationset :=
            Datam1.Query1.Fields[1].AsInteger;
          editiontype(ListViewEdto.Items[i].Data^).Orgpagemasterpagename :=
            Datam1.Query1.Fields[4].AsString;
          editiontype(ListViewEdto.Items[i].Data^).TimedFrom := TimedFrom;
          editiontype(ListViewEdto.Items[i].Data^).TimedTo := TimedTo;
          editiontype(ListViewEdto.Items[i].Data^).istimed := istimed;
         // if (Prefs.PressSpecific = true) then
          editiontype(ListViewEdto.Items[i].Data^).ProductionID :=
              Datam1.Query1.Fields[7].AsInteger;;

          ListViewEdto.Items[i].SubItems[3] :=
            tNames1.sectionidtoname(Datam1.Query1.Fields[5].AsInteger);
          ListViewEdto.Items[i].SubItems[4] := Datam1.Query1.Fields[4].AsString;
        end;
      end;
    end;
    Datam1.Query1.Next;
  end;
  Datam1.Query1.Close;

  ListViewedfrom.Items.Clear;
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('Select distinct locationid,editionid,sectionid,pagename,mastercopyseparationset,pageindex,copyseparationset,pressid,pressrunid from pagetable (NOLOCK)');
  Datam1.Query1.SQL.Add(wherejustpub);
  if (Prefs.EditionViewOnlySecInEd) and (Sectionid <> -1) then
    Datam1.Query1.SQL.Add('and Sectionid = ' + IntToStr(Sectionid));

  Datam1.Query1.SQL.Add('and mastercopyseparationset < 50000');

  if (Prefs.PressSpecific) AND (PressIDSelected>0) then //and (LocationIDSelected > 0) then
//    Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(LocationIDSelected));
     Datam1.Query1.SQL.Add('and pressID = ' + IntToStr(PressIDSelected));

  Datam1.Query1.SQL.Add ('Order by locationid,pressid,editionid,sectionid,pageindex');
  if Prefs.Debug then
    Datam1.Query1.SQL.SaveToFile
      (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
      'Seluniqueed.SQL');

  Datam1.Query1.Open;
  while not Datam1.Query1.Eof do
  begin
    L := ListViewedfrom.Items.Add;
    new(Pedition);
    L.Data := Pedition;
    editiontype(L.Data^).Unique := 1;
    editiontype(L.Data^).Changeto := -1;
    editiontype(L.Data^).mastercopyseparationset := Datam1.Query1.Fields[4]
      .AsInteger;
    editiontype(L.Data^).copyseparationset := Datam1.Query1.Fields[6].AsInteger;
    editiontype(L.Data^).Mastereditionid := Datam1.Query1.Fields[1].AsInteger;
    editiontype(L.Data^).Masterlocationid := Datam1.Query1.Fields[0].AsInteger;
    editiontype(L.Data^).editionid := Datam1.Query1.Fields[1].AsInteger;
    editiontype(L.Data^).LocationID := Datam1.Query1.Fields[0].AsInteger;
    editiontype(L.Data^).Sectionid := Datam1.Query1.Fields[2].AsInteger;
    editiontype(L.Data^).OrgMasterpressid := Datam1.Query1.Fields[7].AsInteger;
    editiontype(L.Data^).OrgMasterlocationid := Datam1.Query1.Fields[0]
      .AsInteger;
    editiontype(L.Data^).OrgMastereditionid := Datam1.Query1.Fields[1]
      .AsInteger;
    editiontype(L.Data^).OrgMastersectionid := Datam1.Query1.Fields[2]
      .AsInteger;
    editiontype(L.Data^).Orgpagemasterpagename := Datam1.Query1.Fields
      [3].AsString;
    editiontype(L.Data^).Orgmastercopyseparationset := Datam1.Query1.Fields[4]
      .AsInteger;

    editiontype(L.Data^).istimed := false;
    editiontype(L.Data^).TimedFrom := TimedFrom;
    editiontype(L.Data^).TimedTo := TimedTo;
    L.caption := tNames1.pressnameIDtoname(Datam1.Query1.Fields[7].AsInteger);
    L.SubItems.Add(tNames1.editionIDtoname(Datam1.Query1.Fields[1].AsInteger));
    L.SubItems.Add(tNames1.sectionidtoname(Datam1.Query1.Fields[2].AsInteger));
    L.SubItems.Add(Datam1.Query1.Fields[3].AsString);
    Datam1.Query1.Next;
  end;
  Datam1.Query1.Close;
  Checkforedchanges;

  Actionsettimeded.Enabled := (Prefs.AllowTimedEditions) and
    (Prefs.MayRunProducts) and (not istimed) And (CanBeTimmed);
end;

procedure TFormMain.ListViewEdtoDragOver(Sender, Source: TObject; X, Y: Integer;
  State: TDragState; var Accept: Boolean);
begin
  Accept := (Source = ListViewedfrom) and (ListViewedfrom.SelCount = 1);
end;

procedure TFormMain.ActioneditionpopmakeuniqueExecute(Sender: TObject);
Var
  i: Integer;
begin
  for i := 0 to ListViewEdto.Items.Count - 1 do
  begin
    if (editiontype(ListViewEdto.Items[i].Data^).Unique <> 1) and
      (ListViewEdto.Items[i].Selected) then
    begin
      ListViewEdto.Items[i].ImageIndex := 3;
      // ListViewEdto.Items[i].SubItems[1] := tnames1.locationIDtoname(editiontype(ListViewEdto.Items[i].Data^).locationid);
      ListViewEdto.Items[i].SubItems[2] :=
        tNames1.editionIDtoname(editiontype(ListViewEdto.Items[i].Data^)
        .editionid);
      ListViewEdto.Items[i].SubItems[3] :=
        tNames1.sectionidtoname(editiontype(ListViewEdto.Items[i].Data^)
        .Sectionid);
      ListViewEdto.Items[i].SubItems[4] := ListViewEdto.Items[i].SubItems[0];
      editiontype(ListViewEdto.Items[i].Data^).Changeto := 1;
    end;
  end;
  Checkforedchanges;
end;

procedure TFormMain.ActioneditionpopUseasmasterExecute(Sender: TObject);
Var
  i, i1: Integer;
begin
  for i := 0 to ListViewedfrom.Items.Count - 1 do
  begin
    if (ListViewedfrom.Items[i].Selected) then
    begin
      for i1 := 0 to ListViewEdto.Items.Count - 1 do
      begin
        if (editiontype(ListViewEdto.Items[i1].Data^).Sectionid = editiontype
          (ListViewedfrom.Items[i].Data^).Sectionid) and
          (ListViewEdto.Items[i1].SubItems[0] = ListViewedfrom.Items[i].SubItems
          [2]) and ((ListViewEdto.Items[i1].SubItems[1] = ListViewedfrom.Items
          [i].caption) or (Prefs.EditionUseAsMasterIgnorePress)) then
        begin
          ListViewEdto.Items[i1].ImageIndex := 4;
          ListViewEdto.Items[i1].SubItems[1] := ListViewedfrom.Items[i].caption;
          ListViewEdto.Items[i1].SubItems[2] := ListViewedfrom.Items[i]
            .SubItems[0];
          ListViewEdto.Items[i1].SubItems[3] := ListViewedfrom.Items[i]
            .SubItems[1];
          ListViewEdto.Items[i1].SubItems[4] := ListViewedfrom.Items[i]
            .SubItems[2];
          editiontype(ListViewEdto.Items[i1].Data^).Changeto := 0;
          editiontype(ListViewEdto.Items[i1].Data^).mastercopyseparationset :=
            editiontype(ListViewedfrom.Items[i].Data^).mastercopyseparationset;
          editiontype(ListViewEdto.Items[i1].Data^).Masterlocationid :=
            editiontype(ListViewedfrom.Items[i].Data^).Masterlocationid;
          editiontype(ListViewEdto.Items[i1].Data^).Mastereditionid :=
            editiontype(ListViewedfrom.Items[i].Data^).Mastereditionid;
          editiontype(ListViewEdto.Items[i1].Data^).Mastersectionid :=
            editiontype(ListViewedfrom.Items[i].Data^).Mastersectionid;
          // editiontype(ListViewEdto.Items[i1].Data^).pressid         := editiontype(ListViewEdfrom.Items[i].Data^).pressid;
        end;
      end;
    end;
  end;
  Checkforedchanges;
end;

procedure TFormMain.ActioneditionpopundoExecute(Sender: TObject);
var
  i: Integer;
begin
  for i := 0 to ListViewEdto.Items.Count - 1 do
  begin
    if (ListViewEdto.Items[i].Selected) then
    begin
      if editiontype(ListViewEdto.Items[i].Data^).Unique = 1 then
        ListViewEdto.Items[i].ImageIndex := 0
      else
        ListViewEdto.Items[i].ImageIndex := 2;
      editiontype(ListViewEdto.Items[i].Data^).Changeto := -1;

      ListViewEdto.Items[i].SubItems[1] :=
        tNames1.locationIDtoname(editiontype(ListViewEdto.Items[i].Data^)
        .OrgMasterlocationid);
      ListViewEdto.Items[i].SubItems[2] :=
        tNames1.locationIDtoname(editiontype(ListViewEdto.Items[i].Data^)
        .OrgMastereditionid);
      ListViewEdto.Items[i].SubItems[3] :=
        tNames1.sectionidtoname(editiontype(ListViewEdto.Items[i].Data^)
        .OrgMastersectionid);
      ListViewEdto.Items[i].SubItems[4] := ListViewEdto.Items[i].SubItems[0];

      editiontype(ListViewEdto.Items[i].Data^).mastercopyseparationset :=
        editiontype(ListViewedfrom.Items[i].Data^).Orgmastercopyseparationset;
      editiontype(ListViewEdto.Items[i].Data^).Masterlocationid :=
        editiontype(ListViewedfrom.Items[i].Data^).OrgMasterlocationid;
      editiontype(ListViewEdto.Items[i].Data^).Mastereditionid :=
        editiontype(ListViewedfrom.Items[i].Data^).OrgMastereditionid;
      editiontype(ListViewEdto.Items[i].Data^).Mastersectionid :=
        editiontype(ListViewedfrom.Items[i].Data^).OrgMastersectionid;

    end;
  end;
  Checkforedchanges;
end;

procedure TFormMain.ListViewEdtoDragDrop(Sender, Source: TObject;
  X, Y: Integer);
var
  Dropon, dropfrom: TListItem;
begin
  Dropon := ListViewEdto.GetItemAt(X, Y);

  if Dropon = nil then
  begin
    exit;
  end;

  dropfrom := ListViewedfrom.Selected;
  if dropfrom = nil then
  begin
    exit;
  end;

  if pos('Dink', Dropon.SubItems[0]) > 0 then
  begin
    MessageDlg('This is a halfweb page and cannot be assigned a page',
      mtInformation, [mbOk], 0);
    exit;
  end;

  Dropon.ImageIndex := 4;
  Dropon.SubItems[1] := dropfrom.caption;
  Dropon.SubItems[2] := dropfrom.SubItems[0];
  Dropon.SubItems[3] := dropfrom.SubItems[1];
  Dropon.SubItems[4] := dropfrom.SubItems[2];
  editiontype(Dropon.Data^).Changeto := 0;
  editiontype(Dropon.Data^).mastercopyseparationset :=
    editiontype(dropfrom.Data^).mastercopyseparationset;
  editiontype(Dropon.Data^).Masterlocationid := editiontype(dropfrom.Data^)
    .Masterlocationid;
  editiontype(Dropon.Data^).Mastereditionid := editiontype(dropfrom.Data^)
    .Mastereditionid;
  editiontype(Dropon.Data^).Mastersectionid := editiontype(dropfrom.Data^)
    .Mastersectionid;

  Checkforedchanges;
end;

procedure TFormMain.ActionEditionrefreshExecute(Sender: TObject);
var
  LocationID: Integer;
  Pubdate: TDateTime;
  Publicationid: Integer;
  editionid: Integer;
  ProductionID: Integer;
  Sectionid: Integer;

begin
  try
    ListViewEdto.Items.Clear;
    ListViewEdtodink.Items.Clear;
    ListViewedfrom.Items.Clear;
    if TreeViewNeweddtree.Visible then
    begin
      if Getedtreedata(LocationID, Pubdate, Publicationid, editionid,
        ProductionID, Sectionid) then
        loadedition(LocationID, Pubdate, Publicationid, editionid, ProductionID,
          Sectionid);
    end;
  Except
  end;
end;

procedure TFormMain.ComboBoxeditionlocationChange(Sender: TObject);
var
  chtype: Integer;
begin
  chtype := setalllocationcombos(TComboBox(Sender).text);

  if chtype = 2 then
  begin
    TreeViewpagelist.Items.Clear;
    TreeViewThumbs.Items.Clear;
    TreeViewPlateview.Items.Clear;
    TreeViewprodcontrol.Items.Clear;
    TreeViewNeweddtree.Items.Clear;
    TreeViewplan.Items.Clear;
    TreeViewLogfilter.Items.Clear;
    TreeViewreportfilter.Items.Clear;
    screen.Cursor := crhourglass;
  end
  else
  begin
    loadAPagetree(TreeViewNeweddtree, '', '', ComboBoxpalocationNY.text,
      ComboBoxGlobalPubDateFilter.text);
  end;
end;

function TFormMain.Checkforedchanges: Boolean;
var
  i: Integer;
begin
  result := false;
  for i := 0 to ListViewEdto.Items.Count - 1 do
  begin
    if editiontype(ListViewEdto.Items[i].Data^).Changeto <> -1 then
    begin
      result := true;
      break;
    end;
  end;

  if result then
  begin
    ActionEditionapply.Enabled := Prefs.MayRunProducts;
  end
  else
  begin
    ActionEditionapply.Enabled := false;
  end;

end;

procedure TFormMain.ActionEditionapplyExecute(Sender: TObject);
var
  aktproductionid, LocationID, Publicationid, ToEdid, FromEdId: Integer;
  Pubdate: TDateTime;
  i: Integer;
begin
  try
    aktproductionid := 0;

    makeingnewedition := true;
    if ListViewEdto.Items.Count > 0 then
    begin
      aktproductionid := editiontype(ListViewEdto.Items[0].Data^).ProductionID;
      if editiontype(ListViewEdto.Items[0].Data^).adding then
      begin
        try
          if Setplanlock(true) then
          begin
            LocationID := tNames1.locationnametoid(ComboBoxpalocationNY.text);
            aktproductionid := TTreeViewpagestype(TreeViewNeweddtree.Selected.Data^).productionid;
            Publicationid := TTreeViewpagestype
              (TreeViewNeweddtree.Selected.Data^).Publicationid;
            ToEdid := TTreeViewpagestype(TreeViewNeweddtree.Selected.Data^)
              .editionid;
            FromEdId := TTreeViewpagestype(TreeViewNeweddtree.Selected.Data^)
              .editionid;
            Pubdate := TTreeViewpagestype
              (TreeViewNeweddtree.Selected.Data^).Pubdate;
            addnewsubedition(LocationID, Pubdate, Publicationid, FromEdId,
              ToEdid, true, FormAddeditionview.RadioGroupcommon.ItemIndex,
              FormAddeditionview.RadioGroupdevice.ItemIndex,
              FormAddeditionview.RadioGroupunique.ItemIndex,
              FormAddeditionview.RadioGrouphold.ItemIndex, aktproductionid);
          end;
        finally
          Setplanlock(false);
        end;
      end
      else
        applyeditiondata;

      Newtreeprodid := aktproductionid;
      Datam1.UpdateTreeStateOnProduction(false);

      // Autoplanexport(1,aktproductionid,0,0,0,0,0,0,0,0);
    end;
  Finally
    Setplanlock(false);
    makeingnewedition := false;

    Actionrefreshhedtree.Execute;

  end;
end;

procedure TFormMain.applyeditiondata;
var
  i, i2: Integer;
  anytorepair: Boolean;
  ini: TIniFile;
  NMasterstatus, istat: Integer;

  Masterstatus: array [0 .. 100] of record Colorid: Integer;
  status: Integer;
  approved: Integer;
  Active: Integer;
  proofstatus: Integer;
end;
copyseparationsetsts:
string;
Edname:
String;
aktproductionid, Aktlocationid, toeditionid: Integer;

UseAlted:
Boolean;
NAlteds:
Integer;
InAlteds:
String;
PressrunInstr:
String;
cantchange:
Boolean;
Localsets:
String;
FTimedEdFrom:
Integer;
NTimedpressruns:
Integer;
Timedpressruns:
Array [1 .. 400] of record pressrunid: Integer;
editionid:
Integer;
FromEd:
Integer;
ToEd:
Integer;
end;

begin
  try
    try
      aktproductionid := -1;
      Aktlocationid := -1;
      toeditionid := -1;

      for i := 0 to ListViewEdto.Items.Count - 1 do
      begin
        if editiontype(ListViewEdto.Items[i].Data^).Changeto <> -1 then
        begin
          if aktproductionid = -1 then
          begin
            Aktlocationid := editiontype(ListViewEdto.Items[i].Data^)
              .LocationID;
            aktproductionid := editiontype(ListViewEdto.Items[i].Data^)
              .ProductionID;
            toeditionid := editiontype(ListViewEdto.Items[i].Data^).editionid;
          end;

          Localsets := '(-99';
          if (Prefs.EditionsAssignUniqueToLocalOnly) then
          begin
            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add
              ('Select distinct copyseparationset from pagetable (NOLOCK)');
            Datam1.Query1.SQL.Add('Where Uniquepage <> 1');
            Datam1.Query1.SQL.Add('and publicationid = ' +
              IntToStr(TTreeViewpagestype(TreeViewNeweddtree.Selected.Data^)
              .Publicationid));
            Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
              TTreeViewpagestype(TreeViewNeweddtree.Selected.Data^).Pubdate));
            Datam1.Query1.SQL.Add(' and mastercopyseparationset  = ' +
              IntToStr(editiontype(ListViewEdto.Items[i].Data^)
              .mastercopyseparationset));
            Datam1.Query1.SQL.Add(' and locationid  = ' +
              IntToStr(editiontype(ListViewEdto.Items[i].Data^).LocationID));
            Datam1.Query1.SQL.Add(' and copyseparationset <> ' +
              IntToStr(editiontype(ListViewEdto.Items[i].Data^)
              .copyseparationset));
            Datam1.Query1.SQL.Add('order by copyseparationset ');
            if Prefs.Debug then
              Datam1.Query1.SQL.SaveToFile
                (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
                'sqllogs\' + 'getlocalcommon.SQL');
            Datam1.Query1.Open;
            while not Datam1.Query1.Eof do
            begin
              Localsets := Localsets + ',' + Datam1.Query1.Fields[0].AsString;
              Datam1.Query1.Next;
            end;
            Datam1.Query1.Close;

          end;
          Localsets := Localsets + ')';

          case editiontype(ListViewEdto.Items[i].Data^).Changeto of
            0:
              begin // make it common
                if editiontype(ListViewEdto.Items[i].Data^).Unique = 1 then
                begin
                  Datam1.Query1.SQL.Clear;
                  Datam1.Query1.SQL.Add
                    ('Select TOP 1 copyseparationset from pagetable (NOLOCK)');
                  Datam1.Query1.SQL.Add('Where uniquepage = 0');
                  Datam1.Query1.SQL.Add('and mastercopyseparationset = ' +
                    IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                    .Orgmastercopyseparationset));
                  if Prefs.Debug then
                    Datam1.Query1.SQL.SaveToFile
                      (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory())
                      + 'sqllogs\' + 'canchange.SQL');
                  cantchange := false;
                  Datam1.Query1.Open;
                  if not Datam1.Query1.Eof then
                  begin
                    cantchange := true;
                  end;
                  Datam1.Query1.Close;
                End
                else
                  cantchange := false;

                if not cantchange then
                begin
                  Datam1.Query1.SQL.Clear;
                  Datam1.Query1.SQL.Add
                    ('Select distinct status,colorid,approved,active,proofstatus from pagetable (NOLOCK)');
                  Datam1.Query1.SQL.Add('Where uniquepage = 1');
                  Datam1.Query1.SQL.Add('and mastercopyseparationset = ' +
                    IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                    .mastercopyseparationset));

                  Datam1.Query1.Open;
                  NMasterstatus := 0;
                  while not Datam1.Query1.Eof do
                  begin
                    Inc(NMasterstatus);
                    Masterstatus[NMasterstatus].status := Datam1.Query1.Fields
                      [0].AsInteger;
                    if Masterstatus[NMasterstatus].status > 10 then
                      Masterstatus[NMasterstatus].status := 10;
                    Masterstatus[NMasterstatus].Colorid := Datam1.Query1.Fields
                      [1].AsInteger;
                    Masterstatus[NMasterstatus].approved := Datam1.Query1.Fields
                      [2].AsInteger;
                    Masterstatus[NMasterstatus].Active := Datam1.Query1.Fields
                      [3].AsInteger;
                    Masterstatus[NMasterstatus].proofstatus :=
                      Datam1.Query1.Fields[4].AsInteger;
                    Datam1.Query1.Next;
                  end;
                  Datam1.Query1.Close;

                  copyseparationsetsts := '(-111';
                  Datam1.Query1.SQL.Clear;
                  Datam1.Query1.SQL.Add
                    ('Select distinct copyseparationset from pagetable (NOLOCK)');
                  Datam1.Query1.SQL.Add
                    ('Where uniquepage <> 1 and mastercopyseparationset = ' +
                    IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                    .Orgmastercopyseparationset));

                  Datam1.Query1.SQL.Add('and Editionid  = ' +
                    IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                    .editionid));
                  Datam1.Query1.SQL.Add('and copyseparationset <> ' +
                    IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                    .copyseparationset));

                  Datam1.Query1.SQL.Add('Order by copyseparationset');
                  if Prefs.Debug then
                    Datam1.Query1.SQL.SaveToFile
                      (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory())
                      + 'sqllogs\' + 'getedtionsepchange.SQL');

                  Datam1.Query1.Open;
                  while not Datam1.Query1.Eof do
                  begin
                    copyseparationsetsts := copyseparationsetsts + ',' +
                      Datam1.Query1.Fields[0].AsString;
                    Datam1.Query1.Next;
                  end;
                  Datam1.Query1.Close;
                  copyseparationsetsts := copyseparationsetsts + ')';

                  Datam1.Query1.SQL.Clear;
                  Datam1.Query1.SQL.Add('update pagetable');
                  if (Prefs.EditionsSetForceWhenCommon) then
                    Datam1.Query1.SQL.Add
                      ('Set uniquepage = 2, mastercopyseparationset = ' +
                      IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                      .mastercopyseparationset) + ', pdfmaster = ' +
                      IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                      .mastercopyseparationset))
                  else
                    Datam1.Query1.SQL.Add
                      ('Set uniquepage = 0, mastercopyseparationset = ' +
                      IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                      .mastercopyseparationset) + ', pdfmaster = ' +
                      IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                      .mastercopyseparationset));

                  Datam1.Query1.SQL.Add('where copyseparationset IN ' +
                    copyseparationsetsts);
                  Datam1.Query1.SQL.Add('or copyseparationset = ' +
                    IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                    .copyseparationset));
                  Datam1.Query1.ExecSQL;

                  for istat := 1 to NMasterstatus do
                  begin
                    Datam1.Query1.SQL.Clear;
                    Datam1.Query1.SQL.Add('update pagetable');
                    Datam1.Query1.SQL.Add('Set status = ' +
                      IntToStr(Masterstatus[istat].status));
                    Datam1.Query1.SQL.Add
                      (',approved = ' + IntToStr(Masterstatus[istat].approved));
                    Datam1.Query1.SQL.Add
                      (',active = ' + IntToStr(Masterstatus[istat].Active));
                    // Datam1.Query1.SQL.Add(',ProofStatus = '+ IntToStr(Masterstatus[istat].proofstatus));
                    Datam1.Query1.SQL.Add(',inkstatus = 0');

                    Datam1.Query1.SQL.Add('where copyseparationset IN ' +
                      copyseparationsetsts);
                    Datam1.Query1.SQL.Add('or copyseparationset = ' +
                      IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                      .copyseparationset));

                    Datam1.Query1.ExecSQL;
                  end;
                  settotransmittedifmainlocation;
                end;
              end;
            1:
              begin // make it unique
                UseAlted := false;
                if (Prefs.EditionApplyUseAlterntiveEditionFile) then
                begin
                  if FileExists
                    (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
                    'AltEdPlan.ini') then
                  begin
                    ini := TIniFile.Create
                      (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory())
                      + 'AltEdPlan.ini');
                    Edname := tNames1.editionIDtoname(toeditionid);
                    NAlteds := ini.ReadInteger(Edname, 'Numberofeditions', 0);

                    if NAlteds > 0 then
                    begin
                      InAlteds := '(-99';
                      for i2 := 1 to NAlteds do
                      begin
                        InAlteds := InAlteds + ',' +
                          IntToStr(tNames1.editionnametoid
                          (ini.ReadString(Edname, IntToStr(i2), Edname)));
                      end;
                      InAlteds := InAlteds + ')';
                      UseAlted := true;
                    end;
                    ini.free;

                  end;

                end;

                if UseAlted then
                begin
                  Datam1.Query1.SQL.Clear;
                  Datam1.Query1.SQL.Add('update pagetable');
                  Datam1.Query1.SQL.Add('Set status = 0, inkstatus = 0');
                  Datam1.Query1.SQL.Add(',Uniquepage = 1');
                  Datam1.Query1.SQL.Add(',ProofStatus = 0');

                  if (FormAddeditionview.RadioGroupunique.ItemIndex = 0) then
                    Datam1.Query1.SQL.Add(',Approved = 0')
                  else
                    Datam1.Query1.SQL.Add(',Approved = -1');

                  Datam1.Query1.SQL.Add
                    (',mastercopyseparationset = copyseparationset');
                  if (PDFMasterOK) then
                    Datam1.Query1.SQL.Add(',pdfmaster=copyseparationset');

                  Datam1.Query1.SQL.Add('where copyseparationset = ' +
                    IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                    .copyseparationset));
                  Datam1.Query1.ExecSQL;

                  Datam1.Query1.SQL.Clear;
                  Datam1.Query1.SQL.Add('update pagetable');
                  Datam1.Query1.SQL.Add('Set status = 0, inkstatus = 0');
                  Datam1.Query1.SQL.Add(',ProofStatus = 0');
                  Datam1.Query1.SQL.Add(',Uniquepage = 2');
                  Datam1.Query1.SQL.Add(',mastercopyseparationset = ' +
                    IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                    .copyseparationset));
                  Datam1.Query1.SQL.Add(',pdfmaster = ' +
                    IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                    .copyseparationset));
                  Datam1.Query1.SQL.Add('where mastercopyseparationset = ' +
                    IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                    .mastercopyseparationset));
                  Datam1.Query1.SQL.Add('and Editionid IN ' + InAlteds);
                  Datam1.Query1.SQL.Add('and Uniquepage <> 1');
                  Datam1.Query1.SQL.Add('and copyseparationset <> ' +
                    IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                    .copyseparationset));
                  Datam1.Query1.ExecSQL;

                end
                else
                begin

                  if (editiontype(ListViewEdto.Items[i].Data^).istimed) then
                  begin
                    Datam1.Query1.SQL.Clear;
                    Datam1.Query1.SQL.Add
                      ('Select distinct p.Pressrunid,p.editionid,pr.TimedEditionFrom,pr.TimedEditionTo from pagetable p (NOLOCK), pressrunid pr (NOLOCK)');
                    Datam1.Query1.SQL.Add('Where p.mastercopyseparationset = ' +
                      IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                      .mastercopyseparationset));
                    Datam1.Query1.SQL.Add('And p.Uniquepage <> 1');
                    Datam1.Query1.SQL.Add('And pr.pressrunid = p.pressrunid');
                    Datam1.Query1.SQL.Add
                      ('order by pr.TimedEditionFrom,pr.TimedEditionTo ');
                    FTimedEdFrom := toeditionid;
                    NTimedpressruns := 0;
                    PressrunInstr := '(';
                    if Prefs.Debug then
                      Datam1.Query1.SQL.SaveToFile
                        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()
                        ) + 'sqllogs\' + 'Gettimededs.SQL');
                    Datam1.Query1.Open;
                    while not Datam1.Query1.Eof do
                    begin
                      Inc(NTimedpressruns);
                      Timedpressruns[NTimedpressruns].pressrunid :=
                        Datam1.Query1.Fields[0].AsInteger;
                      Timedpressruns[NTimedpressruns].editionid :=
                        Datam1.Query1.Fields[1].AsInteger;
                      Timedpressruns[NTimedpressruns].FromEd :=
                        Datam1.Query1.Fields[2].AsInteger;
                      Timedpressruns[NTimedpressruns].ToEd :=
                        Datam1.Query1.Fields[3].AsInteger;
                      if Length(PressrunInstr) > 1 then
                        PressrunInstr := PressrunInstr + ',';
                      PressrunInstr := PressrunInstr +
                        IntToStr(Timedpressruns[NTimedpressruns].pressrunid);
                      Datam1.Query1.Next;
                    end;
                    Datam1.Query1.Close;
                    PressrunInstr := PressrunInstr + ')';

                    if NTimedpressruns > 1 then
                    begin

                      Datam1.Query1.SQL.Clear;
                      Datam1.Query1.SQL.Add('update pagetable');
                      Datam1.Query1.SQL.Add('Set status = 0, inkstatus = 0');
                      // Datam1.Query1.SQL.Add(',Uniquepage = 1');
                      Datam1.Query1.SQL.Add(',ProofStatus = 0');
                      Datam1.Query1.SQL.Add(',mastercopyseparationset = ' +
                        IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                        .copyseparationset));
                      if (PDFMasterOK) then
                        Datam1.Query1.SQL.Add
                          (',pdfmaster = ' +
                          IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                          .copyseparationset));
                      Datam1.Query1.SQL.Add('where mastercopyseparationset = ' +
                        IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                        .mastercopyseparationset));
                      Datam1.Query1.SQL.Add('and pressrunid IN ' +
                        PressrunInstr);
                      Datam1.Query1.SQL.Add('and Uniquepage <> 1');
                      Datam1.Query1.SQL.Add('and copyseparationset <> ' +
                        IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                        .copyseparationset));
                      if (Prefs.EditionsAssignUniqueToLocalOnly) then
                        Datam1.Query1.SQL.Add('and copyseparationset in' +
                          Localsets);

                      Datam1.Query1.ExecSQL;

                      Datam1.Query1.SQL.Clear;
                      Datam1.Query1.SQL.Add('update pagetable');
                      Datam1.Query1.SQL.Add('Set status = 0, inkstatus = 0');
                      Datam1.Query1.SQL.Add(',Uniquepage = 1');
                      Datam1.Query1.SQL.Add(',ProofStatus = 0');
                      if (FormAddeditionview.RadioGroupunique.ItemIndex = 0)
                      then
                        Datam1.Query1.SQL.Add(',Approved = 0')
                      else
                        Datam1.Query1.SQL.Add(',Approved = -1');
                      Datam1.Query1.SQL.Add
                        (',mastercopyseparationset = copyseparationset');
                      if (PDFMasterOK) then
                        Datam1.Query1.SQL.Add(',pdfmaster = copyseparationset');
                      Datam1.Query1.SQL.Add('where copyseparationset = ' +
                        IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                        .copyseparationset));
                      Datam1.Query1.ExecSQL;

                    end
                    else
                    begin
                      Datam1.Query1.SQL.Clear;
                      Datam1.Query1.SQL.Add('update pagetable');
                      Datam1.Query1.SQL.Add('Set status = 0, inkstatus = 0');
                      Datam1.Query1.SQL.Add(',Uniquepage = 1');
                      Datam1.Query1.SQL.Add(',ProofStatus = 0');
                      Datam1.Query1.SQL.Add
                        (',mastercopyseparationset = copyseparationset');
                      if (PDFMasterOK) then
                        Datam1.Query1.SQL.Add(',pdfmaster = copyseparationset');
                      if (FormAddeditionview.RadioGroupunique.ItemIndex = 0)
                      then
                        Datam1.Query1.SQL.Add(',Approved = 0')
                      else
                        Datam1.Query1.SQL.Add(',Approved = -1');

                      Datam1.Query1.SQL.Add('where copyseparationset = ' +
                        IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                        .copyseparationset));
                      Datam1.Query1.ExecSQL;
                    end;

                  end
                  else
                  begin
                    Datam1.Query1.SQL.Clear;
                    Datam1.Query1.SQL.Add('update pagetable');
                    Datam1.Query1.SQL.Add('Set status = 0, inkstatus = 0');
                    if (FormAddeditionview.RadioGroupunique.ItemIndex = 0) then
                      Datam1.Query1.SQL.Add(',Approved = 0')
                    else
                      Datam1.Query1.SQL.Add(',Approved = -1');

                    Datam1.Query1.SQL.Add(',Uniquepage = 1');
                    Datam1.Query1.SQL.Add(',ProofStatus = 0');
                    Datam1.Query1.SQL.Add
                      (',mastercopyseparationset = copyseparationset');
                    if (PDFMasterOK) then
                      Datam1.Query1.SQL.Add(',pdfmaster = copyseparationset');
                    Datam1.Query1.SQL.Add('where copyseparationset = ' +
                      IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                      .copyseparationset));
                    Datam1.Query1.ExecSQL;

                    if (Prefs.EditionsAssignUniqueToLocalOnly) then
                    begin
                      Datam1.Query1.SQL.Clear;
                      Datam1.Query1.SQL.Add('update pagetable');
                      Datam1.Query1.SQL.Add('Set status = 0, inkstatus = 0');
                      Datam1.Query1.SQL.Add(',ProofStatus = 0');
                      Datam1.Query1.SQL.Add(',mastercopyseparationset = ' +
                        IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                        .copyseparationset));
                      if (PDFMasterOK) then
                        Datam1.Query1.SQL.Add
                          (',pdfmaster = ' +
                          IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                          .copyseparationset));
                      Datam1.Query1.SQL.Add('where mastercopyseparationset = ' +
                        IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                        .mastercopyseparationset));
                      Datam1.Query1.SQL.Add('and Uniquepage <> 1');
                      Datam1.Query1.SQL.Add('and copyseparationset <> ' +
                        IntToStr(editiontype(ListViewEdto.Items[i].Data^)
                        .copyseparationset));
                      Datam1.Query1.SQL.Add('and copyseparationset in' +
                        Localsets);
                      Datam1.Query1.ExecSQL;
                    end;
                  end;
                end;
              end;

          end;
        end;
      end;

      if aktproductionid <> -1 then
      begin

        Datam1.Query2.SQL.Clear;
        Datam1.Query2.SQL.Add('update pagetable set status = 30');
        Datam1.Query2.SQL.Add
          ('where (pagetable.status = 10 OR pagetable.status = 20)');

        Datam1.Query2.SQL.Add('and pagetable.productionid = ' +
          IntToStr(aktproductionid));
        Datam1.Query2.SQL.Add('and pagetable.Editionid =  ' +
          IntToStr(toeditionid));
        Datam1.Query2.SQL.Add('and pagetable.locationid = ' +
          IntToStr(Aktlocationid));

        Datam1.Query2.SQL.Add
          ('and exists (Select p2.mastercopyseparationset from pagetable p2 (NOLOCK)');
        Datam1.Query2.SQL.Add('where');
        Datam1.Query2.SQL.Add
          ('pagetable.mastercopyseparationset = p2.mastercopyseparationset');
        Datam1.Query2.SQL.Add('and p2.status >= 30');
        Datam1.Query2.SQL.Add('and p2.Colorid = pagetable.Colorid');
        Datam1.Query2.SQL.Add('and p2.uniquepage = 1');
        Datam1.Query2.SQL.Add('and p2.editionid <> pagetable.editionid');
        Datam1.Query2.SQL.Add('and p2.locationid = pagetable.locationid)');
        if Prefs.Debug then
          Datam1.Query2.SQL.SaveToFile
            (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
            'sqllogs\' + 'SQLaddeditiontransfix.SQL');
        Datam1.Query2.ExecSQL(false);
      end;

      if (Prefs.PlanRepair) then
      begin
        if FormMain.Setplanlock(true) then
        begin
          Datam1.Query3.SQL.Clear;
          Datam1.Query3.SQL.Add
            ('SELECT TOP 1 P1.CopySeparationSet,P1.PublicationID,P1.PubDate,P1.SectionID,P1.PageName FROM PageTable P1 WITH (NOLOCK)');
          Datam1.Query3.SQL.Add
            ('WHERE (P1.uniquepage <> 1 and p1.copyseparationset <> p1.mastercopyseparationset) and');
          Datam1.Query3.SQL.Add
            ('(( EXISTS (SELECT MasterCopySeparationSet FROM PageTable P2 WITH (NOLOCK) WHERE P1.MasterCopySeparationSet=P2.MasterCopySeparationSet AND (P1.PublicationID<>P2.PublicationID OR P1.PubDate <> P2.PubDate)))');
          Datam1.Query3.SQL.Add
            ('or (not EXISTS (SELECT P3.MasterCopySeparationSet FROM PageTable P3 WITH (NOLOCK) WHERE P1.MasterCopySeparationSet=P3.MasterCopySeparationSet AND p3.uniquepage = 1)))');
          if Prefs.Debug then
            Datam1.Query3.SQL.SaveToFile
              (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
              'sqllogs\' + 'Chepagetable.SQL');
          Datam1.Query3.Open;
          anytorepair := not Datam1.Query3.Eof;
          Datam1.Query3.Close;

          if anytorepair then
          begin
            Datam1.Query3.SQL.Clear;
            Datam1.Query3.SQL.Add('Exec spRepairPageTable @PressSpecificPlan = '
              + IntToStr(Integer(FormApplyproduction.CheckBoxpressspecifik.
              Checked)));
            FormMain.trysql(Datam1.Query3);
          end;
          FormMain.Setplanlock(false);
        end;
      end;

    except
    end;

  Finally
    writeeditioneditlog(false);
    ActionEditionrefresh.Execute;
  end;
end;

procedure TFormMain.settotransmittedifmainlocation;
begin
  if (GMainlocationID <> -1) then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable');
    Datam1.Query1.SQL.Add('Set status = 30, miscint4 = 0, inkstatus = 0');
    Datam1.Query1.SQL.Add('where status >=10 and status < 30');
    Datam1.Query1.SQL.Add('and locationid =  ' + IntToStr(GMainlocationID));
    Datam1.Query1.ExecSQL;
  end;
end;

function TFormMain.Findpageineditionsys(pagename: string;
  Sectionid: Integer): Integer;
var
  i: Integer;
begin
  result := -1;
  for i := 0 to ListViewEdto.Items.Count - 1 do
  begin
    if editiontype(ListViewEdto.Items[i].Data^).Sectionid = Sectionid then
    begin
      if ListViewEdto.Items[i].SubItems[0] = pagename then
      begin
        result := i;
        break;
      end;
    end;
  end;
  if result = -1 then
  begin
    for i := 0 to ListViewEdtodink.Items.Count - 1 do
    begin
      if editiontype(ListViewEdtodink.Items[i].Data^).Sectionid = Sectionid then
      begin
        if ListViewEdtodink.Items[i].SubItems[0] = pagename then
        begin
          result := i;
          break;
        end;
      end;
    end;
  end;
end;

function TFormMain.allocateplateframes(parentBox: TScrollBox;
  Numberofframes: Longint): Boolean;
var
  IPLF: Integer;
  memallocres: Boolean;
begin
  result := Deallocateplateframes;

  for IPLF := 1 to Prefs.PlannningMaxPlateFrames do
  begin
    try
      plateframes[IPLF].Visible := false;
    except
      result := false;
    end;
  end;

  for IPLF := 1 to Numberofframes do
  begin
    try
      plateframes[IPLF].Parent := parentBox;
      plateframes[IPLF].pressrunid := IPLF;
      plateframes[IPLF].GroupBoxtop.caption :=
        IntToStr(plateframes[IPLF].pressrunid);
      plateframes[IPLF].Name := 'Plateframe' + IntToStr(IPLF);
      plateframes[IPLF].plateframenumber := IPLF;
      plateframes[IPLF].Panelborder.Color := clBtnFace;
      plateframes[IPLF].Selected := false;
      plateframes[IPLF].Nprodplates := -1;
    Except
      result := false;
    end;
  end;

  try
    if Numberofframes = 1 then
    begin
      plateframes[1].Align := alclient;
      plateframes[1].Parent := parentBox;
      plateframes[1].Visible := true;
    end
    else
    begin
      for IPLF := 1 to Numberofframes do
      begin
        plateframes[IPLF].Height := parentBox.Height div Nplateframes;
        plateframes[IPLF].Parent := parentBox;
        plateframes[IPLF].Top := parentBox.Height - 5;
        plateframes[IPLF].Align := altop;
        plateframes[IPLF].Visible := true;
      end;
    end;
  Except
    result := false;
  end;
  try
    for IPLF := 1 to Numberofframes do
    begin
      if plateframes[IPLF].Height < 200 then
        plateframes[IPLF].Height := 200;
    end;
  Except
    result := false;
  end;
  try
    if (Numberofframes > 0) And
      (plateframes[Numberofframes].Top + plateframes[Numberofframes].Height <
      parentBox.Height) then
      plateframes[Numberofframes].Align := alclient;

  Except
    result := false;
  end;
end;

function TFormMain.Deallocateplateframes: Boolean;
var
  IPLF: Integer;
begin // NprodplatesSize
  result := true;
  for IPLF := 1 to Prefs.PlannningMaxPlateFrames do
  begin
    try
      SetLength(plateframesdata[IPLF].prodplates, 0);
      plateframes[IPLF].ImageListplanframe.Clear;
      plateframes[IPLF].PBExListview1.Items.Clear;
      plateframes[IPLF].Visible := false;
    Except
      result := false;
    end;
    try
      Nplantowers := 0;
      NMiscstring1 := 0;
      NMiscstring2 := 0;
      NMiscstring3 := 0;
      Nstackpos := 0;
      NHigh := 0;
      NCylinder := 0;
      NZone := 0;

      SetLength(Plantowers, 1);
      SetLength(Plantowers, 1);
      SetLength(planstrMiscstring1, 1);
      SetLength(planstrMiscstring2, 1);
      SetLength(planstrMiscstring3, 1);
      SetLength(planstrstackpos, 1);
      SetLength(planstrHigh, 1);
      SetLength(planstrCylinder, 1);
      SetLength(planstrZone, 1);
    Except
      result := false;
    end;
  end;

end;

function TFormMain.Allocateprodplates(IPLF: Integer; Nprods: Longint): Boolean;
begin
  result := true;
  try
    SetLength(plateframesdata[IPLF].prodplates, Nprods);
    plateframesdata[IPLF].Aktsize := Nprods;
    plateframesdata[IPLF].applythis := true;
  Except
    result := false;
  end;
end;

procedure TFormMain.planlogging(logtext: String);
begin
  if writeplanlog then
  begin
    Append(planlogfile);
    Writeln(planlogfile, logtext);
  end;

  writeMainlogfile('Planlogging: ' + logtext);
end;

procedure TFormMain.ActionpagetreeflatproofExecute(Sender: TObject);
var
  Alocationid, mlres, aktflatproofid: Integer;
begin
  Formflatproof.Publicationid := -1;
  if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Publicationid > -1 then
    Formflatproof.Publicationid :=
      TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Publicationid;

  mlres := Formflatproof.ShowModal;
  aktflatproofid := Formflatproof.Flatproofconfig;

  if mlres = mrOK then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable');
    Datam1.Query1.SQL.Add('Set flatproofstatus = 0 ,FlatProofConfigurationID = '
      + IntToStr(aktflatproofid));
    Datam1.Query1.SQL.Add('Where active <> -999');
    if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Publicationid > -1
    then
      Datam1.Query1.SQL.Add('and publicationid = ' +
        IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
        .Publicationid));
    if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).editionid > -1 then
      Datam1.Query1.SQL.Add('and editionid = ' +
        IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
        .editionid));
    if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Sectionid > -1 then
      Datam1.Query1.SQL.Add('and sectionid = ' +
        IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
        .Sectionid));
    if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Pubdate > 0 then
      Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
        TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Pubdate));

    Alocationid := GetSelectedLocationID();
    if (Alocationid > 0) then
      Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

    trysql(Datam1.Query1);

    loadSuperHSDB2(false);
    resetpreselHS;

  end;
end;

procedure TFormMain.ActionpagesflatproofExecute(Sender: TObject);
begin
  Formflatproof.Publicationid := -1;
  if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Publicationid > -1 then
    Formflatproof.Publicationid :=
      TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Publicationid;

  if Formflatproof.ShowModal = mrOK then
  begin
    getpreselHS;
    setpagetablestFlatdata
      ('Set flatproofstatus = 0 ,FlatProofConfigurationID = ' +
      IntToStr(Formflatproof.Flatproofconfig), '', true, false);
    loadSuperHSDB2(false);
    resetpreselHS;
  end;
end;

procedure TFormMain.ActionthumbtreeflatproofExecute(Sender: TObject);
var
  Alocationid: Integer;
begin
  try
    Formflatproof.Publicationid := -1;

    if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Publicationid > -1 then
      Formflatproof.Publicationid :=
        TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Publicationid;

    if Formflatproof.ShowModal = mrOK then
    begin
      if TreeViewThumbs.Selected = nil then
        exit;
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      Datam1.Query1.SQL.Add
        ('Set flatproofstatus = 0 ,FlatProofConfigurationID = ' +
        IntToStr(Formflatproof.Flatproofconfig));
      Datam1.Query1.SQL.Add('Where active <> -999');
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Publicationid > -1
      then
        Datam1.Query1.SQL.Add('and publicationid = ' +
          IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
          .Publicationid));
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid > -1 then
        Datam1.Query1.SQL.Add('and editionid = ' +
          IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
          .editionid));
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Sectionid > -1 then
        Datam1.Query1.SQL.Add('and sectionid = ' +
          IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
          .Sectionid));
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate > 0 then
        Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
          TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate));

      Alocationid := GetSelectedLocationID();
      if (Alocationid > 0) then
        Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

      trysql(Datam1.Query1);

      ActionThumbnailrefresh.Execute;
    end;

  Except
  end;

end;

procedure TFormMain.ActionplatetreeflatproofExecute(Sender: TObject);
var
  runnode: TTreeNode;
  pressid: Integer;
  LocationID, pressrunid: Integer;
  Pressrunselstr: string;
  anode, n1, n2, n3: TTreeNode;
  ProductionID: Integer;
begin
  try
    if TreeViewPlateview.Selected = nil then
      exit;
    Formflatproof.Publicationid := -1;

    if TTreeViewpagestype(TreeViewPlateview.Selected.Data^).Publicationid > -1
    then
      Formflatproof.Publicationid :=
        TTreeViewpagestype(TreeViewPlateview.Selected.Data^).Publicationid;

    if Formflatproof.ShowModal = mrOK then
    begin
      if TreeViewPlateview.Selected = nil then
        exit;
      runnode := TreeViewPlateview.Selected;
      if runnode = nil then
        exit;
      Pressrunselstr := '(-48';
      ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;
      n1 := runnode;

      try
        anode := n1;
        if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
        begin
          if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
            Pressrunselstr) = 0 then
            Pressrunselstr := Pressrunselstr + ',' +
              IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
        end;
        n2 := n1.GetFirstChild;
        while n2 <> nil do
        begin
          anode := n2;
          if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
          begin
            if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
              Pressrunselstr) = 0 then
              Pressrunselstr := Pressrunselstr + ',' +
                IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
          end;

          n3 := n2.GetFirstChild;
          while n3 <> nil do
          begin
            anode := n3;
            if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
            begin
              if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
                Pressrunselstr) = 0 then
                Pressrunselstr := Pressrunselstr + ',' +
                  IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
            end;
            n3 := n3.getNextSibling;
          end;
          n2 := n2.getNextSibling;
        end;

      except
      end;

      Pressrunselstr := Pressrunselstr + ') ';

      while runnode.Level > 1 do
        runnode := runnode.Parent;

      pressid := tNames1.pressnametoid(runnode.Parent.text);
      pressrunid := runnode.StateIndex;
      LocationID := tNames1.locationnametoid(ComboBoxpalocationNY.text);

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      Datam1.Query1.SQL.Add
        ('Set flatproofstatus = 0 ,FlatProofConfigurationID = ' +
        IntToStr(Formflatproof.Flatproofconfig));
      Datam1.Query1.SQL.Add('Where active <> -999');
      // Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
      Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
      Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
      // if (LocationID > 0) then
      // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(locationid));

      trysql(Datam1.Query1);

      Actionplaterefresh.Execute;
    end;

  Except
  end;

end;

function TFormMain.applyplannedpagenamestoplan(Publicationid: Integer;
  Pubdate: TDateTime; Week: Integer; editionid: Integer; Sectionid: Integer;
  LocationID: Integer; pagename: string; Format: string;
  dateformat: string): String;
var
  i: Integer;
  T, D: string;
  N: Integer;
begin
  i := 1;
  if pos('%', Format) > 0 then
  begin
    result := '';
    if Length(Format) > 0 then
    begin
      try
        repeat
          if Format[i] = '%' then
          begin
            N := 0;
            T := '';
            case Format[i + 1] of
              'P':
                begin
                  while Format[i + 1] = 'P' do
                  begin
                    Inc(N);
                    Inc(i);
                  end;
                  T := tNames1.publicationIDtoname(Publicationid);
                end;
              'E':
                begin
                  while Format[i + 1] = 'E' do
                  begin
                    Inc(N);
                    Inc(i);
                  end;
                  T := tNames1.editionIDtoname(editionid);
                end;
              'S':
                begin
                  while Format[i + 1] = 'S' do
                  begin
                    Inc(N);
                    Inc(i);
                  end;
                  T := tNames1.sectionidtoname(Sectionid);

                end;
              'p':
                begin
                  while Format[i + 1] = 'p' do
                  begin
                    Inc(N);
                    Inc(i);
                  end;
                  T := tNames1.publicationIDtoname(Publicationid);
                  if Publicationlongname.IndexOf(T) > -1 then
                    T := Publicationalias[Publicationlongname.IndexOf(T)];
                end;
              'e':
                begin
                  while Format[i + 1] = 'e' do
                  begin
                    Inc(N);
                    Inc(i);
                  end;
                  T := tNames1.editionIDtoname(editionid);
                  if Editionlongname.IndexOf(T) > -1 then
                    T := Editionalias[Editionlongname.IndexOf(T)];
                end;
              's':
                begin
                  while Format[i + 1] = 's' do
                  begin
                    Inc(N);
                    Inc(i);
                  end;
                  T := tNames1.sectionidtoname(Sectionid);
                  if sectionlongname.IndexOf(T) > -1 then
                    T := sectionalias[sectionlongname.IndexOf(T)];
                end;
              'N':
                begin
                  while Format[i + 1] = 'N' do
                  begin
                    Inc(N);
                    Inc(i);

                  end;
                  T := T + pagename;
                  while Length(T) < N do
                    T := '0' + T;

                end;
              'D':
                begin
                  Inc(i);
                  if pos('W', dateformat) > 0 then
                  begin
                    D := IntToStr(Week);
                    while Length(D) < Length(dateformat) do
                      D := '0' + D;
                  end
                  else
                  begin
                    D := FormaTDateTime(dateformat, Pubdate);
                  end;

                  T := D;
                end;

            end;

          end
          else
          begin
            T := Format[i];
          end;
          result := result + T;
          Inc(i);
        until i >= Length(Format);
      Except
      end;
    end;
  End
  else
  begin
    result := Format;
  end;

end;

procedure TFormMain.ActionmontorrefreshExecute(Sender: TObject);
begin
  FormUknownfiles.refreshunknownfile(ListViewunkowfiles);
end;

procedure TFormMain.ActionunkownretryExecute(Sender: TObject);
begin
  Actionnknowautorefresh.Checked := false;
  FormUknownfiles.retryuknownfile(ListViewunkowfiles);
end;

procedure TFormMain.ActionUnkownrenameExecute(Sender: TObject);
begin
  Actionnknowautorefresh.Checked := false;
  FormUknownfiles.renameUnknownfile(ListViewunkowfiles);
end;

procedure TFormMain.ActionnknowautorefreshExecute(Sender: TObject);
begin
  Actionnknowautorefresh.Checked := not Actionnknowautorefresh.Checked;
  Timerautorefreshcount := 1;
  Actionnknowautorefresh.ImageIndex := 149;
end;

procedure TFormMain.ActionUnknowndeleteExecute(Sender: TObject);
Var
  i: Integer;
  T: String;
begin
  try
    Actionnknowautorefresh.Checked := false;
    for i := 0 to ListViewunkowfiles.Items.Count - 1 do
    begin
      if ListViewunkowfiles.Items[i].Selected then
      begin
        DeleteFile(ListViewunkowfiles.Items[i].SubItems[3]);
        T := ListViewunkowfiles.Items[i].SubItems[3] + '.log';
        DeleteFile(T);
      end;
    end;
  Finally
    Actionmontorrefresh.Execute;
  end;
end;

// Used for indicating Unknown files red symbol
(*
  procedure TFormMain.TimerUknownTimer(Sender: TObject);
  var
  R,Ifolder : Integer;
  T : string;
  F: TSearchRec;
  l : tlistitem;
  i : Integer;
  Empty : Boolean;
  Filterstr : String;
  Foldernumber : Integer;

  begin
  if not StartupDone then exit;
  // memotestPrefs.Debug.Lines.Add('TimerUknownTimer');
  // memotestPrefs.Debug.refresh;
  if FormUknownfiles.Uknownfilter = '' then
  Filterstr := '*.*'
  else
  Filterstr := FormUknownfiles.Uknownfilter;

  Foldernumber := FormUknownfiles.Uknownfolder;

  Empty := true;

  TimerUknown.Enabled := false;
  if (Prefs.CheckForUnknownFilesTimer) and (PageControlMain.ActivePageIndex <> VIEW_FILES) then
  begin
  Empty := true;
  for ifolder := 1 to NErrorfolders do
  begin
  if (Foldernumber < 0) or (Formerrorfolderselect.CheckListBox1.checked[ifolder]) then
  begin
  R := FindFirst(IncludeTrailingBackSlash(IncludeTrailingBackSlash(Mainerrorfolder)+IntToStr(Errorfolders[ifolder].InputID))+Filterstr,faAnyFile		,F);
  while (r = 0) and (not Formreloadingerrorfiles.stopit) do
  begin
  if not(f.Attr in [faDirectory]) then
  begin
  if extractfileext(f.Name) <> '.log' then
  begin
  Empty := false;
  break;
  end;
  end;
  r := findnext(f);
  end;
  findclose(f);
  if not Empty then
  break;
  end;
  end;

  if Empty then
  SetUnknownFilesLampOff
  else
  SetUnknownFilesLampOn;

  //  TabSheetUnknownpages.refresh;
  end;
  TimerUknown.Enabled := true;
  end;
*)

procedure TFormMain.SetUnknownFilesLampOn;
begin
  ActionMainMenuBar1X.ActionClient.Items[3].ImageIndex := 192;
  PageControlMain.pages[8].ImageIndex := 17;
end;

procedure TFormMain.SetUnknownFilesLampOff;
begin
  ActionMainMenuBar1X.ActionClient.Items[3].ImageIndex := 193;
  PageControlMain.pages[8].ImageIndex := 8;
end;

function TFormMain.loadplateview(keepviews: Boolean;
  Smoothupdate: Boolean): Boolean;
Var
  anode, Aktnode, pressnode, publnode, runnode: TTreeNode;
  Pressrunselstr: string;
  Nselected, i: Integer;
  pressrunid: Integer;
  Selpublid: Integer;
  Seledition: Integer;
  Selsection: Integer;
  selpubdate: TDateTime;
  ProductionID: Integer;
  n1, n2, n3, n4: TTreeNode;
  T: string;
  ValidproductionLevel: Integer;

  Topplate, endplate: Integer;
  aktscroll: Integer;

  NMinMaxsettings: Integer;
  pressid: Integer;
  MinMaxsettings: Array [1 .. 200] of record minimized: Boolean;
  caption: String;
end;

begin
  result := false;
  try
    writeMainlogfile('Loadplateview start ' + IntToStr(Integer(keepviews)));
    LookForProducerrorNow := true;
    saveminmaxplateview;
    Topplate := -1;
    endplate := -1;

    aktscroll := PlateviewMain.VertScrollBar.Position;

    if Nviews > 0 then
    begin
      try
        Topplate := Views[0].platesData[0].copyflatseparationset;
        if Views[Nviews - 1].Nplates > 0 then
          endplate := Views[Nviews - 1].platesData
            [Views[Nviews - 1].Nplates - 1].copyflatseparationset;
        aktscroll := PlateviewMain.VertScrollBar.Position;
      Except
      end;
    end;

    writeMainlogfile('Loadplateview2 ');

    Seledition := -1;
    if keepviews then
      storePlateselection;
    result := false;
    runnode := TreeViewPlateview.Selected;
    if runnode = nil then
      exit;
    if runnode.Level < Prefs.PlateTreeMinLevel then
      exit;

    Selsection := -1;
    Aktnode := runnode;

    pressrunid := TTreeViewpagestype(runnode.Data^).pressrunid;
    writeMainlogfile('Loadplateview pressrunid = ' + IntToStr(pressrunid));
    if runnode.Level > 3 Then
      Selsection := TTreeViewpagestype(runnode.Data^).Sectionid;

    if runnode.Level = 3 Then
      Seledition := TTreeViewpagestype(runnode.Data^).editionid;
    writeMainlogfile('Loadplateview3 ');
    while runnode.Level > 3 do
      runnode := runnode.Parent;

    pressnode := runnode.Parent;
    while pressnode.Level > 0 do
      pressnode := pressnode.Parent;

    Selpublid := TTreeViewpagestype(runnode.Data^).Publicationid;
    selpubdate := TTreeViewpagestype(runnode.Data^).Pubdate;
    ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;
    pressid := TTreeViewpagestype(runnode.Data^).platetreepressid;

    FormMain.StatusBar1.Panels[1].text := 'ProductionID ' +
      IntToStr(ProductionID);
    if (pressrunid > 0) then
      FormMain.StatusBar1.Panels[1].text := 'ProductionID ' +
        IntToStr(ProductionID) + ' / PressRunID ' + IntToStr(pressrunid);

    T := datetostr(selpubdate);
    Pressrunselstr := '(-48';
    Nselected := 0;

    ValidproductionLevel := 0;
    writeMainlogfile('Loadplateview4 ');
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('SELECT TOP 1 PlanType From ProductionNames WITH (NOLOCK) ');
    Datam1.Query1.SQL.Add('Where productionid = ' + IntToStr(ProductionID));
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
    begin
      if Datam1.Query1.Fields[0].AsInteger > 0 then
        ValidproductionLevel := 10
      else
        ValidproductionLevel := 1;
    end;
    Datam1.Query1.Close;

    writeMainlogfile('Loadplateview5 ');
    NPossiblepressrunid := 0;
    if ValidproductionLevel < 10 then
    begin
      writeMainlogfile('Loadplateview6 ');
      case ValidproductionLevel of
        0:
          begin
            // MessageDlg(InfraLanguage1.Translate('This production does not exist any longer'), mtInformation,[mbOk], 0);
            exit;
          end;
        1:
          begin
            MessageDlg(InfraLanguage1.Translate
              ('No plateplan has been applied to this production'),
              mtInformation, [mbOk], 0);
          end;
      end;
    End
    else
    begin
      writeMainlogfile('Loadplateview7 ');
      n1 := Aktnode;
      try
        anode := n1;
        if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
        begin
          if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
            Pressrunselstr) = 0 then
          begin
            Pressrunselstr := Pressrunselstr + ',' +
              IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
            Inc(NPossiblepressrunid);
            Possiblepressrunid[NPossiblepressrunid] :=
              TTreeViewpagestype(anode.Data^).pressrunid;

          end;
        end;
        n2 := n1.GetFirstChild;

        while n2 <> nil do
        begin
          anode := n2;
          if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
          begin
            if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
              Pressrunselstr) = 0 then
            begin
              Pressrunselstr := Pressrunselstr + ',' +
                IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
              Inc(NPossiblepressrunid);
              Possiblepressrunid[NPossiblepressrunid] :=
                TTreeViewpagestype(anode.Data^).pressrunid;

            end;
          end;

          n3 := n2.GetFirstChild;
          while n3 <> nil do
          begin
            anode := n3;
            if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
            begin
              if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
                Pressrunselstr) = 0 then
              begin
                Pressrunselstr := Pressrunselstr + ',' +
                  IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
                Inc(NPossiblepressrunid);
                Possiblepressrunid[NPossiblepressrunid] :=
                  TTreeViewpagestype(anode.Data^).pressrunid;

              end;
            end;
            n3 := n3.getNextSibling;
          end;
          n2 := n2.getNextSibling;
        end;

      except
      end;

      try
        Pressrunselstr := Pressrunselstr + ') and productionid = ' +
          IntToStr(ProductionID);

        PlateviewProductionid := ProductionID;
        PlateviewMain.Visible := false;
        writeMainlogfile('Loadplateview loadplateviewRuns start');
        writeMainlogfile('Loadplateview10 manual');

        if (Prefs.NewPlateDataSystem) then
          FormMain.Getplateviewpagetable(ProductionID, pressid);

        loadplateviewRuns(Pressrunselstr, Nselected, pressrunid, pressnode.text,
          Selpublid, selpubdate, Selsection, Seledition, keepviews);
        writeMainlogfile('Loadplateview loadplateviewRuns End');
        result := true;

        if not PlateviewMain.Visible then
          PlateviewMain.Visible := true;
      Except
      end;

      if keepviews then
      begin
        writeMainlogfile('Loadplateview RestorePlateselection start');
        RestorePlateselection;
        writeMainlogfile('Loadplateview RestorePlateselection End');
      end;

      if therearenoplates then
      begin
        Nviews := 0;
        writeMainlogfile('therearenoplates');
      end;
      // if (Nviews > 0) and (not therearenoplates) then
      // begin
      // try
      (*
        if (Topplate = views[0].platesData[0].CopyFlatSeparationSet) and (endplate = views[Nviews-1].platesData[views[Nviews-1].Nplates-1].CopyFlatSeparationSet) then
        begin
        PlateviewMain.VertScrollBar.Position := aktscroll;
        end;
      *)
      // Except
      // end;
      // end;

    end;
    if MinMaxpressrunselstring = Pressrunselstr then
      Loadminmaxplateview;
    MinMaxpressrunselstring := Pressrunselstr;
    writeMainlogfile('Loadplateview End');
  Except
    result := false;
    writeMainlogfile('Loadplateview exception');
  end;
end;

procedure TFormMain.ComboBoxactivequeueChange(Sender: TObject);
Var
  chtype: Integer;
begin
  chtype := setalllocationcombos(TComboBox(Sender).text);

  if chtype = 2 then
  begin
    TreeViewpagelist.Items.Clear;
    TreeViewThumbs.Items.Clear;
    TreeViewPlateview.Items.Clear;
    TreeViewprodcontrol.Items.Clear;
    TreeViewNeweddtree.Items.Clear;
    TreeViewplan.Items.Clear;
    TreeViewLogfilter.Items.Clear;
    TreeViewreportfilter.Items.Clear;
    screen.Cursor := crhourglass;
  end
  else
  begin
    updateactiveplates;
  end;
end;

procedure TFormMain.updateactiveplates;
var
  platename: String;
  i, i2: Integer;
  L: TListItem;
  found: Boolean;
  first, Anyfound: Boolean;
  Flatseps: string;
  aktflat: Int64;
  status, priority, tmpllistnum: Integer;
begin
  actDevselected := -1;
  platename := '';

  Datam1.Query1.SQL.Clear;
  // 0         1         2                  3             4             5            6            7         8         9              10         11
  Datam1.Query1.SQL.Add
    ('SELECT P1.Deviceid,P1.status,P1.Publicationid,P1.editionid,P1.sectionid,P1.pagename,P1.copynumber,P1.Colorid,P1.priority,P1.templateid,P1.pageindex,P1.flatseparation,P1.PubDate FROM PageTable AS P1  WITH (NOLOCK)');
  Datam1.Query1.SQL.Add
    ('INNER JOIN ColorNames AS COL WITH (NOLOCK) ON COL.ColorID=P1.ColorID');
  Datam1.Query1.SQL.Add
    ('INNER JOIN ProductionNames AS PROD WITH (NOLOCK) ON PROD.Productionid=P1.Productionid');
  Datam1.Query1.SQL.Add('WHERE');
  Datam1.Query1.SQL.Add('P1.Dirty = 0');
  if (ComboBoxactivequeue.Visible) AND (GroupBoxActiveQueueLocation.Visible) AND
    (ComboBoxactivequeue.text <> '') then
    Datam1.Query1.SQL.Add('AND P1.LocationID = ' +
      IntToStr(tNames1.locationnametoid(ComboBoxactivequeue.text)));

  Datam1.Query1.SQL.Add('AND P1.OutputPriority>=0');

  if (Pressvisibilylimited) AND (PressvisibilyIN <> '') then
    Datam1.Query1.SQL.Add('and p1.pressid IN ' + PressvisibilyIN);

  Datam1.Query1.SQL.Add('AND (P1.Status>=30 and P1.Status<50)');
  Datam1.Query1.SQL.Add('AND P1.UniquePage > 0');
  Datam1.Query1.SQL.Add('AND P1.Active=1');
  Datam1.Query1.SQL.Add('AND P1.Hold=0');
  Datam1.Query1.SQL.Add('AND P1.OutputPriority>=0');
  Datam1.Query1.SQL.Add('AND PROD.plantype>0');
  Datam1.Query1.SQL.Add('AND (P1.Approved = -1 OR P1.Approved = 1)');
  Datam1.Query1.SQL.Add
    ('AND not EXISTS ( SELECT P2.FlatSeparation from PageTable AS P2 WITH (NOLOCK) WHERE P1.FlatSeparation = P2.FlatSeparation AND P2.Dirty=0 AND P2.Active=1 AND (P2.Status < 30 OR P2.Hold = 1 OR P2.Approved=2 OR P2.Approved=0))');
  Datam1.Query1.SQL.Add
    ('ORDER BY p1.deviceid desc,P1.Priority DESC,P1.PressRunID,P1.SheetNumber,P1.SheetSide,P1.CopyFlatSeparationSet,COL.ColorOrder,P1.CopyNumber, P1.ApproveTime,P1.InputTime');
  if Prefs.Debug then
    Datam1.Query1.SQL.SaveToFile
      (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
      'activequeue.SQL');
  Tryopen(Datam1.Query1);
  Flatseps := '(-42';
  ListViewActqueue.Items.Clear;
  aktflat := -1;
  while not Datam1.Query1.Eof do
  begin
    if aktflat <> Datam1.Query1.Fields[11].AsInteger then
    begin
      L := ListViewActqueue.Items.Add;
      L.caption := tNames1.deviceIDtoname(Datam1.Query1.Fields[0].AsInteger);
      L.SubItems.Add(statusarray[Datam1.Query1.Fields[1].AsInteger].Name);
      L.SubItems.Add(FormaTDateTime('DD.MM.YYYY',
        Datam1.Query1.Fields[12].AsDateTime));
      L.SubItems.Add(tNames1.publicationIDtoname(Datam1.Query1.Fields[2]
        .AsInteger));
      L.SubItems.Add(tNames1.editionIDtoname(Datam1.Query1.Fields[3]
        .AsInteger));
      L.SubItems.Add(tNames1.sectionidtoname(Datam1.Query1.Fields[4]
        .AsInteger));
      L.SubItems.Add(Datam1.Query1.Fields[6].AsString);
      platename := '';
      L.SubItems.Add(platename);
      L.SubItems.Add(tNames1.ColornameIDtoname(Datam1.Query1.Fields[7]
        .AsInteger));
      tmpllistnum := inittypes.gettemplatenumberfromID
        (Datam1.Query1.Fields[9].AsInteger);
      L.SubItems.Add(PlatetemplateArray[tmpllistnum].TemplateName);
      L.SubItems.Add(Datam1.Query1.Fields[8].AsString);
      L.StateIndex := Datam1.Query1.Fields[11].AsInteger;
      aktflat := Datam1.Query1.Fields[11].AsInteger;
    end;
    if (platename <> '') then
      platename := platename + ',';
    platename := platename + Datam1.Query1.Fields[5].AsString;
    L.SubItems[6] := platename;

    Anyfound := true;
    Datam1.Query1.Next;
  end;
  Datam1.Query1.Close;
end;

procedure TFormMain.ActionactiverefreshExecute(Sender: TObject);
begin
  updateactiveplates;
end;

procedure TFormMain.ActionActiholdExecute(Sender: TObject);
Var
  i: Integer;
begin
  for i := 0 to ListViewActqueue.Items.Count - 1 do
  begin
    if ListViewActqueue.Items[i].Selected then
    begin
      Datam1.Query1.SQL.Clear;
      // 0             1         2           3         4            5        6       7         8       9      10
      Datam1.Query1.SQL.Add('update pagetable set hold = 1');
      Datam1.Query1.SQL.Add('Where flatseparation = ' +
        IntToStr(ListViewActqueue.Items[i].StateIndex));
      Datam1.Query1.SQL.Add('and pagetype < 2');
      trysql(Datam1.Query1);
    end;
  end;
  Actionactiverefresh.Execute;
end;

procedure TFormMain.ActionactreleaseExecute(Sender: TObject);
var
  i: Integer;
begin
  for i := 0 to ListViewActqueue.Items.Count - 1 do
  begin
    if ListViewActqueue.Items[i].Selected then
    begin
      Datam1.Query1.SQL.Clear;
      // 0             1         2           3         4            5        6       7         8       9      10
      Datam1.Query1.SQL.Add('update pagetable set hold = 0'); // OK
      if (Prefs.SetApproveTimeOnRelease) then
        Datam1.Query1.SQL.Add(', approvetime = getdate(),approveuser=' + '''' +
          Prefs.Username + '''');
      Datam1.Query1.SQL.Add('Where flatseparation = ' +
        IntToStr(ListViewActqueue.Items[i].StateIndex));
      Datam1.Query1.SQL.Add('and pagetype < 2');
      trysql(Datam1.Query1);
    end;
  end;
  Actionactiverefresh.Execute;
end;

procedure TFormMain.ActionactpriorityExecute(Sender: TObject);
var
  i: Integer;
begin

  if Formpriority.ShowModal = mrOK then
  begin
    for i := 0 to ListViewActqueue.Items.Count - 1 do
    begin
      if ListViewActqueue.Items[i].Selected then
      begin
        Datam1.Query1.SQL.Clear;
        // 0             1         2           3         4            5        6       7         8       9      10
        Datam1.Query1.SQL.Add('update pagetable set priority = ' +
          Formpriority.edit1.text);
        Datam1.Query1.SQL.Add('Where flatseparation = ' +
          IntToStr(ListViewActqueue.Items[i].StateIndex));
        Datam1.Query1.SQL.Add('and pagetype < 2');
        trysql(Datam1.Query1);
      end;
    end;
  end;
  Actionactiverefresh.Execute;
end;

procedure TFormMain.ActionactiveautoExecute(Sender: TObject);
begin
  Actionactiveauto.Checked := not Actionactiveauto.Checked;
end;

procedure TFormMain.ListViewActqueueAdvancedCustomDrawItem
  (Sender: TCustomListView; Item: TListItem; State: TCustomDrawState;
  Stage: TCustomDrawStage; var DefaultDraw: Boolean);
Var
  S: string;
begin
  if Item.caption = '' then
    ListViewActqueue.Canvas.Brush.Color := ClSilver;

  S := Item.SubItems[0];
  if S = statusarray[49].Name then
    ListViewActqueue.Canvas.Brush.Color := tcolor($C8FFC8)
  else if S = statusarray[45].Name then
    ListViewActqueue.Canvas.Brush.Color := tcolor($64C8FF)
  else if S = statusarray[46].Name then
    ListViewActqueue.Canvas.Brush.Color := clred
  else if S = statusarray[30].Name then
    ListViewActqueue.Canvas.Brush.Color := clYellow;

  DefaultDraw := true;
end;

function TFormMain.ConnectUserDrive(Username: string; Password: string;
  Path: string; echo: Boolean): Boolean;
var
  StartInfo: TStartupInfo;
  ProcInfo: TProcessInformation;
  CreateOK: Boolean;
  T: String;
  Alist: Tstrings;
  connBatPath: string;
  connResultPath: string;
begin
  result := false;
  Alist := Tstringlist.Create;
  // blist := TStringList.Create;
  if ConnectUserDriveCount > 10 then
    ConnectUserDriveCount := 0;

  Inc(ConnectUserDriveCount);

  try
    // path := ExtractFilePath(path);
    Path := ExcludeTrailingBackslash(Path);
    (*
      if not directoryexists(path) then
      begin
    *)
    try
      if (not Prefs.IgnoreNetUseCommand) OR
        ((Prefs.IgnoreNetUseCommand AND Prefs.OnlyConnectPlanCenterUser)) then
      begin
        FillChar(StartInfo, SizeOf(TStartupInfo), #0);
        FillChar(ProcInfo, SizeOf(TProcessInformation), #0);
        StartInfo.cb := SizeOf(TStartupInfo);
        StartInfo.dwFlags := STARTF_USESHOWWINDOW;
        if echo and false then
          StartInfo.wShowWindow := SW_SHOW
        else
          StartInfo.wShowWindow := SW_HIDE;
        // T := 'Net use "'+path+'" "'+password+'" /USER:'+'"'+username  + '"'+'  > NetConResult.txt';
        connBatPath := ExcludeTrailingBackslash(TUtils.GetTempDirectory()) +
          IntToStr(ConnectUserDriveCount) + 'Netconnect.bat';
        connResultPath := ExcludeTrailingBackslash(TUtils.GetTempDirectory()) +
          IntToStr(ConnectUserDriveCount) + 'NetConResult.txt';
        T := 'Net use "' + Path + '" "' + Password + '" /USER:' + '"' + Username
          + '"' + ' > ' + '"' + connResultPath + '"';

        DeleteFile(connResultPath);
        Alist.Add(T);
        // Alist.Add('Exit');
        Alist.SaveToFile(connBatPath);
        Application.ProcessMessages;

        CreateOK := CreateProcess(nil, PChar(connBatPath), nil, nil, false,
          CREATE_NEW_CONSOLE or NORMAL_PRIORITY_CLASS, nil, nil, StartInfo,
          ProcInfo);

        if CreateOK then
          WaitForSingleObject(ProcInfo.hProcess, INFINITE);

        DeleteFile(connBatPath);
        if CreateOK then
        begin
          result := DirectoryExists(Path);
        end;
      End
      else
        result := true;
    Except

    end;
    (*
      End
      else
      result := true;
    *)
  Finally
    Alist.free;
    // Blist.Free;
  end;
end;

procedure TFormMain.ActionnewplanCreateExecute(Sender: TObject);
begin
  try
    Formprodplan.ItsArepair := false;
    Planloggingtype := 990;
    Planloggingmessage := 'Plan created';

    Formprodplan.PartialPlanning := false;
    plateframesloadedname := '';
    FormAddpressrun.CheckBoxApplyonlyplannedcolors.Checked := false;
    Formprodplan.planningaction := 2;
    // 0 load,1 edit,2 create,3 copy, 4 move, 5 apply
    Formprodplan.Editmode := PLANADDMODE_CREATE;
    Mainwizard(false);
  finally
    Setplanlock(false);
  end;
end;

procedure TFormMain.Mainwizard(CopyOrMoving: Boolean);
(* Remotecall : Boolean); *)
var
  N: TTreeNode;
  prodplanok: Boolean;
begin
  prodplanok := true;
  try
    if (tNames1.Pnpressnames = 1) then
      plateframespressid := tNames1.GetFirstPressID
    else if (tNames1.pressnametoid(ComboBoxPressGrp.text) > 0) then
    begin
      plateframespressid := tNames1.pressnametoid(ComboBoxPressGrp.text);
    end
    else
    begin
      if (TreeViewplan.Selected = nil) or
        ((tNames1.Pnpressnames > 1) AND (TreeViewplan.Selected.Level < 1)) then
      Begin
        ShowMessage('Please select a press in tree');
        exit;
      End;
    end;

    planlogging('ActionnewplanCreateExecute');

    N := FormMain.TreeViewplan.Selected;
    while N.Level > 1 do
      N := N.Parent;

    LoadIDs('ActionnewplanCreateExecute', false);
    Formaddplan.Panelbigwizz.Visible := true;

    Formprodplan.ComboBoxLocation.Items := tNames1.locationnames;

    FormMain.ProgressBarmain.Position := 0;
    Formprodplan.ProgressBarprod.Position := 0;

    Formprodplan.ComboBoxLocation.ItemIndex :=
      Formprodplan.ComboBoxLocation.Items.IndexOf
      (tNames1.locationIDtoname(plateframeslocationid));
    Formprodplan.possiblepressesonlocation(plateframeslocationid,
      Formprodplan.ComboBoxpress.Items);
    Formprodplan.ComboBoxpress.ItemIndex :=
      Formprodplan.ComboBoxpress.Items.IndexOf
      (tNames1.pressnameIDtoname(plateframespressid));

    Formprodplan.ComboBoxpublication.Items := tNames1.publicationnames;
    Formprodplan.Anychange := true;

    if not Formprodplan.planisactive then
    begin
      Formprodplan.planisactive := true;
      Formtower.CheckBox1.Checked := Prefs.UseDatabasePressTowerInfo;
      selIpl := 0;

      if (Prefs.Proversion > 0) then
      begin
        Formprodplan.ActionSetuniquepage.Visible := false;
        Formprodplan.ActionSetuniquepages.Visible := false;
        Formprodplan.Actioncommon.Visible := false;
      end;

      if not Formprodplan.activated then
      begin
        Formprodplan.ColumnToSort := 0;
        FormApplyproduction.CheckBoxAllowunplannedcolors.Checked :=
          Prefs.PlanningAllowUnplannedColors;
        Formprodplan.activated := true;
      end;

      if (not CopyOrMoving) then
      begin
        case Formprodplan.Editmode of
          PLANADDMODE_CREATE:
            begin
              Formprodplan.ActionRun.ImageIndex := 98;
              Formprodplan.ActionRun.caption := 'Run';
              prodplanok := Formprodplan.wizard(false (* , false *) );
              Formprodplan.ComboBoxpublication.ItemIndex :=
                Formprodplan.ComboBoxpublication.Items.IndexOf
                (tNames1.publicationIDtoname(plateframesPublicationid));
              Formprodplan.DateTimePickerPubdate.Date := plateframesPubdate;

              // NAN 20171223 - make sure productionID is not set to old plan..!
              plateframesproductionid := -1;
              Formprodplan.EditProductionname.text := '';
              (* if plateframesproductionid > -1 then
                Formprodplan.EditProductionname.Text := tnames1.productionrunIDtoname(plateframesproductionid)
                else
                Formprodplan.EditProductionname.Text := plateframesproductionname; *)
            end;
          PLANADDMODE_APPLY:
            begin // apply
              Formprodplan.ActionRun.ImageIndex := 98;
              Formprodplan.ActionRun.caption := 'Run';
              prodplanok := Formprodplan.wizard(false (* ,false *) );
              Formprodplan.ComboBoxpublication.ItemIndex :=
                Formprodplan.ComboBoxpublication.Items.IndexOf
                (tNames1.publicationIDtoname(plateframesPublicationid));
              Formprodplan.DateTimePickerPubdate.Date := plateframesPubdate;

              if plateframesproductionid < 0 then
              begin
                N := FormMain.TreeViewplan.Selected;
                plateframesproductionid :=
                  Tplantreedata(TreeViewplan.Selected.Data^).ProductionID;
              end;

              // ???? -1 ????
              if plateframesproductionid > -1 then
              begin
                Formprodplan.EditProductionname.text :=
                  tNames1.productionrunIDtoname(plateframesproductionid)
              End
              else
              begin
                Formprodplan.EditProductionname.text :=
                  plateframesproductionname;
              end;

            end;
        end;
      End
      else
      begin
        // if CopyOrMoving then
        // begin
        Formprodplan.ActionRun.ImageIndex := 98;
        Formprodplan.ActionRun.caption := 'Run';
        prodplanok := Formprodplan.wizard(false (* ,false *) );
        Formprodplan.ComboBoxpublication.ItemIndex :=
          Formprodplan.ComboBoxpublication.Items.IndexOf
          (tNames1.publicationIDtoname(plateframesPublicationid));
        Formprodplan.DateTimePickerPubdate.Date := plateframesPubdate;

        if plateframesproductionid < 0 then
        begin
          N := FormMain.TreeViewplan.Selected;
          plateframesproductionid := Tplantreedata(TreeViewplan.Selected.Data^)
            .ProductionID;
        end;

        // ???? > -1 ????
        if plateframesproductionid > -1 then
        begin
          Formprodplan.EditProductionname.text := tNames1.productionrunIDtoname
            (plateframesproductionid)
        End
        else
        begin
          Formprodplan.EditProductionname.text := plateframesproductionname;
        end;

        (* end
          else
          begin
          Formprodplan.ActionRun.ImageIndex := 98;
          Formprodplan.ActionRun.Caption := 'Run';
          prodplanok := Formprodplan.wizard(false,true);
          Formprodplan.ComboBoxpublication.ItemIndex := Formprodplan.ComboBoxpublication.Items.IndexOf(tnames1.publicationIDtoname(plateframespublicationid));
          Formprodplan.DateTimePickerPubdate.Date := plateframesPubdate;
          if plateframesproductionid > -1 then
          Formprodplan.EditProductionname.Text := tnames1.productionrunIDtoname(plateframesproductionid)
          else
          Formprodplan.EditProductionname.Text := plateframesproductionname;
          end; *)
      end;

    end;
    if prodplanok then
    begin
      if Formprodplan.ShowModal = mrOK then
      begin
        Formprodplan.planisactive := false;
      end;
    end;
  Finally
    if (plateframesproductionid > 0) then
    begin
      Makeplantree(plateframesproductionid);

      // NAN Experimental!
      Keeptreeselection.Anyselect := true;
      Keeptreeselection.Pubdate := plateframesPubdate;
      Keeptreeselection.Publicationid := plateframesPublicationid;
      Keeptreeselection.pressid := plateframespressid;

    end
    else
      Makeplantree(-1);

    findplantreenode;
    Formprodplan.planisactive := false;
  end;

end;

procedure TFormMain.MainEditplan;
var
  N: TTreeNode;
begin
  try
    if TreeViewplan.Selected = nil then
      exit;
    // if TreeViewplan.Selected.Level < 1 then exit;
    if (tNames1.Pnpressnames > 1) AND (TreeViewplan.Selected.Level < 1) then
      exit;

    if (tNames1.Pnpressnames = 1) then
      plateframespressid := tNames1.GetFirstPressID;

    LoadIDs('MainEditplan', false);

    FormMain.planlogging('ActionnewplaneditExecute');
    N := FormMain.TreeViewplan.Selected;
    while N.Level > 1 do
      N := N.Parent;

    plateframeslocationid := Tplantreedata(N.Data^).LocationID;
    plateframespressid := Tplantreedata(N.Data^).pressid;
    Formprodplan.ComboBoxLocation.Items := tNames1.locationnames;
    Formprodplan.ComboBoxLocation.ItemIndex :=
      Formprodplan.ComboBoxLocation.Items.IndexOf
      (tNames1.locationIDtoname(plateframeslocationid));
    Formprodplan.possiblepressesonlocation(plateframeslocationid,
      Formprodplan.ComboBoxpress.Items);
    Formprodplan.ComboBoxpress.ItemIndex :=
      Formprodplan.ComboBoxpress.Items.IndexOf
      (tNames1.pressnameIDtoname(plateframespressid));
    Formprodplan.ComboBoxpublication.Items := tNames1.publicationnames;
    Formprodplan.Anychange := false;
    N := FormMain.TreeViewplan.Selected;
    while N.Level > 2 do
      N := N.Parent;

    plateframeslocationid := Tplantreedata(N.Data^).LocationID;
    plateframespressid := Tplantreedata(N.Data^).pressid;
    Formprodplan.ComboBoxLocation.Items := tNames1.locationnames;
    Formprodplan.ComboBoxLocation.ItemIndex :=
      Formprodplan.ComboBoxLocation.Items.IndexOf
      (tNames1.locationIDtoname(plateframeslocationid));
    Formprodplan.possiblepressesonlocation(plateframeslocationid,
      Formprodplan.ComboBoxpress.Items);
    Formprodplan.ComboBoxpress.ItemIndex :=
      Formprodplan.ComboBoxpress.Items.IndexOf
      (tNames1.pressnameIDtoname(plateframespressid));
    Formprodplan.ComboBoxpublication.Items := tNames1.publicationnames;
    Formprodplan.Anychange := true;

    plateframesproductionid := Tplantreedata(N.Data^).ProductionID;
    plateframesPubdate := Tplantreedata(N.Data^).Pubdate;
    plateframesPublicationid := Tplantreedata(N.Data^).Publicationid;
    plateframeslocationid := Tplantreedata(N.Data^).LocationID;
    plateframespressid := Tplantreedata(N.Data^).pressid;

    Formprodplan.SetprodrundataToUI;

    Formprodplan.ComboBoxpublication.ItemIndex :=
      Formprodplan.ComboBoxpublication.Items.IndexOf
      (tNames1.publicationIDtoname(plateframesPublicationid));
    plateframesPubdate := Tplantreedata(N.Data^).Pubdate;

    // ???? > -1 ????
    if plateframesproductionid > -1 then
      Formprodplan.EditProductionname.text := tNames1.productionrunIDtoname
        (plateframesproductionid)
    else
      Formprodplan.EditProductionname.text := plateframesproductionname;

    Formprodplan.DateTimePickerPubdate.Date := plateframesPubdate;

    if not Formprodplan.activated then
    begin
      Formprodplan.ColumnToSort := 0;
      FormApplyproduction.CheckBoxAllowunplannedcolors.Checked :=
        Prefs.PlanningAllowUnplannedColors;
      Formprodplan.activated := true;
    end;

    if (Prefs.Proversion > 0) then
    begin
      Formprodplan.ActionSetuniquepage.Visible := false;
      Formprodplan.ActionSetuniquepages.Visible := false;
      Formprodplan.Actioncommon.Visible := false;
    end;

    // Formprodplan.Setbluebar;

    Formtower.CheckBox1.Checked := Prefs.UseDatabasePressTowerInfo;
    selIpl := 0;
    FormMain.ProgressBarmain.Position := 0;
    Formprodplan.ProgressBarprod.Position := 0;
    Formprodplan.planisactive := true;
    Formprodplan.ActionRun.ImageIndex := 74;
    Formprodplan.ActionRun.caption := 'Apply';

    if Formprodplan.ShowModal = mrOK then
    begin
      Formprodplan.planisactive := false;
    end;

  Finally
    Makeplantree(-1);
    findplantreenode;
    Formprodplan.planisactive := false;

  end;
end;

procedure TFormMain.ActionplatetreeCommentExecute(Sender: TObject);
var
  runnode: TTreeNode;
  pressid: Integer;
  LocationID: Integer;
  Pressrunselstr: string;
  anode, n1, n2, n3: TTreeNode;
  ProductionID: Integer;
  T: string;
begin
  try
    FormChangecomment.CheckBoxallsubed.Visible := false;
    if TreeViewPlateview.Selected = nil then
      exit;
    runnode := TreeViewPlateview.Selected;
    if runnode = nil then
      exit;
    if runnode.Level < 2 then
      exit;
    Pressrunselstr := '(-48';
    ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;
    n1 := runnode;

    setAcommentResult := setAcomment(T, 'Set pressrun comment');

    if setAcommentResult > 0 then
    begin
      try
        anode := n1;
        if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
        begin
          if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
            Pressrunselstr) = 0 then
            Pressrunselstr := Pressrunselstr + ',' +
              IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
        end;
        n2 := n1.GetFirstChild;
        while n2 <> nil do
        begin
          anode := n2;
          if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
          begin
            if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
              Pressrunselstr) = 0 then
              Pressrunselstr := Pressrunselstr + ',' +
                IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
          end;

          n3 := n2.GetFirstChild;
          while n3 <> nil do
          begin
            anode := n3;
            if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
            begin
              if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
                Pressrunselstr) = 0 then
                Pressrunselstr := Pressrunselstr + ',' +
                  IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
            end;
            n3 := n3.getNextSibling;
          end;
          n2 := n2.getNextSibling;
        end;

      except
      end;

      Pressrunselstr := Pressrunselstr + ') ';

      while runnode.Level > 1 do
        runnode := runnode.Parent;

      pressid := tNames1.pressnametoid(runnode.Parent.text);
      // pressrunid := runnode.StateIndex;
      LocationID := tNames1.locationnametoid(ComboBoxpalocationNY.text);

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pressrunid ');
      if setAcommentResult = 2 then
        Datam1.Query1.SQL.Add('Set Comment = ' + '''' + '' + '''')
      else
        Datam1.Query1.SQL.Add('Set Comment = ' + '''' + T + '''');

      Datam1.Query1.SQL.Add('Where pressrunid IN ' + Pressrunselstr);

      trysql(Datam1.Query1);
    end;
    ActionPlaterefreshtree.Execute;
  Except
  end;
end;

procedure TFormMain.ActionpageCommentExecute(Sender: TObject);
var
  T: string;
  i: Integer;
  Aktcommenent: string;
begin
  Aktcommenent := '';
  if PageControlMain.ActivePageIndex > 1 then
    exit;

  begin
    case PageControlMain.ActivePageIndex of

      VIEW_SEPARATIONS:
        begin
          FormChangecomment.CheckBoxallsubed.Visible := true;
          getpreselHS;
          setAcommentResult := setAcomment(T, 'Set comment');
          if setAcommentResult > 0 then
          begin
            if setAcommentResult = 2 then
            begin
              for i := 1 to StringGridHS.RowCount do
              begin
                if SuperHSdata[i - 1].Selected then
                begin
                  Datam1.Query1.SQL.Clear;
                  Datam1.Query1.SQL.Add('update pagetable');
                  Datam1.Query1.SQL.Add('set Comment = ' + '''' + '' + '''');
                  Datam1.Query1.SQL.Add('where separation = ' +
                    IntToStr(SuperHSdata[i - 1].Separation));
                  if FormChangecomment.CheckBoxallsubed.Checked then
                  begin
                    Datam1.Query1.SQL.Add('OR (mastercopyseparationset = ' +
                      IntToStr(SuperHSdata[i - 1].mastercopyseparationset));
                    Datam1.Query1.SQL.Add('and colorid = ' +
                      IntToStr(SuperHSdata[i - 1].Colorid));
                    Datam1.Query1.SQL.Add('and copynumber = ' +
                      IntToStr(SuperHSdata[i - 1].copynumber) + ')');
                  end;
                  if Prefs.Debug then
                    Datam1.Query1.SQL.SaveToFile
                      (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory())
                      + 'sqllogs\' + 'Setcomclear.SQL');
                  FormMain.trysql(Datam1.Query1);
                end;
              end;
            end
            else
            begin
              if Prefs.AddTimeToPageComment then
              begin
                for i := 1 to StringGridHS.RowCount do
                begin
                  if SuperHSdata[i - 1].Selected then
                  begin
                    Datam1.Query1.SQL.Clear;
                    Datam1.Query1.SQL.Add('update pagetable');
                    Datam1.Query1.SQL.Add('set Comment = ' + '''' + T + '''');
                    Datam1.Query1.SQL.Add('Where CHARINDEX (' + '''' + '|' +
                      '''' + ',REVERSE (Comment)) = 0 ');

                    if FormChangecomment.CheckBoxallsubed.Checked then
                    begin
                      Datam1.Query1.SQL.Add('and ((separation = ' +
                        IntToStr(SuperHSdata[i - 1].Separation) + ')');
                      Datam1.Query1.SQL.Add('OR (mastercopyseparationset = ' +
                        IntToStr(SuperHSdata[i - 1].mastercopyseparationset));
                      Datam1.Query1.SQL.Add('and colorid = ' +
                        IntToStr(SuperHSdata[i - 1].Colorid));
                      Datam1.Query1.SQL.Add('and copynumber = ' +
                        IntToStr(SuperHSdata[i - 1].copynumber) + '))');
                    End
                    else
                      Datam1.Query1.SQL.Add('and separation = ' +
                        IntToStr(SuperHSdata[i - 1].Separation));
                    if Prefs.Debug then
                      Datam1.Query1.SQL.SaveToFile
                        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()
                        ) + 'sqllogs\' + 'Setcom1.SQL');
                    FormMain.trysql(Datam1.Query1);

                    Datam1.Query1.SQL.Clear;
                    Datam1.Query1.SQL.Add('update pagetable');
                    Datam1.Query1.SQL.Add
                      ('set comment = substring(comment,1, (len(Comment)-CHARINDEX ('
                      + '''' + ' | ' + '''' + ',REVERSE (Comment))+1)  ) + ' +
                      '''' + ' ' + T + '''');
                    Datam1.Query1.SQL.Add('Where CHARINDEX (' + '''' + '|' +
                      '''' + ',REVERSE (Comment)) > 0 ');
                    if FormChangecomment.CheckBoxallsubed.Checked then
                    begin
                      Datam1.Query1.SQL.Add('and ((separation = ' +
                        IntToStr(SuperHSdata[i - 1].Separation) + ')');
                      Datam1.Query1.SQL.Add('OR (mastercopyseparationset = ' +
                        IntToStr(SuperHSdata[i - 1].mastercopyseparationset));
                      Datam1.Query1.SQL.Add('and colorid = ' +
                        IntToStr(SuperHSdata[i - 1].Colorid));
                      Datam1.Query1.SQL.Add('and copynumber = ' +
                        IntToStr(SuperHSdata[i - 1].copynumber) + '))');
                    End
                    else
                      Datam1.Query1.SQL.Add('and separation = ' +
                        IntToStr(SuperHSdata[i - 1].Separation));
                    if Prefs.Debug then
                      Datam1.Query1.SQL.SaveToFile
                        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()
                        ) + 'sqllogs\' + 'Setcom2.SQL');
                    FormMain.trysql(Datam1.Query1);
                  end;
                end;
              end
              else
              begin
                for i := 1 to StringGridHS.RowCount do
                begin
                  if SuperHSdata[i - 1].Selected then
                  begin
                    Datam1.Query1.SQL.Clear;
                    Datam1.Query1.SQL.Add('update pagetable');
                    Datam1.Query1.SQL.Add('set Comment = ' + '''' + T + '''');
                    Datam1.Query1.SQL.Add('Where active <> -47');
                    if FormChangecomment.CheckBoxallsubed.Checked then
                    begin
                      Datam1.Query1.SQL.Add('and ((separation = ' +
                        IntToStr(SuperHSdata[i - 1].Separation) + ')');
                      Datam1.Query1.SQL.Add('OR (mastercopyseparationset = ' +
                        IntToStr(SuperHSdata[i - 1].mastercopyseparationset));
                      Datam1.Query1.SQL.Add('and colorid = ' +
                        IntToStr(SuperHSdata[i - 1].Colorid));
                      Datam1.Query1.SQL.Add('and copynumber = ' +
                        IntToStr(SuperHSdata[i - 1].copynumber) + '))');
                    End
                    else
                      Datam1.Query1.SQL.Add('and separation = ' +
                        IntToStr(SuperHSdata[i - 1].Separation));
                    FormMain.trysql(Datam1.Query1);
                  end;
                end;
              end;
            end;
            loadSuperHSDB2(false);
            resetpreselHS;
          end;
        end;
      VIEW_THUMBNAILS:
        begin
          Actionthumbcomment.Execute;
        end;

    end;
  end;
end;

procedure TFormMain.ActionpagetreeCommentExecute(Sender: TObject);
Var
  Alocationid: Integer;
  T: String;
  Instring: String;
begin
  try
    FormChangecomment.CheckBoxallsubed.Visible := false;
    Formeditatext.caption := 'Change pressrun comment';
    Formeditatext.Label1.caption := 'Comment';
    Formeditatext.ComboBox1.Items.Clear;
    Formeditatext.ComboBox1.text := '';
    if TreeViewpagelist.Selected = nil then
      exit;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select distinct pressrunid from pagetable WITH (NOLOCK) ');
    Datam1.Query1.SQL.Add('Where active <> -999 and dirty = 0 ');
    if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Publicationid > -1
    then
      Datam1.Query1.SQL.Add('and publicationid = ' +
        IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
        .Publicationid));
    if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).editionid > -1 then
      Datam1.Query1.SQL.Add('and editionid = ' +
        IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
        .editionid));
    if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Sectionid > -1 then
      Datam1.Query1.SQL.Add('and sectionid = ' +
        IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
        .Sectionid));
    if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Pubdate > 0 then
      Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
        TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Pubdate));

    Alocationid := GetSelectedLocationID();
    if (Alocationid > 0) then
      Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

    Tryopen(Datam1.Query1);
    Instring := '(-99,';
    while not Datam1.Query1.Eof do
    begin
      Instring := Instring + Datam1.Query1.Fields[0].AsString;
      Datam1.Query1.Next;
    end;
    Instring := Instring + ')';

    setAcommentResult := setAcomment(T, 'Set comment');

    if setAcommentResult > 0 then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pressrunid ');
      if setAcommentResult = 2 then
        T := '';
      Datam1.Query1.SQL.Add('Set comment = ' + '''' + T + '''');
      Datam1.Query1.SQL.Add('where pressrunid in ' + Instring);
      trysql(Datam1.Query1);
    end;
    getpreselHS;
    Actionrefreshpagefilter.Execute;
    resetpreselHS;
  Except
  end;
end;

procedure TFormMain.ActionthumbtreeCommentExecute(Sender: TObject);
Var
  Alocationid: Integer;
  T: String;
  Instring: String;
begin
  try
    FormChangecomment.CheckBoxallsubed.Visible := false;
    Formeditatext.caption := 'Change pressrun comment';
    Formeditatext.Label1.caption := 'Comment';
    Formeditatext.ComboBox1.Items.Clear;
    Formeditatext.ComboBox1.text := '';
    if TreeViewThumbs.Selected = nil then
      exit;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Select distinct pressrunid from pagetable (NOLOCK)');
    Datam1.Query1.SQL.Add('Where active <> -999 and dirty = 0 ');
    if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Publicationid > -1 then
      Datam1.Query1.SQL.Add('and publicationid = ' +
        IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
        .Publicationid));
    if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid > -1 then
      Datam1.Query1.SQL.Add('and editionid = ' +
        IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid));
    if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Sectionid > -1 then
      Datam1.Query1.SQL.Add('and sectionid = ' +
        IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Sectionid));
    if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate > 0 then
      Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
        TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate));

    Alocationid := GetSelectedLocationID();
    if (Alocationid > 0) then
      Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

    Tryopen(Datam1.Query1);
    Instring := '(-99,';
    while not Datam1.Query1.Eof do
    begin
      Instring := Instring + Datam1.Query1.Fields[0].AsString;
      Datam1.Query1.Next;
    end;
    Instring := Instring + ')';

    setAcommentResult := setAcomment(T, 'Set comment');

    if setAcommentResult > 0 then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pressrunid ');
      if setAcommentResult = 2 then
        T := '';
      Datam1.Query1.SQL.Add('Set comment = ' + '''' + T + '''');
      Datam1.Query1.SQL.Add('where pressrunid in ' + Instring);
      trysql(Datam1.Query1);
    end;
    getpreselHS;
    ActionThumbnailFilterrefresh.Execute;
    resetpreselHS;
  Except
  end;
end;

procedure TFormMain.ActionthumbnailCommentExecute(Sender: TObject);
Var
  T: string;
begin
  setAcommentResult := setAcomment(T, 'Set comment');

  if setAcommentResult > 0 then
  begin
    if setAcommentResult = 2 then
      T := '';
    setpagetablethumbdata('set Comment = ' + '''' + T + '''', '');
    ActionThumbnailrefresh.Execute;
  end;
end;

// PLATE PLATE PLATE PLATE PLATE // PLATE PLATE PLATE PLATE PLATE // PLATE PLATE PLATE PLATE PLATE // PLATE PLATE PLATE PLATE PLATE
// PLATE PLATE PLATE PLATE PLATE // PLATE PLATE PLATE PLATE PLATE // PLATE PLATE PLATE PLATE PLATE // PLATE PLATE PLATE PLATE PLATE
// PLATE PLATE PLATE PLATE PLATE // PLATE PLATE PLATE PLATE PLATE // PLATE PLATE PLATE PLATE PLATE // PLATE PLATE PLATE PLATE PLATE
// PLATE PLATE PLATE PLATE PLATE // PLATE PLATE PLATE PLATE PLATE // PLATE PLATE PLATE PLATE PLATE // PLATE PLATE PLATE PLATE PLATE
// Platerut

procedure TFormMain.AddReimageEventSingle(FlatSeparation: Integer;
  ReimageReason: Integer; Comment: String);
begin

  if (Global_spReImage = false) then
    exit;

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('EXEC spReImage');
  Datam1.Query1.SQL.Add('@MasterCopySeparationSet=0,');
  Datam1.Query1.SQL.Add('@FlatSeparation=' + IntToStr(FlatSeparation) + ',');
  Datam1.Query1.SQL.Add('@ColorID=0,');
  Datam1.Query1.SQL.Add('@ReimageReason=' + IntToStr(ReimageReason + 1) + ',');
  Datam1.Query1.SQL.Add('@ReimageComment=''' + Comment + ''',');
  if (Prefs.ReimageWithHighPriority) then
    Datam1.Query1.SQL.Add('@ReimageHighPriority=1')
  else
    Datam1.Query1.SQL.Add('@ReimageHighPriority=0');

  trysql(Datam1.Query1);
end;

procedure TFormMain.AddReimageEvent(CopyFlatSeparationList: Tstringlist;
  ColorList: Tstringlist; CopyList: Tstringlist; ReimageReason: Integer;
  Comment: String);
var
  str: String;
  i, j, k: Integer;
begin

  if CopyList.Count = 0 then
  begin
    CopyList.Add('1');
    CopyList.Add('2');
  end;
  if ColorList.Count = 0 then
  begin
    ColorList.Add('1');
    ColorList.Add('2');
    ColorList.Add('3');
    ColorList.Add('4');
  end;
  for i := 0 to CopyFlatSeparationList.Count - 1 do
  begin
    for j := 0 to CopyList.Count - 1 do
    begin
      for k := 0 to ColorList.Count - 1 do
      begin
        str := CopyFlatSeparationList[i] + '0' + CopyList[j] + '0' +
          ColorList[k];
        AddReimageEventSingle(StrToInt(str), ReimageReason, Comment);
      end;
    end;
  end;
end;

procedure TFormMain.ActionplatereimageExecute(Sender: TObject);
var
  Allcolorsarechecked: Boolean;

  function MakeInColorIdsStr: string;
  var
    ic: Integer;
  begin
    result := '';
    Allcolorsarechecked := true;
    result := ' And ColorID IN (-999';
    for ic := 0 to Formplatereimage.PBExListviewreimage.Items.Count - 1 do
    begin
      if Formplatereimage.PBExListviewreimage.Items[ic].StateIndex = 1 then
      begin
        result := result + ',' +
          IntToStr(inittypes.getcolorIDfromname
          (Formplatereimage.PBExListviewreimage.Items[ic].caption));
      end
      else
        Allcolorsarechecked := false;
    end;
    result := result + ')';
  end;

Var
  mkres, IP, ic, i, nplfound, Ncolors: Integer;
  aktcolor, highpritext, reimexttext: string;
  foundl: TListItem;
  Whereandstr: String;
  ColorInstr: string;
  Emstatstr: string;
  ReimageReason: Integer;
  ReimageReasonComment: string;
  CopyFlatSeparationList: Tstringlist;
  ColorList: Tstringlist;
  CopyList: Tstringlist;
  FlatSeparation: Integer;
  copyflatseparationset: Integer;
  IsHold: Boolean;
begin
  IsHold := false;
  ReimageReason := 0;
  ReimageReasonComment := '';
  CopyFlatSeparationList := Tstringlist.Create;
  ColorList := Tstringlist.Create;;
  CopyList := Tstringlist.Create;

  if not AnyPlatesselected then
    exit;

  try
    highpritext := '';
    reimexttext := '';
    if Prefs.ReimageWithHighPriority then
      highpritext := ',Priority = 100';

    if Prefs.ReimageExternalStatus >= 0 then
      reimexttext := ',ExternalStatus = ' +
        IntToStr(Prefs.ReimageExternalStatus);

    Whereandstr := '';
    if PBExListviewplateinfo.Focused then
    begin
      if PBExListviewplateinfo.Selected = nil then
        exit;

      mkres := mrOK;

      FormReimageReason.CheckBoxReleaseNow.Enabled := false;
      FormReimageReason.CheckBoxReleaseNow.Checked := false;

      if (PBExListviewplateinfo.Items[PBExListviewplateinfo.Selected.Index].SubItems[6] = 'Hold') then
      begin
        FormReimageReason.CheckBoxReleaseNow.Enabled := true;
        FormReimageReason.CheckBoxReleaseNow.Checked := Prefs.SetReleaseNowOnReimage;
      end;



      if (Prefs.ShowReimageDialog) then
      begin
        mkres := FormReimageReason.ShowModal;
        if (FormReimageReason.RadioButtonReimageReason2.Checked) then
          ReimageReason := 1
        else if (FormReimageReason.RadioButtonReimageReason3.Checked) then
          ReimageReason := 2;
        ReimageReasonComment := FormReimageReason.EditReimageReason.text;
      end;

      if mkres = mrOK then
      begin

        FlatSeparation :=
          StrToInt(PBExListviewplateinfo.Items[PBExListviewplateinfo.Selected.
          Index].SubItems[PBExListviewplateinfoflatsepsubitem]);

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('update pagetable');

        if PBExListviewplateinfo.SelCount > 1 then
          Datam1.Query1.SQL.Add('set ImagingProcessID = 0,status = ' +
            Reimagetostat +
            ', EmailStatus = (EmailStatus  & 0xF0F0FFFF)        , miscint4 = 0'
            + highpritext + reimexttext)
        else
          Datam1.Query1.SQL.Add('set ImagingProcessID = 0,status = ' +
            Reimagetostat +
            ', EmailStatus = ((EmailStatus | 128) & 0xF0F0FFFF) , miscint4 = 0'
            + highpritext + reimexttext);

        if (FormReimageReason.CheckBoxReleaseNow.Checked) then
          Datam1.Query1.SQL.Add(',Hold=0');
        if (Prefs.KeepOutputVersionOnReimage) then
          Datam1.Query1.SQL.Add
            (', OutputVersion = (case WHEN (OutputVersion <=0) THEN OutputVersion  else (OutputVersion -1) END) ');
        // Datam1.Query1.SQL.Add(', OutputVersion = OutputVersion - 1 ');
        Datam1.Query1.SQL.Add('where status > 30');
        Datam1.Query1.SQL.Add('and flatseparation = ' +
          IntToStr(FlatSeparation));
        Datam1.Query1.SQL.Add(WeditionStr);
        Datam1.Query1.SQL.Add(WpublicationStr);
        trysql(Datam1.Query1);

        AddReimageEventSingle(FlatSeparation, ReimageReason,
          ReimageReasonComment);
      end;
    end
    else
    begin
      nplfound := 0;
      Formplatereimage.CheckBox1.Checked := Prefs.ResetDeviceOnReimage;
      Formplatereimage.PBExListviewreimage.Items.Clear;
      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin
          Inc(nplfound);

          for IP := 1 to PlatetemplateArray
            [Views[Viewselected].platesData[i].templatelistid].NupOnplate do
          begin
            for ic := 1 to Views[Viewselected].platesData[i].pages[IP]
              .Ncolors do
            begin
              if Views[Viewselected].platesData[i].pages[IP].Colors[ic].Active = 1
              then
              begin
                aktcolor := Colorsnames[Views[Viewselected].platesData[i].pages
                  [IP].Colors[ic].Colorid].Name;
                foundl := Formplatereimage.PBExListviewreimage.FindCaption(0,
                  aktcolor, false, true, false);

                if (Views[Viewselected].platesData[i].pages[IP].Colors[ic]
                  .hold > 0) then
                  IsHold := true;

                if foundl = nil then
                begin
                  foundl := Formplatereimage.PBExListviewreimage.Items.Add;
                  foundl.caption := aktcolor;
                  foundl.StateIndex := 1;
                  // Integer(not (FoxrmSettings.CheckBoxreimage.checked) or FoxrmSettings.CheckBoxreimdevicereset.Checked);
                  foundl.ImageIndex :=
                    Colorsnames[Views[Viewselected].platesData[i].pages[IP]
                    .Colors[ic].Colorid].Colorimage;
                end;
              end;
            end;
          end;

        end;
      end;

      Whereandstr := ' And Copyflatseparationset IN (-999';

      Formplatereimage.UpDown1.max := 1;
      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin
          if Formplatereimage.UpDown1.max < Views[Viewselected].platesData
            [Views[Viewselected].LPV.Items[i].ImageIndex].Ncopies then
            Formplatereimage.UpDown1.max := Views[Viewselected].platesData
              [Views[Viewselected].LPV.Items[i].ImageIndex].Ncopies;

          copyflatseparationset := Views[Viewselected].platesData
            [Views[Viewselected].LPV.Items[i].ImageIndex].copyflatseparationset;
          Whereandstr := Whereandstr + ',' + IntToStr(copyflatseparationset);

          CopyFlatSeparationList.Add(IntToStr(copyflatseparationset));
        end;
      end;

      Whereandstr := Whereandstr + ')';

      Formplatereimage.CheckBoxReleaseNow.Enabled := false;
      Formplatereimage.CheckBoxReleaseNow.Checked := false;
      if (IsHold) then
      begin
        Formplatereimage.CheckBoxReleaseNow.Checked := Prefs.SetReleaseNowOnReimage;
        Formplatereimage.CheckBoxReleaseNow.Enabled := true;
      end;




      Formplatereimage.CheckListBoxCopies.Items.Clear;

      for i := 1 to Formplatereimage.UpDown1.max do
      begin
        Formplatereimage.CheckListBoxCopies.Items.Add(IntToStr(i));
        Formplatereimage.CheckListBoxCopies.Checked[i - 1] := true;
      end;
      Formplatereimage.CheckListBoxCopies.Checked[0] := true;
      Emstatstr := 'EmailStatus = ((EmailStatus | 128) & 0xF0F0FFFF)';

      if (Formplatereimage.UpDown1.max = 1) And
        (Formplatereimage.PBExListviewreimage.Items.Count = 1) then
      begin
        Formplatereimage.PBExListviewreimage.Items[0].StateIndex := 1;
        mkres := mrall;
      end
      else
      begin
        mkres := Formplatereimage.ShowModal;
      end;

      Ncolors := 0;
      for i := 0 to Formplatereimage.PBExListviewreimage.Items.Count - 1 do
      begin
        if Formplatereimage.PBExListviewreimage.Items[i].Checked then
          Inc(Ncolors);
      end;

      Datam1.SetNewtreeprodid;

      for ic := 0 to Formplatereimage.PBExListviewreimage.Items.Count - 1 do
      begin
        if Formplatereimage.PBExListviewreimage.Items[ic].StateIndex = 1 then
        begin
          ColorList.Add
            (IntToStr(inittypes.getcolorIDfromname
            (Formplatereimage.PBExListviewreimage.Items[ic].caption)));
        End
      end;

      case mkres of
        mrNo:
          begin
            if (nplfound > 1) OR (Ncolors > 1) then
              Emstatstr := 'EmailStatus = (EmailStatus & 0xF0F0FFFF)';

            CopyFlatSeparationList.Clear;
            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add
              ('SELECT DISTINCT FlatSeparation FROM PageTable WITH (NOLOCK) ');
            Datam1.Query1.SQL.Add('WHERE Status IN (46,56,66)');
            Datam1.Query1.SQL.Add(Whereandstr);
            Datam1.Query1.Open;
            while not Datam1.Query1.Eof do
            begin
              CopyFlatSeparationList.Add(Datam1.Query1.Fields[0].AsString);
              Datam1.Query1.Next;
            end;
            Datam1.Query1.Close;

            ColorInstr := MakeInColorIdsStr;
            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add('UPDATE PageTable');

            if (Formplatereimage.CheckBox1.Checked) AND (Allcolorsarechecked)
            then
            begin
              Datam1.Query1.SQL.Add('set ImagingProcessID = 0,status = ' +
                Reimagetostat + ', ' + Emstatstr + ', miscint4 = 0,deviceid = 0'
                + highpritext + reimexttext);
            end
            else
            begin
              Datam1.Query1.SQL.Add('set ImagingProcessID = 0,status = ' +
                Reimagetostat + ', ' + Emstatstr + ', miscint4 = 0' +
                highpritext + reimexttext);
            end;

            if (IsHold) AND (Formplatereimage.CheckBoxReleaseNow.Checked) then
            begin
              Datam1.Query1.SQL.Add(', Hold=0');
            end;

            if (Prefs.KeepOutputVersionOnReimage) then
              Datam1.Query1.SQL.Add
                (', OutputVersion = (case WHEN (OutputVersion <=0) THEN OutputVersion  else (OutputVersion -1) END) ');
            // Datam1.Query1.SQL.Add(', OutputVersion = OutputVersion - 1 ');

            Datam1.Query1.SQL.Add('where status in (46,56,66)');

            // Datam1.Query1.SQL.Add(ColorInstr);
            Datam1.Query1.SQL.Add(Whereandstr);
            Newtreeprodid := -1;
            if Prefs.Debug then
              Datam1.Query1.SQL.SaveToFile
                (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
                'sqllogs\' + 'Reimageplate.SQL');
            trysql(Datam1.Query1);

            if (Formplatereimage.RadioButtonReimageReason2.Checked) then
              ReimageReason := 1
            else if (Formplatereimage.RadioButtonReimageReason3.Checked) then
              ReimageReason := 2;

            for i := 0 to CopyFlatSeparationList.Count - 1 do
              AddReimageEventSingle(StrToInt(CopyFlatSeparationList[i]),
                ReimageReason, Formplatereimage.EditReimageReason.text);

            Datam1.UpdateTreeStateOnProduction(false);
          end;
        mrall:
          begin
            ColorInstr := MakeInColorIdsStr;
            if (nplfound > 1) OR (Ncolors > 1) or
              (Formplatereimage.UpDown1.max > 1) then
              Emstatstr := 'EmailStatus = (EmailStatus & 0xF0F0FFFF)';

            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add('update pagetable');
            if (Formplatereimage.CheckBox1.Checked) AND (Allcolorsarechecked)
            then
            begin
              Datam1.Query1.SQL.Add('set ImagingProcessID = 0,status = ' +
                Reimagetostat + ', ' + Emstatstr + ', miscint4 = 0,deviceid = 0'
                + highpritext + reimexttext);
            end
            else
            begin
              Datam1.Query1.SQL.Add('set ImagingProcessID = 0,status = 30, ' +
                Emstatstr + ', miscint4 = 0' + highpritext + reimexttext);
            end;
            if (IsHold) AND (Formplatereimage.CheckBoxReleaseNow.Checked) then
            begin
              Datam1.Query1.SQL.Add(', Hold=0');
            end;

            if (Prefs.KeepOutputVersionOnReimage) then
              Datam1.Query1.SQL.Add
                (', OutputVersion = (case WHEN (OutputVersion <=0) THEN OutputVersion  else (OutputVersion -1) END) ');

            // Datam1.Query1.SQL.Add(', OutputVersion = OutputVersion - 1 ');

            Datam1.Query1.SQL.Add('where status > 30');
            Datam1.Query1.SQL.Add(ColorInstr);
            Datam1.Query1.SQL.Add(Whereandstr);
            if Prefs.Debug then
              Datam1.Query1.SQL.SaveToFile
                (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
                'sqllogs\' + 'Reimageplate.SQL');
            trysql(Datam1.Query1);

            Datam1.UpdateTreeStateOnProduction(false);

            for i := 0 to Formplatereimage.CheckListBoxCopies.Items.Count - 1 do
            begin
              CopyList.Add(Formplatereimage.CheckListBoxCopies.Items[i]);
            end;

            if (Formplatereimage.RadioButtonReimageReason2.Checked) then
              ReimageReason := 1
            else if (Formplatereimage.RadioButtonReimageReason3.Checked) then
              ReimageReason := 2;

            AddReimageEvent(CopyFlatSeparationList, ColorList, CopyList,
              ReimageReason, Formplatereimage.EditReimageReason.text);
          end;
        mrOK:
          begin

            if (nplfound > 1) OR (Ncolors > 1) or
              (Formplatereimage.UpDown1.Position > 1) then
              Emstatstr := 'EmailStatus = (EmailStatus & 0xF0F0FFFF)';

            ColorInstr := MakeInColorIdsStr;
            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add('update pagetable');
            if (Formplatereimage.CheckBox1.Checked) AND (Allcolorsarechecked)
            then
            begin
              Datam1.Query1.SQL.Add('set ImagingProcessID = 0,status = ' +
                Reimagetostat + ', ' + Emstatstr + ', miscint4 = 0,deviceid = 0'
                + highpritext + reimexttext);
            end
            else
            begin
              Datam1.Query1.SQL.Add('set ImagingProcessID = 0,status = ' +
                Reimagetostat + ', ' + Emstatstr + ', miscint4 = 0' +
                highpritext + reimexttext);
            end;
            if (IsHold) AND (Formplatereimage.CheckBoxReleaseNow.Checked) then
            begin
              Datam1.Query1.SQL.Add(', Hold=0');
            end;
            if (Prefs.KeepOutputVersionOnReimage) then
              Datam1.Query1.SQL.Add
                (', OutputVersion = (case WHEN (OutputVersion <=0) THEN OutputVersion  else (OutputVersion -1) END) ');
            // Datam1.Query1.SQL.Add(', OutputVersion = OutputVersion - 1 ');

            Datam1.Query1.SQL.Add('where status > 30');
            Datam1.Query1.SQL.Add(' And Copynumber IN ' +
              Formplatereimage.Andcopiesinstr);

            // Datam1.Query1.SQL.Add(' And Copynumber <= '+  Formplatereimage.EditNcopies.Text);
            Datam1.Query1.SQL.Add(ColorInstr);
            Datam1.Query1.SQL.Add(Whereandstr);
            if Prefs.Debug then
              Datam1.Query1.SQL.SaveToFile
                (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
                'sqllogs\' + 'Reimageplate.SQL');
            trysql(Datam1.Query1);

            for i := 0 to Formplatereimage.CheckListBoxCopies.Items.Count - 1 do
            begin
              if Formplatereimage.CheckListBoxCopies.Checked[i] then
                CopyList.Add(Formplatereimage.CheckListBoxCopies.Items[i]);
            end;
            if (Formplatereimage.RadioButtonReimageReason2.Checked) then
              ReimageReason := 1
            else if (Formplatereimage.RadioButtonReimageReason3.Checked) then
              ReimageReason := 2;

            AddReimageEvent(CopyFlatSeparationList, ColorList, CopyList,
              ReimageReason, Formplatereimage.EditReimageReason.text);
            Datam1.UpdateTreeStateOnProduction(false);
          end;
      end;
    end;
    ActionplaterefreshExecute(FormMain);

  Except

  end;
  CopyFlatSeparationList.free;
  ColorList.free;
  CopyList.free;
end;

procedure TFormMain.ActionPlateholdExecute(Sender: TObject);
Var
  i: Integer;
  eventtime: TDateTime;
begin
  try
    if PBExListviewplateinfo.Focused then
    begin
      for i := 0 to PBExListviewplateinfo.Items.Count - 1 do
      begin
        if PBExListviewplateinfo.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set hold = 1');
          Datam1.Query1.SQL.Add('where flatseparation = ' +
            PBExListviewplateinfo.Items[i].SubItems
            [PBExListviewplateinfoflatsepsubitem]);
          Datam1.Query1.SQL.Add('and colorid = ' +
            IntToStr(inittypes.getcolorIDfromname(PBExListviewplateinfo.Items[i]
            .SubItems[1])));
          Datam1.Query1.SQL.Add(WeditionStr);
          Datam1.Query1.SQL.Add(WpublicationStr);
          trysql(Datam1.Query1);
        end;
      end;
    end
    else
    begin
      if not AnyPlatesselected then
        exit;
      if not FormSelplatecopies.doit then
        exit;

      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set hold = 1');
          Datam1.Query1.SQL.Add('where pagetype <> 999');
          Datam1.Query1.SQL.Add('and locationid = ' +
            IntToStr(Views[Viewselected].platesData[i].LocationID));
          Datam1.Query1.SQL.Add('and productionid = ' +
            IntToStr(Views[Viewselected].platesData[i].ProductionID));
          Datam1.Query1.SQL.Add('and CopyFlatSeparationSet = ' +
            IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
          // if (FormSelplatecopies.Copyselstr <> '') then
          Datam1.Query1.SQL.Add('and ' + FormSelplatecopies.Copyselstr);
          Datam1.Query1.SQL.Add(WeditionStr);
          Datam1.Query1.SQL.Add(WpublicationStr);
          trysql(Datam1.Query1);
          eventtime := -1;
          if (Prefs.LogHold) then
          begin
            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add
              ('Select filename,version,flatseparation from pagetable (NOLOCK) where CopyFlatSeparationSet = '
              + IntToStr(Views[Viewselected].platesData[i]
              .copyflatseparationset));
            // if (FormSelplatecopies.Copyselstr <> '') then
            Datam1.Query1.SQL.Add('and ' + FormSelplatecopies.Copyselstr);
            Datam1.Query1.SQL.Add(WeditionStr);
            Datam1.Query1.SQL.Add(WpublicationStr);
            Datam1.Query1.Open;
            while not Datam1.Query1.Eof do
            begin
              FormMain.SaveEventlog(81, 0, Datam1.Query1.Fields[2].AsInteger,
                '', Datam1.Query1.Fields[0].AsString,
                Datam1.Query1.Fields[1].AsInteger,
                Views[Viewselected].platesData[i].ProductionID);
              Datam1.Query1.Next;
            end;
            Datam1.Query1.Close;
          end;
        end;
      end;
    end;

    ActionplaterefreshExecute(FormMain);

  Except
  end;

end;

procedure TFormMain.ActionplatesextstatExecute(Sender: TObject);
Var
  i: Integer;
  eventtime: TDateTime;
begin
  if FormChangeextstatus.ShowModal = mrOK then
  begin
    if PBExListviewplateinfo.Focused then
    begin
      for i := 0 to PBExListviewplateinfo.Items.Count - 1 do
      begin
        if PBExListviewplateinfo.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set externalstatus = ' +
            IntToStr(FormChangeextstatus.selectedexternalstatus));
          Datam1.Query1.SQL.Add('where flatseparation = ' +
            PBExListviewplateinfo.Items[i].SubItems
            [PBExListviewplateinfoflatsepsubitem]);
          Datam1.Query1.SQL.Add(WeditionStr);
          Datam1.Query1.SQL.Add(WpublicationStr);
          trysql(Datam1.Query1);
        end;
      end;
    end
    else
    begin
      if not AnyPlatesselected then
        exit;

      if not FormSelplatecopies.doit then
        exit;

      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set externalstatus = ' +
            IntToStr(FormChangeextstatus.selectedexternalstatus));
          Datam1.Query1.SQL.Add('where pagetype <> 999');
          Datam1.Query1.SQL.Add('and locationid = ' +
            IntToStr(Views[Viewselected].platesData[i].LocationID));
          Datam1.Query1.SQL.Add('and productionid = ' +
            IntToStr(Views[Viewselected].platesData[i].ProductionID));
          Datam1.Query1.SQL.Add('and CopyFlatSeparationSet = ' +
            IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
          // if (FormSelplatecopies.Copyselstr <> '') then
          Datam1.Query1.SQL.Add('and ' + FormSelplatecopies.Copyselstr);
          Datam1.Query1.SQL.Add(WeditionStr);
          Datam1.Query1.SQL.Add(WpublicationStr);
          eventtime := -1;

          trysql(Datam1.Query1);
        end;
      end;
    end;
    ActionplaterefreshExecute(FormMain);
  end;
end;

procedure TFormMain.ActionPlatereleaseExecute(Sender: TObject);
begin
  Platerelease(false);
end;

procedure TFormMain.Platerelease(Monoonly: Boolean);
var
  i, i2, ProductionID, aktpressid, mkres: Integer;
  eventtime: TDateTime;
  runnode: TTreeNode;
  miscstr2, AApressInstr: String;
begin
  aktpressid := 0;
  Releaseproductionids.Clear;
  ReleasePressrunids.Clear;
  ReleasePlates.Clear;

  // Details view
  if PBExListviewplateinfo.Focused then
  begin
    if Prefs.MustSetDeviceOnRelease then
    begin
      for i := 0 to PBExListviewplateinfo.Items.Count - 1 do
      begin
        if PBExListviewplateinfo.Items[i].Selected then
        begin
          if Releaseproductionids.Count = 0 then
          begin
            Releaseproductionids.Add
              (IntToStr(Views[Viewselected].platesData[i].ProductionID));
            ReleasePressrunids.Add
              (IntToStr(Views[Viewselected].platesData[i].runid));
            ReleasePlates.Add
              (IntToStr(Views[Viewselected].platesData[i]
              .copyflatseparationset));
            break;
          end;
        end;
      end;
      if not checkdevbeforerelease then
        exit;
    end;

    for i := 0 to PBExListviewplateinfo.Items.Count - 1 do
    begin
      if PBExListviewplateinfo.Items[i].Selected then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('update pagetable');
        Datam1.Query1.SQL.Add('set hold = 0'); // OK
        if Prefs.SetApproveTimeOnRelease then
          Datam1.Query1.SQL.Add(', approvetime = getdate(),approveuser=' + ''''
            + Prefs.Username + '''');
        Datam1.Query1.SQL.Add('where flatseparation = ' +
          PBExListviewplateinfo.Items[i].SubItems
          [PBExListviewplateinfoflatsepsubitem]);
        if Monoonly then
          Datam1.Query1.SQL.Add('and colorid = 4');
        Datam1.Query1.SQL.Add(WeditionStr);
        Datam1.Query1.SQL.Add(WpublicationStr);
        trysql(Datam1.Query1);
      end;
    end;
  end
  else // not Details view
  begin
    if not AnyPlatesselected then
      exit;
    if not FormSelplatecopies.doit then
      exit;

    // Funny transmission center mode...
    if (Prefs.PlateTransmissionSystem) then
    begin

      if TreeViewPlateview.Selected = nil then
        exit;
      runnode := TreeViewPlateview.Selected;
      if runnode = nil then
        exit;
      if runnode.Level < 2 then
        exit;
      ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;
      FormreleaseTo.checklistbox1.Items.Clear;
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Select TOP 1 pressid from pagetable (NOLOCK)');
      Datam1.Query1.SQL.Add('Where publicationid =  ' +
        IntToStr(TTreeViewpagestype(runnode.Data^).Publicationid));
      Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
        TTreeViewpagestype(runnode.Data^).Pubdate));
      Datam1.Query1.SQL.Add('and productionid =  ' +
        IntToStr(TTreeViewpagestype(runnode.Data^).ProductionID));
      Datam1.Query1.Open;
      if not Datam1.Query1.Eof then
      begin
        aktpressid := Datam1.Query1.Fields[0].AsInteger;
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Select distinct pressid from pagetable (NOLOCK)');
      Datam1.Query1.SQL.Add('Where publicationid =  ' +
        IntToStr(TTreeViewpagestype(runnode.Data^).Publicationid));
      Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
        TTreeViewpagestype(runnode.Data^).Pubdate));
      Datam1.Query1.Open;
      while not Datam1.Query1.Eof do
      begin
        FormreleaseTo.checklistbox1.Items.Add
          (tNames1.pressnameIDtoname(Datam1.Query1.Fields[0].AsInteger));
        if aktpressid = Datam1.Query1.Fields[0].AsInteger then
          FormreleaseTo.checklistbox1.Checked
            [FormreleaseTo.checklistbox1.Items.Count - 1] := true;
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;

      mkres := FormreleaseTo.ShowModal;
      if (mkres = mrOK) or (mkres = mrall) then
      begin

        AApressInstr := 'and pressid IN (-99';
        for i2 := 0 to FormreleaseTo.checklistbox1.Items.Count - 1 do
        begin
          if FormreleaseTo.checklistbox1.Checked[i2] then
            AApressInstr := AApressInstr + ',' +
              IntToStr(tNames1.pressnametoid
              (FormreleaseTo.checklistbox1.Items[i2]));
        end;
        AApressInstr := AApressInstr + ')';
        for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
        begin
          if Views[Viewselected].LPV.Items[i].Selected then
          begin
            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add('Select Miscstring2 from pagetable (NOLOCK)');
            Datam1.Query1.SQL.Add('where pagetype <> 999');
            Datam1.Query1.SQL.Add('and CopyFlatSeparationSet = ' +
              IntToStr(Views[Viewselected].platesData[i]
              .copyflatseparationset));
            Datam1.Query1.Open;
            miscstr2 := '';
            if not Datam1.Query1.Eof then
            begin
              miscstr2 := Datam1.Query1.Fields[0].AsString;
            end;
            Datam1.Query1.Close;

            if (miscstr2 <> '') then // NAN 20160115
            begin
              Datam1.Query1.SQL.Clear;
              Datam1.Query1.SQL.Add('update pagetable');
              Datam1.Query1.SQL.Add('set hold = 0'); // OK
              if (Prefs.SetApproveTimeOnRelease) then
                Datam1.Query1.SQL.Add(', approvetime = getdate(),approveuser=' +
                  '''' + Prefs.Username + '''');
              Datam1.Query1.SQL.Add('where pagetype <> 999');
              Datam1.Query1.SQL.Add('and Miscstring2 = ' + '''' +
                miscstr2 + '''');
              if mkres = mrOK then
                Datam1.Query1.SQL.Add(AApressInstr);
              if Prefs.Debug then
                Datam1.Query1.SQL.SaveToFile
                  (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
                  'sqllogs\' + 'Releplate.SQL');
              trysql(Datam1.Query1);
            end;
            eventtime := -1;
          end;
        end;
      end;

    end
    else // Normal view...
    begin

      if (Prefs.MustSetDeviceOnRelease) then
      begin
        for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
        begin
          if Views[Viewselected].LPV.Items[i].Selected then
          begin
            if Releaseproductionids.Count = 0 then
            begin
              Releaseproductionids.Add
                (IntToStr(Views[Viewselected].platesData[i].ProductionID));
              ReleasePressrunids.Add
                (IntToStr(Views[Viewselected].platesData[i].runid));
            end;
            ReleasePlates.Add
              (IntToStr(Views[Viewselected].platesData[i]
              .copyflatseparationset));
          end;
        end;
        if not checkdevbeforerelease then
          exit;
      end;

      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set hold = 0'); // OK
          if Prefs.SetApproveTimeOnRelease then
            Datam1.Query1.SQL.Add(', approvetime = getdate(),approveuser=' +
              '''' + Prefs.Username + '''');
          Datam1.Query1.SQL.Add('where pagetype <> 999');
          Datam1.Query1.SQL.Add('and locationid = ' +
            IntToStr(Views[Viewselected].platesData[i].LocationID));
          Datam1.Query1.SQL.Add('and productionid = ' +
            IntToStr(Views[Viewselected].platesData[i].ProductionID));
          Datam1.Query1.SQL.Add('and CopyFlatSeparationSet = ' +
            IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
          if Monoonly then
            Datam1.Query1.SQL.Add('and colorid = 4');
          // if (FormSelplatecopies.Copyselstr <> '') then
          Datam1.Query1.SQL.Add('and ' + FormSelplatecopies.Copyselstr);
          Datam1.Query1.SQL.Add(WeditionStr);
          Datam1.Query1.SQL.Add(WpublicationStr);
          trysql(Datam1.Query1);
          eventtime := -1;
          if Prefs.LogHold then
          begin
            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add
              ('Select filename,version,flatseparation from pagetable (NOLOCK) where CopyFlatSeparationSet = '
              + IntToStr(Views[Viewselected].platesData[i]
              .copyflatseparationset));
            // if (FormSelplatecopies.Copyselstr <> '') then
            Datam1.Query1.SQL.Add('and ' + FormSelplatecopies.Copyselstr);
            Datam1.Query1.SQL.Add(WeditionStr);
            Datam1.Query1.SQL.Add(WpublicationStr);
            Datam1.Query1.Open;
            while not Datam1.Query1.Eof do
            begin
              FormMain.SaveEventlog(80, 0, Datam1.Query1.Fields[2].AsInteger,
                '', Datam1.Query1.Fields[0].AsString,
                Datam1.Query1.Fields[1].AsInteger,
                Views[Viewselected].platesData[i].ProductionID);
              Datam1.Query1.Next;
            end;
            Datam1.Query1.Close;
          end;

        end;
      end;
    end;
  end;
  ActionplaterefreshExecute(FormMain);

end;

procedure TFormMain.ActionPlateapproveExecute(Sender: TObject);
begin
  platesetapproval(1);

end;

procedure TFormMain.platesetapproval(approved: Longint);
// -1 auto 0 not approved 1 approved 2 disapproved
Var
  i, IP: Integer;
  T, INmasterstr: String;
  // eventtime : TDateTime;
begin
  case approved of
    - 1:
      begin
        T := 'set approved = -1 ';
      end;

    0:
      begin
        T := 'set approved = 0 ';
      end;

    1:
      begin
        T := 'set approved = 1,approvetime = getdate(),approveuser=' + '''' +
          Prefs.Username + '''';
      end;
    2:
      begin
        T := 'set approved = 2,approvetime = getdate(),approveuser=' + '''' +
          Prefs.Username + '''';
      end;

  end;

  if PBExListviewplateinfo.Focused then
  begin
    beep;
    exit;
  end
  else
  begin
    if not AnyPlatesselected then
      exit;

    for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
    begin
      if Views[Viewselected].LPV.Items[i].Selected then
      begin
        INmasterstr := '(-1';

        for IP := 1 to PlatetemplateArray
          [Views[Viewselected].platesData[i].templatelistid].NupOnplate do
        begin
          INmasterstr := INmasterstr + ',' +
            IntToStr(Views[Viewselected].platesData[i].pages[IP]
            .mastercopyseparationset);

        end;
        INmasterstr := INmasterstr + ')';

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('update pagetable');
        Datam1.Query1.SQL.Add(T);
        Datam1.Query1.SQL.Add('where pagetype <> 999');
        // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Views[Viewselected].platesData[i].locationID));
        // Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(Views[Viewselected].platesData[i].productionID));
        Datam1.Query1.SQL.Add('and mastercopyseparationset IN ' + INmasterstr);

        // Datam1.Query1.SQL.Add('and Copyflatseparationset = ' + IntToStr(Views[Viewselected].platesData[i].CopyFlatSeparationSet));

        Datam1.Query1.SQL.Add(WeditionStr);
        Datam1.Query1.SQL.Add(WpublicationStr);
        if Prefs.Debug then
          Datam1.Query1.SQL.SaveToFile
            (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
            'sqllogs\' + 'g1A.SQL');
        trysql(Datam1.Query1);

        if (Prefs.RemoveMissingColorsOnApprove) And (approved = 1) then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('Set active = 0');
          Datam1.Query1.SQL.Add('where pagetype <> 999');
          // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Views[Viewselected].platesData[i].locationID));
          // Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(Views[Viewselected].platesData[i].productionID));
          // Datam1.Query1.SQL.Add('and CopyFlatSeparationSet = ' + IntToStr(Views[Viewselected].platesData[i].CopyFlatSeparationSet));
          Datam1.Query1.SQL.Add('and mastercopyseparationset IN ' +
            INmasterstr);
          if Prefs.Debug then
            Datam1.Query1.SQL.SaveToFile
              (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
              'sqllogs\' + 'g1A.SQL');
          Datam1.Query1.SQL.Add(WeditionStr);
          Datam1.Query1.SQL.Add(WpublicationStr);
          Datam1.Query1.SQL.Add('And status = 0');
          Datam1.Query1.SQL.Add('And colorid <> 4');
          trysql(Datam1.Query1);
        end;

        if (Prefs.LogApproval) then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('Select filename,version,flatseparation from pagetable (NOLOCK) where CopyFlatSeparationSet = '
            + IntToStr(Views[Viewselected].platesData[i]
            .copyflatseparationset));
          Datam1.Query1.SQL.Add(WeditionStr);
          Datam1.Query1.SQL.Add(WpublicationStr);
          if Prefs.Debug then
            Datam1.Query1.SQL.SaveToFile
              (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
              'sqllogs\' + 'g2A.SQL');

          Datam1.Query1.Open;
          while not Datam1.Query1.Eof do
          begin
            if approved = 1 then
              FormMain.SaveEventlog(70, 0, Datam1.Query1.Fields[2].AsInteger,
                '', Datam1.Query1.Fields[0].AsString,
                Datam1.Query1.Fields[1].AsInteger,
                Views[Viewselected].platesData[i].ProductionID)
            else
              FormMain.SaveEventlog(71, 0, Datam1.Query1.Fields[2].AsInteger,
                '', Datam1.Query1.Fields[0].AsString,
                Datam1.Query1.Fields[1].AsInteger,
                Views[Viewselected].platesData[i].ProductionID);
            Datam1.Query1.Next;
          end;
          Datam1.Query1.Close;
        end;

      end;
    end;
  end;
  ActionplaterefreshExecute(FormMain);

end;

procedure TFormMain.ActionplatedisapproveExecute(Sender: TObject);
begin
  platesetapproval(2);
end;

procedure TFormMain.ActionplatepriorityExecute(Sender: TObject);
var
  i: Integer;
begin
  if Formpriority.ShowModal = mrOK then
  begin
    if PBExListviewplateinfo.Focused then
    begin
      for i := 0 to PBExListviewplateinfo.Items.Count - 1 do
      begin
        if PBExListviewplateinfo.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set priority = ' + Formpriority.edit1.text);
          Datam1.Query1.SQL.Add('where flatseparation = ' +
            PBExListviewplateinfo.Items[i].SubItems
            [PBExListviewplateinfoflatsepsubitem]);
          Datam1.Query1.SQL.Add(WeditionStr);
          Datam1.Query1.SQL.Add(WpublicationStr);
          trysql(Datam1.Query1);
        end;
      end;
    end
    else
    begin
      if not AnyPlatesselected then
        exit;

      if not FormSelplatecopies.doit then
        exit;
      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set priority = ' + Formpriority.edit1.text);
          Datam1.Query1.SQL.Add('where pagetype <> 999');
          Datam1.Query1.SQL.Add('and locationid = ' +
            IntToStr(Views[Viewselected].platesData[i].LocationID));
          Datam1.Query1.SQL.Add('and productionid = ' +
            IntToStr(Views[Viewselected].platesData[i].ProductionID));
          Datam1.Query1.SQL.Add('and Copyflatseparationset = ' +
            IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
          // if (FormSelplatecopies.Copyselstr <> '') then
          Datam1.Query1.SQL.Add('and ' + FormSelplatecopies.Copyselstr);

          Datam1.Query1.SQL.Add(WeditionStr);
          Datam1.Query1.SQL.Add(WpublicationStr);
          trysql(Datam1.Query1);

        end;
      end;
    end;
  end;
  ActionplaterefreshExecute(FormMain);
end;

procedure TFormMain.ActionplateretransmitExecute(Sender: TObject);
var
  i: Integer;
begin
  if PBExListviewplateinfo.Focused then
  begin
    for i := 0 to PBExListviewplateinfo.Items.Count - 1 do
    begin
      if PBExListviewplateinfo.Items[i].Selected then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('update pagetable');
        if Prefs.PlateTransmissionSystem then
          Datam1.Query1.SQL.Add
            ('set ImagingProcessID = 0,status = 30, miscint4 = 0 ')
        else
          Datam1.Query1.SQL.Add
            ('set ImagingProcessID = 0,status = 10, miscint4 = 0 ');
        Datam1.Query1.SQL.Add('where status > 10 and flatseparation = ' +
          PBExListviewplateinfo.Items[i].SubItems
          [PBExListviewplateinfoflatsepsubitem]);
        Datam1.Query1.SQL.Add('and pagename = ' + '''' +
          PBExListviewplateinfo.Items[i].caption + '''');
        Datam1.Query1.SQL.Add(WeditionStr);
        Datam1.Query1.SQL.Add(WpublicationStr);
        trysql(Datam1.Query1);
        Datam1.SetNewtreeprodid;
      end;
    end;
  End
  else
  begin
    for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
    begin
      if Views[Viewselected].LPV.Items[i].Selected then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('update pagetable');
        if Prefs.PlateTransmissionSystem then
          Datam1.Query1.SQL.Add
            ('set ImagingProcessID = 0,status = 30, miscint4 = 0 ')
        else
          Datam1.Query1.SQL.Add
            ('set ImagingProcessID = 0,status = 10, miscint4 = 0 ');
        Datam1.Query1.SQL.Add('where status > 10');
        Datam1.Query1.SQL.Add('and locationid = ' +
          IntToStr(Views[Viewselected].platesData[i].LocationID));
        Datam1.Query1.SQL.Add('and productionid = ' +
          IntToStr(Views[Viewselected].platesData[i].ProductionID));
        Datam1.Query1.SQL.Add('and Copyflatseparationset = ' +
          IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));

        Datam1.Query1.SQL.Add(WeditionStr);
        Datam1.Query1.SQL.Add(WpublicationStr);
        trysql(Datam1.Query1);
        Datam1.SetNewtreeprodid;

      end;
    end;
  end;
  settotransmittedifmainlocation;

  Datam1.UpdateTreeStateOnProduction(false);

  ActionplaterefreshExecute(FormMain);
end;

procedure TFormMain.ActionplatedeviceExecute(Sender: TObject);
Var
  tmpl: string;
  copyflatseparationset: string;
  tmpllistnum, i: Integer;
  settinggrp: Boolean;
begin
  if not AnyPlatesselected then
    exit;

  tmpl := '';
  tmpl := PlatetemplateArray[Views[Viewselected].platesData
    [Views[Viewselected].LPV.Selected.Index].templatelistid].TemplateName;
  tmpllistnum := Views[Viewselected].platesData
    [Views[Viewselected].LPV.Selected.Index].templatelistid;

  // Fills  Aktdevicelist string list of devices in template   (aktdeviceidlist items)
  inittypes.getdevicelistfromtemplate(tmpllistnum);

  inittypes.getdeviceGrplistfromtemplate(tmpllistnum);

  copyflatseparationset :=
    IntToStr(Views[Viewselected].platesData[Views[Viewselected].LPV.Selected.
    Index].copyflatseparationset);
  Formselectfromlist.ListBox1.Items.Clear;

  inittypes.getdevicelistfromtemplateNogrp(tmpllistnum);
  Formselectfromlist.ListBox1.Items := Aktdevicelist;

  // Fills  Aktdevicegrplist string list of device groups where member device is in template    (NaktdeviceGRPidlist)

  if (NaktdeviceGRPidlist > 0) And (DeviceGroupNamesPossible) then
  begin
    (* for igr := 1 to NaktdeviceGRPidlist do
      begin
      found := false;
      i3 := aktdeviceGRPidlist[igr];
      for idr := 1 to DeviceGroupNames[i3].NDevices do
      begin
      T := devicenames[DeviceGroupNames[i3].Devices[idr]];
      if Formselectfromlist.ListBox1.Items.IndexOf(T) < 0 then
      Formselectfromlist.ListBox1.Items.Add(T);
      end;
      end;
    *)
    for i := 0 to Aktdevicegrplist.Count - 1 do
    begin
      Formselectfromlist.ListBox1.Items.Add(Aktdevicegrplist[i]);
    end;
  end;
  // else
  // begin
  // inittypes.getdevicelistfromtemplateNogrp(tmpllistnum);
  // Formselectfromlist.ListBox1.Items := Aktdevicelist;
  // end;

  Formselectfromlist.CheckBox1.caption :=
    'Lock all copies to same device i settings';
  Formselectfromlist.PanelAllcopies.Visible := not Prefs.ForceSameDevice;
  FormSelplatecopies.autoall := Prefs.ForceSameDevice;
  Formselectfromlist.CheckBox1.Visible := not Prefs.ForceSameDevice;

  if not FormSelplatecopies.InitializeIt then
    exit;
  if (FormSelplatecopies.ListView1.Items.Count > 1) And
    (not Prefs.ForceSameDevice) then
  begin
    FormSelplatecopies.ShowModal;
  end
  else
    FormSelplatecopies.SetCopyselstr;

  Formselectfromlist.caption := 'Change device';
  Formselectfromlist.CheckBox1.Checked := Prefs.ForceSameDevice;
  if Formselectfromlist.ShowModal = mrOK then
  begin
    for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
    begin
      if Views[Viewselected].LPV.Items[i].Selected then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('update pagetable');

        // Reset device?
        if Formselectfromlist.ListBox1.ItemIndex = Formselectfromlist.ListBox1.
          Items.Count - 1 then
        begin
          Datam1.Query1.SQL.Add('set deviceid = 0,miscint4=0');
        End
        else
        begin
          settinggrp := false;
          if (NaktdeviceGRPidlist > 0) And (DeviceGroupNamesPossible) then
          begin
            if Formselectfromlist.ListBox1.ItemIndex >= Aktdevicelist.Count then
            begin
              settinggrp := true;
            end;
          end;

          if settinggrp then
          begin
            if DeviceGroupNamesPossible then
              Datam1.Query1.SQL.Add('set deviceid = 0,miscint4=0,DeviceGroupID='
                + IntToStr(inittypes.DeviceGroupnametoID
                (Formselectfromlist.ListBox1.Items
                [Formselectfromlist.ListBox1.ItemIndex])))
            else
              Datam1.Query1.SQL.Add('set deviceid = 0,miscint4=0');
          end
          else
          begin
            Datam1.Query1.SQL.Add('set miscint4=0,deviceid = ' +
              IntToStr(tNames1.devicenametoid(Formselectfromlist.ListBox1.Items
              [Formselectfromlist.ListBox1.ItemIndex])));
            if DeviceGroupNamesPossible then
              Datam1.Query1.SQL.Add(',DeviceGroupID=0');
          end;
        end;
        Datam1.Query1.SQL.Add('where pagetype <> 999');
        Datam1.Query1.SQL.Add('and locationid = ' +
          IntToStr(Views[Viewselected].platesData[i].LocationID));
        Datam1.Query1.SQL.Add('and productionid = ' +
          IntToStr(Views[Viewselected].platesData[i].ProductionID));
        if (not Formselectfromlist.CheckBox1.Checked) AND
          (FormSelplatecopies.Copyselstr <> '') then
          Datam1.Query1.SQL.Add('and ' + FormSelplatecopies.Copyselstr);
        Datam1.Query1.SQL.Add('and copyflatseparationset = ' +
          IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
        Datam1.Query1.SQL.Add(WeditionStr);
        Datam1.Query1.SQL.Add(WpublicationStr);
        if Prefs.Debug then
          Datam1.Query1.SQL.SaveToFile
            (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
            'sqllogs\' + 'Setdev.SQL');
        trysql(Datam1.Query1);

        if Prefs.PlatesAutoReimageOnDeviceChange then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set status = 30');
          Datam1.Query1.SQL.Add('where pagetype <> 999 and status > 30');
          Datam1.Query1.SQL.Add('and locationid = ' +
            IntToStr(Views[Viewselected].platesData[i].LocationID));
          Datam1.Query1.SQL.Add('and productionid = ' +
            IntToStr(Views[Viewselected].platesData[i].ProductionID));
          if (not Formselectfromlist.CheckBox1.Checked) and
            (FormSelplatecopies.Copyselstr <> '') then
            Datam1.Query1.SQL.Add('and ' + FormSelplatecopies.Copyselstr);
          Datam1.Query1.SQL.Add('and copyflatseparationset = ' +
            IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
          Datam1.Query1.SQL.Add(WeditionStr);
          Datam1.Query1.SQL.Add(WpublicationStr);
          if Prefs.Debug then
            Datam1.Query1.SQL.SaveToFile
              (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
              'sqllogs\' + 'SetReimdev.SQL');
          trysql(Datam1.Query1);
          Datam1.SetNewtreeprodid;
        end;
      end;

    end;
  end;
  Datam1.UpdateTreeStateOnProduction(false);
  ActionplaterefreshExecute(FormMain);
end;

procedure TFormMain.ActionplatemarksExecute(Sender: TObject);
var
  i, tmpllistid: Integer;
begin

  if not AnyPlatesselected then
    exit;

  tmpllistid := Views[Viewselected].platesData
    [Views[Viewselected].LPV.Selected.ImageIndex].templatelistid;

  FormMarkgroups.CheckListBoxmarkgroups.Items.Clear;
  FormMarkgroups.templatelistid := tmpllistid;
  FormMarkgroups.Amarks := Views[Viewselected].platesData
    [Views[Viewselected].LPV.Selected.ImageIndex].markgroups;
  FormMarkgroups.ANmarks := Views[Viewselected].platesData
    [Views[Viewselected].LPV.Selected.ImageIndex].Nmarkgroups;

  if FormMarkgroups.ShowModal = mrOK then
  begin
    if PBExListviewplateinfo.Focused then
    begin
      for i := 0 to PBExListviewplateinfo.Items.Count - 1 do
      begin
        if PBExListviewplateinfo.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set markgroups = ' + '''' +
            inittypes.marksIDstr(FormMarkgroups.ANmarks,
            FormMarkgroups.Amarks) + '''');
          Datam1.Query1.SQL.Add('where flatseparation = ' +
            PBExListviewplateinfo.Items[i].SubItems
            [PBExListviewplateinfoflatsepsubitem]);
          Datam1.Query1.SQL.Add(WeditionStr);
          Datam1.Query1.SQL.Add(WpublicationStr);
          trysql(Datam1.Query1);
        end;
      end;
    end
    else
    begin
      if not FormSelplatecopies.doit then
        exit;
      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set markgroups = ' + '''' +
            inittypes.marksIDstr(FormMarkgroups.ANmarks,
            FormMarkgroups.Amarks) + '''');
          Datam1.Query1.SQL.Add('where pagetype <> 999');
          Datam1.Query1.SQL.Add('and locationid = ' +
            IntToStr(Views[Viewselected].platesData[i].LocationID));
          Datam1.Query1.SQL.Add('and productionid = ' +
            IntToStr(Views[Viewselected].platesData[i].ProductionID));
          Datam1.Query1.SQL.Add('and Copyflatseparationset = ' +
            IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));

          Datam1.Query1.SQL.Add('and ' + FormSelplatecopies.Copyselstr);
          Datam1.Query1.SQL.Add(WeditionStr);
          Datam1.Query1.SQL.Add(WpublicationStr);
          trysql(Datam1.Query1);

        end;
      end;

    end;
  end;

  ActionplaterefreshExecute(FormMain);
end;

procedure TFormMain.ActionPlateproduceExecute(Sender: TObject);
Var
  i: Integer;
begin
  if not AnyPlatesselected then
    exit;

  for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
  begin
    if Views[Viewselected].LPV.Items[i].Selected then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      Datam1.Query1.SQL.Add('set Uniquepage = 2');
      Datam1.Query1.SQL.Add('where pagetype <> 999');
      Datam1.Query1.SQL.Add('and locationid = ' +
        IntToStr(Views[Viewselected].platesData[i].LocationID));
      Datam1.Query1.SQL.Add('and productionid = ' +
        IntToStr(Views[Viewselected].platesData[i].ProductionID));
      Datam1.Query1.SQL.Add('and Copyflatseparationset = ' +
        IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
      Datam1.Query1.SQL.Add('and Uniquepage = 0');
      trysql(Datam1.Query1);
      Datam1.SetNewtreeprodid;
    end;
  end;
  Datam1.UpdateTreeStateOnProduction(false);
  ActionplaterefreshExecute(FormMain);

end;

procedure TFormMain.Stackposition4Click(Sender: TObject);
Var
  T: string;
  i: Integer;
begin

  Formeditatext.caption := InfraLanguage1.Translate('Change stackposition');
  Formeditatext.Label1.caption := InfraLanguage1.Translate('Stackposition');
  Formeditatext.ComboBox1.Items.Clear;
  for i := 0 to Length(Prefs.StackNamesList) - 1 do
    Formeditatext.ComboBox1.Items.Add(Prefs.StackNamesList[i]);

  Formeditatext.ComboBox1.text := '';

  if Formeditatext.ShowModal = mrOK then
  begin
    T := Formeditatext.ComboBox1.text;
    if Length(T) > 4 then
      Delete(T, 5, Length(T));

    if PBExListviewplateinfo.Focused then
    begin
      for i := 0 to PBExListviewplateinfo.Items.Count - 1 do
      begin
        if PBExListviewplateinfo.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          if Prefs.OrStackpositionsTogether then
            Datam1.Query1.SQL.Add('set SortingPosition = ' + '''' + T + '''' +
              ' +SUBSTRING(SortingPosition,' + IntToStr(Length(T) + 1) +
              ',DATALength(SortingPosition))')
          else
            Datam1.Query1.SQL.Add('set sortingposition = ' + '''' + T + '''');

          Datam1.Query1.SQL.Add('where flatseparation = ' +
            PBExListviewplateinfo.Items[i].SubItems
            [PBExListviewplateinfoflatsepsubitem]);
          trysql(Datam1.Query1);
        end;
      end;
    end
    else
    begin
      if not AnyPlatesselected then
        exit;

      if not FormSelplatecopies.doit then
        exit;
      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          if Prefs.OrStackpositionsTogether then
            Datam1.Query1.SQL.Add('set SortingPosition = ' + '''' + T + '''' +
              ' +SUBSTRING(SortingPosition,' + IntToStr(Length(T) + 1) +
              ',DATALength(SortingPosition))')
          else
            Datam1.Query1.SQL.Add('set sortingposition = ' + '''' + T + '''');

          Datam1.Query1.SQL.Add('where pagetype <> 999');
          Datam1.Query1.SQL.Add('and locationid = ' +
            IntToStr(Views[Viewselected].platesData[i].LocationID));
          Datam1.Query1.SQL.Add('and productionid = ' +
            IntToStr(Views[Viewselected].platesData[i].ProductionID));
          Datam1.Query1.SQL.Add('and Copyflatseparationset = ' +
            IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
          Datam1.Query1.SQL.Add('and ' + FormSelplatecopies.Copyselstr);

          trysql(Datam1.Query1);

        end;
      end;
    end;
    if not loadplateview(true, false) then
      plateviewtreedeselect;

  end;
end;

procedure TFormMain.Cylinder5Click(Sender: TObject);
Var
  T: string;
  i: Integer;
begin

  Formeditatext.caption := InfraLanguage1.Translate('Change press cylinder');
  Formeditatext.Label1.caption := InfraLanguage1.Translate('cylinder');
  Formeditatext.ComboBox1.Items.Clear;
  for i := 0 to Length(Prefs.CylinderNameTranslation) - 1 do
    Formeditatext.ComboBox1.Items.Add(Prefs.CylinderNameTranslation[i].Value);

  Formeditatext.ComboBox1.text := '';

  if Formeditatext.ShowModal = mrOK then
  begin
    T := Formeditatext.ComboBox1.text;
    if Length(T) > 4 then
      Delete(T, 5, Length(T));

    if PBExListviewplateinfo.Focused then
    begin
      for i := 0 to PBExListviewplateinfo.Items.Count - 1 do
      begin
        if PBExListviewplateinfo.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set presscylinder = ' + '''' + T + '''');
          Datam1.Query1.SQL.Add('where flatseparation = ' +
            PBExListviewplateinfo.Items[i].SubItems
            [PBExListviewplateinfoflatsepsubitem]);
          trysql(Datam1.Query1);
        end;
      end;
    end
    else
    begin
      if not AnyPlatesselected then
        exit;
      if not FormSelplatecopies.doit then
        exit;
      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set presscylinder = ' + '''' + T + '''');
          Datam1.Query1.SQL.Add('where pagetype <> 999');
          Datam1.Query1.SQL.Add('and locationid = ' +
            IntToStr(Views[Viewselected].platesData[i].LocationID));
          Datam1.Query1.SQL.Add('and productionid = ' +
            IntToStr(Views[Viewselected].platesData[i].ProductionID));
          Datam1.Query1.SQL.Add('and Copyflatseparationset = ' +
            IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
          Datam1.Query1.SQL.Add('and ' + FormSelplatecopies.Copyselstr);

          trysql(Datam1.Query1);

        end;
      end;
    end;
    if not loadplateview(true, false) then
      plateviewtreedeselect;

  end;

end;

procedure TFormMain.Highlow4Click(Sender: TObject);
var
  T: string;
  i: Integer;
begin

  Formeditatext.caption := InfraLanguage1.Translate('Change cylinder position');
  Formeditatext.Label1.caption := InfraLanguage1.Translate('cylinder position');
  Formeditatext.ComboBox1.Items.Clear;
  Formeditatext.ComboBox1.Items.Add('High');
  Formeditatext.ComboBox1.Items.Add('Low');
  Formeditatext.ComboBox1.text := '';

  if Formeditatext.ShowModal = mrOK then
  begin
    T := Formeditatext.ComboBox1.text;
    if Length(T) > 4 then
      Delete(T, 5, Length(T));

    if PBExListviewplateinfo.Focused then
    begin
      for i := 0 to PBExListviewplateinfo.Items.Count - 1 do
      begin
        if PBExListviewplateinfo.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set presshighlow = ' + '''' + T + '''');
          Datam1.Query1.SQL.Add('where flatseparation = ' +
            PBExListviewplateinfo.Items[i].SubItems
            [PBExListviewplateinfoflatsepsubitem]);
          trysql(Datam1.Query1);
        end;
      end;
    end
    else
    begin

      if not AnyPlatesselected then
        exit;
      if not FormSelplatecopies.doit then
        exit;
      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set presshighlow = ' + '''' + T + '''');
          Datam1.Query1.SQL.Add('where pagetype <> 999');
          Datam1.Query1.SQL.Add('and locationid = ' +
            IntToStr(Views[Viewselected].platesData[i].LocationID));
          Datam1.Query1.SQL.Add('and productionid = ' +
            IntToStr(Views[Viewselected].platesData[i].ProductionID));
          Datam1.Query1.SQL.Add('and Copyflatseparationset = ' +
            IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
          Datam1.Query1.SQL.Add('and ' + FormSelplatecopies.Copyselstr);
          trysql(Datam1.Query1);

        end;
      end;
    end;
    if not loadplateview(true, false) then
      plateviewtreedeselect;

  end;

end;

procedure TFormMain.ActionpagetreeexternalstatusExecute(Sender: TObject);
var
  i: Integer;
begin

  if FormChangeextstatus.ShowModal = mrOK then
  begin
    if PBExListviewplateinfo.Focused then
    begin
      for i := 0 to PBExListviewplateinfo.Items.Count - 1 do
      begin
        if PBExListviewplateinfo.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set externalstatus = ' +
            IntToStr(FormChangeextstatus.selectedexternalstatus));
          Datam1.Query1.SQL.Add('where flatseparation = ' +
            PBExListviewplateinfo.Items[i].SubItems
            [PBExListviewplateinfoflatsepsubitem]);
          Datam1.Query1.SQL.Add('and pagename = ' + '''' +
            PBExListviewplateinfo.Items[i].caption + '''');
          Datam1.Query1.SQL.Add(WeditionStr);
          trysql(Datam1.Query1);
        end;
      end;
    end
    else
    begin
      if not AnyPlatesselected then
        exit;
      if not FormSelplatecopies.doit then
        exit;
      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set externalstatus = ' +
            IntToStr(FormChangeextstatus.selectedexternalstatus));
          Datam1.Query1.SQL.Add('where pagetype <> 999');
          Datam1.Query1.SQL.Add('and locationid = ' +
            IntToStr(Views[Viewselected].platesData[i].LocationID));
          Datam1.Query1.SQL.Add('and productionid = ' +
            IntToStr(Views[Viewselected].platesData[i].ProductionID));
          Datam1.Query1.SQL.Add('and Copyflatseparationset = ' +
            IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
          Datam1.Query1.SQL.Add('and ' + FormSelplatecopies.Copyselstr);
          Datam1.Query1.SQL.Add(WeditionStr);
          trysql(Datam1.Query1);

        end;
      end;
    end;
    if not loadplateview(true, false) then
      plateviewtreedeselect;

  end;
end;

procedure TFormMain.ActionplatestackExecute(Sender: TObject);
var
  pagename, T: string;
  i, j, k, SetNumber: Integer;
  Publicationid, editionid, Sectionid, LocationID, ProductionID: Integer;
  Pubdate: TDateTime;
  CopySeparationSets: array of Integer;
begin
   Pubdate := Now;
   editionid := 0;
   Sectionid := 0;
  if (Prefs.CustomManualStackerSet) then
  begin
    if (FormNiceManualStackerSet.ShowModal <> mrOK) then
      exit;
    if not AnyPlatesselected then
      exit;
    if not FormSelplatecopies.doit then
      exit;

    SetLength(CopySeparationSets, 3);

    for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
    begin
      if Views[Viewselected].LPV.Items[i].Selected then
      begin
        SetNumber := Views[Viewselected].platesData[i].copyflatseparationset;
        LocationID := Views[Viewselected].platesData[i].LocationID;
        ProductionID := Views[Viewselected].platesData[i].ProductionID;

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('update pagetable');
        Datam1.Query1.SQL.Add('set sortingposition = ' + '''' +
          FormNiceManualStackerSet.ComboBoxC.text + '''');
        Datam1.Query1.SQL.Add('where locationid = ' + IntToStr(LocationID));
        Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
        Datam1.Query1.SQL.Add('and Copyflatseparationset = ' +
          IntToStr(SetNumber));
        Datam1.Query1.SQL.Add('and ' + FormSelplatecopies.Copyselstr);
        Datam1.Query1.SQL.Add('and ColorID=1');
        trysql(Datam1.Query1);

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('update pagetable');
        Datam1.Query1.SQL.Add('set sortingposition = ' + '''' +
          FormNiceManualStackerSet.ComboBoxM.text + '''');
        Datam1.Query1.SQL.Add('where locationid = ' + IntToStr(LocationID));
        Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
        Datam1.Query1.SQL.Add('and Copyflatseparationset = ' +
          IntToStr(SetNumber));
        Datam1.Query1.SQL.Add('and ' + FormSelplatecopies.Copyselstr);
        Datam1.Query1.SQL.Add('and ColorID=2');
        trysql(Datam1.Query1);

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('update pagetable');
        Datam1.Query1.SQL.Add('set sortingposition = ' + '''' +
          FormNiceManualStackerSet.ComboBoxY.text + '''');
        Datam1.Query1.SQL.Add('where locationid = ' + IntToStr(LocationID));
        Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
        Datam1.Query1.SQL.Add('and Copyflatseparationset = ' +
          IntToStr(SetNumber));
        Datam1.Query1.SQL.Add('and ' + FormSelplatecopies.Copyselstr);
        Datam1.Query1.SQL.Add('and ColorID=3');
        trysql(Datam1.Query1);

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('update pagetable');
        Datam1.Query1.SQL.Add('set sortingposition = ' + '''' +
          FormNiceManualStackerSet.ComboBoxK.text + '''');
        Datam1.Query1.SQL.Add('where locationid = ' + IntToStr(LocationID));
        Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
        Datam1.Query1.SQL.Add('and Copyflatseparationset = ' +
          IntToStr(SetNumber));
        Datam1.Query1.SQL.Add('and ' + FormSelplatecopies.Copyselstr);
        Datam1.Query1.SQL.Add('and ColorID=4');
        trysql(Datam1.Query1);


        // Set for all presses! (Nice Matin)

        Publicationid := 0;
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('SELECT TOP 1 PublicationID,PubDate,EditionID,SectionID,PageName FROM PageTable WITH (NOLOCK)');
        Datam1.Query1.SQL.Add('WHERE Copyflatseparationset = ' +
          IntToStr(SetNumber));
        Datam1.Query1.Open;
        if not Datam1.Query1.Eof then
        begin
          Publicationid := Datam1.Query1.Fields[0].AsInteger;
          Pubdate := Datam1.Query1.Fields[1].AsDateTime;
          editionid := Datam1.Query1.Fields[2].AsInteger;
          Sectionid := Datam1.Query1.Fields[3].AsInteger;
          pagename := Datam1.Query1.Fields[4].AsString;
        end;
        Datam1.Query1.Close;

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('SELECT DISTINCT Copyflatseparationset FROM PageTable WITH (NOLOCK) ');
        Datam1.Query1.SQL.Add('where PublicationID = ' +
          IntToStr(Publicationid));
        Datam1.Query1.SQL.Add('and Pubdate = :pubdate');
        Datam1.Query1.SQL.Add('and EditionID = ' + IntToStr(editionid));
        Datam1.Query1.SQL.Add('and SectionID = ' + IntToStr(Sectionid));
        Datam1.Query1.SQL.Add('and PageName = ''' + pagename + '''');
        Datam1.Query1.parambyname('pubdate').AsDate := Pubdate;
        Datam1.Query1.Open;

        j := 0;
        while not Datam1.Query1.Eof do
        begin
          Inc(j);
          if (Length(CopySeparationSets) < j) then
            SetLength(CopySeparationSets, j);
          CopySeparationSets[j - 1] := Datam1.Query1.Fields[0].AsInteger;
          Datam1.Query1.Next;
        end;
        Datam1.Query1.Close;

        for k := 0 to j - 1 do
        begin

          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set sortingposition = ' + '''' +
            FormNiceManualStackerSet.ComboBoxC.text + '''');
          Datam1.Query1.SQL.Add('where Copyflatseparationset = ' +
            IntToStr(CopySeparationSets[k]));
          Datam1.Query1.SQL.Add('and ' + FormSelplatecopies.Copyselstr);
          Datam1.Query1.SQL.Add('and ColorID=1');
          trysql(Datam1.Query1);

          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set sortingposition = ' + '''' +
            FormNiceManualStackerSet.ComboBoxM.text + '''');
          Datam1.Query1.SQL.Add('where Copyflatseparationset = ' +
            IntToStr(CopySeparationSets[k]));
          Datam1.Query1.SQL.Add('and ' + FormSelplatecopies.Copyselstr);
          Datam1.Query1.SQL.Add('and ColorID=2');
          trysql(Datam1.Query1);

          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set sortingposition = ' + '''' +
            FormNiceManualStackerSet.ComboBoxY.text + '''');
          Datam1.Query1.SQL.Add('where Copyflatseparationset = ' +
            IntToStr(CopySeparationSets[k]));
          Datam1.Query1.SQL.Add('and ' + FormSelplatecopies.Copyselstr);
          Datam1.Query1.SQL.Add('and ColorID=3');
          trysql(Datam1.Query1);

          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set sortingposition = ' + '''' +
            FormNiceManualStackerSet.ComboBoxK.text + '''');
          Datam1.Query1.SQL.Add('where Copyflatseparationset = ' +
            IntToStr(CopySeparationSets[k]));
          Datam1.Query1.SQL.Add('and ' + FormSelplatecopies.Copyselstr);
          Datam1.Query1.SQL.Add('and ColorID=4');
          trysql(Datam1.Query1);

        end;

      end;
    end;
    ActionplaterefreshExecute(FormMain);
    exit;
  end;

  Formeditatext.caption := InfraLanguage1.Translate('Stackposition');
  Formeditatext.Label1.caption := InfraLanguage1.Translate('Stackposition');
  Formeditatext.ComboBox1.Items.Clear;
  for i := 0 to Length(Prefs.StackNamesList) - 1 do
    Formeditatext.ComboBox1.Items.Add(Prefs.StackNamesList[i]);
  Formeditatext.ComboBox1.text := '';

  if Formeditatext.ShowModal = mrOK then
  begin
    T := Formeditatext.ComboBox1.text;
   // if Length(T) > 4 then
   //   Delete(T, 5, Length(T));

    if PBExListviewplateinfo.Focused then
    begin
      for i := 0 to PBExListviewplateinfo.Items.Count - 1 do
      begin
        if PBExListviewplateinfo.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          // Datam1.Query1.SQL.Add('set sortingposition = '+''''+T+'''');
          if Prefs.OrStackpositionsTogether then
            Datam1.Query1.SQL.Add('set SortingPosition = ' + '''' + T + '''' +
              ' +SUBSTRING(SortingPosition,' + IntToStr(Length(T) + 1) +
              ',DATALength(SortingPosition))')
          else
            Datam1.Query1.SQL.Add('set sortingposition = ' + '''' + T + '''');

          Datam1.Query1.SQL.Add('where flatseparation = ' +
            PBExListviewplateinfo.Items[i].SubItems
            [PBExListviewplateinfoflatsepsubitem]);

          trysql(Datam1.Query1);
        end;
      end;
    end
    else
    begin
      if not AnyPlatesselected then
        exit;
      if not FormSelplatecopies.doit then
        exit;
      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          if Prefs.OrStackpositionsTogether then
            Datam1.Query1.SQL.Add('set SortingPosition = ' + '''' + T + '''' +
              ' +SUBSTRING(SortingPosition,' + IntToStr(Length(T) + 1) +
              ',DATALength(SortingPosition))')
          else
            Datam1.Query1.SQL.Add('set sortingposition = ' + '''' + T + '''');

          Datam1.Query1.SQL.Add('where pagetype <> 999');
          Datam1.Query1.SQL.Add('and locationid = ' +
            IntToStr(Views[Viewselected].platesData[i].LocationID));
          Datam1.Query1.SQL.Add('and productionid = ' +
            IntToStr(Views[Viewselected].platesData[i].ProductionID));
          Datam1.Query1.SQL.Add('and Copyflatseparationset = ' +
            IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
          Datam1.Query1.SQL.Add('and ' + FormSelplatecopies.Copyselstr);

          trysql(Datam1.Query1);

        end;
      end;
    end;
    ActionplaterefreshExecute(FormMain);
  end;

end;

procedure TFormMain.ActionplatesflatproofExecute(Sender: TObject);
var
  tmpl: string;
  copyflatseparationset: string;
  tmpllistnum, i: Integer;

begin
  if not AnyPlatesselected then
    exit;
  tmpl := '';
  tmpl := PlatetemplateArray[Views[Viewselected].platesData
    [Views[Viewselected].LPV.Selected.Index].Fullflatlistid].TemplateName;
  tmpllistnum := Views[Viewselected].platesData
    [Views[Viewselected].LPV.Selected.Index].Fullflatlistid;
  inittypes.getdevicelistfromtemplate(tmpllistnum);
  copyflatseparationset :=
    IntToStr(Views[Viewselected].platesData[Views[Viewselected].LPV.Selected.
    Index].copyflatseparationset);
  FormChlayout.Aktpressname := tNames1.pressnameIDtoname
    (Views[Viewselected].platesData[Views[Viewselected].LPV.Selected.
    Index].pressid);
  FormChlayout.Curtemplate := PlatetemplateArray[tmpllistnum].TemplateName;

  if FormChlayout.ShowModal = mrOK then
  begin
    for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
    begin
      if Views[Viewselected].LPV.Items[i].Selected then
      begin
        if FormChlayout.Newtemplatelistid <> Views[Viewselected].platesData[i].Fullflatlistid
        then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set deviceid = 0');
          Datam1.Query1.SQL.Add(', templateid = ' +
            IntToStr(PlatetemplateArray[FormChlayout.Newtemplatelistid]
            .TemplateID));
          Datam1.Query1.SQL.Add('where pagetype <> 999');
          Datam1.Query1.SQL.Add('and locationid = ' +
            IntToStr(Views[Viewselected].platesData[i].LocationID));
          Datam1.Query1.SQL.Add('and productionid = ' +
            IntToStr(Views[Viewselected].platesData[i].ProductionID));
          Datam1.Query1.SQL.Add('and pressrunid = ' +
            IntToStr(Views[Viewselected].platesData[i].runid));
          Datam1.Query1.SQL.Add('and copyflatseparationset = ' +
            IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
          Datam1.Query1.SQL.Add(WeditionStr);
          trysql(Datam1.Query1);
        end;
      end;
    end;
  end;
  ActionplaterefreshExecute(FormMain);

end;

procedure TFormMain.ActionplateflatproofExecute(Sender: TObject);
var
  i: Integer;
begin

  if not AnyPlatesselected then
    exit;
  Formflatproof.Publicationid := -1;

  if TTreeViewpagestype(TreeViewPlateview.Selected.Data^).Publicationid > -1
  then
    Formflatproof.Publicationid :=
      TTreeViewpagestype(TreeViewPlateview.Selected.Data^).Publicationid;

  if Formflatproof.ShowModal = mrOK then
  begin
    for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
    begin
      if Views[Viewselected].LPV.Items[i].Selected then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('update pagetable');
        Datam1.Query1.SQL.Add
          ('Set flatproofstatus = 0 ,FlatProofConfigurationID = ' +
          IntToStr(Formflatproof.Flatproofconfig));
        Datam1.Query1.SQL.Add('where pagetype <> 999');
        Datam1.Query1.SQL.Add('and Copyflatseparationset = ' +
          IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
        Datam1.Query1.SQL.Add(WeditionStr);
        Datam1.Query1.SQL.Add(WpublicationStr);
        trysql(Datam1.Query1);
      end;
    end;
  end;
  ActionplaterefreshExecute(FormMain);
end;

procedure TFormMain.ActionplateCommentExecute(Sender: TObject);
var
  i: Integer;
  T: string;
  thisCopyFlatSeparationSet: Integer;
begin

  // NAN begin
  thisCopyFlatSeparationSet := 0;
  T := '';
  if not AnyPlatesselected then
    exit;

  for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
  begin
    if Views[Viewselected].LPV.Items[i].Selected then
    begin
      thisCopyFlatSeparationSet := Views[Viewselected].platesData[i]
        .copyflatseparationset;
      break;
    end;
  end;

  if (thisCopyFlatSeparationSet > 0) then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('SELECT TOP 1 Comment FROM PageTable WITH (NOLOCK)');
    Datam1.Query1.SQL.Add('where CopyFlatSeparationSet  = ' +
      IntToStr(thisCopyFlatSeparationSet));
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
      T := Datam1.Query1.Fields[0].AsString;
    Datam1.Query1.Close;
  end;

  setAcommentResult := setAcomment(T, 'Set comment');
  if setAcommentResult = 2 then
    T := '';
  if setAcommentResult > 0 then
  begin
    if PBExListviewplateinfo.Focused then
    begin
      for i := 0 to PBExListviewplateinfo.Items.Count - 1 do
      begin
        if PBExListviewplateinfo.Items[i].Selected then
        begin

          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set comment = ' + '''' + T + '''');
          Datam1.Query1.SQL.Add('where flatseparation = ' +
            PBExListviewplateinfo.Items[i].SubItems
            [PBExListviewplateinfoflatsepsubitem]);
          Datam1.Query1.SQL.Add(WeditionStr);
          Datam1.Query1.SQL.Add(WpublicationStr);
          trysql(Datam1.Query1);
        end;
      end;
    end
    else
    begin
      if not AnyPlatesselected then
        exit;
      if not FormSelplatecopies.doit then
        exit;
      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set comment = ' + '''' + T + '''');
          Datam1.Query1.SQL.Add('where pagetype <> 999');
          Datam1.Query1.SQL.Add('and locationid = ' +
            IntToStr(Views[Viewselected].platesData[i].LocationID));
          Datam1.Query1.SQL.Add('and productionid = ' +
            IntToStr(Views[Viewselected].platesData[i].ProductionID));
          Datam1.Query1.SQL.Add('and Copyflatseparationset = ' +
            IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
          Datam1.Query1.SQL.Add('and ' + FormSelplatecopies.Copyselstr);
          Datam1.Query1.SQL.Add(WeditionStr);
          Datam1.Query1.SQL.Add(WpublicationStr);
          trysql(Datam1.Query1);

        end;
      end;
    end;
    ActionplaterefreshExecute(FormMain);
  end;

end;

procedure TFormMain.FormMouseWheelDown(Sender: TObject; Shift: TShiftState;
  MousePos: TPoint; var Handled: Boolean);
begin
  if PageControlMain.ActivePageIndex = VIEW_PLATES then
  begin

    if PlateviewMain.VertScrollBar.Position +
      PlateviewMain.VertScrollBar.Increment <= PlateviewMain.VertScrollBar.Range
    then
      PlateviewMain.VertScrollBar.Position :=
        PlateviewMain.VertScrollBar.Position +
        PlateviewMain.VertScrollBar.Increment;
    Handled := true;
  end;
end;

procedure TFormMain.FormMouseWheelUp(Sender: TObject; Shift: TShiftState;
  MousePos: TPoint; var Handled: Boolean);
begin
  if PageControlMain.ActivePageIndex = VIEW_PLATES then
  begin
    Handled := true;
    if PlateviewMain.VertScrollBar.Position -
      PlateviewMain.VertScrollBar.Increment >= 0 then
      PlateviewMain.VertScrollBar.Position :=
        PlateviewMain.VertScrollBar.Position -
        PlateviewMain.VertScrollBar.Increment;
  end;

end;

procedure TFormMain.ActionPlateregeninkExecute(Sender: TObject);
var
  i: Integer;
begin
  Regeninkflats.Clear;
  if not AnyPlatesselected then
    exit;
  for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
  begin
    if Views[Viewselected].LPV.Items[i].Selected then
    begin

      Regeninkflats.Add(IntToStr(Views[Viewselected].platesData[i]
        .copyflatseparationset));
    end;
  end;
  Regencopyflatinkfiles;
end;

procedure TFormMain.ActionPlatetreeregeninkExecute(Sender: TObject);
var
  runnode: TTreeNode;
  Pressrunselstr: string;
  anode, n1, n2, n3: TTreeNode;
  ProductionID: Integer;

begin
  Regeninkflats.Clear;
  try
    if TreeViewPlateview.Selected = nil then
      exit;
    runnode := TreeViewPlateview.Selected;
    if runnode = nil then
      exit;
    if runnode.Level < 2 then
      exit;

    Pressrunselstr := '(-48';
    ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;
    n1 := runnode;

    try
      anode := n1;
      if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
      begin
        if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
          Pressrunselstr) = 0 then
          Pressrunselstr := Pressrunselstr + ',' +
            IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
      end;
      n2 := n1.GetFirstChild;
      while n2 <> nil do
      begin
        anode := n2;
        if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
        begin
          if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
            Pressrunselstr) = 0 then
            Pressrunselstr := Pressrunselstr + ',' +
              IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
        end;

        n3 := n2.GetFirstChild;
        while n3 <> nil do
        begin
          anode := n3;
          if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
          begin
            if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
              Pressrunselstr) = 0 then
              Pressrunselstr := Pressrunselstr + ',' +
                IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
          end;
          n3 := n3.getNextSibling;
        end;
        n2 := n2.getNextSibling;
      end;

    except
    end;

    Pressrunselstr := Pressrunselstr + ') ';

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('SELECT DISTINCT CopyFlatSeparationSet FROM pagetable WITH (NOLOCK)');
    Datam1.Query1.SQL.Add('WHERE pressrunid IN ' + Pressrunselstr);
    Datam1.Query1.SQL.Add('AND productionid = ' + IntToStr(ProductionID));
    Datam1.Query1.Open;
    while not Datam1.Query1.Eof do
    begin
      Regeninkflats.Add(IntToStr(Datam1.Query1.Fields[0].AsInteger));
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;

    Regencopyflatinkfiles;

  Except
  end;
end;

procedure TFormMain.Regencopyflatinkfiles;
var
  Nflatnumbers, i, ioldp: Integer;
  flatnumbers: array of record pressname: String;
  FlatSeparation: Int64;
  flatseparationset: Int64;
  inputfilename: string;
end;
r, Alocationid: Integer;
templateinkpath, PriT, topripath: String;
f:
TSearchRec;
Username, Password, inkcpath, Orgpath, T: string;
Alist:
Tstrings;

allfound:
Boolean;
regenok:
Boolean;
Isel:
Integer;

begin
  Alocationid := 0;
  Alist := Tstringlist.Create;
  regenok := false;
  try
    try
      screen.Cursor := crhourglass;

      if (Prefs.NewInkRegeneration) then
      begin
        if Regeninkflats.Count > 0 then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('Select TOP 1 locationid from pagetable (NOLOCK) where CopyFlatSeparationSet = '
            + Regeninkflats[0]);
          Alocationid := -1;
          Datam1.Query1.Open;
          if not Datam1.Query1.Eof then
            Alocationid := Datam1.Query1.Fields[0].AsInteger;
          Datam1.Query1.Close;
        end;
        if Alocationid > 0 then
        begin
          for Isel := 0 to Regeninkflats.Count - 1 do
          begin
            Nflatnumbers := 0;
            Datam1.Query1.SQL.Clear; // 0 regen  1 resend
            Datam1.Query1.SQL.Add
              ('Insert InkRegenerationQueue (CopyFlatSeparationSet,LocationID,MiscInt,MiscString)');
            Datam1.Query1.SQL.Add('Values ( ' + Regeninkflats[Isel] + ',');
            Datam1.Query1.SQL.Add(IntToStr(Alocationid) + ',0,' + '''' + '' +
              '''' + ')');
            if Prefs.Debug then
              Datam1.Query1.SQL.SaveToFile
                (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
                'sqllogs\' + 'NewregenInkdata.SQL');
            Datam1.Query1.ExecSQL;

            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add('update pagetable');
            Datam1.Query1.SQL.Add
              ('Set inkstatus = 0 Where Copyflatseparationset = ' +
              Regeninkflats[Isel]);
            trysql(Datam1.Query1);

          end;
        end;
      end
      else
      begin
        SetLength(flatnumbers, Regeninkflats.Count + 20);
        for Isel := 0 to Regeninkflats.Count - 1 do
        begin
          Nflatnumbers := 0;
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('Select distinct p1.templateid,p1.flatseparation,T1.TiffCopyFolder,p1.FlatSeparationSet,p1.pressid from pagetable p1 (NOLOCK),TemplateConfigurations t1 (NOLOCK)');
          Datam1.Query1.SQL.Add('where p1.Copyflatseparationset = ' +
            Regeninkflats[Isel]);
          Datam1.Query1.SQL.Add('and p1.active = 1 and p1.status >=49');
          Datam1.Query1.SQL.Add('and p1.pagetype <> 3');
          Datam1.Query1.SQL.Add('and p1.Copynumber = 1');
          Datam1.Query1.SQL.Add('and p1.templateid = t1.templateid');
          Datam1.Query1.SQL.Add('order by flatseparation');
          Datam1.Query1.Open;
          while not Datam1.Query1.Eof do
          begin
            Inc(Nflatnumbers);
            flatnumbers[Nflatnumbers].FlatSeparation := Datam1.Query1.Fields[1]
              .AsVariant;
            flatnumbers[Nflatnumbers].flatseparationset := Datam1.Query1.Fields
              [3].AsInteger;
            flatnumbers[Nflatnumbers].inputfilename := '';
            flatnumbers[Nflatnumbers].pressname :=
              tNames1.pressnameIDtoname(Datam1.Query1.Fields[4].AsInteger);
            templateinkpath := Datam1.Query1.Fields[2].AsString;
            Datam1.Query1.Next;
          end;
          Datam1.Query1.Close;

          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add
            ('Set inkstatus = 0 Where Copyflatseparationset = ' +
            Regeninkflats[Isel]);
          trysql(Datam1.Query1);

          Orgpath := IncludeTrailingBackSlash(FormMain.getinkfolder(4,
            tNames1.locationnametoid(FormMain.ComboBoxpalocationNY.text)));

          regenok := true;

          FormListselection.ListBox1.Items.Clear;

          for i := 1 to Nflatnumbers do
          begin
            T := Orgpath + '*-' +
              IntToStr(flatnumbers[i].FlatSeparation) + '.TIF';
            FormListselection.ListBox1.Items.Add('Look for org ' + T);
            r := FindFirst(T, faAnyFile, f);
            if r = 0 then
            begin
              FormListselection.ListBox1.Items.Add('found org ' + f.Name);
              FormListselection.ListBox1.Items.Add
                ('to press ' + flatnumbers[i].pressname);
              if not Prefs.UsePressSpecificInkRegenPath then
              begin
                Alist.LoadFromFile(Orgpath + f.Name + '.txt');
                if Alist.Count > 0 then
                begin
                  flatnumbers[i].inputfilename := Uppercase(Alist[0]);
                  if pos('PREVGEN', flatnumbers[i].inputfilename) > 0 then
                    Delete(flatnumbers[i].inputfilename,
                      pos('PREVGEN', flatnumbers[i].inputfilename), 20);

                  flatnumbers[i].inputfilename :=
                    IncludeTrailingBackSlash
                    (flatnumbers[i].inputfilename) + f.Name;

                  if not DirectoryExists
                    (ExtractFilePath(flatnumbers[i].inputfilename)) then
                  begin
                    if getinkfolderUsername
                      (ExtractFilePath(flatnumbers[i].inputfilename), Username,
                      Password) then
                    begin
                      ConnectUserDrive(Username, Password,
                        ExtractFilePath(flatnumbers[i].inputfilename), false);

                    end;
                  end;

                  if not CopyFile(PChar(Orgpath + f.Name),
                    PChar(flatnumbers[i].inputfilename), false) then
                    regenok := false;
                End
                else
                  regenok := false;
              end
              else
              begin // CheckBoxinkpresspath.checked
                FormListselection.ListBox1.Items.Add
                  ('old press ' + flatnumbers[i].pressname);
                for ioldp := 0 to Length(Prefs.OldInkPathsPerPress) - 1 do
                begin
                  if flatnumbers[i].pressname = Prefs.OldInkPathsPerPress
                    [ioldp].Key then
                  begin

                    FormListselection.ListBox1.Items.Add
                      ('from to / ' + Orgpath + f.Name + ' / ' +
                      IncludeTrailingBackSlash(Prefs.OldInkPathsPerPress[ioldp]
                      .Value) + f.Name);
                    if not CopyFile(PChar(Orgpath + f.Name),
                      PChar(IncludeTrailingBackSlash(Prefs.OldInkPathsPerPress
                      [ioldp].Value) + f.Name), false) then
                      regenok := false;
                    break;
                  end;
                end;
              end;

            end
            else
            begin
              regenok := false;
            end;
            FindClose(f);
          end;
          if not regenok then
          begin
            MessageDlg(InfraLanguage1.Translate
              ('Some colors could not be regenerated'), mtwarning, [mbOk], 0);
          end;
        end;

      end;

    except
    end;
  finally
    SetLength(flatnumbers, 5);
    Alist.free;
    screen.Cursor := crdefault;
    ActionplaterefreshExecute(FormMain);
  end;
end;

procedure TFormMain.Resendinkfiles;
Var
  Nflatnumbers: Integer;
  flatnumbers: array of record pressname: String;
  FlatSeparation: Int64;
  flatseparationset: Int64;
  inputfilename: string;
end;
Alocationid:
Integer;

T: string;
FlatSeparationlist: Tstrings;
regenok: Boolean;
Isel, N: Integer;
PlateNamelist: Tstrings;
FinalPlateNamelist: Tstrings;
FinalFlatSeparationlist:Tstrings;

begin
  FlatSeparationlist := Tstringlist.Create;
  PlateNamelist := Tstringlist.Create;
  FinalPlateNamelist := Tstringlist.Create;
  FinalFlatSeparationlist := Tstringlist.Create;
  regenok := false;
  Alocationid := 0;
  try
    try
      screen.Cursor := crhourglass;
      if Regeninkflats.Count > 0 then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('Select TOP 1 locationid FROM pagetable (NOLOCK) where CopyFlatSeparationSet = '
          + Regeninkflats[0]);
        Alocationid := -1;
        Datam1.Query1.Open;
        if not Datam1.Query1.Eof then
          Alocationid := Datam1.Query1.Fields[0].AsInteger;
        Datam1.Query1.Close;
      end;

      // ## NAN 20151001 start
      // ## Resend TIFF plates via FileCenter  FileCenterFileMoveQueue table. Mode 6 is used (no feedback - FileCenter cleans table)
      // ## NOTE : Queue uses FlatSeparation - not CopyFlatSeparationSet (as stored in Regeninkflats array)

      if (Prefs.UseFileCenterTiffArchive) AND (TiffArchiveFolder <> '') then
      begin
        FlatSeparationlist.Clear();

        for Isel := 0 to Regeninkflats.Count - 1 do
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('SELECT DISTINCT FlatSeparation FROM PageTable WITH (NOLOCK) WHERE CopyFlatSeparationSet = ' + Regeninkflats[Isel]);
          Datam1.Query1.Open;
          while (not Datam1.Query1.Eof) do
          begin
            FlatSeparationlist.Add(Datam1.Query1.Fields[0].AsString);
            Datam1.Query1.Next;
          end;
          Datam1.Query1.Close;
        end;

        // Stage 1 : Collect OutputCenter tiff copy output names
        for Isel := 0 to FlatSeparationlist.Count - 1 do
        begin

          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('SELECT DISTINCT Message FROM FlatPageTable WITH (NOLOCK) WHERE Event=192 AND FlatSeparation = '  + FlatSeparationlist[Isel]);
          Datam1.Query1.Open;
          while (not Datam1.Query1.Eof) do
          begin
            PlateNamelist.Add(Datam1.Query1.Fields[0].AsString);
            FinalPlateNamelist.Add(Datam1.Query1.Fields[0].AsString);
            FinalFlatSeparationlist.Add(FlatSeparationlist[Isel]);
            Datam1.Query1.Next;
          end;
          Datam1.Query1.Close;
        end;

        // Stage 2 : Retrieve target folder from Template
        for Isel := 0 to FinalFlatSeparationlist.Count - 1 do
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('SELECT TOP 1 TiffCopyFolder FROM TemplateConfigurations T INNER JOIN PageTable P WITH (NOLOCK) ON P.TemplateID=T.TemplateID WHERE P.FlatSeparation= '
            + FinalFlatSeparationlist[Isel]);
          Datam1.Query1.Open;
          if (not Datam1.Query1.Eof) then
          begin
            T := Datam1.Query1.Fields[0].AsString;
            N := pos(';', T);
            if (N > 0) then
            begin
              T := Copy(T, 1, N - 1);
              FinalPlateNamelist[Isel] := T + '\' + PlateNamelist[Isel];
            end;
          end;
          Datam1.Query1.Close;
        end;

        // Stage 3 : Issue queue message to FileCenter given source and destination
        for Isel := 0 to FinalPlateNamelist.Count - 1 do
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('INSERT FileCenterFileMoveQueue (SourcePath,DestinationPath,StatusPath,Status,EventTime,Message)');
          Datam1.Query1.SQL.Add('VALUES (''' + TiffArchiveFolder + '\' +
            PlateNamelist[Isel] + ''',''' + FinalPlateNamelist[Isel] +
            ''','''',6,GETDATE(),'''')');
          Datam1.Query1.ExecSQL;
        end;

      end
      else

      // ## NAN 20151001 end

      begin

        // Issue re-send request to InkCenter

        if Alocationid > 0 then
        begin
          for Isel := 0 to Regeninkflats.Count - 1 do
          begin
            Nflatnumbers := 0;
            Datam1.Query1.SQL.Clear; // 0 regen  1 resend
            Datam1.Query1.SQL.Add
              ('Insert InkRegenerationQueue (CopyFlatSeparationSet,LocationID,MiscInt,MiscString)');
            Datam1.Query1.SQL.Add('Values ( ' + Regeninkflats[Isel] + ',');
            Datam1.Query1.SQL.Add(IntToStr(Alocationid) + ',1,' + '''' + '' +
              '''' + ')');
            if Prefs.Debug then
              Datam1.Query1.SQL.SaveToFile
                (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
                'sqllogs\' + 'ResendInkdata.SQL');
            Datam1.Query1.ExecSQL;
          end;
        end;
      end;
    except
    end;
  finally
    SetLength(flatnumbers, 5);
    FlatSeparationlist.free;
    FinalPlateNamelist.free;
    PlateNamelist.free;
    FinalFlatSeparationlist.free;
    screen.Cursor := crdefault;
  end;
end;

procedure TFormMain.ActionPlateminimizeExecute(Sender: TObject);
var
  i: Integer;
begin
  if Nviews < 1 then
    exit;
  for i := Nviews - 1 downto 0 do
  begin
    Views[i].Height := 24;
  end;
end;

procedure TFormMain.ActionPlatemaximizeExecute(Sender: TObject);
var
  i: Integer;
begin
  if Nviews < 1 then
    exit;
  for i := Nviews - 1 downto 0 do
  begin
    Views[i].Height := Views[i].Maxheight;
  end;
end;

procedure TFormMain.ActionprodAutorefreshExecute(Sender: TObject);
begin
  ActionprodAutorefresh.Checked := not ActionprodAutorefresh.Checked;
  Timerautorefreshcount := 1;
  ActionprodAutorefresh.ImageIndex := 149;
end;

procedure TFormMain.Checkforms;
var
  i: Integer;
  T: String;
begin
  T := '';
  if Application.MainForm.Active then
  begin
    for i := 0 to Application.ComponentCount - 1 do
    begin
      if Application.Components[i] is TForm then
      begin
        if TForm(Application.Components[i]).Active then
          T := T + ',' + TForm(Application.Components[i]).Name;
      end;
    end;

    MessageDlg(InfraLanguage1.Translate('Open forms ') + T, mtInformation,
      [mbOk], 0);
  end;
end;

procedure TFormMain.ActionCheckformsExecute(Sender: TObject);
begin
  Checkforms;
end;

procedure TFormMain.ActionCheckPlanExecute(Sender: TObject);
var
  ProductionID: Integer;

begin

  if TreeViewPlateview.Selected = nil then
    exit;
  if TreeViewPlateview.Selected.Level < 2 then
    exit;

  ProductionID := TTreeViewpagestype(TreeViewPlateview.Selected.Data^)
    .ProductionID;

  if (ProductionID > 0) then
  begin
    FormCheckPlan.ProductionID := ProductionID;
    FormCheckPlan.Show;

  end;
end;

procedure TFormMain.storePlateselection;
var
  i: Integer;
begin
  lastviewselected := -1;
  LastPlatepressrunid := -1;
  LastPlatepresssectionnumber := -1;
  try
    if AnyPlatesselected then
    begin
      lastviewselected := Viewselected;
      LastPlatepressrunid := Views[Viewselected].pressrunid;
      LastPlatepresssectionnumber := Views[Viewselected].presssectionnumber;
      SetLength(Plateselection, Views[Viewselected].LPV.Items.Count + 2);
      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        Plateselection[i] := false;
      end;
      if Views[Viewselected].LPV.Selected <> nil then
      begin

        for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
        begin
          Plateselection[i] := Views[Viewselected].LPV.Items[i].Selected;
        end;
      end;
    end;
  Except

  end;
end;

procedure TFormMain.RestorePlateselection;
var
  resel: Boolean;
  i: Integer;
  Firstsel: Integer;
begin
  resel := false;
  AnyPlatesselected := false;
  Firstsel := -1;
  try
    if (lastviewselected >= 0) then
    begin
      if (Nviews >= lastviewselected) And
        (Views[lastviewselected].pressrunid = LastPlatepressrunid) and
        (Views[lastviewselected].presssectionnumber =
        LastPlatepresssectionnumber) then
      begin
        Viewselected := lastviewselected;
        for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
        begin
          if i <= Length(Plateselection) then
          begin
            Views[Viewselected].LPV.Items[i].Selected := Plateselection[i];
            if Views[Viewselected].LPV.Items[i].Selected then
            begin
              if Firstsel = -1 then
                Firstsel := i;
              AnyPlatesselected := true;
              resel := true;
            end;
          end;
        end;
      end;
    end;
  Except
    resel := false;
    AnyPlatesselected := false;
  end;

  try
    if (AnyPlatesselected) and (resel) then
    begin
      PlateviewMain.ScrollInView(Views[Viewselected]);
      Views[Viewselected].LPV.SetFocus;
      if Firstsel > -1 then
      begin
        Views[Viewselected].makeplateinfo(Views[Viewselected].platesData
          [Firstsel]);
      end;
    end;
  Except
  end;
end;

procedure TFormMain.ActionReSendInkbackupExecute(Sender: TObject);
begin
  FormInkbackupFile.ShowModal;
end;

procedure TFormMain.ActionRetransmitPDFExecute(Sender: TObject);
var
  i, j, ProductionID, editionid: Integer;
  selectedMasterSets: Tstringlist;
begin
  selectedMasterSets := Tstringlist.Create;

  if (PageControlMain.ActivePageIndex = VIEW_THUMBNAILS) then
  begin
    if PBExListviewthumbnail.Selected = nil then
      exit;

    ProductionID := TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
      .ProductionID;
    editionid := TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid;

    // Application.MessageBox('ProductionID='+IntToStr(ProductionID)+', EditionID='+IntToStr(EditionID),'Debug',MB_OK);

    selectedMasterSets.Clear;

    for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
    begin
      if PBExListviewthumbnail.Items[i].Selected then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('SELECT DISTINCT CopySeparationSet FROM PageTable WITH (NOLOCK) ');
        Datam1.Query1.SQL.Add('WHERE MasterCopySeparationSet = ' +
          IntToStr(Showthubms[PBExListviewthumbnail.Items[i].Index]
          .mastercopyseparationset));
        if (editionid > 0) then
          Datam1.Query1.SQL.Add(' AND EditionID=' + IntToStr(editionid));
        Datam1.Query1.SQL.Add(' AND ProductionID=' + IntToStr(ProductionID));
        Datam1.Query1.Open;
        while not Datam1.Query1.Eof do
        begin
          selectedMasterSets.Add(IntToStr(Datam1.Query1.Fields[0].AsInteger));
          Datam1.Query1.Next;
        end;
        Datam1.Query1.Close;
      end;
    end;

    for j := 0 to selectedMasterSets.Count - 1 do
    begin
      // Application.MessageBox('CopySeparationSet='+selectedMasterSets[j],'Debug',MB_OK);
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('exec spTransmitUpdateStatusPDF ');
      Datam1.Query1.SQL.Add('@CopySeparationSet=' + selectedMasterSets[j]);
      Datam1.Query1.SQL.Add(',@Status=0, @ErrMsg=''''');
      Datam1.Query1.ExecSQL;
    end;
    selectedMasterSets.free;

    ActionThumbnailrefresh.Execute;
  end
  else if (PageControlMain.ActivePageIndex = VIEW_PLATES) then
  begin
    if not AnyPlatesselected then
      exit;

    for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
    begin
      if Views[Viewselected].LPV.Items[i].Selected then
      begin
        selectedMasterSets.Clear;

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('SELECT DISTINCT CopySeparationSet FROM PageTable WITH (NOLOCK) ');
        Datam1.Query1.SQL.Add('WHERE CopyFlatSeparationSet = ' +
          IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
        Datam1.Query1.Open;
        while not Datam1.Query1.Eof do
        begin
          selectedMasterSets.Add(IntToStr(Datam1.Query1.Fields[0].AsInteger));
          Datam1.Query1.Next;
        end;
        Datam1.Query1.Close;

        for j := 0 to selectedMasterSets.Count - 1 do
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('exec spTransmitUpdateStatusPDF ');
          Datam1.Query1.SQL.Add('@CopySeparationSet=' + selectedMasterSets[j]);
          Datam1.Query1.SQL.Add(',@Status=0, @ErrMsg=''''');
          Datam1.Query1.ExecSQL;
        end;

      end;
    end;
    selectedMasterSets.free;
    ActionplaterefreshExecute(FormMain);
  end;
end;

procedure TFormMain.ActionplatedetailsExecute(Sender: TObject);
begin
  Actionplatedetails.Checked := not Actionplatedetails.Checked;

  if Actionplatedetails.Checked then
  begin
    PlateviewMain.Align := alnone;
    PlateviewMain.Height := 50;
    GroupBoxPlatedetails.Visible := true;
    Splitterplatedetail.Visible := true;
    PlateviewMain.Align := alclient;
  end
  else
  begin
    GroupBoxPlatedetails.Visible := false;
    Splitterplatedetail.Visible := false;

  end;
end;

procedure TFormMain.ActionprodfanoutExecute(Sender: TObject);
var
  wherestr: string;
  IListNum: Integer;
begin
  if TreeViewprodcontrol.Selected = nil then
    exit;
  for IListNum := 1 to StringGridprods.RowCount do
  begin
    if StringGridprodsdata[IListNum].Selected then
    begin
      FormFanoutsetting.pressid := StringGridprodsdata[IListNum].pressid;
      break;
    end;
  end;
  // ([a-zA-Z0-9-]+)_([a-zA-Z0-9-]+).([a-zA-Z0-9-]+)
  // ([a-zA-Z]{2})([a-zA-Z]+)([0-9]{4})([0-9]{2})([a-zA-Z]+)([0-9]+).([a-zA-Z]+) ([()a-zA-Z]+).*
  if FormFanoutsetting.ShowModal = mrOK then
  begin
    if FormFanoutsetting.ListBox1.ItemIndex = -1 then
      exit;
    wherestr := makeprogwherestr('');
    try
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      Datam1.Query1.SQL.Add('set PressTower = ' + '''' +
        FormFanoutsetting.ListBox1.Items
        [FormFanoutsetting.ListBox1.ItemIndex] + '''');
      Datam1.Query1.SQL.Add('where ' + wherestr);
      Datam1.Query1.SQL.Add(WeditionStr);
      trysql(Datam1.Query1);
      Newrefreshprogress;
    Except
    end;
  end;
end;

procedure TFormMain.plateviewtreedeselect;
var
  i: Integer;
begin
  if TreeViewPlateview.Selected <> nil then
  begin
    if TreeViewPlateview.Items.Count > 0 then
      TreeViewPlateview.Selected := TreeViewPlateview.Items[0];
  end
  else
  begin
    if TreeViewPlateview.Items.Count > 0 then
      TreeViewPlateview.Selected := TreeViewPlateview.Items[0];
  end;

  if Nviews > 0 then
  begin
    for i := 0 to Nviews - 1 do
    begin
      try
        Views[i].free;
      Except
      end;
    end;
    Nviews := 0;
    AnyPlatesselected := false;
  end;
end;

procedure TFormMain.ActionDebugunplanExecute(Sender: TObject);
Var
  N, IPLF: Integer;
  INpressruns: String;
begin
  INpressruns := '(-99';

  N := 0;
  for IPLF := 1 to Nplateframes do
  begin
    if plateframes[IPLF].Selected then
    begin
      Inc(N);
      INpressruns := INpressruns + ',' + IntToStr(plateframes[IPLF].pressrunid)
    end;
  end;
  INpressruns := INpressruns + ')';
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('update pressrunid set PlanType = 0 where pressrunid IN ' + INpressruns);
  trysql(Datam1.Query1);

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('select TOP 1 pr.pressrunid,p.productionid from pressrunid pr (NOLOCK),pagetable p (NOLOCK) ');
  Datam1.Query1.SQL.Add
    ('where pr.plantype = 1 and pr.pressrunid = p.pressrunid and p.productionid = '
    + IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
  Datam1.Query1.Open;
  N := 1;
  if not Datam1.Query1.Eof then
    N := 0;
  Datam1.Query1.Close;

  if N = 1 then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('update ProductionNames set PlanType = 0 where productionid = ' +
      IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
    trysql(Datam1.Query1);
  end;

  Makeplantree(-1);
  findplantreenode;

end;

procedure TFormMain.ActionDebugtoolsExecute(Sender: TObject);
begin
  sleep(5);
end;

procedure TFormMain.ListViewunkowfilesCompare(Sender: TObject;
  Item1, Item2: TListItem; Data: Integer; var Compare: Integer);
begin
  Compare := CompareText(Item1.caption, Item2.caption)
end;

procedure TFormMain.ActioneditiondeleteExecute(Sender: TObject);
var
  oktodel: Boolean;
begin
  try
    if TreeViewNeweddtree.Selected = nil then
      exit;
    if TreeViewNeweddtree.Selected.Level < 2 then
      exit;
    if ListViewEdto.Items.Count = 0 then
      exit;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select TOP 1 p1.pagename,p1.editionid from pagetable p1 (NOLOCK)');
    Datam1.Query1.SQL.Add('where p1.uniquepage = 1');
    Datam1.Query1.SQL.Add('and p1.pressrunid = ' +
      IntToStr(editiontype(ListViewEdto.Items[0].Data^).pressrunid) +
      ' and exists(select p2.pagename from pagetable p2 where');
    Datam1.Query1.SQL.Add
      ('p1.mastercopyseparationset = p2.mastercopyseparationset');
    Datam1.Query1.SQL.Add('and p1.pressrunid <> p2.pressrunid)');
    Datam1.Query1.Open;

    oktodel := Datam1.Query1.Eof;

    Datam1.Query1.Close;

    if oktodel then
    begin
      if MessageDlg(InfraLanguage1.Translate
        ('Delete the selected sub edition ?'), mtConfirmation, [mbYes, mbNo], 0)
        = mryes then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('delete pagetable where pressrunid = ' +
          IntToStr(editiontype(ListViewEdto.Items[0].Data^).pressrunid));
        Datam1.Query1.ExecSQL(false);

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('delete pressrunid where pressrunid = ' +
          IntToStr(editiontype(ListViewEdto.Items[0].Data^).pressrunid));
        Datam1.Query1.ExecSQL(false);

        ListViewEdto.Items.Clear;
        ListViewEdtodink.Items.Clear;
        FormMain.cleanupproductionnames;
        // FormMain.cleanupfilesonserver;

      end;
    end
    else
    begin
      MessageDlg(InfraLanguage1.Translate
        ('This edition cannot be deleted since certain pages are being used by others'),
        mtInformation, [mbOk], 0);
    end;
  Except

  end;
  Actionrefreshhedtree.Execute;

end;

procedure TFormMain.ListViewunkowfilesDblClick(Sender: TObject);
var
  fromfile: string;
begin
  if ListViewunkowfiles.Items.Count < 1 then
    exit;
  if ListViewunkowfiles.Selected = nil then
    exit;

  fromfile := ListViewunkowfiles.Selected.SubItems[3] + '.log';
  if FileExists(fromfile) then
  begin
    Formunknowfilelog.memo1.Lines.LoadFromFile(fromfile);
    Formunknowfilelog.ShowModal;
  end
  else
  begin
    MessageDlg(InfraLanguage1.Translate('Unable to show log file'),
      mtInformation, [mbOk], 0);

  end;

end;

procedure TFormMain.ActionplatetreeStackExecute(Sender: TObject);
Var
  runnode: TTreeNode;
  LocationID, pressid: Integer;
  Pressrunselstr, T: string;
  anode, n1, n2, n3: TTreeNode;
  ProductionID, i: Integer;
begin
  try

    if TreeViewPlateview.Selected = nil then
      exit;
    runnode := TreeViewPlateview.Selected;
    if runnode = nil then
      exit;
    if runnode.Level < 2 then
      exit;
    Pressrunselstr := '(-48';
    ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;
    n1 := runnode;
    Formeditatext.Label1.caption := InfraLanguage1.Translate('Stackposition');
    Formeditatext.ComboBox1.Items.Clear;
    for i := 0 to Length(Prefs.StackNamesList) - 1 do
      Formeditatext.ComboBox1.Items.Add(Prefs.StackNamesList[i]);
    Formeditatext.ComboBox1.text := '';

    if Formeditatext.ShowModal = mrOK then
    begin
      try
        anode := n1;
        if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
        begin
          if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
            Pressrunselstr) = 0 then
            Pressrunselstr := Pressrunselstr + ',' +
              IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
        end;
        n2 := n1.GetFirstChild;
        while n2 <> nil do
        begin
          anode := n2;
          if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
          begin
            if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
              Pressrunselstr) = 0 then
              Pressrunselstr := Pressrunselstr + ',' +
                IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
          end;

          n3 := n2.GetFirstChild;
          while n3 <> nil do
          begin
            anode := n3;
            if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
            begin
              if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
                Pressrunselstr) = 0 then
                Pressrunselstr := Pressrunselstr + ',' +
                  IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
            end;
            n3 := n3.getNextSibling;
          end;
          n2 := n2.getNextSibling;
        end;

      except
      end;

      Pressrunselstr := Pressrunselstr + ') ';

      while runnode.Level > 1 do
        runnode := runnode.Parent;

      pressid := tNames1.pressnametoid(runnode.Parent.text);
      // pressrunid := runnode.StateIndex;
      LocationID := tNames1.locationnametoid(ComboBoxpalocationNY.text);

      T := Formeditatext.ComboBox1.text;

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      if (Prefs.OrStackpositionsTogether) then
        Datam1.Query1.SQL.Add('set SortingPosition = ' + '''' + T + '''' +
          ' +SUBSTRING(SortingPosition,' + IntToStr(Length(T) + 1) +
          ',DATALength(SortingPosition))')
      else
        Datam1.Query1.SQL.Add('set sortingposition = ' + '''' + T + '''');

      // Datam1.Query1.SQL.Add('Set sortingposition = ' + ''''+Formeditatext.ComboBox1.Text+'''');
      Datam1.Query1.SQL.Add('Where active <> -999');
      // Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
      Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
      Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
      // if (locationID > 0) then
      // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(locationid));

      trysql(Datam1.Query1);
    end;
    Actionplaterefresh.Execute;

  Except
  end;
end;

procedure TFormMain.FormResize(Sender: TObject);
begin
  if (FirstProductionRefresh) then
    InitProdCols;
  ActionToolBarThumbnail.Realign; // ??
  Panel8.Realign; // ??
end;

procedure TFormMain.ActionprodeditweekExecute(Sender: TObject);
var
  wherestr: string;
begin
  if TreeViewprodcontrol.Selected = nil then
    exit;
  if Formeditweek.ShowModal = mrOK then
  begin
    wherestr := makeprogwherestr('');
    try
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      Datam1.Query1.SQL.Add('set miscint2 = ' + Formeditweek.edit1.text);
      Datam1.Query1.SQL.Add('where ' + wherestr);
      Datam1.Query1.SQL.Add(WeditionStr);
      trysql(Datam1.Query1);
      Newrefreshprogress;
    Except
    end;
  end;
end;


// NAN 20161212 rewrite to use tNames1.FileServerNames instread of  FoxrmSettings.ListViewmulserver

function TFormMain.getfileserverpath(pathtype: Integer;
  Fileservername: string): string;
var
  i: Integer;
begin
  result := '';

  if (Fileservername = '') And (tNames1.NFileServerNames > 0) then
    Fileservername := tNames1.GetMainFileServer();

  Fileservername := Uppercase(Fileservername);
  for i := 1 to tNames1.NFileServerNames do
  begin
    if (Uppercase(tNames1.FileServerNames[i].Name) = Fileservername) or
      (pos(Fileservername, tNames1.FileServerNames[i].FullPath) > 0) then
    begin
      case pathtype of
        PATHTYPE_CCFILES:
          result := IncludeTrailingBackSlash(tNames1.FileServerNames[i].FullPath) + 'CCfiles\';
        PATHTYPE_CCPREVIEWS:
          result := IncludeTrailingBackSlash(tNames1.FileServerNames[i].FullPath) + 'CCpreviews\';
        PATHTYPE_CCTHUMBNAILS:
          result := IncludeTrailingBackSlash(tNames1.FileServerNames[i].FullPath) + 'CCthumbnails\';
        PATHTYPE_CCREADVIEWPREVIEWS:
          result := IncludeTrailingBackSlash(tNames1.FileServerNames[i].FullPath) + 'CCreadviewpreviews\';
        PATHTYPE_CCVERSIONS:
          result := IncludeTrailingBackSlash(tNames1.FileServerNames[i].FullPath) + 'CCversions\';
      end;
      break;
    end;

  end;
end;

function TFormMain.GetFileserverPathCached(pathtype: Integer): string;
var
  i: Integer;
begin
  result := '';

  case pathtype of
    PATHTYPE_CCFILES:
      result := IncludeTrailingBackSlash(Prefs.PreviewCacheShare) + 'CCfiles\';
    PATHTYPE_CCPREVIEWS:
      result := IncludeTrailingBackSlash(Prefs.PreviewCacheShare) + 'CCpreviews\';
    PATHTYPE_CCTHUMBNAILS:
      result := IncludeTrailingBackSlash(Prefs.PreviewCacheShare) + 'CCthumbnails\';
    PATHTYPE_CCREADVIEWPREVIEWS:
      result := IncludeTrailingBackSlash(Prefs.PreviewCacheShare) + 'CCreadviewpreviews\';
    PATHTYPE_CCVERSIONS:
      result := IncludeTrailingBackSlash(Prefs.PreviewCacheShare) + 'CCversions\';
  end;
end;


// NAN 20161212 rewrite to use tNames1.FileServerNames instread of  FoxrmSettings.ListViewmulserver

function TFormMain.getfileserverFrommaster(pathtype: Integer; mastercopyseparationset: Longint): string;
var
  i: Integer;
  Fileservername : String;
begin
  result := '';
  Fileservername := '';


  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('SELECT TOP 1 fileserver from pagetable (NOLOCK) where fileserver <> ' + '''' + '' + '''');
  Datam1.Query1.SQL.Add('and Mastercopyseparationset = ' + IntToStr(mastercopyseparationset));
  Datam1.Query1.Open;
  if not Datam1.Query1.Eof then
    Fileservername := Datam1.Query1.Fields[0].AsString;
  Datam1.Query1.Close;

  result := getfileserverpath(pathtype, Fileservername);

  // NAN Change 20170214 - will take servertype 11 (PlanCenter user) is exists  - otherwise servertype 1

  if not DirectoryExists(result) Then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select TOP 1 Name,CCdatashare,IP,ServerType from FileServers where (Servertype = 1 OR Servertype = ' + IntToStr(Prefs.PlanCenterFileServerType) + ') ORDER BY ServerType DESC');
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
    begin
      if Datam1.Query1.Fields[2].AsString <> '' then
        Fileservername := '\\' + Datam1.Query1.Fields[2].AsString + '\'
      else
        Fileservername := '\\' + Datam1.Query1.Fields[0].AsString + '\';
      case pathtype of
        PATHTYPE_CCFILES:
          result := Fileservername + Datam1.Query1.Fields[1].AsString + '\' +
            'CCfiles\';
        PATHTYPE_CCPREVIEWS:
          result := Fileservername + Datam1.Query1.Fields[1].AsString + '\' +
            'CCpreviews\';
        PATHTYPE_CCTHUMBNAILS:
          result := Fileservername + Datam1.Query1.Fields[1].AsString + '\' +
            'CCthumbnails\';
        PATHTYPE_CCREADVIEWPREVIEWS:
          result := Fileservername + Datam1.Query1.Fields[1].AsString + '\' +
            'CCreadviewpreviews\';
        PATHTYPE_CCVERSIONS:
          result := Fileservername + Datam1.Query1.Fields[1].AsString + '\' +
            'CCversions\';
      end;
    end;
    Datam1.Query1.Close;
  end;
end;

// NAN 20161212 rewrite to use tNames1.FileServerNames instread of  FoxrmSettings.ListViewmulserver

function TFormMain.getfileserverFrommaster2(mastercopyseparationset
  : Longint): string;
var
  i: Integer;
begin
  result := '';
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('SELECT TOP 1 fileserver from pagetable (NOLOCK) where fileserver <> ' +
    '''' + '' + '''');
  Datam1.Query1.SQL.Add('and Mastercopyseparationset = ' + IntToStr(mastercopyseparationset));
  Datam1.Query1.Open;
  if not Datam1.Query1.Eof then
    result := Datam1.Query1.Fields[0].AsString;
  Datam1.Query1.Close;

  if (result = '') And (tNames1.NFileServerNames > 0) then
    result := tNames1.GetMainFileServer();
end;

procedure TFormMain.ActionplaneditdatesExecute(Sender: TObject);
Var
  aktprodid: Integer;
  Pubdate, pressdate: TDateTime;
  aktpublicationid, Publicationid, editionid, Akteditionid, pressid: Integer;
  weeknumber: Integer;
  found: Boolean;
  hasSingleEdition: Boolean;
  prodName: string;
  hasSET : boolean;
begin
  hasSET := false;
  Publicationid := 0;
  editionid := 0;
  pressid := 0;
  weeknumber := 0;
  Pubdate := Today;
  Formprodplan.ItsArepair := false;
  found := false;

  if TreeViewplan.Selected = nil then
    exit;
  if TreeViewplan.Selected.Level < 1 then
    exit;



  try
    aktprodid := Tplantreedata(TreeViewplan.Selected.Data^).ProductionID;
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select pubdate, presstime, Miscint2, publicationid, pressid from pagetable (NOLOCK)');
    Datam1.Query1.SQL.Add('where productionid = ' + IntToStr(aktprodid));
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
    begin
      found := true;
      Pubdate := Datam1.Query1.Fields[0].AsDateTime;
      pressdate := Datam1.Query1.Fields[1].AsDateTime;
      weeknumber := Datam1.Query1.Fields[2].AsInteger;
      Publicationid := Datam1.Query1.Fields[3].AsInteger;
      pressid := Datam1.Query1.Fields[4].AsInteger;
    end;
    Datam1.Query1.Close;

    aktpublicationid := Publicationid;

    hasSingleEdition := false;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('SELECT COUNT(DISTINCT EditionID),MIN(EditionID) FROM PageTable WITH (NOLOCK)');
    Datam1.Query1.SQL.Add('WHERE productionid = ' + IntToStr(aktprodid));
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
    begin
      hasSingleEdition := (Datam1.Query1.Fields[0].AsInteger = 1);
      editionid := Datam1.Query1.Fields[1].AsInteger;
    end;
    Datam1.Query1.Close;

    Akteditionid := editionid;

    Formeditdates.DateTimePickerPubdate.DateTime := Pubdate;
    Formeditdates.DateTimePickerpressdate.DateTime := pressdate;

    if weeknumber = 0 then
      weeknumber := WeekOf(Pubdate);

    if (Prefs.ShowWeekNumberInTree) then
    begin
      Formeditdates.DateTimePickerpressdate.Enabled := false;
      Formeditdates.Editweeknumber.Enabled := true;
      Formeditdates.Editweeknumber.text := TUtils.LeadingZeroes(weeknumber, 2);
    end
    else
    begin
      Formeditdates.Editweeknumber.Enabled := false;
      Formeditdates.DateTimePickerpressdate.Enabled := true;
      Formeditdates.Editweeknumber.text := '0';
    end;

    Formeditdates.ComboBoxpublication.Items.Clear;
    Formeditdates.ComboBoxpublication.Items := tNames1.publicationnames;
    Formeditdates.ComboBoxpublication.ItemIndex :=
      Formeditdates.ComboBoxpublication.Items.IndexOf(tNames1.publicationIDtoname(Publicationid));

    Formeditdates.ComboBoxedition.Enabled := false;
    Formeditdates.Label5.Enabled := false;
    if (hasSingleEdition) then
    begin
      Formeditdates.ComboBoxedition.Enabled := true;
      Formeditdates.Label5.Enabled := true;
      Formeditdates.ComboBoxedition.Items.Clear;
      Formeditdates.ComboBoxedition.Items := tNames1.editionnames;
      Formeditdates.ComboBoxedition.ItemIndex :=
        Formeditdates.ComboBoxedition.Items.IndexOf(tNames1.editionIDtoname(editionid));
    end;

    if found then
    begin
      if Formeditdates.ShowModal = mrOK then
      begin

        if (hasSingleEdition) then
          editionid := tNames1.editionnametoid
            (Formeditdates.ComboBoxedition.text);

        Publicationid := tNames1.publicationNameToID
          (Formeditdates.ComboBoxpublication.text);

        found := false;

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('Select TOP 1 Separation from pagetable (NOLOCK) where');
        Datam1.Query1.SQL.Add('pubdate = :pubdate and');
        Datam1.Query1.SQL.Add('publicationid = ' + IntToStr(Publicationid));
        Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
        Datam1.Query1.parambyname('pubdate').AsDate :=
          Formeditdates.DateTimePickerPubdate.Date;
        Datam1.Query1.Open;
        if not Datam1.Query1.Eof then
          found := true;
        Datam1.Query1.Close;

        if found then
        begin
          MessageDlg(InfraLanguage1.Translate
            ('The same production already exists on the selected date/publication - aborting.'),
            mtError, [mbOk], 0);
        end
        else
        begin

          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable ');
          if (Publicationid <> aktpublicationid) then
          begin
            Datam1.Query1.SQL.Add('set publicationID = ' +
              IntToStr(Publicationid));
              hasSET := true;
          end;
          if Formeditdates.DateTimePickerPubdate.DateTime <> Pubdate then
          begin
             if (hasSET) then
                Datam1.Query1.SQL.Add(', pubdate = :pubdate')
              else
              begin
                Datam1.Query1.SQL.Add('SET pubdate = :pubdate');
                hasSET := true;
             end;
          end;
          if Formeditdates.DateTimePickerpressdate.DateTime <> pressdate then
          begin
             if (hasSET) then
               Datam1.Query1.SQL.Add(', presstime = :presstime')
               else
               begin
                   Datam1.Query1.SQL.Add('SET presstime = :presstime');
                    hasSET := true;
               end;
          end;

          if (Prefs.ShowWeekNumberInTree) and
            (StrToInt(Formeditdates.Editweeknumber.text) <> weeknumber) then
          begin
             if (hasSET) then
               Datam1.Query1.SQL.Add(', miscint2 = ' + Formeditdates.Editweeknumber.text)
             else
             begin
                 Datam1.Query1.SQL.Add('SET miscint2 = ' + Formeditdates.Editweeknumber.text)
             end;
          end;

          if (hasSingleEdition) and (editionid <> Akteditionid) then
          begin
            if (hasSET) then
              Datam1.Query1.SQL.Add(', EditionID = ' + IntToStr(editionid))
            else
            begin
              Datam1.Query1.SQL.Add(', EditionID = ' + IntToStr(editionid));
              hasSet := true;
             end;
          end;

          if Formeditdates.DateTimePickerPubdate.DateTime <> Pubdate then
          begin
            Datam1.Query1.parambyname('pubdate').AsDate :=
              Formeditdates.DateTimePickerPubdate.Date;
          end;
          if Formeditdates.DateTimePickerpressdate.DateTime <> pressdate then
          begin
            Datam1.Query1.parambyname('presstime').AsDate :=
              Formeditdates.DateTimePickerpressdate.Date;
          end;

          Datam1.Query1.SQL.Add('where productionid = ' + IntToStr(aktprodid));
          trysql(Datam1.Query1);

          // DateSeparator := '-';
          prodName := tNames1.publicationIDtoname(Publicationid) + ' ' +
            FormaTDateTime('dd/mm/yyyy', Pubdate) + ' ' +
            tNames1.pressnameIDtoname(pressid);
          Datam1.Query1.SQL.Add('update ProductionNames SET [Name]=''' +
            prodName + '''');
          Datam1.Query1.SQL.Add('where productionid = ' + IntToStr(aktprodid));
          trysql(Datam1.Query1);


          // 20180627 - reproof all for WebCenter..

          if (Formeditdates.DateTimePickerPubdate.DateTime <> Pubdate) or
            ((hasSingleEdition) and (editionid <> Akteditionid)) then
          begin
            Datam1.Query1.SQL.Add('UPDATE PageTable SET ProofStatus=0');
            Datam1.Query1.SQL.Add('WHERE ProductionID = ' +
              IntToStr(aktprodid));
            trysql(Datam1.Query1);
          end;
          Actionnewplanrefresh.Execute;
        end;
      end;
    end;

  Except
  end;

end;

function TFormMain.productionIsok(ProductionID: Integer; pressrunid: Integer;
                      Publicationid: Integer; Pubdate: TDateTime; copynumber: Longint): Boolean;
begin
  Formplanerrors.ListBox1.Items.Clear;
  result := true;
  Datam1.Query1.SQL.Clear;

  Datam1.Query1.SQL.Add
    ('Select TOP 1 p1.publicationid,p1.pubdate,p1.pressrunid,p2.publicationid,p2.pubdate, p2.pressrunid from pagetable p1 WITH (NOLOCK), pagetable p2 WITH (NOLOCK) where');
  Datam1.Query1.SQL.Add
    ('(p1.flatseparation = p2.flatseparation or p1.copyseparationset = p2.copyseparationset) and');
  Datam1.Query1.SQL.Add
 //   ('(p1.pressrunid <> p2.pressrunid or p1.productionid <> p2.productionid)');
    ('(p1.productionid <> p2.productionid)');

  Datam1.Query1.SQL.Add('and p1.productionid =  ' + IntToStr(ProductionID));
//  Datam1.Query1.SQL.Add('and p1.pressrunid =  ' + IntToStr(pressrunid));
  Datam1.Query1.SQL.Add('and p1.publicationid =  ' + IntToStr(Publicationid));
  Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('p1.', Pubdate));

  if copynumber > 0 then
    Datam1.Query1.SQL.Add('and p1.copynumber =  ' + IntToStr(copynumber));

  if Prefs.Debug then
    Datam1.Query1.SQL.SaveToFile
      (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' + 'productionIsok.SQL');

  Datam1.Query1.Open;
  if not Datam1.Query1.Eof then
  begin
    Formplanerrors.ListBox1.Items.Add('Index with: ' +
      tNames1.publicationIDtoname(Datam1.Query1.Fields[3].AsInteger) + ' ' +
      FormaTDateTime('DDMMYYYY', Datam1.Query1.Fields[4].AsDateTime) + '  ' +
      Datam1.Query1.Fields[3].AsString);
  end;
  result := Datam1.Query1.Eof;
  Datam1.Query1.Close;

  if result then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select count(pressrunid) as antal from pressrunid (NOLOCK) where pressrunid =  '
      + IntToStr(pressrunid));
    Datam1.Query1.Open;
    result := Datam1.Query1.Fields[0].AsInteger = 1;

    if Datam1.Query1.Fields[0].AsInteger = 0 then
      Formplanerrors.ListBox1.Items.Add('Pressrunid is missing: ' +
        IntToStr(pressrunid));

    Datam1.Query1.Close;
  end;

  if result then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select count(productionid) as antal from ProductionNames (NOLOCK) where productionid =  '
      + IntToStr(ProductionID));
    Datam1.Query1.Open;
    result := Datam1.Query1.Fields[0].AsInteger = 1;
    if Datam1.Query1.Fields[0].AsInteger = 0 then
      Formplanerrors.ListBox1.Items.Add('productionplan is missing: ' +
        IntToStr(ProductionID));

    Datam1.Query1.Close;
  end;

  if (not result) and (Formplanerrors.ListBox1.Items.Count > 0) then
    Formplanerrors.ShowModal;

end;

procedure TFormMain.Deleteproductionwitherror(ProductionID: Integer;
  pressrunid: Integer; Publicationid: Integer; Pubdate: TDateTime;
  copynumber: Longint);
var
  oktodel: Boolean;
begin
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('delete pagetable where ');
  Datam1.Query1.SQL.Add('productionid =  ' + IntToStr(ProductionID));
  Datam1.Query1.SQL.Add('and pressrunid =  ' + IntToStr(pressrunid));
  if copynumber > 0 then
    Datam1.Query1.SQL.Add('and copynumber =  ' + IntToStr(copynumber));
  trysql(Datam1.Query1);

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('select TOP 1 productionid from pagetable (NOLOCK) where ');
  Datam1.Query1.SQL.Add(' productionid = ' + IntToStr(ProductionID));
  Datam1.Query1.Open;
  oktodel := Datam1.Query1.Eof;
  Datam1.Query1.Close;
  if oktodel then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('delete productionnames where ');
    Datam1.Query1.SQL.Add('productionid =  ' + IntToStr(ProductionID));
    trysql(Datam1.Query1);
  end;

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('select TOP 1 pressrunid from pagetable (NOLOCK) where ');
  Datam1.Query1.SQL.Add(' pressrunid = ' + IntToStr(pressrunid));
  Datam1.Query1.Open;
  oktodel := Datam1.Query1.Eof;
  Datam1.Query1.Close;
  if oktodel then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('delete pressrunid  where ');
    Datam1.Query1.SQL.Add('pressrunid =  ' + IntToStr(pressrunid));
    trysql(Datam1.Query1);
  end;

end;

procedure TFormMain.Resetfilterrefreshsign;
begin
  Actionrefreshpagefilter.ImageIndex := 39;
  ActionThumbnailFilterrefresh.ImageIndex := 39;
  ActionPlaterefreshtree.ImageIndex := 39;
  Actionprogressrefreshfilter.ImageIndex := 39;
  Actionrefreshhedtree.ImageIndex := 39;
  Actionreportfilter.ImageIndex := 39;
end;

procedure TFormMain.ActiontreecollapseExecute(Sender: TObject);

  procedure dothecolabs(Ltree: TTreeView);
  var
    i: Integer;
  begin
    for i := 0 to Ltree.Items.Count - 1 do
    begin
      if Ltree.Items[i].Level > 0 then
        Ltree.Items[i].Collapse(true);
    end;
  end;

begin
  case PageControlMain.ActivePageIndex of
    VIEW_SEPARATIONS:
      dothecolabs(TreeViewpagelist);
    VIEW_THUMBNAILS:
      dothecolabs(TreeViewThumbs);
    VIEW_PLATES:
      dothecolabs(TreeViewPlateview);
    VIEW_PRODUCTIONS:
      dothecolabs(TreeViewprodcontrol);
    VIEW_EDITIONS:
      dothecolabs(TreeViewNeweddtree);
    VIEW_LOGS:
      dothecolabs(TreeViewLogfilter);
    VIEW_REPORTS:
      dothecolabs(TreeViewreportfilter);
  end;
end;

procedure TFormMain.ActiontreeexpandExecute(Sender: TObject);

  procedure dotheexp(Ltree: TTreeView);
  Var
    i: Integer;
  begin
    for i := 0 to Ltree.Items.Count - 1 do
      Ltree.Items[i].Expand(true);

  end;

begin
  case PageControlMain.ActivePageIndex of
    VIEW_SEPARATIONS:
      TreeViewpagelist.Items.BeginUpdate;
    VIEW_THUMBNAILS:
      TreeViewThumbs.Items.BeginUpdate;
    VIEW_PLATES:
      TreeViewPlateview.Items.BeginUpdate;
    VIEW_PRODUCTIONS:
      TreeViewprodcontrol.Items.BeginUpdate;
    VIEW_EDITIONS:
      TreeViewNeweddtree.Items.BeginUpdate;
    VIEW_LOGS:
      TreeViewLogfilter.Items.BeginUpdate;
    VIEW_REPORTS:
      TreeViewreportfilter.Items.BeginUpdate;
  end;

  case PageControlMain.ActivePageIndex of
    VIEW_SEPARATIONS:
      dotheexp(TreeViewpagelist);
    VIEW_THUMBNAILS:
      dotheexp(TreeViewThumbs);
    VIEW_PLATES:
      dotheexp(TreeViewPlateview);
    VIEW_PRODUCTIONS:
      dotheexp(TreeViewprodcontrol);
    VIEW_EDITIONS:
      dotheexp(TreeViewNeweddtree);
    VIEW_LOGS:
      dotheexp(TreeViewLogfilter);
    VIEW_REPORTS:
      dotheexp(TreeViewreportfilter);
  end;

  case PageControlMain.ActivePageIndex of
    VIEW_SEPARATIONS:
      TreeViewpagelist.Items.EndUpdate;
    VIEW_THUMBNAILS:
      TreeViewThumbs.Items.EndUpdate;
    VIEW_PLATES:
      TreeViewPlateview.Items.EndUpdate;
    VIEW_PRODUCTIONS:
      TreeViewprodcontrol.Items.EndUpdate;
    VIEW_EDITIONS:
      TreeViewNeweddtree.Items.EndUpdate;
    VIEW_LOGS:
      TreeViewLogfilter.Items.EndUpdate;
    VIEW_REPORTS:
      TreeViewreportfilter.Items.EndUpdate;
  end;
end;

procedure TFormMain.doAhalftimeplanLock;
Var
  noneedforlock: Boolean;
begin
  try
    noneedforlock := (not Formprodplan.FoundAapplynewpage) and
      (Formprodplan.Editmode = PLANADDMODE_APPLY);

    // UsePlanLock
    if (Prefs.UsePlanLock) And (not noneedforlock) then
    begin
      Datam1.Query3.SQL.Clear;
      Datam1.Query3.SQL.Add('exec spPlanningLock 1,' + '''' + 'PLAN ' +
        Thisdevicename + '''');
      trysql(Datam1.Query3);
    end;
  except

  end;

end;

function TFormMain.Setplanlock(Iwanttoplan: Boolean): Boolean;
Var
  doplanerror: Boolean;

  procedure doplan;
  Var
    servertime: TDateTime;
  Var
    noneedforlock: Boolean;
  begin
    noneedforlock := (not Formprodplan.FoundAapplynewpage) and
      (Formprodplan.Editmode = PLANADDMODE_APPLY);
    if (Prefs.UsePlanLock) And (not noneedforlock) then
    begin
      try

        doplanerror := false;
        Datam1.Query3.SQL.Clear;
        if Iwanttoplan then
        begin
          Datam1.Query3.SQL.Add('exec spPlanningLock 1,' + '''' + 'PLAN ' +
            Thisdevicename + '''');
          Datam1.Query3.Open;
          PlanLock := Datam1.Query3.Fields[0].AsInteger = 1;
          PlanLockClient := Datam1.Query3.Fields[1].AsString;
          PlanLockTime := Datam1.Query3.Fields[2].AsDateTime;

          Datam1.Query3.Close;

          Datam1.Query3.SQL.Clear;
          Datam1.Query3.SQL.Add
            ('Select getdate() as servertime, PlanLockTimeoutSec from GeneralPreferences');
          Datam1.Query3.Open;
          servertime := Datam1.Query3.Fields[0].AsDateTime;
          PlanLockTimeoutSec := Datam1.Query3.Fields[1].AsInteger;
          planlocktimeleft := SecondsBetween(servertime, PlanLockTime);
          Datam1.Query3.Close;

        End
        else
        begin
          Datam1.Query2.SQL.Clear;
          Datam1.Query2.SQL.Add
            ('Select PlanLockClient from GeneralPreferences (NOLOCK) ');
          Tryopen(Datam1.Query2);

          if Datam1.Query2.Fields[0].AsString = 'PLAN ' + Thisdevicename then
          begin
            Datam1.Query3.SQL.Add('exec spPlanningLock 0,' + '''' + 'PLAN ' +
              Thisdevicename + '''');
            Datam1.Query3.Open;
            Datam1.Query3.Close;
          end;
          Datam1.Query2.Close;
        end;

      except
        PlanLock := false;
        doplanerror := true;
      end;
    End
    else
      PlanLock := true;
  end;

Var
  ihavebeenwaitingsecs: Integer;
  noneedforlock: Boolean;

begin
  result := false;
  noneedforlock := (not Formprodplan.FoundAapplynewpage) and
    (Formprodplan.Editmode = PLANADDMODE_APPLY);
  if (Prefs.UsePlanLock) and (not noneedforlock) then
  begin
    PlanLock := false;
    doplan;
    ihavebeenwaitingsecs := 0;
    if (Iwanttoplan) and (not PlanLock) then
    begin
      Timerwaitforplanlock.Enabled := true;
      Formplanisbusy.ShowModal;
      if Formplanisbusy.Showing then
        Formplanisbusy.Close;
    end;

    Timerwaitforplanlock.Enabled := false;
    doplan;
    result := PlanLock = Iwanttoplan;

  end
  else
  begin
    PlanLock := true;
    result := true;
  end;
  Timerwaitforplanlock.Enabled := false;
end;

procedure TFormMain.TimerwaitforplanlockTimer(Sender: TObject);
Var
  noneedforlock: Boolean;
begin
  if not StartuPdone then
    exit;
  // memotestPrefs.Debug.Lines.Add('TimerwaitforplanlockTimer');
  // memotestPrefs.Debug.refresh;
  noneedforlock := (not Formprodplan.FoundAapplynewpage) and
    (Formprodplan.Editmode = 5);
  if (Prefs.UsePlanLock) And (not noneedforlock) then
  begin

    Timerwaitforplanlock.Enabled := false;
    try
      if Formplanisbusy.Showing then
      begin
        Datam1.Query3.SQL.Clear;
        Datam1.Query3.SQL.Add('exec spPlanningLock 1,' + '''' + 'PLAN ' +
          Thisdevicename + '''');
        Datam1.Query3.Open;
        PlanLock := Datam1.Query3.Fields[0].AsInteger = 1;
        PlanLockClient := Datam1.Query3.Fields[1].AsString;
        PlanLockTime := Datam1.Query3.Fields[2].AsDateTime;
        Datam1.Query3.Close;
        if PlanLock then
          Formplanisbusy.Close;
      end;
    except

    end;
    if not PlanLock then
      Timerwaitforplanlock.Enabled := true;
  end;
end;

procedure TFormMain.ActiontoolclearFproofQExecute(Sender: TObject);
begin
  if Prefs.MayRunProducts then
  begin
    if MessageDlg(InfraLanguage1.Translate
      ('This will clear all flat proofs in queue. Do you want to continue ? '),
      mtwarning, [mbYes, mbNo], 0) = mryes then
    begin
      Datam1.Query3.SQL.Clear;
      Datam1.Query3.SQL.Add
        ('update pagetable set FlatProofConfigurationID = 0, FlatProofStatus = 0');
      Datam1.Query3.ExecSQL;
    end;
  end;
end;

procedure TFormMain.writeeditioneditlog(adding: Boolean);
Var
  i, isec
  // ,ipage
    : Integer;
  filename, Lfilename, T
  // ,T1
    : string;
  Alist: Tstrings;

begin

  if Prefs.WritePlanLogFile then
  begin
    Alist := Tstringlist.Create;

    filename := IncludeTrailingBackSlash(Prefs.CCfilesPath);
    Delete(filename, Length(filename) - 8, 8);

    if Prefs.OverwritePlanLogFilepath <> '' then
    begin
      filename := IncludeTrailingBackSlash(Prefs.OverwritePlanLogFilepath);
    end;

    filename := filename + 'CClogs\PLAN_' + Thisdevicename + '.log';
    Lfilename := IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
      'PLAN_' + Thisdevicename + '.log';
    DeleteFile(Lfilename);

    if FileExists(filename) then
    begin
      CopyFile(PChar(filename), PChar(Lfilename), false);
      if FileExists(Lfilename) then
        Alist.LoadFromFile(Lfilename);
    end;

    Alist.Add('-------------------------');
    Alist.Add('START EDITION ');
    if adding then
      Alist.Add('Adding new edition ')
    else
      Alist.Add('Changing edition ');

    Alist.Add('PLANDATE ' + FormaTDateTime('DDMMYYYY', NOW));
    Alist.Add('PLANTIME ' + FormaTDateTime('HHNNSS', NOW));
    Alist.Add('');

    Alist.Add('Publication ' + tNames1.publicationIDtoname
      (editionlogpublicationid));
    Alist.Add('Publication date' + datetostr(editionlogpubdate));

    Alist.Add('');

    Alist.Add('Edition ' + tNames1.editionIDtoname
      (editiontype(ListViewEdto.Items[0].Data^).editionid));

    Alist.Add('');
    Alist.Add('Sec' + #9 + 'Page' + #9 + 'pressname' + #9 + 'M.Ed' + #9 +
      'M.sec' + #9 + 'M.Page');
    for i := 0 to ListViewEdto.Items.Count - 1 do
    begin
      if pos('Dink', ListViewEdto.Items[i].SubItems[0]) = 0 then
      begin

        T := ListViewEdto.Items[i].caption;
        for isec := 0 to ListViewEdto.Items[i].SubItems.Count - 1 do
          T := T + #9 + ListViewEdto.Items[i].SubItems[isec];

        case ListViewEdto.Items[i].ImageIndex of
          0:
            T := T + #9 + 'UNIQUE';
          2:
            T := T + #9 + 'COMMON';
          3:
            T := T + #9 + 'CHANGE TO UNIQUE';
          4:
            T := T + #9 + 'CHANGE TO COMMON';
        end;

        Alist.Add(T);
      end;

    end;
    Alist.Add('END EDITION ');
    Alist.Add('');

    Alist.SaveToFile(Lfilename);
    Alist.free;
    CopyFile(PChar(Lfilename), PChar(filename), false);
  end;

end;

function TFormMain.GetplanTypefromplantree: Integer;
Var
  N: TTreeNode;
begin
  result := -1;
  if TreeViewplan.Selected = nil then
    exit;
  if TreeViewplan.Selected.Level < 1 then
    exit;
  N := TreeViewplan.Selected;
  while N.Level > 2 do
    N := N.Parent;

  Datam1.Query3.SQL.Clear;
  Datam1.Query3.SQL.Add
    ('Select TOP 1 plantype from productionnames where productionid = ' +
    IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
  Tryopen(Datam1.Query3);
  if not Datam1.Query3.Eof then
  begin
    result := Datam1.Query3.Fields[0].AsInteger;
  end;

  if (result < 1) and (N.ImageIndex <> 137) then
  begin
    Actionnewplanrefresh.Execute;
  end;

  Datam1.Query3.Close;
end;

procedure TFormMain.ActionPageApproveExecute(Sender: TObject);
begin
  doseparationsapproval;
end;

procedure TFormMain.ActionPageDisapproveExecute(Sender: TObject);
begin
  DOPageDisapproveExecute;
end;

procedure TFormMain.ActionPageHoldExecute(Sender: TObject);
begin
  DoPageHoldExecute;
end;

procedure TFormMain.ActionPagereleaseExecute(Sender: TObject);
begin
  DoPagereleaseExecute(false);
end;

procedure TFormMain.ActionPagemarksExecute(Sender: TObject);
Var
  i, tmpllistnum: Integer;
  tmpl: string;
begin

  for i := 1 to StringGridHS.RowCount do
  begin
    if SuperHSdata[i - 1].Selected then
    begin
      tmpllistnum := SuperHSdata[i - 1].TemplateID;
      tmpllistnum := inittypes.gettemplatenumberfromID(tmpllistnum);
      tmpl := PlatetemplateArray[tmpllistnum].TemplateName;
      break;
    end;
  end;

end;

procedure TFormMain.ActionPageeditExecute(Sender: TObject);
Var
  filename: string;
  // execstr : String;
  editok: Boolean;
  localeditfile: String;
  // execres : Integer;

  locafiletime
  // ,newlocafiletime
    : Integer;

  i: Integer;
  PageTableFileName: string;
begin
  getpreselHS;
  i := getfirstselectedhs;
  PageTableFileName := '';

  if i < 1 then
    exit;

  if SuperHSdata[i - 1].status < 10 then
  begin
    MessageDlg(FormMain.InfraLanguage1.Translate('No page status to low'),
      mtInformation, [mbOk], 0);

  End
  else
  begin

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('Select TOP 1 FileName from pagetable (NOLOCK)');
    Datam1.Query3.SQL.Add
      ('Where Dirty=0 AND UniquePage=1 AND Mastercopyseparationset = ' +
      IntToStr(SuperHSdata[i - 1].mastercopyseparationset));
    Datam1.Query3.SQL.Add('and ColorID = ' +
      IntToStr(SuperHSdata[i - 1].Colorid));
    Datam1.Query3.Open;
    if not Datam1.Query3.Eof then
      PageTableFileName := Datam1.Query3.Fields[0].AsString;
    Datam1.Query3.Close;

    filename := getfileserverFrommaster(PATHTYPE_CCFILES,
      SuperHSdata[i - 1].mastercopyseparationset) + PageTableFileName + '====' +
      IntToStr(SuperHSdata[i - 1].mastercopyseparationset) + '.' + Colorsnames
      [SuperHSdata[i - 1].Colorid].Name;
    if (not FileExists(filename)) then
      filename := getfileserverFrommaster(PATHTYPE_CCFILES,
        SuperHSdata[i - 1].mastercopyseparationset) +
        IntToStr(SuperHSdata[i - 1].mastercopyseparationset) + '.' + Colorsnames
        [SuperHSdata[i - 1].Colorid].Name;

    DeleteFile(localeditfile);

    if Uppercase(Colorsnames[SuperHSdata[i - 1].Colorid].Name) = 'PDF' then
    begin
      if (Prefs.ExternalPDFEditorPath = '') then
        exit;
      localeditfile := IncludeTrailingBackSlash(TUtils.GetUserAppDirectory()) +
        'plancenteredit.pdf';

      if not CopyFile(PChar(filename), PChar(localeditfile), false) then
      begin
        MessageDlg(InfraLanguage1.Translate('Unable to copy file') + '  (' +
          filename + ')', mtError, [mbOk], 0);
        exit;
      end;

      editok := false;

      locafiletime := FileAge(localeditfile);

      TUtils.ExecNewProcess(Prefs.ExternalPDFEditorPath, localeditfile);

    end
    else
    begin
      if (Prefs.ExternalTiffEditorPath <> '') then
      begin
        TUtils.ExecNewProcess(Prefs.ExternalTiffEditorPath, filename);
      end
      else
      begin
        Formtiffpreview.Tiff_filename := filename;
        Formtiffpreview.caption := Formtiffpreview.Tiff_filename;
        Formtiffpreview.ImageEnView1.IO.LoadFromFileTIFF
          (Formtiffpreview.Tiff_filename);
        Formtiffpreview.ShowModal;
        Formtiffpreview.caption := 'Tiff preview';
      end;
    end;

  end;

end;

procedure TFormMain.ActionpagechangeprooferExecute(Sender: TObject);
Var
  i: Integer;
  masterT: string;
begin
  getpreselHS;
  Formproof.aktproofid := -1;

  for i := 1 to StringGridHS.RowCount do
  begin
    if SuperHSdata[i - 1].Selected then
    begin
      Formproof.aktproofid := SuperHSdata[i - 1].proofid;
      break;
    end;
  end;

  Formproof.init;
  if Formproof.ShowModal = mrOK then
  begin

    Nselectedmasters := 0;
    setpagetablestddata('set proofstatus = 0, proofid = ' +
      IntToStr(Formproof.Selectedproofid), '');
    masterT := 'where Mastercopyseparationset IN (';
    for i := 1 to Nselectedmasters do
    begin
      masterT := masterT + IntToStr(selectedmasters[i]);
      if i < Nselectedmasters then
      begin
        masterT := masterT + ',';
      end;

    end;
    masterT := masterT + ')';
    if Nselectedmasters > 0 then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Update pagetable');
      Datam1.Query1.SQL.Add('set proofstatus = 0,proofid = ' +
        IntToStr(Formproof.proofid[Formproof.ComboBoxsoftproof.ItemIndex]));
      Datam1.Query1.SQL.Add(masterT);
      trysql(Datam1.Query1);
    end;

    loadSuperHSDB2(false);
    resetpreselHS;
  end;
end;

procedure TFormMain.ActionthumbnaileditcolorsExecute(Sender: TObject);
begin
  DOthumbnaileditcolorsExecute;
end;

procedure TFormMain.ActionthumbnailCenterspreadExecute(Sender: TObject);
begin
  DothumbnailCenterspreadExecute;
end;

procedure TFormMain.ActionthumbnailSinglespreadExecute(Sender: TObject);
begin
  DothumbnailSinglespreadExecute;
end;

procedure TFormMain.ActionThumbnailapproveExecute(Sender: TObject);
begin
  DoThumbnailapproveExecute;
end;

procedure TFormMain.ActionThumbnaildisapproveExecute(Sender: TObject);
begin
  DoThumbnaildisapproveExecute;
end;

procedure TFormMain.ActionThumbnailholdExecute(Sender: TObject);
begin
  DoThumbnailholdExecute;
end;

procedure TFormMain.ActionthumbnailReleaseExecute(Sender: TObject);
begin

  if Prefs.MustSetDeviceOnRelease then
  begin
    Releaseproductionids.Clear;
    ReleasePressrunids.Clear;
    ReleasePlates.Clear;

    Releaseproductionids.Add
      (IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
      .ProductionID));
    if not checkdevbeforerelease then
      exit;

  end;

  DothumbnailReleaseExecute(false);
end;

procedure TFormMain.ActionthumbnailReapproveExecute(Sender: TObject);
begin
  DothumbnailReapproveExecute;
end;

procedure TFormMain.ActionthumbnailautoapprovalExecute(Sender: TObject);
begin
  DothumbnailAutoapproveExecute;
end;

procedure TFormMain.ActionthumbnailtowerExecute(Sender: TObject);
Var
  T: string;
begin

  Formeditatext.caption := InfraLanguage1.Translate('Change press tower');
  Formeditatext.Label1.caption := InfraLanguage1.Translate('tower');
  Formeditatext.ComboBox1.text := '';

  if Formeditatext.ShowModal = mrOK then
  begin
    T := Formeditatext.ComboBox1.text;
    if Length(T) > 4 then
      Delete(T, 5, Length(T));

    setpagetablethumbdata('set presstower = ' + '''' + T + '''', '');
    ActionThumbnailrefresh.Execute;
  end;

end;

procedure TFormMain.ActionthumbnailhighlowExecute(Sender: TObject);
Var
  T: string;
begin

  Formeditatext.caption := InfraLanguage1.Translate('Change cylinder position');
  Formeditatext.Label1.caption := InfraLanguage1.Translate('cylinder position');
  Formeditatext.ComboBox1.Items.Clear;
  Formeditatext.ComboBox1.Items.Add('High');
  Formeditatext.ComboBox1.Items.Add('Low');
  Formeditatext.ComboBox1.text := '';
  if Formeditatext.ShowModal = mrOK then
  begin
    T := Formeditatext.ComboBox1.text;
    if Length(T) > 4 then
      Delete(T, 5, Length(T));

    setpagetablethumbdata('set presshighlow = ' + '''' + T + '''', '');
    ActionThumbnailrefresh.Execute;
  end;

end;

procedure TFormMain.ActionthumbnailcylinderExecute(Sender: TObject);
Var
  i: Integer;
  T: string;
begin

  Formeditatext.caption := InfraLanguage1.Translate('Change press cylinder');
  Formeditatext.Label1.caption := InfraLanguage1.Translate('cylinder');
  Formeditatext.ComboBox1.Items.Clear;
  for i := 0 to Length(Prefs.CylinderNameTranslation) - 1 do
    Formeditatext.ComboBox1.Items.Add(Prefs.CylinderNameTranslation[i].Value);

  Formeditatext.ComboBox1.text := '';
  if Formeditatext.ShowModal = mrOK then
  begin
    T := Formeditatext.ComboBox1.text;
    if Length(T) > 4 then
      Delete(T, 5, Length(T));

    setpagetablethumbdata('set presscylinder = ' + '''' + T + '''', '');
    ActionThumbnailrefresh.Execute;

  end;

end;

procedure TFormMain.ActionthumbnailstackposExecute(Sender: TObject);
Var
  i: Integer;
  T: string;
begin

  Formeditatext.caption := InfraLanguage1.Translate('Change stackposition');
  Formeditatext.Label1.caption := InfraLanguage1.Translate('Stackposition');
  Formeditatext.ComboBox1.Items.Clear;
  for i := 0 to Length(Prefs.StackNamesList) - 1 do
    Formeditatext.ComboBox1.Items.Add(Prefs.StackNamesList[i]);

  Formeditatext.ComboBox1.text := '';

  if Formeditatext.ShowModal = mrOK then
  begin
    T := Formeditatext.ComboBox1.text;
    if Length(T) > 4 then
      Delete(T, 5, Length(T));
    if (Prefs.OrStackpositionsTogether) then
      setpagetablethumbdata('set SortingPosition = ' + '''' + T + '''' +
        ' +SUBSTRING(SortingPosition,' + IntToStr(Length(T) + 1) +
        ',DATALength(SortingPosition))', '')
    else
      setpagetablethumbdata('set sortingposition = ' + '''' + T + '''', '');

    ActionThumbnailrefresh.Execute;

  end;

end;

procedure TFormMain.ActionThumbnailMissingExecute(Sender: TObject);
begin
  setpagetablethumbdata
    ('set status = 0, inkstatus = 0, proofstatus=0,version = 0 ', '');
  ActionThumbnailrefresh.Execute;
end;

procedure TFormMain.ActionthumbnailpriorityExecute(Sender: TObject);
begin
  if Formpriority.ShowModal = mrOK then
  begin
    setpagetablethumbdata('set priority = ' + Formpriority.edit1.text, '');
    ActionThumbnailrefresh.Execute;
  end;
end;

procedure TFormMain.ActionthumbnailretransmitExecute(Sender: TObject);
begin
  if (not Prefs.RestrictRetransmit) then
  begin
    if (Prefs.PlateTransmissionSystem) then
      setpagetablethumbdata
        ('set status = 30, miscint4 = 0 , inkstatus = 0, outputtime = 0, ImagingProcessID = 0 ',
        'and status > 10')
    else
      setpagetablethumbdata
        ('set status = 10, miscint4 = 0 , inkstatus = 0, outputtime = 0, ImagingProcessID = 0 ',
        'and status > 10');
    ActionThumbnailrefresh.Execute;
    settotransmittedifmainlocation;

  end;
end;

procedure TFormMain.ActionthumbnailreproofExecute(Sender: TObject);
begin
  setpagetablethumbdata('set proofstatus = 0', '');
  ActionThumbnailrefresh.Execute;
end;

procedure TFormMain.ActionthumbnailchangeprooferExecute(Sender: TObject);
begin
  Formproof.init;
  if Formproof.ShowModal = mrOK then
  begin
    setpagetablethumbdata('set proofstatus = 0,proofid = ' +
      IntToStr(Formproof.Selectedproofid), '');
    ActionThumbnailrefresh.Execute;
  end;

end;

procedure TFormMain.ActionthumbnailimagedExecute(Sender: TObject);
begin
  if MessageDlg(InfraLanguage1.Translate('Set status Imaged'), mtInformation,
    [mbOk], 0) = mrOK then
  begin
    setpagetablethumbdata('set status = 50, inkstatus = 0 ',
      ' and status >=30');
    ActionThumbnailrefresh.Execute;
  end;

end;

procedure TFormMain.ActionthumbcommentExecute(Sender: TObject);
Var
  i, nsel: Integer;
  T, Aktcommenent: String;
begin
  if PBExListviewthumbnail.Selected = nil then
    exit;

  FormChangecomment.CheckBoxallsubed.Visible := false;
  T := '';
  nsel := 0;
  for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
  begin
    if PBExListviewthumbnail.Items[i].Selected then
    begin
      Aktcommenent := Showthubms[PBExListviewthumbnail.Items[i].Index].Comment;
      Inc(nsel);
      if nsel > 1 then
        break;
    end;
  end;

  if nsel = 1 then
  begin
    T := Aktcommenent;
  end
  else
    T := '';

  setAcommentResult := setAcomment(T, 'Set comment');
  if setAcommentResult = 2 then
    T := '';

  if setAcommentResult > 0 then
  begin
    if setAcommentResult = 2 then
    begin
      for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
      begin
        if PBExListviewthumbnail.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set Comment = ' + '''' + '' + '''');
          Datam1.Query1.SQL.Add('where mastercopyseparationset = ' +
            IntToStr(Showthubms[PBExListviewthumbnail.Items[i].Index]
            .mastercopyseparationset));

          if Prefs.Debug then
            Datam1.Query1.SQL.SaveToFile
              (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
              'sqllogs\' + 'Setcomclear.SQL');
          FormMain.trysql(Datam1.Query1);
        end;
      end;
    end
    else
    begin
      if (Prefs.AddTimeToPageComment) then
      begin
        for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
        begin
          if PBExListviewthumbnail.Items[i].Selected then
          begin
            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add('update pagetable');
            Datam1.Query1.SQL.Add('set Comment = ' + '''' + T + '''');
            Datam1.Query1.SQL.Add('Where CHARINDEX (' + '''' + '|' + '''' +
              ',REVERSE (Comment)) = 0 ');
            Datam1.Query1.SQL.Add('and mastercopyseparationset = ' +
              IntToStr(Showthubms[PBExListviewthumbnail.Items[i].Index]
              .mastercopyseparationset));
            if Prefs.Debug then
              Datam1.Query1.SQL.SaveToFile
                (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
                'sqllogs\' + 'Setcom1.SQL');
            FormMain.trysql(Datam1.Query1);

            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add('update pagetable');
            Datam1.Query1.SQL.Add
              ('set comment = substring(comment,1, (len(Comment)-CHARINDEX (' +
              '''' + ' | ' + '''' + ',REVERSE (Comment))+1)  ) + ' + '''' + ' '
              + T + '''');
            Datam1.Query1.SQL.Add('Where CHARINDEX (' + '''' + '|' + '''' +
              ',REVERSE (Comment)) > 0 ');
            Datam1.Query1.SQL.Add('and mastercopyseparationset = ' +
              IntToStr(Showthubms[PBExListviewthumbnail.Items[i].Index]
              .mastercopyseparationset));
            if Prefs.Debug then
              Datam1.Query1.SQL.SaveToFile
                (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
                'sqllogs\' + 'Setcom2.SQL');
            FormMain.trysql(Datam1.Query1);
          end;
        end;
      end
      else
      begin
        for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
        begin
          if PBExListviewthumbnail.Items[i].Selected then
          begin
            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add('update pagetable');
            Datam1.Query1.SQL.Add('set Comment = ' + '''' + T + '''');
            Datam1.Query1.SQL.Add('Where mastercopyseparationset = ' +
              IntToStr(Showthubms[PBExListviewthumbnail.Items[i].Index]
              .mastercopyseparationset));
            FormMain.trysql(Datam1.Query1);
          end;
        end;
      end;
    end;
  end;
  ActionThumbnailrefresh.Execute;
end;

procedure TFormMain.ActionthumbcopyExecute(Sender: TObject);
begin
  if PBExListviewthumbnail.Selected = nil then
    exit;
  Thumbcopymasterset := Showthubms[PBExListviewthumbnail.Selected.Index]
    .mastercopyseparationset;
end;

procedure TFormMain.ActionThumbpasteExecute(Sender: TObject);
// Var
// I : Integer;
begin

  if PBExListviewthumbnail.Selected = nil then
    exit;
  if Thumbcopymasterset = -1 then
    exit;
  Try
    Formcopypastepage.tomasterset := Showthubms[PBExListviewthumbnail.Selected.
      Index].mastercopyseparationset;
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Select Distinct colorid from pagetable (NOLOCK)');
    Datam1.Query1.SQL.Add('Where mastercopyseparationset = ' +
      IntToStr(Thumbcopymasterset));
    Datam1.Query1.SQL.Add('and status >= 10');
    Datam1.Query1.Open;
    Formcopypastepage.Ncopycolorids := 0;
    while not Datam1.Query1.Eof do
    begin
      Inc(Formcopypastepage.Ncopycolorids);
      Formcopypastepage.copycolorids[Formcopypastepage.Ncopycolorids] :=
        Datam1.Query1.Fields[0].AsInteger;
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;
    Formcopypastepage.anyerror := false;
  Except
  end;
  if Formcopypastepage.Ncopycolorids > 0 then
  begin
    try
      Formcopypastepage.ShowModal;

    Finally

    end;
  end;
end;

procedure TFormMain.DOthumbnaileditcolorsExecute;
begin
  DOActionthumbnaileditcolorsExecute;
end;

procedure TFormMain.ActionthumbnailpreviewExecute(Sender: TObject);
begin
  DothumbnailpreviewExecute(true, 0);
end;

procedure TFormMain.ActionpagetreecreepExecute(Sender: TObject);
// Var
// editionid,publicationid : Integer;
// Pubdate : TDateTime;
begin
  if TreeViewpagelist.Selected = nil then
    exit;
  if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Publicationid < 0 then
    exit;

  Setcreep(TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Publicationid,
    TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Pubdate);

  getpreselHS;
  Actionrefreshpages.Execute;
  resetpreselHS;

end;

procedure TFormMain.ActionprodreapprovedExecute(Sender: TObject);

Var
  // I : Integer;
  // l : tlistitem;
  wherestr: string;
  // loca,press : Integer;

begin

  if TreeViewprodcontrol.Selected = nil then
    exit;

  wherestr := makeprogwherestr('');

  try
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable');
    Datam1.Query1.SQL.Add('set approved = 0');
    Datam1.Query1.SQL.Add('where approved <> 1 and ' + wherestr);
    Datam1.Query1.SQL.Add(WeditionStr);
    trysql(Datam1.Query1);
    // Newrefreshprogress;
    ActionThumbnailrefresh.Execute;
  Except
  end;
end;

procedure TFormMain.ActionprodautoapproveExecute(Sender: TObject);
Var
  wherestr: string;

begin
  if TreeViewprodcontrol.Selected = nil then
    exit;

  wherestr := makeprogwherestr('');

  try
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable');
    Datam1.Query1.SQL.Add('set approved = -1');
    Datam1.Query1.SQL.Add('where approved = 0 and ' + wherestr);
    Datam1.Query1.SQL.Add(WeditionStr);
    trysql(Datam1.Query1);
    // Newrefreshprogress;
    ActionThumbnailrefresh.Execute;
  Except
  end;
end;

procedure TFormMain.ActionplatetreescheduleExecute(Sender: TObject);
Var
  runnode, pressnode: TTreeNode;
begin
  if TreeViewPlateview.Selected = nil then
    exit;
  runnode := TreeViewPlateview.Selected;
  if runnode = nil then
    exit;
  if runnode.Level < 1 then
    exit;

  pressnode := runnode;
  while pressnode.Level > 0 do
  begin
    pressnode := pressnode.Parent;
  end;
  FormSetschedules.pressid := tNames1.pressnametoid(pressnode.text);

  FormSetschedules.Publicationid := -1;
  FormSetschedules.editionid := -1;
  FormSetschedules.Sectionid := -1;

  try
    while runnode.Level > 0 do
    begin
      case TTreeViewpagestype(runnode.Data^).kind of
        1:
          begin
            FormSetschedules.Pubdate :=
              TTreeViewpagestype(runnode.Data^).Pubdate;
          end;
        2:
          begin
            FormSetschedules.Publicationid := TTreeViewpagestype(runnode.Data^)
              .Publicationid;
          end;
        4:
          begin
            FormSetschedules.editionid := TTreeViewpagestype(runnode.Data^)
              .editionid;
          end;
        5:
          begin
            FormSetschedules.Sectionid := TTreeViewpagestype(runnode.Data^)
              .Sectionid;
          end;
      end;
      runnode := runnode.Parent;
    end;

    if FormSetschedules.initselection then
    begin
      FormSetschedules.ShowModal;
    end;
  Except

  end;
end;

procedure TFormMain.ActionuknowfiletoolExecute(Sender: TObject);
begin
  if PageControlMain.ActivePageIndex < 2 then
  begin
    FormUknownfiles.Show;
  end;
end;

procedure TFormMain.StringGridHSDragOver(Sender, Source: TObject; X, Y: Integer;
  State: TDragState; var Accept: Boolean);
begin
  Accept := Source = FormUknownfiles.ListViewunkowfiles;
end;

procedure TFormMain.DropFiles(var msg: TMessage);
var
  i, Count: Integer;
  dropFileName: array [0 .. 511] of Char;
  MAXFILENAME: Integer;
  DropPoint: TPoint; // point where files dropped
  L: TListItem;
  nMasterSet, ln: Integer;
  Publication: string;
  Publicationalias: string;
  Pubdate: TDateTime;
  edition: string;
  Editionalias: string;
  section: string;
  sectionalias: string;
  pagename: string;
  PubDateStr: string;
  SourceFileName: string;
  // SourceFileTitle : string;
  TargetFileName: string;
  confirm: Boolean;
  buttonSelected: Integer;
  Year, Month, Day: Word;
  IsTiffColorFile: Boolean;
  // TiffColorName : string;
begin

  if (Prefs.AllowDropFiles = false) OR (Prefs.DropFilesDestination = '') then
    exit;
  IsTiffColorFile := false;
  nMasterSet := 0;
  SourceFileName := '';
  Publication := '';
  Publicationalias := '';
  Editionalias := '';
  sectionalias := '';
  Pubdate := Today;
  DragQueryPoint(msg.WParam, DropPoint);

  MAXFILENAME := 511;
  Count := DragQueryFile(msg.WParam, $FFFFFFFF, dropFileName, MAXFILENAME);

  if (Count > 0) then
  begin
    DragQueryFile(msg.WParam, 0, dropFileName, MAXFILENAME);
    L := PBExListviewthumbnail.GetItemAt(DropPoint.X, DropPoint.Y);
    if L <> nil then
    begin
      nMasterSet := Showthubms[L.Index].mastercopyseparationset;
    end;
  end;
  DragFinish(msg.WParam);

  ln := Length(dropFileName);
  for i := 0 to Length(dropFileName) do
  begin
    if (dropFileName[i] = #0) then
    begin
      ln := i;
      break;
    end;
  end;

  if ln > 0 then
    Setstring(SourceFileName, PChar(@dropFileName[0]), ln);

  if (nMasterSet > 0) AND (SourceFileName <> '') then
  begin
    Datam1.Query2.SQL.Clear;
    Datam1.Query2.SQL.Add('SELECT TOP 1 PublicationID,Pubdate,EditionID,SectionID,PageName FROM PageTable WITH (NOLOCK)');
    Datam1.Query2.SQL.Add(' WHERE Dirty=0 AND UniquePage=1 AND Mastercopyseparationset = ' + IntToStr(nMasterSet));
    Datam1.Query2.Open;
    if not Datam1.Query2.Eof then
    begin
      Publication := tNames1.publicationIDtoname(Datam1.Query2.Fields[0].AsInteger);
      Pubdate := Datam1.Query2.Fields[1].AsDateTime;
      PubDateStr := datetostr(Pubdate);
      edition := tNames1.editionIDtoname(Datam1.Query2.Fields[2].AsInteger);
      section := tNames1.sectionidtoname(Datam1.Query2.Fields[3].AsInteger);
      pagename := Datam1.Query2.Fields[4].AsString;
    end;
    Datam1.Query2.Close;

    Datam1.Query2.SQL.Clear;
    Datam1.Query2.SQL.Add
      ('Select TOP 1 ShortName FROM InputAliases WHERE Type=''Publication'' AND LongName=''' + Publication + '''');
    Datam1.Query2.Open;
    if not Datam1.Query2.Eof then
      Publicationalias := Datam1.Query2.Fields[0].AsString;
    Datam1.Query2.Close;
    if (Publicationalias <> '') then
      Publication := Publicationalias;

    Datam1.Query2.SQL.Clear;
    Datam1.Query2.SQL.Add
      ('Select TOP 1 ShortName FROM InputAliases WHERE Type=''Edition'' AND LongName='''  + edition + '''');
    Datam1.Query2.Open;
    if not Datam1.Query2.Eof then
      Editionalias := Datam1.Query2.Fields[0].AsString;
    Datam1.Query2.Close;
    if (Editionalias <> '') then
      edition := Editionalias;

    Datam1.Query2.SQL.Clear;
    Datam1.Query2.SQL.Add
      ('Select TOP 1 ShortName FROM InputAliases WHERE Type=''Section'' AND LongName='''  + section + '''');
    Datam1.Query2.Open;
    if not Datam1.Query2.Eof then
      sectionalias := Datam1.Query2.Fields[0].AsString;
    Datam1.Query2.Close;
    if (sectionalias <> '') then
      section := sectionalias;

    (* TO DO - detemine and handle TIFF files here..

      SourceFileTitle :=  extractfilename(SourceFileName);
      SourceFileName := Uppercase(SourceFileName);
      // See if TIFF color sep...
      if (Pos(".TIF",SourceFileName,1) > 0) then
      begin
      IsTiffColorFile := true;

      i := Pos("(C)",SourceFileName,1);
      if (i>0) then
      IsTiffColorFile := true;
      else
      begin
      i := Pos("(M)",SourceFileName,1);
      if (i>0) then
      IsTiffColorFile := true;
      else
      begin
      i := Pos("(Y)",SourceFileName,1);
      if (i>0) then
      IsTiffColorFile := true;
      else
      begin
      i := Pos("(Y)",SourceFileName,1);
      if (i>0) then
      IsTiffColorFile := true;
      end;
      end;
      end;
      end;

      // Special function for handling TIFF...
      if (IsTiffColorFile) then
      begin


      end;
    *)

    // Construct filename..

    Decodedate(Pubdate, Year, Month, Day);
    Year := Year - 2000;
    PubDateStr := Format('%2.2d%2.2d%2.2d', [Day, Month, Year]);
    TargetFileName := Prefs.DropFilesDestination + '\\' + Publication + '-' +
      PubDateStr + '-' + edition + '-' + section + '-' + pagename + '.pdf';

    confirm := true;

    if (Prefs.AllowDropFilesDialog) then
    begin
      buttonSelected := MessageDlg('Move Sourcefile: ' + SourceFileName + #13 +
        #10 + 'to' + #13 + #10 + TargetFileName + ' ?', mtConfirmation,
        [mbOk, mbCancel], 0);
      if buttonSelected = mrcancel then
        confirm := false;
    end;

    if (confirm) then
    begin
      if (CopyFile(PChar(SourceFileName), PChar(TargetFileName), false) = true)
      then
      begin
        if (Prefs.AllowDropFilesDeleteAfterCopy) then
          DeleteFile(PChar(SourceFileName));
        Datam1.Query2.SQL.Clear;
        Datam1.Query2.SQL.Add('exec spAddPrepollLogEntry ');
        Datam1.Query2.SQL.Add('@MasterCopySeparationSet=' +
          IntToStr(nMasterSet));
        Datam1.Query2.SQL.Add(', @ProcessID=99');
        Datam1.Query2.SQL.Add(', @ProcessType=190');
        Datam1.Query2.SQL.Add(', @Event=137');
        Datam1.Query2.SQL.Add(', @Message=''' +
          extractfilename(TargetFileName) + '''');
        trysql(Datam1.Query2);

      end;
    end;

    ActionThumbnailrefresh.Execute;

  end;

end;

procedure TFormMain.PBExListviewthumbnailDragDrop(Sender, Source: TObject;
  X, Y: Integer);
Var
  // selthumb,
  i, FormUknownfilessel
  // ,masternum
    , mainlocid: Integer;
  L: TListItem;
  // T,
  Messtr, tofile, fromfile
  // ,remotelocstr
    , fileserver: string;

  // NPagelocations : Integer;
  // Pagelocations : Array[1..40] of Integer;
  // pageisinuse : Boolean;
begin
  mainlocid := 1;
  try
    fileserver := '';
    if ((Source = FormUknownfiles.ListViewunkowfiles)) then
    begin
      L := PBExListviewthumbnail.GetItemAt(X, Y);

      if L = nil then
      begin
        beep;
        exit;
      end;
      FormUknownfilessel := 0;
      for i := 0 to FormUknownfiles.ListViewunkowfiles.Items.Count - 1 do
        if FormUknownfiles.ListViewunkowfiles.Items[i].SubItems[7] = '1' then
          Inc(FormUknownfilessel);

      if Showthubms[L.Index].Ncolor < FormUknownfilessel then
      begin
        MessageDlg(InfraLanguage1.Translate('Too many colors'), mtInformation,
          [mbOk], 0);
        exit;
      end;

      if FormUknownfilessel > 1 then
      begin
        Messtr := '';
        for i := 0 to FormUknownfiles.ListViewunkowfiles.Items.Count - 1 do
        begin
          if FormUknownfiles.ListViewunkowfiles.Items[i].SubItems[7] = '1' then
          begin
            Datam1.Query2.SQL.Clear;
            Datam1.Query2.SQL.Add('Select TOP 1 copyseparationset from pagetable (NOLOCK)');
            Datam1.Query2.SQL.Add(' where mastercopyseparationset = ' + IntToStr(Showthubms[L.Index].mastercopyseparationset));
            Datam1.Query2.SQL.Add(' and colorid = ' + FormUknownfiles.ListViewunkowfiles.Items[i].SubItems[5]);
            Datam1.Query2.Open;
            if Datam1.Query2.Eof then
            begin
              FormUknownfiles.ListViewunkowfiles.Items[i].SubItems[7] := '0';
              Messtr := Messtr + FormUknownfiles.ListViewunkowfiles.Items[i]
                .caption + ','
            end;
            Datam1.Query2.Close;
          end;
        end;

        if Messtr <> '' then
        begin
          if MessageDlg(InfraLanguage1.Translate
            ('Some files cannot be imported.  stop?'), mtConfirmation,
            [mbYes, mbNo], 0) = mryes then
          begin
            exit;
          end;
        end;

        for i := 0 to FormUknownfiles.ListViewunkowfiles.Items.Count - 1 do
        begin
          if FormUknownfiles.ListViewunkowfiles.Items[i].SubItems[7] = '1' then
          begin
            fromfile := FormUknownfiles.ListViewunkowfiles.Items[i].SubItems[3];

            if (Prefs.NewCCFilesNames) then
              tofile := getfileserverFrommaster(PATHTYPE_CCFILES, Showthubms[L.Index].mastercopyseparationset) +
                extractfilename(fromfile) + '====' +
                IntToStr(Showthubms[L.Index].mastercopyseparationset) + '.' +
                FormUknownfiles.ListViewunkowfiles.Items[i].SubItems[0]
            else
              tofile := getfileserverFrommaster(PATHTYPE_CCFILES,
                Showthubms[L.Index].mastercopyseparationset) +
                IntToStr(Showthubms[L.Index].mastercopyseparationset) + '.' +
                FormUknownfiles.ListViewunkowfiles.Items[i].SubItems[0];

            fileserver := getfileserverFrommaster2
              (Showthubms[L.Index].mastercopyseparationset);

            if CopyFile(PChar(fromfile), PChar(tofile), false) then
            begin
              Datam1.Query2.SQL.Clear;
              Datam1.Query2.SQL.Add
                ('Select TOP 1 MainLocationID from GeneralPreferences');
              Datam1.Query2.Open;
              if not Datam1.Query2.Eof then
                mainlocid := Datam1.Query2.Fields[0].AsInteger;
              Datam1.Query2.Close;

              Datam1.Query2.SQL.Clear;
              Datam1.Query2.SQL.Add('update pagetable');
              Datam1.Query2.SQL.Add
                ('Set status = 30, miscint4 = 0,version=1, proofstatus=0,inputtime = getdate(),filename='
                + '''' + extractfilename(fromfile) + '''');
              Datam1.Query2.SQL.Add(',FileServer=' + '''' + fileserver + '''');
              // ## NAN 20150204
              if PDFMasterOK then
                Datam1.Query2.SQL.Add(',pdfmaster=mastercopyseparationset');
              Datam1.Query2.SQL.Add(' where mastercopyseparationset = ' +
                IntToStr(Showthubms[L.Index].mastercopyseparationset));
              Datam1.Query2.SQL.Add(' and locationid = ' + IntToStr(mainlocid));
              Datam1.Query2.SQL.Add(' and colorid = ' +
                FormUknownfiles.ListViewunkowfiles.Items[i].SubItems[5]);

              // NAN 20150204 added these two lines...
              trysql(Datam1.Query2);
              Datam1.Query2.SQL.Clear;

              Datam1.Query2.SQL.Add('update pagetable');
              Datam1.Query2.SQL.Add
                ('Set status = 10, miscint4 = 0,version=1,proofstatus=0,inputtime = getdate(),filename='
                + '''' + extractfilename(fromfile) + '''');
              Datam1.Query2.SQL.Add(',FileServer=' + '''' + fileserver + '''');
              // ## NAN 20150204
              if PDFMasterOK then
                Datam1.Query2.SQL.Add(',pdfmaster=mastercopyseparationset');
              Datam1.Query2.SQL.Add(' where mastercopyseparationset = ' +
                IntToStr(Showthubms[L.Index].mastercopyseparationset));
              Datam1.Query2.SQL.Add(' and locationid <> ' +
                IntToStr(mainlocid));
              Datam1.Query2.SQL.Add(' and colorid = ' +
                FormUknownfiles.ListViewunkowfiles.Items[i].SubItems[5]);

              if Prefs.Debug then
                Datam1.Query2.SQL.SaveToFile
                  (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
                  'sqllogs\' + 'PAdragerrorfile.SQL');
              trysql(Datam1.Query2);
              DeleteFile(fromfile);
            end
            else
            begin
              MessageDlg(InfraLanguage1.Translate('Unable to move ') + #13 +
                FormUknownfiles.ListViewunkowfiles.Items[i].caption +
                ' into fileserver', mtError, [mbOk], 0);

            end;
          end;
        end;
      End
      else
      begin
        fromfile := FormUknownfiles.ListViewunkowfiles.Selected.SubItems[3];

        if (Prefs.NewCCFilesNames) then
          tofile := getfileserverFrommaster(PATHTYPE_CCFILES,
            Showthubms[L.Index].mastercopyseparationset) +
            extractfilename(fromfile) + '====' +
            IntToStr(Showthubms[L.Index].mastercopyseparationset) + '.' +
            tNames1.ColornameIDtoname
            (StrToInt(FormUknownfiles.ListViewunkowfiles.Selected.SubItems[5]))
        else
          tofile := getfileserverFrommaster(PATHTYPE_CCFILES,
            Showthubms[L.Index].mastercopyseparationset) +
            IntToStr(Showthubms[L.Index].mastercopyseparationset) + '.' +
            tNames1.ColornameIDtoname
            (StrToInt(FormUknownfiles.ListViewunkowfiles.Selected.SubItems[5]));

        fileserver := getfileserverFrommaster2
          (Showthubms[L.Index].mastercopyseparationset);

        if CopyFile(PChar(fromfile), PChar(tofile), false) then
        begin
          Datam1.Query2.SQL.Clear;
          Datam1.Query2.SQL.Add
            ('Select TOP 1 MainLocationID from GeneralPreferences');
          Datam1.Query2.Open;
          if not Datam1.Query2.Eof then
            mainlocid := Datam1.Query2.Fields[0].AsInteger;
          Datam1.Query2.Close;

          Datam1.Query2.SQL.Clear;
          Datam1.Query2.SQL.Add('update pagetable');
          Datam1.Query2.SQL.Add
            ('Set status = 30, miscint4 = 0,version=1,proofstatus=0,inputtime = getdate(),filename='
            + '''' + extractfilename(fromfile) + '''');
          Datam1.Query2.SQL.Add(',FileServer=' + '''' + fileserver + '''');

          // ## NAN 20150204
          if PDFMasterOK then
            Datam1.Query2.SQL.Add(', pdfmaster=mastercopyseparationset');
          Datam1.Query2.SQL.Add(' where mastercopyseparationset = ' +
            IntToStr(Showthubms[L.Index].mastercopyseparationset));
          Datam1.Query2.SQL.Add(' and locationid = ' + IntToStr(mainlocid));
          Datam1.Query2.SQL.Add(' and colorid = ' +
            FormUknownfiles.ListViewunkowfiles.Selected.SubItems[5]);

          // NAN 20150204 added these two lines...
          trysql(Datam1.Query2);
          Datam1.Query2.SQL.Clear;

          Datam1.Query2.SQL.Add('update pagetable');
          Datam1.Query2.SQL.Add
            ('Set status = 10, miscint4 = 0,version=1,proofstatus=0,inputtime = getdate(),filename='
            + '''' + extractfilename(fromfile) + '''');
          Datam1.Query2.SQL.Add(',FileServer=' + '''' + fileserver + '''');
          // ## NAN 20150204
          if PDFMasterOK then
            Datam1.Query2.SQL.Add(', pdfmaster=mastercopyseparationset');
          Datam1.Query2.SQL.Add(' where mastercopyseparationset = ' +
            IntToStr(Showthubms[L.Index].mastercopyseparationset));
          Datam1.Query2.SQL.Add(' and locationid <> ' + IntToStr(mainlocid));
          Datam1.Query2.SQL.Add(' and colorid = ' +
            FormUknownfiles.ListViewunkowfiles.Selected.SubItems[5]);

          if Prefs.Debug then
            Datam1.Query2.SQL.SaveToFile
              (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
              'sqllogs\' + 'PAdragerrorfile.SQL');
          trysql(Datam1.Query2);
          DeleteFile(fromfile);

        end
        else
        begin
          MessageDlg(InfraLanguage1.Translate('Unable to move ') + #13 +
            FormUknownfiles.ListViewunkowfiles.Selected.caption +
            ' into fileserver', mtError, [mbOk], 0);
        end;
      end;

      FormUknownfiles.SetFocus;
    end;
  Except

  end;
  ActionThumbnailrefresh.Execute;
end;

procedure TFormMain.PBExListviewthumbnailDragOver(Sender, Source: TObject;
  X, Y: Integer; State: TDragState; var Accept: Boolean);
begin
  Accept := ((Source = FormUknownfiles.ListViewunkowfiles));
end;

procedure TFormMain.ActionpageshardproofExecute(Sender: TObject);
begin
  if Formhardproofselect.ShowModal = mrOK then
  begin
    getpreselHS;

    setpagetableMasterdata
      ('Set HardProofStatus = 0 ,HardProofConfigurationID = ' +
      IntToStr(Formhardproofselect.Hardproofconfig), '');
    // setpagetablestFlatdata('Set HardProofStatus = 0 ,HardProofConfigurationID = ' + IntToStr(Formhardproofselect.Hardproofconfig),'',true);
    loadSuperHSDB2(false);
    resetpreselHS;
  end;
end;

procedure TFormMain.ActionthumbhardproofExecute(Sender: TObject);
begin
  if Formhardproofselect.ShowModal = mrOK then
  begin
    setpagetablethumbdata('Set HardProofStatus = 0 ,HardProofConfigurationID = '
      + IntToStr(Formhardproofselect.Hardproofconfig), '');
    ActionThumbnailrefresh.Execute;
  end;
end;

procedure TFormMain.ActionthumbtreeHardproofExecute(Sender: TObject);
Var
  Alocationid: Integer;
begin
  try
    if Formhardproofselect.ShowModal = mrOK then
    begin
      if TreeViewThumbs.Selected = nil then
        exit;
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      Datam1.Query1.SQL.Add
        ('Set Hardproofstatus = 0 ,HardProofConfigurationID = ' +
        IntToStr(Formhardproofselect.Hardproofconfig));
      Datam1.Query1.SQL.Add('Where active <> -999');
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Publicationid > -1
      then
        Datam1.Query1.SQL.Add('and publicationid = ' +
          IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
          .Publicationid));
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid > -1 then
        Datam1.Query1.SQL.Add('and editionid = ' +
          IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
          .editionid));
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Sectionid > -1 then
        Datam1.Query1.SQL.Add('and sectionid = ' +
          IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
          .Sectionid));
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate > 0 then
        Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
          TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate));
      Alocationid := GetSelectedLocationID();
      if (Alocationid > 0) then
        Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

      trysql(Datam1.Query1);

      ActionThumbnailrefresh.Execute;
    end;

  Except
  end;

end;

procedure TFormMain.ActionthumbtreesoftproofExecute(Sender: TObject);
Var
  Alocationid: Integer;
begin
  try
    Formproof.init;

    if Formproof.ShowModal = mrOK then
    begin
      if TreeViewThumbs.Selected = nil then
        exit;
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      Datam1.Query1.SQL.Add('set proofstatus = 0,proofid = ' +
        IntToStr(Formproof.Selectedproofid));
      Datam1.Query1.SQL.Add('Where active <> -999');
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Publicationid > -1
      then
        Datam1.Query1.SQL.Add('and publicationid = ' +
          IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
          .Publicationid));
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid > -1 then
        Datam1.Query1.SQL.Add('and editionid = ' +
          IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
          .editionid));
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Sectionid > -1 then
        Datam1.Query1.SQL.Add('and sectionid = ' +
          IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
          .Sectionid));
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate > 0 then
        Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
          TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate));
      Alocationid := GetSelectedLocationID();
      if (Alocationid > 0) then
        Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

      trysql(Datam1.Query1);

      ActionThumbnailrefresh.Execute;
    end;

  Except
  end;

end;

procedure TFormMain.StringGridHSDragDrop(Sender, Source: TObject;
  X, Y: Integer);
Var
  newstatus, mainlocid, i, FormUknownfilessel: Integer;
  tofile, fromfile, fileserver: string;
  ACol, ARow, tolocationid: Integer;
  Messtr: String;
  donegetting: Boolean;
begin
  mainlocid := 1;
  try
    if ((Source = FormUknownfiles.ListViewunkowfiles)) And
      (StringGridHS.cells[0, 1] <> '') and
      ((FormUknownfiles.ListViewunkowfiles.SelCount <= 4) and
      (FormUknownfiles.ListViewunkowfiles.SelCount > 0)) then
    begin

      StringGridHS.MouseToCell(X, Y, ACol, ARow);
      tolocationid := SuperHSdata[ARow - 1].LocationID;

      if tolocationid = GMainlocationID then
      begin
        newstatus := 30;
      end
      else
      begin
        newstatus := 10;
      end;

      FormUknownfilessel := 0;
      for i := 0 to FormUknownfiles.ListViewunkowfiles.Items.Count - 1 do
        if FormUknownfiles.ListViewunkowfiles.Items[i].SubItems[7] = '1' then
          Inc(FormUknownfilessel);
      donegetting := false;
      if FormUknownfilessel > 1 then
      begin
        Messtr := '';
        for i := 0 to FormUknownfiles.ListViewunkowfiles.Items.Count - 1 do
        begin
          if FormUknownfiles.ListViewunkowfiles.Items[i].SubItems[7] = '1' then
          begin
            Datam1.Query2.SQL.Clear;
            Datam1.Query2.SQL.Add
              ('Select TOP 1 copyseparationset from pagetable (NOLOCK)');
            Datam1.Query2.SQL.Add(' where mastercopyseparationset = ' +
              IntToStr(SuperHSdata[ARow - 1].mastercopyseparationset));
            Datam1.Query2.SQL.Add(' and colorid = ' +
              FormUknownfiles.ListViewunkowfiles.Items[i].SubItems[5]);
            Datam1.Query2.Open;
            if Datam1.Query2.Eof then
            begin
              FormUknownfiles.ListViewunkowfiles.Items[i].SubItems[7] := '0';
              Messtr := Messtr + FormUknownfiles.ListViewunkowfiles.Items[i]
                .caption + ','
            end;
            Datam1.Query2.Close;
          end;
        end;

        if Messtr <> '' then
        begin
          if MessageDlg(InfraLanguage1.Translate
            ('Some files cannot be imported.  stop?'), mtConfirmation,
            [mbYes, mbNo], 0) = mryes then
          begin
            exit;
          end;
        end;
        (*
          Datam1.Query2.SQL.Clear;
          Datam1.Query2.SQL.Add('select status,miscint4 from pagetable');
          Datam1.Query2.SQL.Add(' where mastercopyseparationset = ' +IntToStr(SuperHSdata[ARow-1].MasterCopySeparationSet));
          Datam1.Query2.SQL.Add('And status IN (5,15,25,35,45) or miscint4 = 1 and active = 1');
          Datam1.Query2.Open;
          pageisinuse := not Datam1.Query2.Eof;
          Datam1.Query2.Close;
          if pageisinuse then
          begin
          if MessageDlg('The destination page since it is currently in use continiue?',mtwarning, [mbIgnore	, mbAbort	], 0) = mrAbort then
          exit;
          end;
        *)

        for i := 0 to FormUknownfiles.ListViewunkowfiles.Items.Count - 1 do
        begin
          if FormUknownfiles.ListViewunkowfiles.Items[i].SubItems[7] = '1' then
          begin
            fromfile := FormUknownfiles.ListViewunkowfiles.Items[i].SubItems[3];
            if (Prefs.NewCCFilesNames) then
              tofile := getfileserverFrommaster(PATHTYPE_CCFILES,
                SuperHSdata[ARow - 1].mastercopyseparationset) +
                extractfilename(fromfile) + '====' +
                IntToStr(SuperHSdata[ARow - 1].mastercopyseparationset) + '.' +
                FormUknownfiles.ListViewunkowfiles.Items[i].SubItems[0]
            else
              tofile := getfileserverFrommaster(PATHTYPE_CCFILES,
                SuperHSdata[ARow - 1].mastercopyseparationset) +
                IntToStr(SuperHSdata[ARow - 1].mastercopyseparationset) + '.' +
                FormUknownfiles.ListViewunkowfiles.Items[i].SubItems[0];

            fileserver := getfileserverFrommaster2
              (SuperHSdata[ARow - 1].mastercopyseparationset);

            if CopyFile(PChar(fromfile), PChar(tofile), false) then
            begin
              Datam1.Query2.SQL.Clear;
              Datam1.Query2.SQL.Add
                ('Select TOP 1 MainLocationID from GeneralPreferences');
              Datam1.Query2.Open;
              if not Datam1.Query2.Eof then
                mainlocid := Datam1.Query2.Fields[0].AsInteger;
              Datam1.Query2.Close;

              Datam1.Query2.SQL.Clear;
              Datam1.Query2.SQL.Add('update pagetable');
              Datam1.Query2.SQL.Add
                ('Set status = 30, miscint4 = 0,version=1,proofstatus=0,inputtime = getdate(),filename='
                + '''' + extractfilename(fromfile) + '''');
              Datam1.Query2.SQL.Add(',FileServer=' + '''' + fileserver + '''');
              // ## NAN 20150204
              if PDFMasterOK then
                Datam1.Query2.SQL.Add(',pdfmaster=mastercopyseparationset');
              Datam1.Query2.SQL.Add(' where mastercopyseparationset = ' +
                IntToStr(SuperHSdata[ARow - 1].mastercopyseparationset));
              Datam1.Query2.SQL.Add(' and locationid = ' + IntToStr(mainlocid));
              Datam1.Query2.SQL.Add(' and colorid = ' +
                FormUknownfiles.ListViewunkowfiles.Items[i].SubItems[5]);

              // ## NAN 20150204 added these two lines
              trysql(Datam1.Query2);
              Datam1.Query2.SQL.Clear;

              Datam1.Query2.SQL.Add('update pagetable');
              Datam1.Query2.SQL.Add
                ('Set status = 10, miscint4 = 0,version=1,proofstatus=0,inputtime = getdate(),filename='
                + '''' + extractfilename(fromfile) + '''');
              Datam1.Query2.SQL.Add(',FileServer=' + '''' + fileserver + '''');
              // ## NAN 20150204
              if PDFMasterOK then
                Datam1.Query2.SQL.Add(',pdfmaster=mastercopyseparationset');
              Datam1.Query2.SQL.Add(' where mastercopyseparationset = ' +
                IntToStr(SuperHSdata[ARow - 1].mastercopyseparationset));
              Datam1.Query2.SQL.Add(' and locationid <> ' +
                IntToStr(mainlocid));
              Datam1.Query2.SQL.Add(' and colorid = ' +
                FormUknownfiles.ListViewunkowfiles.Items[i].SubItems[5]);

              if Prefs.Debug then
                Datam1.Query2.SQL.SaveToFile
                  (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
                  'sqllogs\' + 'PAdragerrorfile.SQL');
              trysql(Datam1.Query2);
              DeleteFile(fromfile);
            end
            else
            begin
              MessageDlg(InfraLanguage1.Translate('Unable to move ') + #13 +
                FormUknownfiles.ListViewunkowfiles.Items[i].caption +
                ' into fileserver', mtError, [mbOk], 0);

            end;
          end;
        end;
      End
      else
      begin
        (*
          Datam1.Query2.SQL.Clear;
          Datam1.Query2.SQL.Add('select status,miscint4 from pagetable');
          Datam1.Query2.SQL.Add(' where mastercopyseparationset = ' +IntToStr(SuperHSdata[ARow-1].MasterCopySeparationSet));
          Datam1.Query2.SQL.Add('And status IN (5,15,25,35,45) or miscint4 = 1 and active = 1');
          Datam1.Query2.Open;
          pageisinuse := not Datam1.Query2.Eof;
          Datam1.Query2.Close;
          if pageisinuse then
          begin
          if MessageDlg(InfraLanguage1.Translate('The destination page since it is currently in use '),mtwarning, [mbIgnore	, mbAbort	], 0) = mrAbort then
          exit;
          end;
        *)
        fromfile := FormUknownfiles.ListViewunkowfiles.Selected.SubItems[3];

        if (Prefs.NewCCFilesNames) then
          tofile := getfileserverFrommaster(PATHTYPE_CCFILES,
            SuperHSdata[ARow - 1].mastercopyseparationset) +
            extractfilename(fromfile) + '====' +
            IntToStr(SuperHSdata[ARow - 1].mastercopyseparationset) + '.' +
            tNames1.ColornameIDtoname(SuperHSdata[ARow - 1].Colorid)
        else
          tofile := getfileserverFrommaster(PATHTYPE_CCFILES,
            SuperHSdata[ARow - 1].mastercopyseparationset) +
            IntToStr(SuperHSdata[ARow - 1].mastercopyseparationset) + '.' +
            tNames1.ColornameIDtoname(SuperHSdata[ARow - 1].Colorid);

        fromfile := FormUknownfiles.ListViewunkowfiles.Selected.SubItems[3];
        fileserver := getfileserverFrommaster2
          (SuperHSdata[ARow - 1].mastercopyseparationset);

        if CopyFile(PChar(fromfile), PChar(tofile), false) then
        begin
          Datam1.Query2.SQL.Clear;
          Datam1.Query2.SQL.Add
            ('Select TOP 1 MainLocationID from GeneralPreferences');
          Datam1.Query2.Open;
          if not Datam1.Query2.Eof then
            mainlocid := Datam1.Query2.Fields[0].AsInteger;
          Datam1.Query2.Close;

          Datam1.Query2.SQL.Clear;
          Datam1.Query2.SQL.Add('update pagetable');
          Datam1.Query2.SQL.Add
            ('Set status = 30, miscint4 = 0,proofstatus=0,version=1,inputtime = getdate(),filename='
            + '''' + extractfilename(fromfile) + '''');
          Datam1.Query2.SQL.Add(',FileServer=' + '''' + fileserver + '''');
          // ## NAN 20150204
          if PDFMasterOK then
            Datam1.Query2.SQL.Add(',pdfmaster=mastercopyseparationset');

          Datam1.Query2.SQL.Add(' where mastercopyseparationset = ' +
            IntToStr(SuperHSdata[ARow - 1].mastercopyseparationset));
          Datam1.Query2.SQL.Add(' and locationid = ' + IntToStr(mainlocid));
          Datam1.Query2.SQL.Add(' and colorid = ' +
            IntToStr(SuperHSdata[ARow - 1].Colorid));

          // ## NAN 20150204
          trysql(Datam1.Query2);
          Datam1.Query2.SQL.Clear;

          Datam1.Query2.SQL.Add('update pagetable');
          Datam1.Query2.SQL.Add
            ('Set status = 10, miscint4 = 0,proofstatus=0,version=1,inputtime = getdate(),filename='
            + '''' + extractfilename(fromfile) + '''');
          Datam1.Query2.SQL.Add(',FileServer=' + '''' + fileserver + '''');
          // ## NAN 20150204
          if PDFMasterOK then
            Datam1.Query2.SQL.Add(',pdfmaster=mastercopyseparationset');

          Datam1.Query2.SQL.Add(' where mastercopyseparationset = ' +
            IntToStr(SuperHSdata[ARow - 1].mastercopyseparationset));
          Datam1.Query2.SQL.Add(' and locationid <> ' + IntToStr(mainlocid));
          Datam1.Query2.SQL.Add(' and colorid = ' +
            IntToStr(SuperHSdata[ARow - 1].Colorid));

          if Prefs.Debug then
            Datam1.Query2.SQL.SaveToFile
              (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
              'sqllogs\' + 'PAdragerrorfile.SQL');
          trysql(Datam1.Query2);
          DeleteFile(fromfile);

        end
        else
        begin
          MessageDlg(InfraLanguage1.Translate('Unable to move ') + #13 +
            FormUknownfiles.ListViewunkowfiles.Selected.caption +
            ' into fileserver', mtError, [mbOk], 0);
        end;
      end;
      FormUknownfiles.ActionRefresh.Execute;
    end;
  Except

  end;
  Actionrefreshpages.Execute;

end;

procedure TFormMain.ActionFileserverconnectExecute(Sender: TObject);
begin
  // loadpaths;
  // logontopaths;
end;

procedure TFormMain.ActionglobalfilterrefreshExecute(Sender: TObject);
begin
  case PageControlMain.ActivePageIndex of
    VIEW_SEPARATIONS:
      Actionrefreshpages.Execute;
    VIEW_THUMBNAILS:
      ActionThumbnailrefresh.Execute;
    VIEW_PLATES:
      Actionplaterefresh.Execute;
    VIEW_PRODUCTIONS:
      ActionProgressrefresh.Execute;
    VIEW_EDITIONS:
      ActionEditionrefresh.Execute;
    VIEW_PLANS:
      Actionnewplanrefresh.Execute;
    VIEW_LOGS:
      ActionLogrefresh.Execute;
    VIEW_REPORTS:
      Actionreportrefresh.Execute;
    VIEW_FILES:
      Actionmontorrefresh.Execute;
    VIEW_ACTIVEQUEUE:
      Actionactiverefresh.Execute;

  end;
end;

procedure TFormMain.ActiongloballistrefreshExecute(Sender: TObject);
begin
  case PageControlMain.ActivePageIndex of
    VIEW_SEPARATIONS:
      Actionrefreshpagefilter.Execute;
    VIEW_THUMBNAILS:
      ActionThumbnailFilterrefresh.Execute;
    VIEW_PLATES:
      ActionPlaterefreshtree.Execute;
    VIEW_PRODUCTIONS:
      Actionprogressrefreshfilter.Execute;
    VIEW_EDITIONS:
      Actionrefreshhedtree.Execute;
    VIEW_PLANS:
      Actionnewplanrefresh.Execute;
    VIEW_LOGS:
      ActionLogrefreshfilter.Execute;
    VIEW_REPORTS:
      Actionreportfilter.Execute;
    VIEW_FILES:
      Actionmontorrefresh.Execute;
    VIEW_ACTIVEQUEUE:
      Actionactiverefresh.Execute;
  end;
end;

procedure TFormMain.ActionprodSetImagedExecute(Sender: TObject);
Var
  wherestr: String;
begin
  if TreeViewprodcontrol.Selected = nil then
    exit;
  wherestr := makeprogwherestr('');
  try
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable');
    Datam1.Query1.SQL.Add('set status = 50');
    Datam1.Query1.SQL.Add('where status >=30 and ' + wherestr);
    Datam1.Query1.SQL.Add(WeditionStr);
    trysql(Datam1.Query1);
    Newrefreshprogress;
  Except
  end;
end;

procedure TFormMain.ActionToolOldverExecute(Sender: TObject);
begin
  // FormOldver.Setfilter(0,0,0,0,'',0);
  // FormOldver.showmodal;
end;

procedure TFormMain.ActionpagetreeoldverExecute(Sender: TObject);
begin
  { FormOldver.Setfilter(TTreeViewpagestype(TreeViewpagelist.Selected.data^).pubdate,
    TTreeViewpagestype(TreeViewpagelist.Selected.data^).publicationid,
    TTreeViewpagestype(TreeViewpagelist.Selected.data^).editionid,
    TTreeViewpagestype(TreeViewpagelist.Selected.data^).sectionid,'',0);
    FormOldver.showmodal; }
end;

procedure TFormMain.ActionGlobalselectallExecute(Sender: TObject);
Var
  myRect: TGridRect;
  i: Integer;

begin
  case PageControlMain.ActivePageIndex of
    VIEW_SEPARATIONS:
      begin
        for i := 1 to StringGridHS.RowCount do
        begin
          SuperHSdata[i - 1].Selected := true;
        end;
        myRect.left := 0;
        myRect.Top := 1;
        myRect.right := StringGridHS.ColCount - 1;
        myRect.bottom := StringGridHS.RowCount - 1;
        StringGridHS.Selection := myRect;
        StringGridHS.Repaint;
      end;
    VIEW_THUMBNAILS:
      begin
        PBExListviewthumbnail.SetFocus;
        PBExListviewthumbnail.SelectAll;
      end;
    VIEW_PLATES:
      begin
        if (Viewselected > -1) and (Viewselected <= Nviews) then
        begin
          Views[Viewselected].LPV.SetFocus;
          Views[Viewselected].LPV.SelectAll;
        end;
      end;
    VIEW_PRODUCTIONS:
      begin
        myRect.left := 0;
        myRect.Top := 1;
        myRect.right := StringGridprods.ColCount - 1;
        myRect.bottom := StringGridprods.RowCount - 1;
        StringGridprods.Selection := myRect;
        StringGridprods.Repaint;
      end;
    VIEW_EDITIONS:
      begin
        ListViewEdto.SetFocus;
        ListViewEdto.SelectAll;
      end;
    VIEW_REPORTS:
      begin
        if PageControlreport.ActivePageIndex = 2 then
        begin
          myRect.left := 0;
          myRect.Top := 1;
          myRect.right := StringGridReport.ColCount - 1;
          myRect.bottom := StringGridReport.RowCount - 1;
          StringGridReport.Selection := myRect;
          StringGridReport.Repaint;
        end;
      end;
    VIEW_FILES:
      begin
        ListViewunkowfiles.SetFocus;
        ListViewunkowfiles.SelectAll;
      end;
    VIEW_ACTIVEQUEUE:
      begin
        ListViewActqueue.SetFocus;
        ListViewActqueue.SelectAll;
      end;
  end;
  ActionEnable('ActionGlobalselectallExecute');
end;

procedure TFormMain.ActionglobalextstatExecute(Sender: TObject);
begin
  case PageControlMain.ActivePageIndex of
    VIEW_SEPARATIONS:
      begin
        if ActionpageExtstatus.Enabled then
          ActionpageExtstatus.Execute;
      end;
    VIEW_THUMBNAILS:
      begin
        if Actionthumbnailextstaus.Enabled then
          Actionthumbnailextstaus.Execute;
      end;
    VIEW_PLATES:
      begin
        if Actionplatesextstat.Enabled then
          Actionplatesextstat.Execute;
      end;

  end;
end;
(*

  In Jobcontrol we use  Alt+Key (1-0) for set and CTRL+Key (0-9) for activation.

  I think we should also use the normal Letters for macros.

  Today we use
  CTRL-E  for change external Status,
  CTRL-O  for Options,  CTRL P for autoproofer select,
  CTRL-A select all,
  CTRL-S save as Esko.txt list,
  CTRL-G export file (select Output directory),
  CTRL-M Open Messagefield.

  ??????
  CTRL-I  for ignored forms,

*)

procedure TFormMain.ActionGlobalmarksExecute(Sender: TObject);
begin
  case PageControlMain.ActivePageIndex of
    VIEW_PLATES:
      begin
        if Actionplatemarks.Enabled then
          Actionplatemarks.Execute;
      end;
  end;
end;

procedure TFormMain.ActionglobalproofExecute(Sender: TObject);
begin

  begin
    case PageControlMain.ActivePageIndex of
      VIEW_SEPARATIONS:
        begin
          if Actionpagechangeproofer.Enabled then
            Actionpagechangeproofer.Execute;
        end;
      VIEW_THUMBNAILS:
        begin
          if Actionthumbnailchangeproofer.Enabled then
            Actionthumbnailchangeproofer.Execute;
        end;
      VIEW_PLATES:
        begin
          if Actionplatesoftproof.Enabled then
            Actionplatesoftproof.Execute;
        end;
      VIEW_PRODUCTIONS:
        begin
          if Actionprodsoftproof.Enabled then
            Actionprodsoftproof.Execute;
        end;

    end;
  end;

end;

procedure TFormMain.ActionglobalcommentExecute(Sender: TObject);
begin
  case PageControlMain.ActivePageIndex of
    VIEW_SEPARATIONS:
      begin
        if ActionpageComment.Enabled then
          ActionpageComment.Execute;
      end;
    VIEW_THUMBNAILS:
      begin
        if Actionthumbcomment.Enabled then
          Actionthumbcomment.Execute;
      end;
    VIEW_PLATES:
      begin
        if ActionplateComment.Enabled then
          ActionplateComment.Execute;
      end;
  end;

end;

procedure TFormMain.ActionplatesoftproofExecute(Sender: TObject);
Var
  i: Integer;
  eventtime: TDateTime;
begin
  Formproof.init;
  if Formproof.ShowModal = mrOK then
  begin
    if PBExListviewplateinfo.Focused then
    begin
      for i := 0 to PBExListviewplateinfo.Items.Count - 1 do
      begin
        if PBExListviewplateinfo.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set proofstatus = 0, proofid = ' +
            IntToStr(Formproof.Selectedproofid));
          Datam1.Query1.SQL.Add('where flatseparation = ' +
            PBExListviewplateinfo.Items[i].SubItems
            [PBExListviewplateinfoflatsepsubitem]);
          Datam1.Query1.SQL.Add(WeditionStr);
          Datam1.Query1.SQL.Add(WpublicationStr);
          trysql(Datam1.Query1);
        end;
      end;
    end
    else
    begin
      if not AnyPlatesselected then
        exit;

      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set proofstatus = 0, proofid = ' +
            IntToStr(Formproof.Selectedproofid));
          Datam1.Query1.SQL.Add('where pagetype <> 999');
          Datam1.Query1.SQL.Add('and locationid = ' +
            IntToStr(Views[Viewselected].platesData[i].LocationID));
          Datam1.Query1.SQL.Add('and productionid = ' +
            IntToStr(Views[Viewselected].platesData[i].ProductionID));
          Datam1.Query1.SQL.Add('and CopyFlatSeparationSet = ' +
            IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
          Datam1.Query1.SQL.Add(WeditionStr);
          Datam1.Query1.SQL.Add(WpublicationStr);
          eventtime := -1;
          trysql(Datam1.Query1);
        end;
      end;
    end;
    ActionplaterefreshExecute(FormMain);
  end;
end;

function TFormMain.setAcomment(Var Acomment: String;
  captiontext: String): Integer;
begin

  // FormChangecomment.EditChangeComment.Visible := true;
  // FormChangecomment.ComboBox1.Visible := true;

  // if (FoxrmSettings.Editcommentdata.Text <> '') then
  // begin

  // FormChangecomment.ComboBox1.Clear;
  // FormChangecomment.ComboBox1.Items.Add(Acomment);
  // FormChangecomment.ComboBox1.Items.loadfromfile(FoxrmSettings.Editcommentdata.Text);
  // FormChangecomment.ComboBox1.SetFocus;
  // FormChangecomment.EditChangeComment.Visible := false;

  // end
  // else
  // begin
  FormChangecomment.EditChangeComment.text := Acomment;
  // FormChangecomment.EditChangeComment.SetFocus;
  // FormChangecomment.ComboBox1.Visible := false;
  // end;

  result := 0;
  case FormChangecomment.ShowModal of
    mrOK:
      begin
        result := 1;
        // if (FoxrmSettings.Editcommentdata.Text <> '') then
        // Acomment := FormChangecomment.ComboBox1.Text
        // else
        Acomment := FormChangecomment.EditChangeComment.text;
      end;
    mrNo:
      begin
        result := 2;
      end;

  end;

end;

procedure TFormMain.ActionthumbtreeoldversionsExecute(Sender: TObject);
begin
  {
    FormOldver.Setfilter(TTreeViewpagestype(TreeViewThumbs.Selected.data^).pubdate,
    TTreeViewpagestype(TreeViewThumbs.Selected.data^).publicationid,
    TTreeViewpagestype(TreeViewThumbs.Selected.data^).editionid,
    TTreeViewpagestype(TreeViewThumbs.Selected.data^).sectionid,'',0);
    FormOldver.showmodal;
  }

end;

procedure TFormMain.ActionThumbnailoldversionExecute(Sender: TObject);
begin
  if PBExListviewthumbnail.Selected = nil then
    exit;

  { FormOldver.Setfilter(0,-1,-1,-1,'',
    Showthubms[PBExListviewthumbnail.Selected.Index].Mastercopyseparationset);
    FormOldver.showmodal; }
end;

procedure TFormMain.ActionPlatetreeexternstatExecute(Sender: TObject);
Var
  runnode: TTreeNode;
  pressid: Integer;
  LocationID
  // ,pressrunid
    : Integer;

  Pressrunselstr: string;
  anode, n1, n2, n3: TTreeNode;
  ProductionID: Integer;
begin
  try
    if TreeViewPlateview.Selected = nil then
      exit;
    runnode := TreeViewPlateview.Selected;
    if runnode = nil then
      exit;
    if runnode.Level < 2 then
      exit;
    Pressrunselstr := '(-48';
    ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;
    n1 := runnode;

    if FormChangeextstatus.ShowModal = mrOK then
    begin
      try
        anode := n1;
        if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
        begin
          if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
            Pressrunselstr) = 0 then
            Pressrunselstr := Pressrunselstr + ',' +
              IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
        end;
        n2 := n1.GetFirstChild;
        while n2 <> nil do
        begin
          anode := n2;
          if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
          begin
            if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
              Pressrunselstr) = 0 then
              Pressrunselstr := Pressrunselstr + ',' +
                IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
          end;

          n3 := n2.GetFirstChild;
          while n3 <> nil do
          begin
            anode := n3;
            if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
            begin
              if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
                Pressrunselstr) = 0 then
                Pressrunselstr := Pressrunselstr + ',' +
                  IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
            end;
            n3 := n3.getNextSibling;
          end;
          n2 := n2.getNextSibling;
        end;

      except
      end;

      Pressrunselstr := Pressrunselstr + ') ';

      while runnode.Level > 1 do
        runnode := runnode.Parent;

      pressid := tNames1.pressnametoid(runnode.Parent.text);
      // pressrunid := runnode.StateIndex;
      LocationID := tNames1.locationnametoid(ComboBoxpalocationNY.text);

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      Datam1.Query1.SQL.Add('set externalstatus = ' +
        IntToStr(FormChangeextstatus.selectedexternalstatus));
      Datam1.Query1.SQL.Add('Where active <> -999');
      // Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
      Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
      Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
      // if (locationid > 0) then
      // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(locationid));

      trysql(Datam1.Query1);
      Actionplaterefresh.Execute;
    end;
  Except
  end;

end;

procedure TFormMain.ActionprodtreereleaseExecute(Sender: TObject);
begin
  prodtreerelease(false);

end;

procedure TFormMain.prodtreerelease(Monoonly: Boolean);
Var
  runnode: TTreeNode;
  pressid: Integer;
  LocationID
  // ,pressrunid
    : Integer;

  Pressrunselstr: string;
  anode, n1, n2, n3: TTreeNode;
  ProductionID: Integer;
begin
  try
    if TreeViewprodcontrol.Selected = nil then
      exit;
    runnode := TreeViewprodcontrol.Selected;
    if runnode = nil then
      exit;
    if runnode.Level < 2 then
      exit;
    Pressrunselstr := '(-48';
    ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;
    n1 := runnode;

    Releaseproductionids.Clear;
    ReleasePressrunids.Clear;
    ReleasePlates.Clear;
    Releaseproductionids.Add(IntToStr(ProductionID));

    if not checkdevbeforerelease then
    begin

      exit;
    end;
    try
      anode := n1;
      if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
      begin
        if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
          Pressrunselstr) = 0 then
          Pressrunselstr := Pressrunselstr + ',' +
            IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
      end;
      n2 := n1.GetFirstChild;
      while n2 <> nil do
      begin
        anode := n2;
        if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
        begin
          if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
            Pressrunselstr) = 0 then
            Pressrunselstr := Pressrunselstr + ',' +
              IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
        end;

        n3 := n2.GetFirstChild;
        while n3 <> nil do
        begin
          anode := n3;
          if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
          begin
            if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
              Pressrunselstr) = 0 then
              Pressrunselstr := Pressrunselstr + ',' +
                IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
          end;
          n3 := n3.getNextSibling;
        end;
        n2 := n2.getNextSibling;
      end;

    except
    end;

    Pressrunselstr := Pressrunselstr + ') ';

    while runnode.Level > 1 do
      runnode := runnode.Parent;

    pressid := tNames1.pressnametoid(runnode.Parent.text);
    // pressrunid := runnode.StateIndex;
    LocationID := tNames1.locationnametoid(ComboBoxpalocationNY.text);

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable');
    Datam1.Query1.SQL.Add('Set hold = 0'); // OK
    if (Prefs.SetApproveTimeOnRelease) then
      Datam1.Query1.SQL.Add(', approvetime = getdate(),approveuser=' + '''' +
        Prefs.Username + '''');
    Datam1.Query1.SQL.Add('Where active <> -999');
    // if (pressid > 0) then
    // Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
    Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
    Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
    // if (locationID > 0) then
    // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(locationid));
    if Monoonly then
      Datam1.Query1.SQL.Add('and colorid = 4 ');

    trysql(Datam1.Query1);
    if (Prefs.LogRelease) then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select filename,version,separation,productionid from pagetable (NOLOCK)');
      Datam1.Query1.SQL.Add('Where active <> -999');
      // Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
      Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
      Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
      // if (locationID > 0) then
      // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(locationid));

      Datam1.Query1.Open;
      while not Datam1.Query1.Eof do
      begin
        FormMain.SaveEventlog(80, Datam1.Query1.Fields[2].AsInteger, 0, '',
          Datam1.Query1.Fields[0].AsString, Datam1.Query1.Fields[1].AsInteger,
          Datam1.Query1.Fields[3].AsInteger);
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;
    end;

    Actionplaterefresh.Execute;

  Except
  end;

end;


// HUSK LIGE ComboBoxprodlocation locationid

procedure TFormMain.ActionprodtreeHoldExecute(Sender: TObject);
Var
  runnode: TTreeNode;
  pressid: Integer;
  LocationID
  // ,pressrunid
    : Integer;

  Pressrunselstr: string;
  anode, n1, n2, n3: TTreeNode;
  ProductionID: Integer;
  doHold: Boolean;
begin
  try
    if TreeViewprodcontrol.Selected = nil then
      exit;
    runnode := TreeViewprodcontrol.Selected;
    if runnode = nil then
      exit;

    // if runnode.Level < 2 then exit;

    doHold := true;
    if runnode.Level < 2 then
      doHold := MessageDlg
        (InfraLanguage1.Translate('Really hold all productions on this date?'),
        mtConfirmation, [mbYes, mbNo], 0) = mryes;

    if (doHold = false) then
      exit;

    Pressrunselstr := '(-48';
    ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;
    n1 := runnode;

    try
      anode := n1;
      if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
      begin
        if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
          Pressrunselstr) = 0 then
          Pressrunselstr := Pressrunselstr + ',' +
            IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
      end;
      n2 := n1.GetFirstChild;
      while n2 <> nil do
      begin
        anode := n2;
        if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
        begin
          if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
            Pressrunselstr) = 0 then
            Pressrunselstr := Pressrunselstr + ',' +
              IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
        end;

        n3 := n2.GetFirstChild;
        while n3 <> nil do
        begin
          anode := n3;
          if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
          begin
            if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
              Pressrunselstr) = 0 then
              Pressrunselstr := Pressrunselstr + ',' +
                IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
          end;
          n3 := n3.getNextSibling;
        end;
        n2 := n2.getNextSibling;
      end;

    except
    end;

    Pressrunselstr := Pressrunselstr + ') ';

    while runnode.Level > 1 do
      runnode := runnode.Parent;

    pressid := tNames1.pressnametoid(runnode.Parent.text);
    // pressrunid := runnode.StateIndex;
    if ComboBoxpalocationNY.Enabled then
      LocationID := tNames1.locationnametoid(ComboBoxpalocationNY.text)
    else
      LocationID := -1;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable');
    Datam1.Query1.SQL.Add('Set hold = 1');
    Datam1.Query1.SQL.Add('Where active <> -999');
    // Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
    Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
    Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
    // if (locationid > 0) then
    // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(locationid));

    trysql(Datam1.Query1);
    if (Prefs.LogRelease) then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select filename,version,separation,productionid from pagetable (NOLOCK)');
      Datam1.Query1.SQL.Add('Where active <> -999');
      // Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
      Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
      Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
      // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(locationid));

      Datam1.Query1.Open;
      while not Datam1.Query1.Eof do
      begin
        FormMain.SaveEventlog(81, Datam1.Query1.Fields[2].AsInteger, 0, '',
          Datam1.Query1.Fields[0].AsString, Datam1.Query1.Fields[1].AsInteger,
          Datam1.Query1.Fields[3].AsInteger);
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;
    end;

    Actionplaterefresh.Execute;

  Except
  end;

end;

procedure TFormMain.ActionprodtreePRIExecute(Sender: TObject);
Var
  runnode: TTreeNode;
  pressid: Integer;
  LocationID, pressrunid: Integer;
  Pressrunselstr: string;
  anode, n1, n2, n3: TTreeNode;
  ProductionID: Integer;
begin
  try
    if TreeViewprodcontrol.Selected = nil then
      exit;
    runnode := TreeViewprodcontrol.Selected;
    if runnode = nil then
      exit;
    if runnode.Level < 2 then
      exit;
    if runnode.Level < 2 then
      exit;
    Pressrunselstr := '(-48';
    ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;
    n1 := runnode;

    try
      anode := n1;
      if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
      begin
        if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
          Pressrunselstr) = 0 then
          Pressrunselstr := Pressrunselstr + ',' +
            IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
      end;
      n2 := n1.GetFirstChild;
      while n2 <> nil do
      begin
        anode := n2;
        if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
        begin
          if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
            Pressrunselstr) = 0 then
            Pressrunselstr := Pressrunselstr + ',' +
              IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
        end;

        n3 := n2.GetFirstChild;
        while n3 <> nil do
        begin
          anode := n3;
          if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
          begin
            if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
              Pressrunselstr) = 0 then
              Pressrunselstr := Pressrunselstr + ',' +
                IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
          end;
          n3 := n3.getNextSibling;
        end;
        n2 := n2.getNextSibling;
      end;

    except
    end;

    Pressrunselstr := Pressrunselstr + ') ';

    while runnode.Level > 1 do
      runnode := runnode.Parent;

    pressid := tNames1.pressnametoid(runnode.Parent.text);

    pressrunid := runnode.StateIndex;

    if ComboBoxpalocationNY.Enabled then
      LocationID := tNames1.locationnametoid(ComboBoxpalocationNY.text)
    else
      LocationID := -1;
    if Formpriority.ShowModal = mrOK then
    begin

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      Datam1.Query1.SQL.Add('Set priority = ' + Formpriority.edit1.text);
      Datam1.Query1.SQL.Add('Where active <> -999');
      // Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
      Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
      Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
      // if locationid > 0 then
      // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(locationid));

      trysql(Datam1.Query1);

    end;

  Except
  end;

end;

procedure TFormMain.ActionprodtreerApproveExecute(Sender: TObject);
Var
  Alocationid: Integer;
begin
  try
    if TreeViewprodcontrol.Selected = nil then
      exit;

    if (Prefs.LogApproval) then
    begin
      try
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('Select filename,version,separation,productionid from pagetable (NOLOCK)');
        Datam1.Query1.SQL.Add('Where active <> -999');
        Datam1.Query1.SQL.Add('and approved <> 1 ');

        if TTreeViewpagestype(TreeViewprodcontrol.Selected.Data^)
          .Publicationid > -1 then
          Datam1.Query1.SQL.Add('and publicationid = ' +
            IntToStr(TTreeViewpagestype(TreeViewprodcontrol.Selected.Data^)
            .Publicationid));
        if TTreeViewpagestype(TreeViewprodcontrol.Selected.Data^).editionid > -1
        then
          Datam1.Query1.SQL.Add('and editionid = ' +
            IntToStr(TTreeViewpagestype(TreeViewprodcontrol.Selected.Data^)
            .editionid));
        if TTreeViewpagestype(TreeViewprodcontrol.Selected.Data^).Sectionid > -1
        then
          Datam1.Query1.SQL.Add('and sectionid = ' +
            IntToStr(TTreeViewpagestype(TreeViewprodcontrol.Selected.Data^)
            .Sectionid));
        if TTreeViewpagestype(TreeViewprodcontrol.Selected.Data^).Pubdate > 0
        then
          Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
            TTreeViewpagestype(TreeViewprodcontrol.Selected.Data^).Pubdate));

        Alocationid := GetSelectedLocationID();
        if (Alocationid > 0) then
          Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

        Datam1.Query1.SQL.Add
          ('order by publicationid,editionid,separationid,pagename,colorid ');

        Datam1.Query1.Open;
        while not Datam1.Query1.Eof do
        begin
          FormMain.SaveEventlog(70, Datam1.Query1.Fields[2].AsInteger, 0, '',
            Datam1.Query1.Fields[0].AsString, Datam1.Query1.Fields[1].AsInteger,
            Datam1.Query1.Fields[3].AsInteger);
          Datam1.Query1.Next;
        end;
        Datam1.Query1.Close;
      except
      end;
    end;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable');
    Datam1.Query1.SQL.Add('Set approved = 1');
    Datam1.Query1.SQL.Add('Where active <> -999');
    if TTreeViewpagestype(TreeViewprodcontrol.Selected.Data^).Publicationid > -1
    then
      Datam1.Query1.SQL.Add('and publicationid = ' +
        IntToStr(TTreeViewpagestype(TreeViewprodcontrol.Selected.Data^)
        .Publicationid));
    if TTreeViewpagestype(TreeViewprodcontrol.Selected.Data^).editionid > -1
    then
      Datam1.Query1.SQL.Add('and editionid = ' +
        IntToStr(TTreeViewpagestype(TreeViewprodcontrol.Selected.Data^)
        .editionid));
    if TTreeViewpagestype(TreeViewprodcontrol.Selected.Data^).Sectionid > -1
    then
      Datam1.Query1.SQL.Add('and sectionid = ' +
        IntToStr(TTreeViewpagestype(TreeViewprodcontrol.Selected.Data^)
        .Sectionid));
    if TTreeViewpagestype(TreeViewprodcontrol.Selected.Data^).Pubdate > 0 then
      Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
        TTreeViewpagestype(TreeViewprodcontrol.Selected.Data^).Pubdate));

    Alocationid := GetSelectedLocationID();
    if (Alocationid > 0) then
      Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

    trysql(Datam1.Query1);

    ActionProgressrefresh.Execute;

  Except
  end;
end;

(*
  Var
  runnode : ttreenode;
  pressid : Integer;
  locationid,pressrunid : Integer;

  Pressrunselstr : string;
  anode,n1,n2,n3 : ttreenode;
  productionid : Integer;
  begin
  try
  if TreeViewprodcontrol.Selected = nil then exit;
  runnode := TreeViewprodcontrol.Selected;
  if runnode = nil then exit;
  if runnode.Level < 2 then exit;
  Pressrunselstr := '(-48';
  productionid := TTreeViewpagestype(runnode.data^).productionid;
  n1 := runnode;

  try
  anode := n1;
  if TTreeViewpagestype(anode.data^).pressrunid > 0 then
  begin
  if pos(','+IntToStr(TTreeViewpagestype(anode.data^).pressrunid),Pressrunselstr) = 0 then
  Pressrunselstr := Pressrunselstr + ','+IntToStr(TTreeViewpagestype(anode.data^).pressrunid);
  end;
  n2 := n1.GetFirstChild;
  while n2 <> nil do
  begin
  anode := n2;
  if TTreeViewpagestype(anode.data^).pressrunid > 0 then
  begin
  if pos(','+IntToStr(TTreeViewpagestype(anode.data^).pressrunid),Pressrunselstr) = 0 then
  Pressrunselstr := Pressrunselstr + ','+IntToStr(TTreeViewpagestype(anode.data^).pressrunid);
  end;

  n3 := n2.GetFirstChild;
  while n3 <> nil do
  begin
  anode := n3;
  if TTreeViewpagestype(anode.data^).pressrunid > 0 then
  begin
  if pos(','+IntToStr(TTreeViewpagestype(anode.data^).pressrunid),Pressrunselstr) = 0 then
  Pressrunselstr := Pressrunselstr + ','+IntToStr(TTreeViewpagestype(anode.data^).pressrunid);
  end;
  n3 := n3.getNextSibling;
  end;
  n2 := n2.getNextSibling;
  end;

  except
  end;

  Pressrunselstr := Pressrunselstr+') ';



  while runnode.Level > 1 do
  runnode := runnode.Parent;

  pressid := tnames1.pressnametoid(runnode.Parent.Text);
  //pressrunid := runnode.StateIndex;
  locationid := tnames1.locationnametoid(ComboBoxprodlocation.Text);
  if FoxrmSettings.CheckBoxlogapprove.Checked then
  begin
  try
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('Select filename,version,separation,productionid from pagetable ');
  Datam1.Query1.SQL.Add('Where active <> -999');
  Datam1.Query1.SQL.Add('and approved <> 1');
  //Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
  Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
  Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(productionid));
  Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(locationid));

  Datam1.Query1.Open;
  while not Datam1.Query1.Eof do
  begin
  FormMain.SaveEventlog(70,Datam1.Query1.Fields[2].AsInteger,0,'',Datam1.Query1.Fields[0].AsString,Datam1.Query1.Fields[1].AsInteger,Datam1.Query1.Fields[3].AsInteger);
  Datam1.Query1.Next;
  end;
  Datam1.Query1.Close;
  Except
  end;
  end;


  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('update pagetable');
  Datam1.Query1.SQL.Add('Set approved = 1');
  Datam1.Query1.SQL.Add('Where active <> -999');
  Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
  Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
  Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(productionid));
  Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(locationid));

  trysql(Datam1.Query1);

  Actionplaterefresh.Execute;

  Except
  end;


  end;
*)
procedure TFormMain.ActionprodtreeLayoutExecute(Sender: TObject);
Var
  tmpl: string;
  // flatseparationset : string;
  // i : Integer;

  runnode: TTreeNode;
  pressid: Integer;
  LocationID, pressrunid: Integer;
  Fromtemplateid, Fromtemplatelistid: Integer;
  Pressrunselstr: string;
  anode, n1, n2, n3: TTreeNode;
  ProductionID: Integer;
begin
  Fromtemplatelistid := 0;
  try
    if TreeViewprodcontrol.Selected = nil then
      exit;
    runnode := TreeViewprodcontrol.Selected;
    if runnode = nil then
      exit;
    if runnode.Level < 2 then
      exit;
    if runnode.Level < 2 then
      exit;
    Pressrunselstr := '(-48';
    ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;
    n1 := runnode;

    try
      anode := n1;
      if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
      begin
        if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
          Pressrunselstr) = 0 then
          Pressrunselstr := Pressrunselstr + ',' +
            IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
      end;
      n2 := n1.GetFirstChild;
      while n2 <> nil do
      begin
        anode := n2;
        if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
        begin
          if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
            Pressrunselstr) = 0 then
            Pressrunselstr := Pressrunselstr + ',' +
              IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
        end;

        n3 := n2.GetFirstChild;
        while n3 <> nil do
        begin
          anode := n3;
          if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
          begin
            if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
              Pressrunselstr) = 0 then
              Pressrunselstr := Pressrunselstr + ',' +
                IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
          end;
          n3 := n3.getNextSibling;
        end;
        n2 := n2.getNextSibling;
      end;

    except
    end;

    Pressrunselstr := Pressrunselstr + ') ';

    while runnode.Level > 1 do
      runnode := runnode.Parent;

    pressid := tNames1.pressnametoid(runnode.Parent.text);

    pressrunid := runnode.StateIndex;
    if ComboBoxpalocationNY.Enabled then
      LocationID := tNames1.locationnametoid(ComboBoxpalocationNY.text)
    else
      LocationID := -1;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Select TOP 1 templateid from pagetable (NOLOCK)');
    Datam1.Query1.SQL.Add('Where active <> -999');
    // Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
    Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
    Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
    // if locationID > 0 then
    // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(locationid));

    FormMain.Tryopen(Datam1.Query1);
    tmpl := '';
    if not Datam1.Query1.Eof then
    begin
      Fromtemplateid := Datam1.Query1.Fields[0].AsInteger;
      Fromtemplatelistid := inittypes.gettemplatenumberfromID(Fromtemplateid);
      tmpl := PlatetemplateArray[Fromtemplatelistid].TemplateName;
    end;
    Datam1.Query1.Close;

    inittypes.getdevicelistfromtemplate(Fromtemplatelistid);

    FormChlayout.Aktpressname := tNames1.pressnameIDtoname(pressid);
    FormChlayout.Curtemplate := PlatetemplateArray[Fromtemplatelistid]
      .TemplateName;
    if FormChlayout.ShowModal = mrOK then
    begin
      if FormChlayout.Newtemplatelistid <> Fromtemplatelistid then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('update pagetable');
        Datam1.Query1.SQL.Add('set deviceid = 0');
        Datam1.Query1.SQL.Add(', templateid = ' +
          IntToStr(PlatetemplateArray[FormChlayout.Newtemplatelistid]
          .TemplateID));
        Datam1.Query1.SQL.Add('Where active <> -999');
        // Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
        Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
        Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
        // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(locationid));
        Datam1.Query1.SQL.Add(WeditionStr);
        trysql(Datam1.Query1);
      end;

    end;

  Finally
    if not loadplateview(true, false) then
      plateviewtreedeselect;
  end;

end;

procedure TFormMain.ActionprodtreeFlatproofExecute(Sender: TObject);
Var
  runnode: TTreeNode;
  pressid: Integer;
  LocationID, pressrunid: Integer;
  Pressrunselstr: string;
  anode, n1, n2, n3: TTreeNode;
  ProductionID: Integer;
begin
  try
    LocationID := 0;
    if TreeViewprodcontrol.Selected = nil then
      exit;
    Formflatproof.Publicationid := -1;

    if TTreeViewpagestype(TreeViewprodcontrol.Selected.Data^).Publicationid > -1
    then
      Formflatproof.Publicationid :=
        TTreeViewpagestype(TreeViewprodcontrol.Selected.Data^).Publicationid;

    if Formflatproof.ShowModal = mrOK then
    begin

      runnode := TreeViewprodcontrol.Selected;
      if runnode = nil then
        exit;
      Pressrunselstr := '(-48';
      ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;
      n1 := runnode;

      try
        anode := n1;
        if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
        begin
          if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
            Pressrunselstr) = 0 then
            Pressrunselstr := Pressrunselstr + ',' +
              IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
        end;
        n2 := n1.GetFirstChild;
        while n2 <> nil do
        begin
          anode := n2;
          if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
          begin
            if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
              Pressrunselstr) = 0 then
              Pressrunselstr := Pressrunselstr + ',' +
                IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
          end;

          n3 := n2.GetFirstChild;
          while n3 <> nil do
          begin
            anode := n3;
            if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
            begin
              if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
                Pressrunselstr) = 0 then
                Pressrunselstr := Pressrunselstr + ',' +
                  IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
            end;
            n3 := n3.getNextSibling;
          end;
          n2 := n2.getNextSibling;
        end;

      except
      end;

      Pressrunselstr := Pressrunselstr + ') ';

      while runnode.Level > 1 do
        runnode := runnode.Parent;

      pressid := tNames1.pressnametoid(runnode.Parent.text);
      pressrunid := runnode.StateIndex;
      if ComboBoxpalocationNY.Enabled then
        LocationID := tNames1.locationnametoid(ComboBoxpalocationNY.text)
      else
        LocationID := -1;

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      Datam1.Query1.SQL.Add
        ('Set flatproofstatus = 0 ,FlatProofConfigurationID = ' +
        IntToStr(Formflatproof.Flatproofconfig));
      Datam1.Query1.SQL.Add('Where active <> -999');
      // Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
      Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
      Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
      // if (locationid > 0) then
      // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(locationid));

      trysql(Datam1.Query1);

      Actionplaterefresh.Execute;
    end;

  Except
  end;

end;

procedure TFormMain.ActionprodtreeCommentExecute(Sender: TObject);
Var
  runnode: TTreeNode;
  pressid: Integer;
  // locationid,
  // pressrunid : Integer;

  Pressrunselstr: string;
  anode, n1, n2, n3: TTreeNode;
  ProductionID: Integer;
  T: string;
begin
  try

    if TreeViewprodcontrol.Selected = nil then
      exit;
    runnode := TreeViewprodcontrol.Selected;
    if runnode = nil then
      exit;
    if runnode.Level < 2 then
      exit;
    Pressrunselstr := '(-48';
    ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;
    n1 := runnode;

    setAcommentResult := setAcomment(T, 'Set pressrun comment');
    if setAcommentResult = 2 then
      T := '';
    if setAcommentResult > 0 then
    begin
      try
        anode := n1;
        if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
        begin
          if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
            Pressrunselstr) = 0 then
            Pressrunselstr := Pressrunselstr + ',' +
              IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
        end;
        n2 := n1.GetFirstChild;
        while n2 <> nil do
        begin
          anode := n2;
          if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
          begin
            if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
              Pressrunselstr) = 0 then
              Pressrunselstr := Pressrunselstr + ',' +
                IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
          end;

          n3 := n2.GetFirstChild;
          while n3 <> nil do
          begin
            anode := n3;
            if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
            begin
              if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
                Pressrunselstr) = 0 then
                Pressrunselstr := Pressrunselstr + ',' +
                  IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
            end;
            n3 := n3.getNextSibling;
          end;
          n2 := n2.getNextSibling;
        end;

      except
      end;

      Pressrunselstr := Pressrunselstr + ') ';

      while runnode.Level > 1 do
        runnode := runnode.Parent;

      pressid := tNames1.pressnametoid(runnode.Parent.text);

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pressrunid ');
      Datam1.Query1.SQL.Add('Set Comment = ' + '''' + T + '''');
      Datam1.Query1.SQL.Add('Where pressrunid IN ' + Pressrunselstr);
      trysql(Datam1.Query1);

      Actionprogressrefreshfilter.Execute;

    end;

  Except
  end;
end;

procedure TFormMain.ActionprodtreeStackposExecute(Sender: TObject);
Var
  runnode: TTreeNode;
  pressid: Integer;
  LocationID
  // ,pressrunid
    : Integer;

  T, Pressrunselstr: string;
  anode, n1, n2, n3: TTreeNode;
  ProductionID, i: Integer;
begin
  try

    if TreeViewprodcontrol.Selected = nil then
      exit;
    runnode := TreeViewprodcontrol.Selected;
    if runnode = nil then
      exit;
    if runnode.Level < 2 then
      exit;
    Pressrunselstr := '(-48';
    ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;
    n1 := runnode;
    Formeditatext.Label1.caption := InfraLanguage1.Translate('Stackposition');
    Formeditatext.ComboBox1.Items.Clear;

    for i := 0 to Length(Prefs.StackNamesList) - 1 do
      Formeditatext.ComboBox1.Items.Add(Prefs.StackNamesList[i]);
    Formeditatext.ComboBox1.text := '';

    if Formeditatext.ShowModal = mrOK then
    begin
      try
        anode := n1;
        if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
        begin
          if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
            Pressrunselstr) = 0 then
            Pressrunselstr := Pressrunselstr + ',' +
              IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
        end;
        n2 := n1.GetFirstChild;
        while n2 <> nil do
        begin
          anode := n2;
          if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
          begin
            if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
              Pressrunselstr) = 0 then
              Pressrunselstr := Pressrunselstr + ',' +
                IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
          end;

          n3 := n2.GetFirstChild;
          while n3 <> nil do
          begin
            anode := n3;
            if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
            begin
              if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
                Pressrunselstr) = 0 then
                Pressrunselstr := Pressrunselstr + ',' +
                  IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
            end;
            n3 := n3.getNextSibling;
          end;
          n2 := n2.getNextSibling;
        end;

      except
      end;

      Pressrunselstr := Pressrunselstr + ') ';

      while runnode.Level > 1 do
        runnode := runnode.Parent;

      pressid := tNames1.pressnametoid(runnode.Parent.text);
      // pressrunid := runnode.StateIndex;
      if ComboBoxpalocationNY.Enabled then
        LocationID := tNames1.locationnametoid(ComboBoxpalocationNY.text)
      else
        LocationID := -1;
      T := Formeditatext.ComboBox1.text;

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      if (Prefs.OrStackpositionsTogether) then
        Datam1.Query1.SQL.Add('set SortingPosition = ' + '''' + T + '''' +
          ' +SUBSTRING(SortingPosition,' + IntToStr(Length(T) + 1) +
          ',DATALength(SortingPosition))')
      else
        Datam1.Query1.SQL.Add('set sortingposition = ' + '''' + T + '''');

      // Datam1.Query1.SQL.Add('Set sortingposition = ' + ''''+Formeditatext.ComboBox1.Text+'''');
      Datam1.Query1.SQL.Add('Where active <> -999');
      // Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
      Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
      Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
      // if (locationid > 0) then
      // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(locationid));

      trysql(Datam1.Query1);
    end;
    Actionplaterefresh.Execute;

  Except
  end;

end;

procedure TFormMain.ActionprodtreeScheduleExecute(Sender: TObject);
Var
  runnode, pressnode: TTreeNode;
begin
  if TreeViewprodcontrol.Selected = nil then
    exit;
  runnode := TreeViewprodcontrol.Selected;
  if runnode = nil then
    exit;
  if runnode.Level < 1 then
    exit;

  pressnode := runnode;
  while pressnode.Level > 0 do
  begin
    pressnode := pressnode.Parent;
  end;
  FormSetschedules.pressid := tNames1.pressnametoid(pressnode.text);
  FormSetschedules.Publicationid := -1;
  FormSetschedules.editionid := -1;
  FormSetschedules.Sectionid := -1;

  try
    while runnode.Level > 0 do
    begin
      case TTreeViewpagestype(runnode.Data^).kind of
        1:
          begin
            FormSetschedules.Pubdate :=
              TTreeViewpagestype(runnode.Data^).Pubdate;
          end;
        2:
          begin
            FormSetschedules.Publicationid := TTreeViewpagestype(runnode.Data^)
              .Publicationid;
          end;
        4:
          begin
            FormSetschedules.editionid := TTreeViewpagestype(runnode.Data^)
              .editionid;
          end;
        5:
          begin
            FormSetschedules.Sectionid := TTreeViewpagestype(runnode.Data^)
              .Sectionid;
          end;
      end;
      runnode := runnode.Parent;
    end;

    if FormSetschedules.initselection then
    begin
      FormSetschedules.ShowModal;
    end;
  Except

  end;
end;

procedure TFormMain.ActionprodtreeExternalstatExecute(Sender: TObject);
Var
  runnode: TTreeNode;
  pressid: Integer;
  LocationID
  // ,pressrunid
    : Integer;

  Pressrunselstr: string;
  anode, n1, n2, n3: TTreeNode;
  ProductionID: Integer;
begin
  try
    if TreeViewprodcontrol.Selected = nil then
      exit;
    runnode := TreeViewprodcontrol.Selected;
    if runnode = nil then
      exit;
    if runnode.Level < 2 then
      exit;
    Pressrunselstr := '(-48';
    ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;
    n1 := runnode;

    if FormChangeextstatus.ShowModal = mrOK then
    begin
      try
        anode := n1;
        if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
        begin
          if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
            Pressrunselstr) = 0 then
            Pressrunselstr := Pressrunselstr + ',' +
              IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
        end;
        n2 := n1.GetFirstChild;
        while n2 <> nil do
        begin
          anode := n2;
          if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
          begin
            if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
              Pressrunselstr) = 0 then
              Pressrunselstr := Pressrunselstr + ',' +
                IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
          end;

          n3 := n2.GetFirstChild;
          while n3 <> nil do
          begin
            anode := n3;
            if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
            begin
              if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
                Pressrunselstr) = 0 then
                Pressrunselstr := Pressrunselstr + ',' +
                  IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
            end;
            n3 := n3.getNextSibling;
          end;
          n2 := n2.getNextSibling;
        end;

      except
      end;

      Pressrunselstr := Pressrunselstr + ') ';

      while runnode.Level > 1 do
        runnode := runnode.Parent;

      pressid := tNames1.pressnametoid(runnode.Parent.text);
      // pressrunid := runnode.StateIndex;
      if ComboBoxpalocationNY.Enabled then
        LocationID := tNames1.locationnametoid(ComboBoxpalocationNY.text)
      else
        LocationID := -1;

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      Datam1.Query1.SQL.Add('set externalstatus = ' +
        IntToStr(FormChangeextstatus.selectedexternalstatus));
      Datam1.Query1.SQL.Add('Where active <> -999');
      // Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
      Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
      Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
      // if (locationID > 0) then
      // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(locationid));

      trysql(Datam1.Query1);
      Actionplaterefresh.Execute;
    end;
  Except
  end;

end;

function TFormMain.makepressrunprodwhere(p1: String): String;
Var
  i: Integer;
  wherestr: string;
  // INcopies,INpressrunids : String;

begin
  if TreeViewprodcontrol.Selected = nil then
    exit;
  if TreeViewprodcontrol.Selected.Level < 0 then
    exit;

  wherestr := '(-99';
  for i := 1 to StringGridprods.RowCount do
  begin
    if StringGridprodsdata[i].Selected then
    begin
      wherestr := wherestr + ' , ' +
        IntToStr(StringGridprodsdata[i].pressrunid);
    end;
  end;

  wherestr := wherestr + ')';

  result := wherestr;
end;

// CHANGED 20180115 NAN to ProductionNames (wa PressRunID)
procedure TFormMain.ActionprodOrdernumberExecute(Sender: TObject);

Var
  i, ProductionID: Integer;
  S: string;
begin
  ProductionID := 0;
  if TreeViewprodcontrol.Selected = nil then
    exit;

  for i := 1 to StringGridprods.RowCount do
  begin
    if StringGridprodsdata[i].Selected then
    begin
      ProductionID := StringGridprodsdata[i].ProductionID;
      break;
    end;
  end;

  if (ProductionID = 0) then
    exit;

  Formeditatext.ComboBox1.text := '';
  Formeditatext.ComboBox1.Items.Clear;

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('SELECT OrderNumber FROM ProductionNames WHERE ProductionID=' +
    IntToStr(ProductionID));
  Datam1.Query1.Open;
  if not Datam1.Query1.Eof then
  begin
    Formeditatext.ComboBox1.Items.Add(Datam1.Query1.Fields[0].AsString);
    Formeditatext.ComboBox1.ItemIndex := 0;
  end;

  Formeditatext.caption := 'Edit production order number';
  Formeditatext.Label1.caption := 'Order number';

  if Formeditatext.ShowModal = mrOK then
  begin
    try
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update ProductionNames');
      Datam1.Query1.SQL.Add('set OrderNumber = ' + '''' +
        Formeditatext.ComboBox1.text + '''');
      Datam1.Query1.SQL.Add('where productionid =' + IntToStr(ProductionID));

      trysql(Datam1.Query1);
      Newrefreshprogress;
    Except
    end;
  end;
end;

procedure TFormMain.ActionprodcommentExecute(Sender: TObject);
Var
  // I : Integer;
  L: TListItem;
  wherestr: string;
  // loca,press : Integer;

begin

  if TreeViewprodcontrol.Selected = nil then
    exit;
  wherestr := makepressrunprodwhere('');
  Formeditatext.caption := 'Edit Production comment';
  Formeditatext.Label1.caption := 'Production comment';

  if Formeditatext.ShowModal = mrOK then
  begin
    try
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pressrunid');
      Datam1.Query1.SQL.Add('set Comment = ' + '''' +
        Formeditatext.ComboBox1.text + '''');
      Datam1.Query1.SQL.Add('where pressrunid IN ' + wherestr);

      trysql(Datam1.Query1);
      Newrefreshprogress;
    Except
    end;
  end;
end;

procedure TFormMain.ActionprodinkcommentExecute(Sender: TObject);
Var
  // I : Integer;
  // l : tlistitem;
  wherestr: string;
  // loca,press : Integer;

begin

  if TreeViewprodcontrol.Selected = nil then
    exit;
  wherestr := makepressrunprodwhere('');
  Formeditatext.caption := 'Edit ink comment';
  Formeditatext.Label1.caption := 'Ink comment';

  if Formeditatext.ShowModal = mrOK then
  begin
    try
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pressrunid');
      Datam1.Query1.SQL.Add('set InkComment = ' + '''' +
        Formeditatext.ComboBox1.text + '''');
      Datam1.Query1.SQL.Add('where pressrunid IN ' + wherestr);

      trysql(Datam1.Query1);
      Newrefreshprogress;
    Except
    end;
  end;
end;

(*
  procedure TFormMain.Autoplanexport(Autoevent    : Integer; //1=Planning 2=Color change 3=Pagetype change 4=Pforce 5=Reimage
  productionid : Integer;
  pressrunids  : Integer;
  mastercopyseparationset : Integer;
  copyseparationset : Integer;
  separationset : Integer;
  separation : int64;
  copyflatseparationset : Integer;
  flatseparationset : Integer;
  flatseparation : int64);

  begin
  if (Autoevent < 1) or (Autoevent > FoxrmSettings.CheckListBoxPlanexport.Items.Count ) then exit;
  if not FoxrmSettings.CheckListBoxPlanexport.Checked[Autoevent-1] then exit;


  end;
*)
procedure TFormMain.ActionpagetreeexportxmlExecute(Sender: TObject);
begin
  try
    if TreeViewpagelist.Selected = nil then
      exit;

    XMLPublicationID := TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
      .Publicationid;
    XMLPubdate := TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Pubdate;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select TOP 1 pressid from pagetable (NOLOCK) where ');
    Datam1.Query1.SQL.Add(' publicationid = ' + IntToStr(XMLPublicationID));
    Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('', XMLPubdate));
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
      XMLPressID := Datam1.Query1.Fields[0].AsInteger;

    Datam1.Query1.Close;

    DataModuleXML.getfromdatabase
      (TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Publicationid,
      TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Pubdate, -1, -1);

    // DataModuleXML.makexmls('c:\test.xml');
  Except
  end;
end;

procedure TFormMain.ComboBoxPagescopiesChange(Sender: TObject);
begin
  if (PageControlMain.ActivePageIndex = VIEW_SEPARATIONS) and (activated) then
    loadSuperHSDB2(false);
end;

procedure TFormMain.ActionplateplatecopiesExecute(Sender: TObject);
// Var
// I : Integer;
begin
  (*
    if not AnyPlatesselected then exit;

    for i := 0 to Views[Viewselected].LPV.Items.Count-1 do
    begin
    if Views[Viewselected].LPV.Items[i].Selected then
    begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Select max(copynumber) from pagetable ');
    Datam1.Query1.SQL.Add('where CopyFlatSeparationSet = ' + IntToStr(Views[Viewselected].platesData[i].CopyFlatSeparationSet));
    Datam1.Query1.Open;
    FormEditplatecopies.maxcopynumber := Datam1.Query1.Fields[0].AsInteger;
    Datam1.Query1.Close;
    Break;

    end;
    end;

    if FormEditplatecopies.doit then
    begin
    for i := 0 to Views[Viewselected].LPV.Items.Count-1 do
    begin
    if Views[Viewselected].LPV.Items[i].Selected then
    begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable ');
    Datam1.Query1.SQL.Add('set active = 1');
    Datam1.Query1.SQL.Add('where pagetype <> 999');
    Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Views[Viewselected].platesData[i].locationID));
    Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(Views[Viewselected].platesData[i].productionID));
    Datam1.Query1.SQL.Add('and CopyFlatSeparationSet = ' + IntToStr(Views[Viewselected].platesData[i].CopyFlatSeparationSet));
    Datam1.Query1.SQL.Add('and '+FormEditplatecopies.Copyselstr);
    Datam1.Query1.SQL.Add(WeditionStr);
    Datam1.Query1.SQL.Add(WpublicationStr);
    Datam1.Query1.SQL.Add('and exists (select active from pagetable p2 ');
    Datam1.Query1.SQL.Add('Where pagetable.separation = p2.separation and p2.copynumber = 1 and p2.active = 1) ');

    if Prefs.Debug then Datam1.Query1.SQL.SaveToFile(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'+'platecopies.SQL');

    trysql(Datam1.Query1);

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable ');
    Datam1.Query1.SQL.Add('set active = 0');
    Datam1.Query1.SQL.Add('where pagetype <> 999');
    Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Views[Viewselected].platesData[i].locationID));
    Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(Views[Viewselected].platesData[i].productionID));
    Datam1.Query1.SQL.Add('and CopyFlatSeparationSet = ' + IntToStr(Views[Viewselected].platesData[i].CopyFlatSeparationSet));
    Datam1.Query1.SQL.Add('and not '+FormEditplatecopies.Copyselstr);
    Datam1.Query1.SQL.Add(WeditionStr);
    Datam1.Query1.SQL.Add(WpublicationStr);
    if Prefs.Debug then Datam1.Query1.SQL.SaveToFile(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'+'platecopies.SQL');

    trysql(Datam1.Query1);


    end;
    end;
    end;
  *)
end;

procedure TFormMain.ActionsettingstoolbarsExecute(Sender: TObject);
begin
  if Configallowed then
  begin
    FormActionconfig.ShowModal;
  end;
end;

procedure TFormMain.TimerPlatetreekeyTimer(Sender: TObject);
begin
  if not StartuPdone then
    exit;
  // memotestPrefs.Debug.Lines.Add('TimerPlatetreekeyTimer');
  // memotestPrefs.Debug.refresh;
  TimerPlatetreekey.Enabled := false;
  Actionplaterefresh.Execute;
end;

procedure TFormMain.macrosetandsel(Macronum: Integer; Setit: Boolean);
Var
  N, Dnode, Pnode, enode, snode: TTreeNode;
  i: Integer;
  Atree: TTreeView;
begin
  Atree := nil;
  try
    if PageControlMain.ActivePageIndex > 4 then
    begin
      beep;
      exit;
    end;
    case PageControlMain.ActivePageIndex of
      VIEW_SEPARATIONS:
        Atree := TreeViewpagelist;
      VIEW_THUMBNAILS:
        Atree := TreeViewThumbs;
      VIEW_PLATES:
        Atree := TreeViewPlateview;
      VIEW_PRODUCTIONS:
        Atree := TreeViewprodcontrol;
      VIEW_EDITIONS:
        Atree := TreeViewNeweddtree;
    end;

    if Setit then // alt et eller andet
    begin

      if Atree = nil then
        exit;
      if Atree.Selected = nil then
        exit;

      treeShortcuts[Macronum].Pubdate := '';
      treeShortcuts[Macronum].Publication := '';
      treeShortcuts[Macronum].edition := '';
      treeShortcuts[Macronum].section := '';

      N := Atree.Selected;
      while N.Level > 0 do
      begin
        case N.Level of
          1:
            treeShortcuts[Macronum].Pubdate := N.text;
          2:
            treeShortcuts[Macronum].Publication := N.text;
          3:
            treeShortcuts[Macronum].edition := N.text;
          4:
            treeShortcuts[Macronum].section := N.text;
        end;
        N := N.Parent;
      end;

    end;

    if not Setit then
    begin
      Dnode := nil;
      Pnode := nil;
      enode := nil;
      snode := nil;
      if treeShortcuts[Macronum].Pubdate <> '' then
      begin
        for i := 0 to Atree.Items.Count - 1 do
        begin
          if Atree.Items[i].Level = 1 then
          begin
            if treeShortcuts[Macronum].Pubdate = Atree.Items[i].text then
            begin
              Dnode := Atree.Items[i];
              break;
            end;
          end;
        end;

        if (Dnode <> nil) And (treeShortcuts[Macronum].Publication <> '') then
        begin
          N := Dnode.GetFirstChild;
          while (N <> nil) and (Pnode = nil) do
          begin
            if N.text = treeShortcuts[Macronum].Publication then
            begin
              Pnode := N;
              break;
            end;
            N := N.getNextSibling;
          end;

        end;

        if (Pnode <> nil) And (treeShortcuts[Macronum].edition <> '') then
        begin
          N := Pnode.GetFirstChild;
          while (N <> nil) and (enode = nil) do
          begin
            if N.text = treeShortcuts[Macronum].edition then
            begin
              enode := N;
              break;
            end;
            N := N.getNextSibling;
          end;
        end;

        if (enode <> nil) And (treeShortcuts[Macronum].section <> '') then
        begin
          N := enode.GetFirstChild;
          while (N <> nil) and (snode = nil) do
          begin
            if N.text = treeShortcuts[Macronum].section then
            begin
              snode := N;
              break;
            end;
            N := N.getNextSibling;
          end;
        end;
        N := nil;

        if Dnode <> nil then
          N := Dnode;
        if Pnode <> nil then
          N := Pnode;
        if enode <> nil then
          N := enode;
        if snode <> nil then
          N := snode;
        if N <> nil then
        begin
          Atree.Selected := N;
          Atree.Selected.Expand(false);
          Atree.SetFocus;

        end;
      end;
    end;
  except
  end;
end;

procedure TFormMain.ActionMacroexec1Execute(Sender: TObject);
Var
  i: Integer;
  T: String;
begin
  T := TAction(Sender).caption;
  i := StrToInt(T[Length(T)]);
  macrosetandsel(i, false);
end;

procedure TFormMain.ActionMacroSet1Execute(Sender: TObject);
Var
  i: Integer;
  T: String;
begin
  T := TAction(Sender).caption;
  i := StrToInt(T[Length(T)]);

  macrosetandsel(i, true);
end;

procedure TFormMain.SelectSpecificThumbTreeNode(Publication: string;
  PubDateStr: string);
Var
  i: Integer;
  Dnode, Pnode, N: TTreeNode;
begin
  Dnode := nil;
  Pnode := nil;
  N := nil;

  if PageControlMain.ActivePageIndex <> VIEW_THUMBNAILS then
    exit;

  for i := 0 to TreeViewThumbs.Items.Count - 1 do
  begin
    if TreeViewThumbs.Items[i].Level = 1 then
    begin
      if PubDateStr = TreeViewThumbs.Items[i].text then
      begin
        Dnode := TreeViewThumbs.Items[i];
        break;
      end;
    end;
  end;
  if Dnode = nil then
    exit;

  N := Dnode.GetFirstChild;
  while (N <> nil) and (Pnode = nil) do
  begin
    if N.text = Publication then
    begin
      Pnode := N;
      break;
    end;
    N := N.getNextSibling;
  end;

  if (N <> nil) then
    TreeViewThumbs.Selected := N;
end;

procedure TFormMain.ActionBacktolastselExecute(Sender: TObject);
Var
  N, Dnode, Pnode, enode, snode: TTreeNode;
  i: Integer;
  Atree: TTreeView;
  Pubdate: string;
  Publication: String;
  edition: string;
  section: String;

begin
  Atree := nil;
  try
    if activated then
    begin
      if PageControlMain.ActivePageIndex > 4 then
      begin
        beep;
        exit;
      end;

      i := 1;
      if (BKSelset[1].BKslpubdate <> Pubdate) or
        (BKSelset[1].BKslpublication <> Publication) or
        (BKSelset[1].BKsledition <> edition) or
        (BKSelset[1].BKslsection <> section) then
      begin
        i := 1;
      end
      else
        i := 2;

      Pubdate := BKSelset[i].BKslpubdate;
      Publication := BKSelset[i].BKslpublication;
      edition := BKSelset[i].BKsledition;
      section := BKSelset[i].BKslsection;

      if Pubdate <> '' then
      begin
        case PageControlMain.ActivePageIndex of
          VIEW_SEPARATIONS:
            Atree := TreeViewpagelist;
          VIEW_THUMBNAILS:
            Atree := TreeViewThumbs;
          VIEW_PLATES:
            Atree := TreeViewPlateview;
          VIEW_PRODUCTIONS:
            Atree := TreeViewprodcontrol;
          VIEW_EDITIONS:
            Atree := TreeViewNeweddtree;
        end;

        Dnode := nil;
        Pnode := nil;
        enode := nil;
        snode := nil;

        if (Atree <> nil) then
        begin
          for i := 0 to Atree.Items.Count - 1 do
          begin
            if Atree.Items[i].Level = 1 then
            begin
              if Pubdate = Atree.Items[i].text then
              begin
                Dnode := Atree.Items[i];
                break;
              end;
            end;
          end;
        end;

        if (Dnode <> nil) And (Publication <> '') then
        begin
          N := Dnode.GetFirstChild;
          while (N <> nil) and (Pnode = nil) do
          begin
            if N.text = Publication then
            begin
              Pnode := N;
              break;
            end;
            N := N.getNextSibling;
          end;

        end;

        if (Pnode <> nil) And (edition <> '') then
        begin
          N := Pnode.GetFirstChild;
          while (N <> nil) and (enode = nil) do
          begin
            if N.text = edition then
            begin
              enode := N;
              break;
            end;
            N := N.getNextSibling;
          end;
        end;

        if (enode <> nil) And (section <> '') then
        begin
          N := enode.GetFirstChild;
          while (N <> nil) and (snode = nil) do
          begin
            if N.text = section then
            begin
              snode := N;
              break;
            end;
            N := N.getNextSibling;
          end;
        end;
        N := nil;

        if Dnode <> nil then
          N := Dnode;
        if Pnode <> nil then
          N := Pnode;
        if enode <> nil then
          N := enode;
        if snode <> nil then
          N := snode;

        if (N <> nil) and (Atree <> nil) then
        begin
          Atree.Selected := N;
          Atree.Selected.Expand(false);
          Atree.SetFocus;
        end;

      end;

    end;
  Except
  end;

end;

procedure TFormMain.ActionSetswitchmacroExecute(Sender: TObject);
Var
  i: Integer;
  Pubdate: string;
  Publication: String;
  edition: string;
  section: String;

begin
  try
    if activated then
    begin
      if PageControlMain.ActivePageIndex > 4 then
      begin
        beep;
        exit;
      end;

      i := 1;
      if not BKSelset[1].ISset then
      begin
        i := 1;
      end;
      if not BKSelset[2].ISset then
      begin
        i := 2;
      end;

      BKSelset[i].BKslpubdate := Pubdate;
      BKSelset[i].BKslpublication := Publication;
      BKSelset[i].BKsledition := edition;
      BKSelset[i].BKslsection := section;
      BKSelset[i].ISset := true;
      if i = 1 then
        BKSelset[2].ISset := false
      else
        BKSelset[1].ISset := false;
    end;
  Except
  end;
end;

procedure TFormMain.Actionplatesadd1copyExecute(Sender: TObject);

  procedure addmulti;
  Var
    FromCopyFlatseparationset: string;
    FromCopyNumber: string;
    NewDeviceID: string;
    Newpressrunid: string;
    Xcpy, Icpy: Integer;
    i: Integer;
  begin
    if FormAddNplatecopies.ShowModal = mrOK then
    begin
      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin
          FromCopyFlatseparationset :=
            IntToStr(Views[Viewselected].platesData[i].copyflatseparationset);
          FromCopyNumber := IntToStr(Views[Viewselected].platesData[i].Ncopies);
          NewDeviceID := IntToStr(Views[Viewselected].platesData[i].Copies
            [Views[Viewselected].platesData[i].Ncopies].deviceid);
          Newpressrunid := IntToStr(Views[Viewselected].pressrunid);
          for Icpy := 1 to FormAddNplatecopies.UpDown1.Position do
          begin
            Xcpy := StrToInt(FromCopyNumber);
            if Xcpy > 30 then
            begin
              break;
            end
            else
            begin
              AddANewCopy(FromCopyFlatseparationset, FromCopyNumber,
                NewDeviceID, Newpressrunid);
              Inc(Xcpy);
              FromCopyNumber := IntToStr(Xcpy);
            end;
          end;
        end;
      end;

    end;

  end;

  procedure addsingle;

  Var
    FromCopyFlatseparationset: string;
    FromCopyNumber: string;
    NewDeviceID: string;
    Newpressrunid: string;

    i: Integer;
  begin
    for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
    begin
      if Views[Viewselected].LPV.Items[i].Selected then
      begin
        FromCopyFlatseparationset :=
          IntToStr(Views[Viewselected].platesData[i].copyflatseparationset);

        FromCopyNumber := IntToStr(Views[Viewselected].platesData[i].Ncopies);
        if StrToInt(FromCopyNumber) < 30 then
        begin
          NewDeviceID := IntToStr(Views[Viewselected].platesData[i].Copies
            [Views[Viewselected].platesData[i].Ncopies].deviceid);

          Newpressrunid := IntToStr(Views[Viewselected].pressrunid);

          AddANewCopy(FromCopyFlatseparationset, FromCopyNumber, NewDeviceID,
            Newpressrunid);
        end;

      end;
    end;

  end;

begin
  if (Prefs.ShowAddCopyDialog) then
  begin
    addmulti;
  end
  else
  begin
    addsingle;
  end;
  ActionplaterefreshExecute(FormMain);
end;

procedure TFormMain.ActionAddtimetocommentExecute(Sender: TObject);
Var
  i: Integer;
  Acommenttime: String;
begin
  if (not Prefs.AddTimeToPageComment) then
    exit;

  Acommenttime := FormaTDateTime('dd.mm hh:nn', NOW) + ' | ';

  case PageControlMain.ActivePageIndex of
    VIEW_SEPARATIONS:
      begin
        getpreselHS;
        for i := 1 to StringGridHS.RowCount do
        begin
          if SuperHSdata[i - 1].Selected then
          begin
            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add('Update pagetable ');
            Datam1.Query1.SQL.Add('set Comment = ' + '''' + Acommenttime + ''''
              + ' + comment ');
            Datam1.Query1.SQL.Add('where MasterCopySeparationSet = ' +
              IntToStr(SuperHSdata[i - 1].mastercopyseparationset));
            Datam1.Query1.SQL.Add('And colorid = ' +
              IntToStr(SuperHSdata[i - 1].Colorid));
            trysql(Datam1.Query1);

            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add('update pagetable');
            Datam1.Query1.SQL.Add('set externalstatus = 3');
            Datam1.Query1.SQL.Add('where MasterCopySeparationSet = ' +
              IntToStr(SuperHSdata[i - 1].mastercopyseparationset));
            Datam1.Query1.SQL.Add('And colorid = ' +
              IntToStr(SuperHSdata[i - 1].Colorid));
            trysql(Datam1.Query1);

          end;
        end;

        loadSuperHSDB2(false);
        resetpreselHS;
      end;
    VIEW_THUMBNAILS:
      begin

        for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
        begin
          if PBExListviewthumbnail.Items[i].Selected then
          begin
            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add('Update pagetable ');
            Datam1.Query1.SQL.Add('set Comment = ' + '''' + Acommenttime + ''''
              + ' + comment ');
            Datam1.Query1.SQL.Add('where mastercopyseparationset = ' +
              IntToStr(Showthubms[PBExListviewthumbnail.Items[i].Index]
              .mastercopyseparationset));
            trysql(Datam1.Query1);

            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add('Update pagetable ');
            Datam1.Query1.SQL.Add('set externalstatus = 3');
            Datam1.Query1.SQL.Add('where mastercopyseparationset = ' +
              IntToStr(Showthubms[PBExListviewthumbnail.Items[i].Index]
              .mastercopyseparationset));
            trysql(Datam1.Query1);

          end;
        end;

        ActionThumbnailrefresh.Execute;

      end;
  end;
end;

procedure TFormMain.ActionViewPDFExecute(Sender: TObject);
var
  fileName: string;
  i : Integer;
begin
  if ListViewArk.Items.Count > 0 then
  begin

    for i := 0 to ListViewArk.Items.Count - 1 do
    begin
      if ListViewArk.Items[i].Selected then
      begin
        fileName := ListViewArk.Items[i].SubItems[2];
       //
        if (FileExists( fileName)) then
        begin
           ShellExecute(Handle, 'open',PChar(filename),nil,nil,SW_SHOW) ;
          exit;
        end;
      end;
    end;
    end;
end;

procedure TFormMain.ActionViewSavecolumnsExecute(Sender: TObject);
begin
  FormSaveloadcols.Savemycols(Prefs.Username);
end;

procedure TFormMain.ActionsepsearchExecute(Sender: TObject);
begin
  if PageControlMain.ActivePageIndex = VIEW_SEPARATIONS then
  begin
    Formsepsearch.Show;
  end;
end;

procedure TFormMain.ActionprodcombinepressrunsExecute(Sender: TObject);
begin
  if TreeViewprodcontrol.Selected = nil then
    exit;
  if (StringGridprods.cells[0, 1] = '') then
    exit;
  strpcopy(szpressname, StringGridprods.cells[0, 1]);
  strpcopy(szErrorMessage, ' ');
  if Combinepressrun(szpressname, szErrorMessage) > 0 then
  begin
    ActionProgressrefresh.Execute;
  end;
end;

procedure TFormMain.ActiontoolcombinepressrunsExecute(Sender: TObject);
begin
  if TreeViewprodcontrol.Selected = nil then
    exit;
  if (StringGridprods.cells[0, 1] = '') then
    exit;
  strpcopy(szpressname, StringGridprods.cells[0, 1]);
  strpcopy(szErrorMessage, ' ');
  if Combinepressrun(szpressname, szErrorMessage) > 0 then
  begin
    ActionProgressrefresh.Execute;
  end;
  (*
    if tnames1.pressnames.Count = 1 then
    begin
    strpcopy(szpressname,tnames1.pressnames[0]);
    strpcopy(szErrormessage,' ');
    if Combinepressrun(szpressname,szErrormessage) > 0 then
    begin
    case PageControlMain.ActivePageIndex of
    0 : begin
    Actionrefreshpagefilter.Execute;
    end;
    1 : begin
    ActionThumbnailFilterrefresh.Execute;
    end;
    2 : begin
    ActionPlaterefreshtree.Execute;
    end;
    3 : begin
    ActionProgressrefresh.Execute;
    end;
    4 : begin
    ActionEditionrefresh.Execute;
    end;
    5 : begin
    Actionnewplanrefresh.Execute;
    end;


    end;
    end;
    end;
  *)
end;

procedure TFormMain.ActionplatecombpressrunsExecute(Sender: TObject);
var
  anode: TTreeNode;
begin
  if TreeViewPlateview.Selected = nil then
    exit;
  anode := TreeViewPlateview.Selected;
  while anode.Level > 0 do
    anode := anode.Parent;

  if tNames1.pressnametoid(anode.text) > -1 then
  begin
    strpcopy(szpressname, anode.text);
    strpcopy(szErrorMessage, ' ');
    if Combinepressrun(szpressname, szErrorMessage) > 0 then
    begin
      ActionPlaterefreshtree.Execute;
    end;
  end;
end;

procedure TFormMain.ActionPlancombinepressrunsExecute(Sender: TObject);
var
  pressname: String;
begin
  Formprodplan.ItsArepair := false;
  if TreeViewplan.Selected = nil then
    exit;
  pressname := tNames1.pressnameIDtoname
    (Tplantreedata(TreeViewplan.Selected.Data^).pressid);
  if pressname <> '' then
  begin
    strpcopy(szpressname, pressname);
    strpcopy(szErrorMessage, ' ');
    if Combinepressrun(szpressname, szErrorMessage) > 0 then
    begin
      Actionnewplanrefresh.Execute;
    end;
  end;
end;

procedure TFormMain.ActionplatesplatemergeExecute(Sender: TObject);
begin
end;
(* gammel platemerge
  Var
  skaldeklarerespgadll : Integer;
  resulttat : integer;

  begin
  if true then
  begin
  // Actionplatesplatemerge

  end
  else
  begin



  end;
  if FoxrmSettings.CheckBoxApplyPlateMerge.Checked and FoxrmSettings.CheckBoxApplyPlateMerge.Visible then
  begin
  Runningdll := true;
  resulttat := ReConnectDB(DLLErrormessage);
  if resulttat = 1 then
  resulttat := ApplyPlateMerge(DLLErrormessage);
  Runningdll := false;
  ActionplaterefreshExecute(FormMain);
  end;
  end;
*)

procedure TFormMain.Loadminmaxplateview;
var
  i: Integer;
  Sameset: Boolean;
begin
  try
    Sameset := true;
    if (NMinMaxsettings = Nviews) And (Nviews > 0) then
    begin
      for i := 0 to Nviews - 1 do
      begin
        if MinMaxsettings[i + 1].caption <> Views[i].GPV.caption then
        begin
          Sameset := false;
          break;
        end;
      end;
      if Sameset then
      begin
        for i := 0 to Nviews - 1 do
        begin
          if MinMaxsettings[i + 1].minimized then
          begin
            Views[i].Height := 24;
            Views[i].ImageMinmax.Picture := Views[i].ImageMax.Picture;
          end;
        end;
      end;
    end;
  except
  end;
end;

procedure TFormMain.saveminmaxplateview;
Var
  i: Integer;
begin
  NMinMaxsettings := 0;
  try
    if Nviews > 0 then
    begin
      for i := 0 to Nviews - 1 do
      begin
        Inc(NMinMaxsettings);
        MinMaxsettings[NMinMaxsettings].minimized := Views[i].Height <= 24;
        MinMaxsettings[NMinMaxsettings].caption := Views[i].GPV.caption;
      end;
    end;
  Except
  end;
end;

procedure TFormMain.ActionprodSchedulesExecute(Sender: TObject);
begin
  FormSetschedules.ShowModal;
end;

procedure TFormMain.ActionProdordernumExecute(Sender: TObject);
var
  wherestr: string;
  i: Integer;
begin
  if TreeViewprodcontrol.Selected = nil then
    exit;
  Formeditatext.ComboBox1.Items.Clear;
  for i := 1 to StringGridprods.RowCount do
  begin
    if StringGridprodsdata[i].Selected then
    begin
      if StringGridprodsdata[i].OrderNumber <> '' then
      begin
        if Formeditatext.ComboBox1.Items.IndexOf
          (StringGridprodsdata[i].OrderNumber) < 0 then
          Formeditatext.ComboBox1.Items.Add(StringGridprodsdata[i].OrderNumber);
      end;
    end;
  end;

  Formeditatext.ComboBox1.text := '';
  Formeditatext.caption := 'Change ordernumber';
  Formeditatext.Label1.caption := 'Order number';
  if Formeditatext.ShowModal = mrOK then
  begin
    try
      wherestr := makepressrunprodwhere('');
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pressrunid ');
      Datam1.Query1.SQL.Add('set ordernumber = ' + '''' +
        Formeditatext.ComboBox1.text + '''');
      Datam1.Query1.SQL.Add('where pressrunid IN ' + wherestr);
      trysql(Datam1.Query1);

      Newrefreshprogress;
    Except
    end;
  end;
end;

procedure TFormMain.ActionthumbshowprepollmesExecute(Sender: TObject);
Var
  i: Integer;
  Ipre, ipreN: Integer;
  Eventname: string;

begin
  Formprepollmessages.RichEdit1.Lines.Clear;
  for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
  begin
    if (PBExListviewthumbnail.Items[i].Selected) then
    begin
      Formprepollmessages.RichEdit1.Lines.Add
        (InfraLanguage1.Translate('Section') + ': ' + tNames1.sectionidtoname
        (Showthubms[i].section) + ' ' + InfraLanguage1.Translate('Section') +
        ': ' + Showthubms[i].pagename);
      for Ipre := 0 to 3 do
      begin
        if (Prefs.ThumbnailEvents[Ipre].Enabled) and
          (Showthubms[i].pre[Ipre + 1].PreEvent > 0) then
        begin
          Eventname := Prefs.ThumbnailEvents[Ipre].Name;
          for ipreN := 1 to 12 do
          begin
            if Showthubms[i].pre[Ipre + 1].PreEvent = PrepollEvents[ipreN].Number
            then
            begin
              Eventname := PrepollEvents[ipreN].Name;
              break;
            end;
          end;
          Formprepollmessages.RichEdit1.Lines.Add(Eventname);
          Formprepollmessages.RichEdit1.Lines.Add
            (DateTimeToStr(Showthubms[i].pre[Ipre + 1].PreEventTime));
          Formprepollmessages.RichEdit1.Lines.Add
            (Showthubms[i].pre[Ipre + 1].PreMessage);
          Formprepollmessages.RichEdit1.Lines.Add('');
        end;
      end;
      Formprepollmessages.RichEdit1.Lines.Add
        ('----------------------------------');
    end;
  end;

  if Formprepollmessages.RichEdit1.Lines.Count > 0 then
    Formprepollmessages.ShowModal;
end;

procedure TFormMain.Thumbclearprepollmessages(Fromnum: Integer; tonum: Longint);
var
  i: Integer;
  masterstr: String;

begin
  try
    masterstr := '(-99';
    for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
    begin
      if (PBExListviewthumbnail.Items[i].Selected) then
      begin
        masterstr := masterstr + ',' +
          IntToStr(Showthubms[i].mastercopyseparationset);
      end;
    end;
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Delete PrepollPageTable ');
    Datam1.Query1.SQL.Add('where ( mastercopyseparationset IN ' + masterstr);
    Datam1.Query1.SQL.Add(')) and (Event >= ' + IntToStr(Fromnum) +
      ' and Event <= ' + IntToStr(tonum) + ')');
    trysql(Datam1.Query1);
  Except
  end;
end;

procedure TFormMain.ActionthumbClearFTPExecute(Sender: TObject);
begin
  Thumbclearprepollmessages(130, 139);
  ActionThumbnailrefresh.Execute;
end;

procedure TFormMain.ActionthumbClearPreflightExecute(Sender: TObject);
begin
  Thumbclearprepollmessages(110, 119);
  ActionThumbnailrefresh.Execute;
end;

procedure TFormMain.ActionthumbClearRIPExecute(Sender: TObject);
begin
  Thumbclearprepollmessages(120, 129);
  ActionThumbnailrefresh.Execute;
end;

procedure TFormMain.ActionthumbClearcolorlevelExecute(Sender: TObject);
begin
  Thumbclearprepollmessages(140, 149);
  ActionThumbnailrefresh.Execute;
end;

function TFormMain.Morethanoneplateselectedinseplist: Boolean;
Var
  i: Integer;
  N: Int64;
begin
  N := 0;
  result := false;
  try
    for i := 1 to StringGridHS.RowCount do
    begin
      if SuperHSdata[i - 1].Selected then
      begin
        if N = 0 then
          N := SuperHSdata[i - 1].FlatSeparation
        else
        begin
          if N <> SuperHSdata[i - 1].FlatSeparation then
          begin
            result := true;
            break;

          end;
        end;
      end;
    end;
  Except
  end;
end;

procedure TFormMain.MainEditplanpart;
Var
  N: TTreeNode;
  IPLF, i: Integer;
begin
  try
    if TreeViewplan.Selected = nil then
      exit;
    if TreeViewplan.Selected.Level < 1 then
      exit;

    LoadIDs('MainEditplanpart', false);

    FormMain.planlogging('ActionnewplaneditExecute');
    N := FormMain.TreeViewplan.Selected;
    while N.Level > 1 do
      N := N.Parent;

    plateframeslocationid := Tplantreedata(N.Data^).LocationID;
    plateframespressid := Tplantreedata(N.Data^).pressid;
    Formprodplan.ComboBoxLocation.Items := tNames1.locationnames;
    Formprodplan.ComboBoxLocation.ItemIndex :=
      Formprodplan.ComboBoxLocation.Items.IndexOf
      (tNames1.locationIDtoname(plateframeslocationid));
    Formprodplan.possiblepressesonlocation(plateframeslocationid,
      Formprodplan.ComboBoxpress.Items);
    Formprodplan.ComboBoxpress.ItemIndex :=
      Formprodplan.ComboBoxpress.Items.IndexOf
      (tNames1.pressnameIDtoname(plateframespressid));
    Formprodplan.ComboBoxpublication.Items := tNames1.publicationnames;
    Formprodplan.Anychange := false;
    N := FormMain.TreeViewplan.Selected;
    while N.Level > 2 do
      N := N.Parent;

    plateframeslocationid := Tplantreedata(N.Data^).LocationID;
    plateframespressid := Tplantreedata(N.Data^).pressid;

    Formprodplan.ComboBoxLocation.Items := tNames1.locationnames;
    Formprodplan.ComboBoxLocation.ItemIndex :=
      Formprodplan.ComboBoxLocation.Items.IndexOf
      (tNames1.locationIDtoname(plateframeslocationid));
    Formprodplan.possiblepressesonlocation(plateframeslocationid,
      Formprodplan.ComboBoxpress.Items);
    Formprodplan.ComboBoxpress.ItemIndex :=
      Formprodplan.ComboBoxpress.Items.IndexOf
      (tNames1.pressnameIDtoname(plateframespressid));
    Formprodplan.ComboBoxpublication.Items := tNames1.publicationnames;
    Formprodplan.Anychange := true;

    plateframesproductionid := Tplantreedata(N.Data^).ProductionID;
    plateframesPubdate := Tplantreedata(N.Data^).Pubdate;
    plateframesPublicationid := Tplantreedata(N.Data^).Publicationid;
    plateframeslocationid := Tplantreedata(N.Data^).LocationID;
    plateframespressid := Tplantreedata(N.Data^).pressid;
    Formprodplan.SetprodrundataToUI;

    Formprodplan.ComboBoxpublication.ItemIndex :=
      Formprodplan.ComboBoxpublication.Items.IndexOf
      (tNames1.publicationIDtoname(plateframesPublicationid));
    plateframesPubdate := Tplantreedata(N.Data^).Pubdate;

    if plateframesproductionid > -1 then
      Formprodplan.EditProductionname.text := tNames1.productionrunIDtoname
        (plateframesproductionid)
    else
      Formprodplan.EditProductionname.text := plateframesproductionname;

    Formprodplan.DateTimePickerPubdate.Date := plateframesPubdate;

    if not Formprodplan.activated then
    begin
      Formprodplan.ColumnToSort := 0;
      FormApplyproduction.CheckBoxAllowunplannedcolors.Checked :=
        Prefs.PlanningAllowUnplannedColors;
      Formprodplan.activated := true;
    end;

    // Formprodplan.Setbluebar;

    Formtower.CheckBox1.Checked := Prefs.UseDatabasePressTowerInfo;
    selIpl := 0;
    FormMain.ProgressBarmain.Position := 0;
    Formprodplan.ProgressBarprod.Position := 0;

    Formprodplan.planisactive := true;

    Formprodplan.ActionRun.ImageIndex := 74;
    Formprodplan.ActionRun.caption := 'Apply';

    i := 1;
    if Nplateframes > 1 then
    begin
      for IPLF := 1 to Nplateframes do
      begin
        if plateframes[IPLF].Selected then
        begin
          i := IPLF;
          planpartpressrunid := plateframes[IPLF].pressrunid;
          break;
        end;
      end;
    end;

    makeplateframes(ScrollBoxplanmain, ActionnewplanSmallimages.Checked);
    if PageControlplanning.ActivePageIndex = 1 then
      Formprodplan.makepagelist(PBExListviewPlandata, 0);

    Formprodplan.loadpressruniddata;
    // Setselectedplanframe;
    // Multisecplan := formprodplan.PlanContainsMultiblesections;
    Multisecplan := false;
    if Formprodplan.ShowModal = mrOK then
    begin
      Formprodplan.planisactive := false;
    end;

  Finally
    Makeplantree(-1);
    findplantreenode;
    Formprodplan.planisactive := false;

  end;
end;

procedure TFormMain.Dopartappl(autoseted: Boolean);
var
  IPLF, ipl, IP, lpage: Integer;
begin
  try
    Formprodplan.PartialPlanning := true;

    if Formapplytounplanned.ShowModal = mryes then
    begin
      Formprodplan.PartialPlanning := true;
      Formloadpressplan.partialoffstart := 1;
      lpage := 24000;
      for IPLF := 1 to Nplateframes do
      begin
        if plateframes[IPLF].Selected then
        begin
          Formprodplan.PartialOrgpressrunid := plateframes[IPLF].OrgRunID;
          for ipl := 0 to plateframes[IPLF].Nprodplates do
          begin
            for IP := 1 to PlatetemplateArray
              [plateframesdata[IPLF].prodplates[ipl].templatelistid]
              .NupOnplate do
            begin
              if lpage > plateframesdata[IPLF].prodplates[ipl].pages[IP].pageindex
              then
                lpage := plateframesdata[IPLF].prodplates[ipl].pages[IP]
                  .pageindex;
            end;
          end;
          break;
        end;
      end;
      if lpage > 1 then
        Formloadpressplan.partialoffstart := lpage;
      Formprodplan.planningaction := 6;
      // 0 load,1 edit,2 create,3 copy, 4 move, 5 apply
      PartialapplyPlan(autoseted);

    end
    else
      Formprodplan.PartialPlanning := false;
  finally
    Setplanlock(false);
    Formprodplan.planningaction := 0;
    Formprodplan.PartialPlanning := false;
  end;
end;

procedure TFormMain.ActionplanningpartapplyExecute(Sender: TObject);
begin
  Formprodplan.ItsArepair := false;
  Planloggingtype := 991;
  Planloggingmessage := 'Plan Part. applied';

  Dopartappl(false);
  Actionnewplanrefresh.Execute;
end;

procedure TFormMain.ActionPlanunapplyExecute(Sender: TObject);
Var
  N, IPLF, ProductionID: Integer;
  allUnapplied: Boolean;
  prodName, INpressruns: String;
begin

  try
    if DBVersion < 2 then
      exit;

    ProductionID := Tplantreedata(TreeViewplan.Selected.Data^).ProductionID;
    if ProductionID <= 0 then
      exit;

    INpressruns := '(-99';
    N := 0;
    for IPLF := 1 to Nplateframes do
    begin
      if plateframes[IPLF].Selected then
      begin
        Inc(N);
        INpressruns := INpressruns + ',' +
          IntToStr(plateframes[IPLF].pressrunid)
      end;
    end;

    INpressruns := INpressruns + ')';

    if (N = 0) then
      exit;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('UPDATE PressrunID SET PlanType = 0 WHERE PressrunID IN ' + INpressruns);
    trysql(Datam1.Query1);

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('SELECT TOP 1 PR.PressrunID,P.ProductionID FROM PressrunID PR WITH (NOLOCK) INNER JOIN PageTable P WITH (NOLOCK) ON PR.PressrunID = P.PressrunID');
    Datam1.Query1.SQL.Add('WHERE PR.Plantype = 1 and P.ProductionID = ' +
      IntToStr(ProductionID));
    Datam1.Query1.Open;
    allUnapplied := true;
    if not Datam1.Query1.Eof then
      allUnapplied := false;
    Datam1.Query1.Close;

    if (allUnapplied) then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('UPDATE ProductionNames SET PlanType = 0 WHERE ProductionID = ' +
        IntToStr(ProductionID));
      trysql(Datam1.Query1);
    end;

    if (Prefs.LogPlanningActions) then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('SELECT TOP 1 Name from ProductionNames WHERE ProductionID = ' +
        IntToStr(ProductionID));
      Datam1.Query1.Open;
      prodName := '';
      if not Datam1.Query1.Eof then
        prodName := Datam1.Query1.Fields[0].AsString;
      Datam1.Query1.Close;

      Planloggingseparation := -1;

      Datam1.Query2.SQL.Clear;
      Datam1.Query2.SQL.Add('Select top 1 separation from pagetable (NOLOCK) ');
      Datam1.Query2.SQL.Add('Where productionid = ' + IntToStr(ProductionID));
      Datam1.Query2.SQL.Add('and active = 1 and pagetype <> 3');
      Datam1.Query2.Open;

      if not Datam1.Query2.Eof then
        Planloggingseparation := Datam1.Query2.Fields[0].AsVariant;
      Datam1.Query2.Close;

      if (Planloggingseparation > 0) And (prodName <> '') then
      begin
        if Planloggingmessage = '' then
          Planloggingmessage := 'Unapplied';

        SaveEventlog(992, Planloggingseparation, 0, Planloggingmessage,
          prodName, 1, ProductionID);
      end;
      Planloggingseparation := -1;
      Planloggingmessage := '';
      Planloggingtype := -1;
    end;
  Finally
    Makeplantree(-1);
    findplantreenode;
  end;

end;

procedure TFormMain.ActionplanpartialloadExecute(Sender: TObject);
begin
  Formprodplan.ItsArepair := false;
  Planloggingtype := 991;
  Planloggingmessage := 'Plan part. applied';

  planloading(true);
end;

procedure TFormMain.planloading(partial: Boolean);
var
  N: TTreeNode;
  Loadtype: Integer;
  ididarun, oktorun: Boolean;
  SpecificDeviceID: Integer;

  prodName: string;
  existingPlanOverwrite: Boolean;
begin
  try
    existingPlanOverwrite := false;
    Formprodplan.planningaction := PLANADDMODE_LOAD;
    // 0 load,1 edit,2 create,3 copy, 4 move, 5 apply

    FormMain.planlogging('ActionnewplanLoadExecute ' +
      IntToStr(plateframespressid));
    LoadIDs('planloading', false);
    if partial then
    begin
      Formloadpressplan.CheckBoxusecurprod.Visible := true;
      Formloadpressplan.CheckBoxusecurprod.Checked := true;
      Formloadpressplan.Changeoffset1.Visible := true;
      // Formloadpressplan.defaultpublid := 1;
      plateframesPublicationid := 1;
      plateframesPubdate := NOW;
      Formloadpressplan.Itspartial := true;
      Formloadpressplan.Applytodate := plateframesPubdate;
      Formloadpressplan.Applytopublid := plateframesPublicationid;
      Formloadpressplan.Applytopprodname := tNames1.productionrunIDtoname
        (Tplantreedata(TreeViewplan.Selected.Data^).ProductionID);
    end
    else
    begin
      Formloadpressplan.CheckBoxusecurprod.Visible := false;
      Formloadpressplan.CheckBoxusecurprod.Checked := false;
      Formloadpressplan.Changeoffset1.Visible := false;
      Formloadpressplan.Itspartial := false;
    end;

    if (plateframespressid <= 0) then
    begin
      if (tNames1.Pnpressnames = 1) then
        plateframespressid := tNames1.GetFirstPressID()
      else if (tNames1.pressnametoid(ComboBoxPressGrp.text) > 0) then
      begin
        plateframespressid := tNames1.pressnametoid(ComboBoxPressGrp.text);
      end
    end;

    // LoadType = 2 : Load using selected product data from tree

    Loadtype := -1;
    if TreeViewplan.Selected.Level > 0 then
    begin
      Loadtype := 2;
    end;

    if (Loadtype = -1) AND (plateframespressid > 0) then // hack
      Loadtype := 2;

    if Loadtype = 2 then
    begin

      N := TreeViewplan.Selected;
      if (N <> nil) then
      begin
        while N.Level > 1 do
          N := N.Parent;

        plateframespressid := Tplantreedata(N.Data^).pressid;
        plateframeslocationid := Tplantreedata(N.Data^).LocationID;
      end;

      try
        Formprodplan.Editmode := PLANADDMODE_LOAD;
        Formloadpressplan.editionlist := '';
        Formloadpressplan.sectionlist := '';
        Formloadpressplan.Maxpages := 0;
        Formloadpressplan.defaultpublid := -1;
        Formloadpressplan.Applytopublid := -1;
        Formloadpressplan.Applytopprodname := '';

        if partial then
        begin
          Formloadpressplan.Applytodate :=
            Tplantreedata(TreeViewplan.Selected.Data^).Pubdate;
          Formloadpressplan.Applytopublid :=
            Tplantreedata(TreeViewplan.Selected.Data^).Publicationid;
          Formloadpressplan.defaultpublid :=
            Tplantreedata(TreeViewplan.Selected.Data^).Publicationid;
          Formloadpressplan.Applytopprodname := tNames1.productionrunIDtoname
            (Tplantreedata(TreeViewplan.Selected.Data^).ProductionID);
        end;

        if Formprodplan.loadpressplan(ScrollBoxplanmain, true,
          ActionnewplanSmallimages.Checked, false, false) then
        begin
          //FormApplyproduction.GroupBoxdevice.Visible := true;

          FormApplyproduction.initialize(false);
          if FormApplyproduction.ShowModal = mrOK then
          begin
            if (Prefs.PlanningUseImportCenter) then
            begin
              XMLRipSetup := FormApplyproduction.ComboBoxRipSetupname.text;
              XMLPreflightSetup :=
                FormApplyproduction.ComboBoxPreflightSetup.text;
              XMLInkSaveSetup := FormApplyproduction.ComboBoxInksaveSetup.text;
              XMLSpecificDevice := FormApplyproduction.ComboBoxdevice.text;

              XMLPressID := plateframespressid;
              XMLPublicationID := plateframesPublicationid;
              XMLPubdate := plateframesPubdate;
              Formprodplan.copyplantoplanpages;
              DataModuleXML.TransferplantoAXML(true);
              DataModuleXML.maketransxmls();
              exit;
            end
            else
            begin

              Formprodplan.productionidckeckup;
              Formprodplan.setpressrunids;
              oktorun := true;
              if FormApplyproduction.RadioGroupApplymode.ItemIndex = 0 then
              begin
                if Formprodplan.publanddateexists then
                begin
                  if MessageDlg
                    (InfraLanguage1.Translate('Overwrite existing plan ?'),
                    mtConfirmation, [mbYes, mbNo], 0) = mrNo then
                  begin
                    ididarun := false;
                    oktorun := false;
                  end;
                  existingPlanOverwrite := true;
                end;
              end;
              if oktorun then
              begin
                Formprodplan.Incrementpresssections;

                if Formprodplan.runproduction(true) then
                begin

                 // FormApplyproduction.GroupBoxdevice.Visible := true;
                  if FormApplyproduction.ComboBoxdevice.ItemIndex > 0 then
                  begin
                    SpecificDeviceID :=
                      tNames1.devicenametoid
                      (FormApplyproduction.ComboBoxdevice.text);
                    if (SpecificDeviceID <= 0) then
                    begin
                      SpecificDeviceID := inittypes.DeviceGroupnametoID
                        (FormApplyproduction.ComboBoxdevice.text);
                      if (SpecificDeviceID > 0) then
                        SpecificDeviceID := SpecificDeviceID + 100;
                    end;
                    applysepecifikdeviceid(SpecificDeviceID,
                      plateframesproductionid);
                  end;

                  if (RipSetupIDInPageTable) AND
                      (FormApplyproduction.ComboBoxRipSetupname.ItemIndex >= 0)
                      and (FormApplyproduction.ComboBoxPreflightSetup.ItemIndex >= 0)
                      and (FormApplyproduction.ComboBoxInksaveSetup.ItemIndex >= 0) then

                    ApplyRipSetups(plateframesproductionid,
                      FormApplyproduction.ComboBoxRipSetupname.text,
                      FormApplyproduction.ComboBoxPreflightSetup.text,
                      FormApplyproduction.ComboBoxInksaveSetup.text);

                                       writeMainlogfile('ApplySortingPositionIfEmpty2:' + FormApplyproduction.ComboBoxPlatesorting.text);

                  if (FormApplyproduction.ComboBoxPlatesorting.text <> '') then
                      ApplySortingPositionIfEmpty(plateframesproductionid,
                                    FormApplyproduction.ComboBoxPlatesorting.text);

                  if (FormApplyproduction.ComboBoxPageFormat.ItemIndex > 0) then
                      ApplySpecificPageFormat( FormApplyproduction.ComboBoxPageFormat.Text, plateframesproductionid);


                  postapplyplan(plateframeslocationid, plateframespressid,
                                  plateframesproductionid, plateframesPublicationid,
                                  plateframesPubdate, Formprodplan.Editmode,
                                  existingPlanOverwrite);

                  prodName := tNames1.publicationIDtoname
                    (plateframesPublicationid) + ' ' +
                    datetostr(plateframesPubdate) + '  ' +
                    tNames1.pressnameIDtoname(plateframespressid);

                  // FormMain.SaveEventlog(990,0,0,'Plan created',prodname,1, plateframesproductionid);

                end;
              end;

            end;
          end;
        end;

        // Makeplantree(-1);
        if (plateframesproductionid > 0) then
        begin
          Makeplantree(plateframesproductionid);

          // NAN Experimental!
          Keeptreeselection.Anyselect := true;
          Keeptreeselection.Pubdate := plateframesPubdate;
          Keeptreeselection.Publicationid := plateframesPublicationid;
          Keeptreeselection.pressid := plateframespressid;
        end
        else
          Makeplantree(-1);

        findplantreenode;
      finally
        Setplanlock(false);
        screen.Cursor := crdefault;
        GroupBoxworking.Visible := false;
      end;
    end;

    Formprodplan.Editmode := PLANADDMODE_EDIT;

  finally
    Setplanlock(false);

  end;

end;

procedure TFormMain.ActionthumgtreefilenameExecute(Sender: TObject);
Var
  Alocationid: Integer;
  T: string;
begin
  try
    FormChangecomment.CheckBoxallsubed.Visible := false;
    if TreeViewThumbs.Selected = nil then
      exit;

    Formeditatext.caption := 'Edit planned pagename';
    Formeditatext.ComboBox1.Items.Clear;
    if (Prefs.PlannedPageNameDataFile <> '') then
      Formeditatext.ComboBox1.Items.LoadFromFile(Prefs.PlannedPageNameDataFile);

    Formeditatext.ComboBox1.text := '';
    Formeditatext.Label1.caption := 'Planned pagename';
    if Formeditatext.ShowModal = mrOK then
    begin
      T := Formeditatext.ComboBox1.text;
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      Datam1.Query1.SQL.Add('Set PlanPageName = ' + '''' + T + '''');

      Datam1.Query1.SQL.Add('Where active <> -999');
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Publicationid > -1
      then
        Datam1.Query1.SQL.Add('and publicationid = ' +
          IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
          .Publicationid));
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid > -1 then
        Datam1.Query1.SQL.Add('and editionid = ' +
          IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
          .editionid));
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Sectionid > -1 then
        Datam1.Query1.SQL.Add('and sectionid = ' +
          IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
          .Sectionid));
      if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate > 0 then
        Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
          TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate));
      Alocationid := GetSelectedLocationID();
      if (Alocationid > 0) then
        Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

      trysql(Datam1.Query1);

      ActionThumbnailrefresh.Execute;
    end;
  Except
  end;
end;

procedure TFormMain.ActionpagesplanpagenametreeExecute(Sender: TObject);
Var
  Alocationid: Integer;
  T: String;
begin
  try
    if TreeViewpagelist.Selected = nil then
      exit;
    Formeditatext.caption := 'Edit planned pagename';
    Formeditatext.ComboBox1.Items.Clear;
    if (Prefs.PlannedPageNameDataFile <> '') then
      Formeditatext.ComboBox1.Items.LoadFromFile(Prefs.PlannedPageNameDataFile);

    Formeditatext.ComboBox1.text := '';
    Formeditatext.Label1.caption := 'Planned pagename';
    if Formeditatext.ShowModal = mrOK then
    begin
      T := Formeditatext.ComboBox1.text;
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      Datam1.Query1.SQL.Add('Set plannedpagename = ' + '''' + T + '''');
      Datam1.Query1.SQL.Add('Where active <> -999');
      if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Publicationid > -1
      then
        Datam1.Query1.SQL.Add('and publicationid = ' +
          IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
          .Publicationid));
      if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).editionid > -1 then
        Datam1.Query1.SQL.Add('and editionid = ' +
          IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
          .editionid));
      if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Sectionid > -1 then
        Datam1.Query1.SQL.Add('and sectionid = ' +
          IntToStr(TTreeViewpagestype(TreeViewpagelist.Selected.Data^)
          .Sectionid));
      if TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Pubdate > 0 then
        Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
          TTreeViewpagestype(TreeViewpagelist.Selected.Data^).Pubdate));
      Alocationid := GetSelectedLocationID();
      if (Alocationid > 0) then
        Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

      trysql(Datam1.Query1);

    end;
    getpreselHS;
    Actionrefreshpages.Execute;
    resetpreselHS;
  Except
  end;
end;

procedure TFormMain.ActionPaplannedpagenameExecute(Sender: TObject);
begin
  getpreselHS;
  Formeditatext.caption := 'Edit planned pagename';
  Formeditatext.ComboBox1.Items.Clear;
  if (Prefs.PlannedPageNameDataFile <> '') then
    Formeditatext.ComboBox1.Items.LoadFromFile(Prefs.PlannedPageNameDataFile);

  Formeditatext.ComboBox1.text := '';
  Formeditatext.Label1.caption := 'Planned pagename';
  if Formeditatext.ShowModal = mrOK then
  begin
    setpagetablestddata('set PlanPageName = ' + '''' +
      Formeditatext.ComboBox1.text + '''', '');
    loadSuperHSDB2(false);
    resetpreselHS;
  end;
end;

procedure TFormMain.ActionthumbplanpaExecute(Sender: TObject);
begin
  Formeditatext.caption := 'Edit planned pagename';
  Formeditatext.ComboBox1.Items.Clear;
  if (Prefs.PlannedPageNameDataFile <> '') then
    Formeditatext.ComboBox1.Items.LoadFromFile(Prefs.PlannedPageNameDataFile);

  Formeditatext.ComboBox1.text := '';

  Formeditatext.Label1.caption := 'Planned pagename';
  if Formeditatext.ShowModal = mrOK then
  begin
    setpagetablethumbdata('set PlanPageName = ' + '''' +
      Formeditatext.ComboBox1.text + '''', '');
    ActionThumbnailrefresh.Execute;
  end;
end;

procedure TFormMain.ActionthumbnailtreepdfExecute(Sender: TObject);
var
  resulttat, Alocationid: Integer;
  FinalPdfFileName: String;
  TempPdfFileName: String;
  Somearemissing, somearenotproofed: Boolean;
  doit: Boolean;
  szErrorMessage: PAnsiChar;
  editionid: Integer;
  Sectionid: Integer;
  Publicationid: Integer;
  Pubdate: TDateTime;
begin
  if TreeViewThumbs.Selected = nil then
    exit;
  if TreeViewThumbs.Selected.Level < 1 then
    exit;

  editionid := TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid;
  Sectionid := TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Sectionid;
  Publicationid := TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
    .Publicationid;
  Pubdate := TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate;

  try
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select distinct proofstatus,status from pagetable (NOLOCK)  where ');

    Datam1.Query1.SQL.Add(' active = 1');
    Datam1.Query1.SQL.Add('And pagetype <> 3');
    Datam1.Query1.SQL.Add('And (status = 0 or proofstatus < 1)');

    if Publicationid > -1 then
      Datam1.Query1.SQL.Add('and publicationid = ' + IntToStr(Publicationid));
    if editionid > -1 then
      Datam1.Query1.SQL.Add('and editionid = ' + IntToStr(editionid));
    if Sectionid > -1 then
      Datam1.Query1.SQL.Add('and sectionid = ' + IntToStr(Sectionid));
    if Pubdate > 0 then
      Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('', Pubdate));
    Alocationid := GetSelectedLocationID();
    if (Alocationid > 0) then
      Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

    Somearemissing := false;
    somearenotproofed := false;
    Datam1.Query1.Open;
    while not Datam1.Query1.Eof do
    begin

      if Datam1.Query1.Fields[0].AsInteger < 1 then
        somearenotproofed := true;
      if Datam1.Query1.Fields[1].AsInteger = 0 then
        Somearemissing := true;
      Datam1.Query1.Next;
    end;

    Datam1.Query1.Close;

    doit := true;

    if (Somearemissing) OR (somearenotproofed) then
    begin
      if (Somearemissing) then
      begin
        doit := MessageDlg
          ('Some pages are still missing - create Pdf book anyway?',
          mtConfirmation, [mbYes, mbNo], 0) = mryes;
      end
      else
      begin
        doit := MessageDlg
          ('Some pages are not yet proofed - create Pdf book anyway?',
          mtConfirmation, [mbYes, mbNo], 0) = mryes;
      end;
    end;

    if doit then
    begin
      if SaveDialogPDFBook.Execute then
      begin
        FinalPdfFileName := SaveDialogPDFBook.filename;
        Runningdll := true;

        resulttat := ReConnectDB(DLLErrormessage);

        if resulttat = 1 then
        begin

          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('select TOP 1 productionid,pressrunid from pagetable (NOLOCK) where active <> 8888');
          if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Publicationid > -1
          then
            Datam1.Query1.SQL.Add('and publicationid = ' +
              IntToStr(Publicationid));
          if editionid > -1 then
            Datam1.Query1.SQL.Add('and editionid = ' + IntToStr(editionid));
          if Sectionid > -1 then
            Datam1.Query1.SQL.Add('and sectionid = ' + IntToStr(Sectionid));
          if Pubdate > 0 then
            Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('', Pubdate));
          Alocationid := GetSelectedLocationID();

          if (Alocationid > 0) then
            Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

          nPressRunID_PDF := 0;
          nProductionID_PDF := -888;
          Datam1.Query1.Open;
          if not Datam1.Query1.Eof then
          begin
            nProductionID_PDF := Datam1.Query1.Fields[0].AsInteger;

            if editionid > -1 then
              nPressRunID_PDF := Datam1.Query1.Fields[1].AsInteger;

            if Sectionid > -1 then
              nPressRunID_PDF := Datam1.Query1.Fields[1].AsInteger;

          end;
          Datam1.Query1.Close;

          TempPdfFileName := IncludeTrailingBackSlash(TUtils.GetTempDirectory())
            + 'tmp' + TUtils.GenerateTimeStamp() + '.pdf';
          DeleteFile(TempPdfFileName);
          DeleteFile(FinalPdfFileName);

          sleep(30);
          screen.Cursor := crhourglass;

          szErrorMessage := AnsiStrAlloc(256);

          resulttat := MakePdfBook(nProductionID_PDF, nPressRunID_PDF,
            TUtils.StringToPAnsiChar(TempPdfFileName), szErrorMessage);

          sleep(30);
          screen.Cursor := crdefault;

          if resulttat = 0 then
            MessageDlg('Cannot make PDF Book ' + StrPas(szErrorMessage),
              mtError, [mbOk], 0)
          else
          begin
            if FileExists(TempPdfFileName) then
            begin
              CopyFile(PChar(TempPdfFileName), PChar(FinalPdfFileName), false);
              FinalPdfFileName := TempPdfFileName;
            end;

            if FileExists(FinalPdfFileName) then
            begin
              case (Prefs.ShowPdfBook) of
                0:
                  begin
                    MessageDlg(extractfilename(strpas(PDFOutputfilename)) +
                      ' Done ', mtInformation, [mbOk], 0);
                  end;
                1:
                  begin
                    if MessageDlg
                      ('Show ' + extractfilename(strpas(PDFOutputfilename)) +
                      ' ?', mtConfirmation, [mbYes, mbNo], 0) = mryes then
                      TUtils.ExecNewProcess('explorer.exe', PDFOutputfilename);
                  end;
                2:
                  begin
                    TUtils.ExecNewProcess('explorer.exe', PDFOutputfilename);
                  end;
              end;
            end
            else
              MessageDlg('Cannot make PDF Book check filepath (' +
                PChar(PDFOutputfilename) + ' -> ' + DLLErrormessage + ')',
                mtError, [mbOk], 0)
          end;
        end;
        Runningdll := false;
      end;
    end;
  Except
  end;
  screen.Cursor := crdefault;
  FormMain.Repaint;
end;

function TFormMain.GetInkFolder(Foldertype: Integer;  LocationID: Longint): String;
var
  T: String;
  i: Integer;
begin
  result := '';

  for i := 1 to tNames1.locationnames.Count do
  begin
    if LocationID = InkFolders[i].LocationID then
    begin

      if InkFolders[i].InkShare <> '' then
      begin
        T := IncludeTrailingBackSlash(InkFolders[i].InkShare);
        case Foldertype of
          1:
            result := T + 'CCinkflatpreviews\';
          2:
            result := T + 'CCinkflatthumbnails\';
          3:
            result := T + 'CCinkzonepreviews\';
          4:
            result := T + 'CCinkoriginals\';
        end;
      end;
      break;

    end;
  end;
end;


function TFormMain.GetInkFolderCache(Foldertype:Integer): String;
var
  t: String;
  i: Integer;
begin
  result := '';

  t := IncludeTrailingBackSlash(Prefs.PreviewCacheShare);
  case Foldertype of
    1:
      result := t + 'CCinkflatpreviews\';
    2:
      result := t + 'CCinkflatthumbnails\';
    3:
      result := t + 'CCinkzonepreviews\';
    4:
      result := t + 'CCinkoriginals\';
  end;
end;

function TFormMain.getinkfolderUsername(Path: String; Var Username: String;
  Var Password: string): Boolean;
Var
  i: Integer;
begin
  result := false;
  Path := Uppercase(ExcludeTrailingBackslash(Path));
  for i := 1 to tNames1.locationnames.Count do
  begin
    if Path = Uppercase(ExcludeTrailingBackslash(InkFolders[i].InkShare)) then
    begin
      Username := InkFolders[i].Username;
      Password := InkFolders[i].Password;
      result := true;
      break;
    end;
  end;
end;

function TFormMain.createstatistictabledata(ProductionID: Longint): Integer;
Var
  statid: Integer;
begin
  try
    result := -1;
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Select distinct p.pubdate, PN.name');
    Datam1.Query1.SQL.Add('From pagetable p (NOLOCK) ');
    Datam1.Query1.SQL.Add
      ('INNER JOIN PublicationNames AS PN ON PN.publicationID=P.publicationID');
    Datam1.Query1.SQL.Add('where p.productionid = ' + IntToStr(ProductionID));
    Datam1.Query1.Open;
    while not Datam1.Query1.Eof do
    begin
      Datam1.Query2.SQL.Clear;
      Datam1.Query2.SQL.Add('Select TOP 1 statid from statistic where');
      Datam1.Query2.SQL.Add(' Publicationname = ' + '''' + Datam1.Query1.Fields
        [1].AsString + '''');
      Datam1.Query2.SQL.Add(' and ' + Datam1.makedatastr('',
        Datam1.Query1.Fields[0].AsDateTime));
      FormMain.Tryopen(Datam1.Query2);
      statid := -1;
      if not Datam1.Query2.Eof then
        statid := Datam1.Query2.Fields[0].AsInteger;
      Datam1.Query2.Close;
      Datam1.Query2.SQL.Clear;
      Datam1.Query2.SQL.Add('Delete statistic where statid = ' +
        IntToStr(statid));
      FormMain.trysql(Datam1.Query2);

      if advancedstatavail then
      begin
        Datam1.Query2.SQL.Clear;
        Datam1.Query2.SQL.Add('Delete StatisticPrepoll where statid = ' +
          IntToStr(statid));
        FormMain.trysql(Datam1.Query2);
      end;
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;

    if advancedstatavail then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('DECLARE @resultat int');
      Datam1.Query1.SQL.Add
        ('exec @resultat = spplancenterInputStatistic4 @ProductionID=' +
        IntToStr(ProductionID) + ',@editionID=-1,@SectionID=-1,@PressrunID=-1');
      Datam1.Query1.SQL.Add('select ' + '''' + 'resultatet' + '''' +
        ' = @resultat');
      if Prefs.Debug then
        Datam1.Query1.SQL.SaveToFile
          (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'
          + 'spgenreport.SQL');
      FormMain.Tryopen(Datam1.Query1);
      if not Datam1.Query1.Eof then
        result := Datam1.Query1.Fields[0].AsInteger;
      Datam1.Query1.Close;
    end
    else
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('DECLARE @resultat int');
      Datam1.Query1.SQL.Add
        ('exec @resultat = spplancenterInputStatistic3 @ProductionID=' +
        IntToStr(ProductionID));
      Datam1.Query1.SQL.Add('select ' + '''' + 'resultatet' + '''' +
        ' = @resultat');
      FormMain.Tryopen(Datam1.Query1);
      if not Datam1.Query1.Eof then
        result := Datam1.Query1.Fields[0].AsInteger;
      Datam1.Query1.Close;
    end;
  Except
    result := -1;
  end;
end;

procedure TFormMain.ActionreportgenextExecute(Sender: TObject);
Var
  N: TTreeNode;
  wherestr: string;
  ProductionID: Integer;
  statid: Integer;
  LocationID: Integer;
begin
  if TreeViewreportfilter.Selected.Level < 1 then
    exit;
  if TreeViewreportfilter.Selected.Level < 1 then
    exit;
  statid := -1;

  N := TreeViewreportfilter.Selected;

  wherestr := 'where dirty <> 1 ';

  if (ComboBoxpalocationNY.Enabled) then
    LocationID := tNames1.locationnametoid(ComboBoxpalocationNY.text)
  else
    LocationID := -1;

  if (LocationID > 0) then
    wherestr := wherestr + ' and locationid = ' + IntToStr(LocationID);

  while N.Level > 0 do
  begin
    case TTreeViewpagestype(N.Data^).kind of
      1:
        begin // date
          wherestr := wherestr + ' and ' + Datam1.makedatastr('',
            TTreeViewpagestype(N.Data^).Pubdate);
        end;
      2:
        begin // date + publ
          wherestr := wherestr + ' and publicationid = ' +
            IntToStr(TTreeViewpagestype(N.Data^).Publicationid);
        end;
    end;
    N := N.Parent;
  end;

  ProductionID := -1;
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('Select TOP 1 productionid from pagetable (NOLOCK) ');
  Datam1.Query1.SQL.Add(wherestr);
  Tryopen(Datam1.Query1);
  if not Datam1.Query1.Eof then
    ProductionID := Datam1.Query1.Fields[0].AsInteger;
  Datam1.Query1.Close;

  if ProductionID > 0 then
  begin
    statid := createstatistictabledata(ProductionID);
  end;
  (*
    if statid > -1 then
    begin
    GenerateReport(productionid);

    end;
  *)
end;

procedure TFormMain.setpagetableMasterdata(setstr: string; wherestr: string);
var
  i, Alocationid: Integer;

begin
  Nselectedmasters := 0;

  for i := 1 to StringGridHS.RowCount do
  begin
    if SuperHSdata[i - 1].Selected then
    begin
      addtoselectedmasters(SuperHSdata[i - 1].mastercopyseparationset);
    end;
  end;

  for i := 1 to Nselectedmasters do
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable');
    Datam1.Query1.SQL.Add(setstr);
    Datam1.Query1.SQL.Add('Where active <> -999');
    Datam1.Query1.SQL.Add(' and mastercopyseparationset = ' +
      IntToStr(selectedmasters[i]));
    Alocationid := GetSelectedLocationID();
    if (Alocationid > 0) then
      Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

    Datam1.Query1.SQL.Add(wherestr);

    trysql(Datam1.Query1);
  end;
end;

procedure TFormMain.PBExListviewthumbnailMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
  i, iFirst, iLast: Integer;
  found: Boolean;
begin
  iFirst := 0;
  iLast := 0;
  if ssShift in Shift then
  begin
    found := false;
    for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
      if PBExListviewthumbnail.Items[i].Selected then
      begin
        if not found then
        begin
          iFirst := i;
          found := true;
        end;
        iLast := i;
      End;

    for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
      if (i >= iFirst) and (i <= iLast) then
        PBExListviewthumbnail.Items[i].Selected := true;
  end;

end;

procedure TFormMain.PBExListviewthumbnailMouseMove(Sender: TObject;
  Shift: TShiftState; X, Y: Integer);
begin

  MouseoverthumbX := X;
  Mouseoverthumby := Y;

  (*
    memo1.lines.Add('PBExListviewthumbnail.ViewOrigin.X '+IntToStr(PBExListviewthumbnail.ViewOrigin.X));
    memo1.lines.Add('PBEyListviewthumbnail.ViewOrigin.y '+IntToStr(PBExListviewthumbnail.ViewOrigin.y));
    memo1.lines.Add('x '+IntToStr(x-(PBExListviewthumbnail.ViewOrigin.X*-1)));
    memo1.lines.Add('y '+IntToStr(y-PBExListviewthumbnail.ViewOrigin.y));

    memo1.refresh;
  *)
  (*
    L := PBExListviewthumbnail.GetItemAt(X, Y);
    if l <> nil then
    begin
    drect := l.DisplayRect(drIcon	);
    ipl := Formprodplan.ImagenumbertoIPL(iplf,l.Index);
    tp1 := PBExListview1.Items[0].Position;
    tp := l.Position;
    icol := ((tp.X+ImageListplanframe.width)-28) div (ImageListplanframe.width+16);
    tp.x := (icol *16) + (ImageListplanframe.width*(icol))+28;
    mouseoverx := x-tp.x;
    mouseovery := y-tp.Y+PBExListview1.Vertpos;
  *)

end;

procedure TFormMain.PBExListviewthumbnailDblClick(Sender: TObject);

  procedure Givemessage(kind: Integer; Amessage: string; status: Integer;
    Thumbsel: Longint);
  var
    T, mtypestr: string;
  begin
    T := Trim(Amessage);

    if (T <> '') { And (status > 0) } then
    begin
      Formprepollmessages.RichEdit1.Lines.Clear;

      Formprepollmessages.RichEdit1.Lines.Add
        (InfraLanguage1.Translate('Section') + ': ' + tNames1.sectionidtoname
        (Showthubms[Thumbsel].section) + ' ' + InfraLanguage1.Translate('Page')
        + ': ' + Showthubms[Thumbsel].pagename);
      Formprepollmessages.RichEdit1.Lines.Add('');
      Formprepollmessages.RichEdit1.Lines.Add('------------');
      Formprepollmessages.RichEdit1.Lines.Add('');

      case status of
        1:
          begin
            mtypestr := InfraLanguage1.Translate('Warning');
          end;
        2:
          begin
            mtypestr := InfraLanguage1.Translate('Information');
          end;
        3:
          begin
            mtypestr := InfraLanguage1.Translate('Error');
          end;
      end;
      case kind of
        0:
          begin
            Formprepollmessages.RichEdit1.Lines.Add
              (InfraLanguage1.Translate('FTP') + ' : ' + mtypestr);
          end;
        1:
          begin
            Formprepollmessages.RichEdit1.Lines.Add
              (InfraLanguage1.Translate('Preflight') + ' : ' + mtypestr);
          end;
        2:
          begin
            Formprepollmessages.RichEdit1.Lines.Add
              (InfraLanguage1.Translate('Rip') + ' : ' + mtypestr);
          end;
        3:
          begin
            Formprepollmessages.RichEdit1.Lines.Add
              (InfraLanguage1.Translate('Color level') + ' : ' + mtypestr);
          end;
        4:
          begin
            Formprepollmessages.RichEdit1.Lines.Add
              (InfraLanguage1.Translate('Ink TAC') + ' : ' + mtypestr);
          end;
      end;

      Formprepollmessages.RichEdit1.Lines.Add(Amessage);
      Formprepollmessages.ShowModal;

    end;

  end;

Var
  lastsel: Integer;
  i, Y, X: Integer;
  T: string;
  Tp: TPoint;
  clickonact: Integer;
  hasInkEvent: Boolean;
begin
  if PBExListviewthumbnail.Selected = nil then
    exit;
  Tp := PBExListviewthumbnail.Selected.Position;

  clickonact := -1;
  X := MouseoverthumbX - Tp.X - (PBExListviewthumbnail.ViewOrigin.X * -1);
  Y := Mouseoverthumby - (Tp.Y - PBExListviewthumbnail.ViewOrigin.Y);
  if Nthumbprepos > 0 then
  begin
    for i := 0 to 3 do
    begin
      if thumbprepos[i].left > -1 then
      begin
        if (X >= thumbprepos[i].left) and (X <= thumbprepos[i].right) and
          (Y >= thumbprepos[i].Top) and (Y <= thumbprepos[i].bottom) then
        begin
          clickonact := i;
          break;
        end;
      end;
    end;
  end;
  X := PBExListviewthumbnail.Horzpos;
  Y := PBExListviewthumbnail.Vertpos;
  lastsel := PBExListviewthumbnail.Selected.Index;

  hasInkEvent := false;
  for i := 0 to Nthumbprepos do
  begin
    if (Prefs.PrePollEventNames[i] = 'INK') then
      hasInkEvent := true;
  end;

  if clickonact > -1 then
  begin //
    case clickonact of
      0:
        begin
          Givemessage(0, Showthubms[PBExListviewthumbnail.Selected.Index].pre
            [clickonact + 1].PreMessage,
            Showthubms[PBExListviewthumbnail.Selected.Index].pre[clickonact + 1]
            .status, PBExListviewthumbnail.Selected.Index);
        end;
      1:
        begin
          if (Prefs.ThumbnailShowPitstopLog) (* And (NpdfFolders > 0) *) then
          begin
            T := Trim(Showthubms[PBExListviewthumbnail.Selected.Index].pre
              [clickonact + 1].PreMessage);
            if ((T <> '') OR (Prefs.ThumbnailShowPitstopLog)) and
              (Showthubms[PBExListviewthumbnail.Selected.Index].pre
              [clickonact + 1].status > 0) then
              MakepdfLogpreview(Showthubms[PBExListviewthumbnail.Selected.Index]
                .mastercopyseparationset, 0);
          end
          else
            Givemessage(1, Showthubms[PBExListviewthumbnail.Selected.Index].pre
              [clickonact + 1].PreMessage,
              Showthubms[PBExListviewthumbnail.Selected.Index].pre
              [clickonact + 1].status, PBExListviewthumbnail.Selected.Index);
        end;
      2:
        begin
          Givemessage(2, Showthubms[PBExListviewthumbnail.Selected.Index].pre
            [clickonact + 1].PreMessage,
            Showthubms[PBExListviewthumbnail.Selected.Index].pre[clickonact + 1]
            .status, PBExListviewthumbnail.Selected.Index);
        end;
      3:
        begin

          if hasInkEvent then
          begin

            if (Prefs.ThumbnailShowPitstopLog) (* And (NpdfFolders > 0) *) then
            begin
              T := Trim(Showthubms[PBExListviewthumbnail.Selected.Index].pre
                [clickonact + 1].PreMessage);
              if ((T <> '') OR (Prefs.ThumbnailShowPitstopLog)) and
                (Showthubms[PBExListviewthumbnail.Selected.Index].pre
                [clickonact + 1].status > 0) then
                MakepdfLogpreview(Showthubms[PBExListviewthumbnail.Selected.
                  Index].mastercopyseparationset, 1);
            end
            else

              Givemessage(4, Showthubms[PBExListviewthumbnail.Selected.Index]
                .pre[clickonact + 1].PreMessage,
                Showthubms[PBExListviewthumbnail.Selected.Index].pre
                [clickonact + 1].status, PBExListviewthumbnail.Selected.Index);
          end
          else
            Givemessage(3, Showthubms[PBExListviewthumbnail.Selected.Index].pre
              [clickonact + 1].PreMessage,
              Showthubms[PBExListviewthumbnail.Selected.Index].pre
              [clickonact + 1].status, PBExListviewthumbnail.Selected.Index);
        end;

    end;

  end
  else
  begin
    (*
      if (((not formprev2.showing))) And (FoxrmSettings.CheckBoxAllowparalelview.Checked) then
      begin
      if not formprev2.firstshow then
      formprev2.ImageEn1.Clear;

      formprev2.show;
      end;
    *)
    Actionthumbnailpreview.Execute;
  end;

  ActionThumbnailrefresh.Execute;

  if PBExListviewthumbnail.Items.Count > 0 then
  begin
    PBExListviewthumbnail.Scroll(X, Y);
    PBExListviewthumbnail.Vertpos := Y;
    PBExListviewthumbnail.Horzpos := X;
  end;
end;

(*
  procedure TFormMain.showpdffile(pdffilename : string);
  procedure ExecPDFProcess(ProgramName      : String;
  programparameter : string);
  var
  StartInfo  : TStartupInfo;
  ProcInfo   : TProcessInformation;
  CreateOK   : Boolean;
  T : String;
  begin

  FillChar(StartInfo,SizeOf(TStartupInfo),#0);
  FillChar(ProcInfo,SizeOf(TProcessInformation),#0);
  StartInfo.cb := SizeOf(TStartupInfo);

  //+programparameter+'"'
  T := '"'+ProgramName+'"' + ' "' +programparameter+'"';

  CreateOK := CreateProcess(nil,Pchar(T), nil, nil,False,
  CREATE_NEW_PROCESS_GROUP+NORMAL_PRIORITY_CLASS,
  nil, nil, StartInfo, ProcInfo);


  //  if CreateOK then
  //   WaitForSingleObject(ProcInfo.hProcess, INFINITE);


  end;

  Var
  t,t2 : String;
  begin
  if (Prefs.ExternalPDFEditorPath = '') then
  begin
  T2 := pdffilename;
  T := GetAppName(T2);
  end
  else
  begin
  T := Prefs.ExternalPDFEditorPath;
  if not fileexists(T) then
  begin
  T2 := pdffilename;
  T := GetAppName(T2);
  end;
  end;

  if T = '' then
  begin
  MessageDlg(FormMain.InfraLanguage1.Translate('PDF viewer must be selected in settings ') , mtInformation,[mbOk], 0);
  exit;
  end;

  t2 := pdffilename;
  ExecPDFProcess(T,T2);



  end;
*)

procedure TFormMain.ActionConfigRipSetupnamesExecute(Sender: TObject);
Var
  // skaldeklarerespgadll : Integer;
  resulttat: Integer;
begin
  if Configallowed then
  begin

    MainUpdateing := true;
    TreeStopit := true;
    Runningdll := true;

    try
      resulttat := ReConnectDB(DLLErrormessage);
      resulttat := RipSetupNameSetup(DLLErrormessage);
    Except
      TreeStopit := false;
    end;
    try
      // loadids('ActionConfigRipSetupnames');
      MainUpdateing := false;
      Runningdll := false;
    Except
      TreeStopit := false;
    end;
    TreeStopit := false;
  end;
end;

procedure TFormMain.ActionProdRipsetupExecute(Sender: TObject);
Var
  wherestr: string;
  // I : Integer;

begin
  if not(Comment2INPressrunid) then
    exit;
  if TreeViewprodcontrol.Selected = nil then
    exit;
  if not ApletoUseRipSetupNameSetup then
    exit;
  Formeditatext.ComboBox1.Items.Clear;
  Formeditatext.ComboBox1.text := '';
  Formeditatext.ComboBox1.Style := csDropDownList;
  Formeditatext.Label1.caption := 'Rip setup';
  Formeditatext.caption := 'Change Rip setup';
  Formeditatext.ComboBox1.Items := tNames1.RipSetupnames;
  Formeditatext.ComboBox1.text := StringGridprods.cells
    [20, StringGridprods.Selection.Top];
  Formeditatext.ComboBox1.Style := csDropDown;
  if Formeditatext.ShowModal = mrOK then
  begin
    try
      wherestr := makepressrunprodwhere('');
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pressrunid ');
      Datam1.Query1.SQL.Add('set Comment2 = ' + '''' +
        Formeditatext.ComboBox1.text + '''');
      Datam1.Query1.SQL.Add('where pressrunid IN ' + wherestr);
      trysql(Datam1.Query1);

      Newrefreshprogress;
    Except
    end;
  end;
end;

procedure TFormMain.ActionpagessavehighresExecute(Sender: TObject);
Var
  i: Integer;
  Alist, Blist: Tstrings;
  aktmaster: Integer;
  Aktfileserverpath, T, fromfile, tofile, topath, selectedFolder:String;
begin
  Alist := Tstringlist.Create;
  Blist := Tstringlist.Create;
  selectedFolder := '';
  try
    //if (Prefs.DefaultSavePageListFile <> '') then
      //FormSelectfolder.ShellTreeView1.Path := Prefs.DefaultSavePageListFile;

    with TFileOpenDialog.Create(nil) do
    try
      if (Prefs.DefaultSavePageListFile <> '') then
        DefaultFolder := Prefs.DefaultSavePageListFile;
      Options := [fdoPickFolders];
    if Execute then
      selectedFolder := FileName;
  finally
    Free;
  end;

    //if FormSelectfolder.ShowModal = mrOK then
    if (selectedFolder <> '') then

    begin
      try
        topath := selectedFolder; //FormSelectfolder.ShellTreeView1.Path;
        topath := IncludeTrailingBackSlash(topath);
        aktmaster := -1;
        Aktfileserverpath := '';
        for i := 1 to StringGridHS.RowCount do
        begin
          if (SuperHSdata[i - 1].Selected) And (SuperHSdata[i - 1].status >= 10)
          then
          begin
            if aktmaster <> SuperHSdata[i - 1].mastercopyseparationset then
            begin
              Aktfileserverpath := getfileserverFrommaster(PATHTYPE_CCFILES,
                SuperHSdata[i - 1].mastercopyseparationset);
              IncludeTrailingBackSlash(Aktfileserverpath);
              aktmaster := SuperHSdata[i - 1].mastercopyseparationset;
            end;

            Datam1.Query2.SQL.Clear;
            Datam1.Query2.SQL.Add
              ('Select TOP 1 filename from pagetable (NOLOCK)');
            Datam1.Query2.SQL.Add('Where separation = ' +
              IntToStr(SuperHSdata[i - 1].Separation));

            Tryopen(Datam1.Query2);
            if not Datam1.Query2.Eof then
            begin
              T := Datam1.Query2.Fields[0].AsString;
              if T <> '' then
              begin
                T := extractfilename(T);

              end;
            end;
            Datam1.Query2.Close;

            fromfile := Aktfileserverpath + T + '====' +
              IntToStr(SuperHSdata[i - 1].mastercopyseparationset) + '.' +
              tNames1.ColornameIDtoname(SuperHSdata[i - 1].Colorid);
            if (not FileExists(fromfile)) then
              fromfile := Aktfileserverpath +
                IntToStr(SuperHSdata[i - 1].mastercopyseparationset) + '.' +
                tNames1.ColornameIDtoname(SuperHSdata[i - 1].Colorid);

            fromfile := Uppercase(fromfile);

            if (Alist.IndexOf(fromfile) < 0) And (FileExists(fromfile)) then
            begin
              Alist.Add(fromfile);
              Blist.Add(T);
            end;

          end;
        end;
        if Alist.Count > 0 then
        begin
          FormCopyingfile.Show;
          FormCopyingfile.Animate1.Active := true;
          screen.Cursor := crhourglass;
          for i := 0 to Alist.Count - 1 do
          begin
            Application.ProcessMessages;
            if Blist.Count - 1 >= i then
            begin
              fromfile := Alist[i];
              tofile := topath + Blist[i];
              CopyFile(PChar(fromfile), PChar(tofile), false);
            end;
          end;
          FormCopyingfile.Close;
        end;
      Except
        on E: Exception do
        begin
          MessageDlg(FormMain.InfraLanguage1.Translate('Error Copying files') +
            ' ' + E.Message, mtError, [mbOk], 0);
        end;
      end;
    end;
  finally
    if FormCopyingfile.Showing then
      FormCopyingfile.Close;
    FormCopyingfile.Animate1.Active := false;
    screen.Cursor := crdefault;
    Alist.free;
    Blist.free;
  end;
end;

procedure TFormMain.ActionplateautotowerExecute(Sender: TObject);
Var
  IPLF, ipl, itow: Integer;
begin
  if (Prefs.AutoTowerOrder) and (Length(Prefs.PressTowers) > 1) then
  begin
    FormAutotower.pressname :=
      Uppercase(tNames1.pressnameIDtoname(Views[0].pressid));
    if FormAutotower.ShowModal = mrOK then
    begin

      for IPLF := 0 to Nviews - 1 do
      begin
        itow := 0;

        for ipl := 0 to Views[IPLF].LPV.Items.Count - 1 do
        begin
          Inc(itow);
          if itow > FormAutotower.NAutotows then
            itow := 1;

          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set presstower = ' + '''' +
            FormAutotower.Autotows[itow] + '''');

          Datam1.Query1.SQL.Add('where pagetype <> 999');
          Datam1.Query1.SQL.Add('and locationid = ' +
            IntToStr(Views[IPLF].platesData[ipl].LocationID));
          Datam1.Query1.SQL.Add('and productionid = ' +
            IntToStr(Views[IPLF].platesData[ipl].ProductionID));
          Datam1.Query1.SQL.Add('and Copyflatseparationset = ' +
            IntToStr(Views[IPLF].platesData[ipl].copyflatseparationset));
          trysql(Datam1.Query1);

        end;
      end;
      ActionplaterefreshExecute(FormMain);
    end;
  end;
end;




// type 0: Preflight
// type 1: Inksave

procedure TFormMain.MakepdfLogpreview(master: Integer; LogType: Longint);
Var
  Aptr: PChar;

  function Isstartoffilename: Integer;
  Var
    i2: Integer;
    T: String;
  begin
    result := 0;
    T := '';
    (*
      for i2 := 1 to 20 do
      begin
      T := T + Aptr^;
      Inc(Aptr);
      end;

      if POS('/F (',T ) > 0 then
      begin
      result := 1;
      end;

      if POS('/DIPath (',T ) > 0 then
      begin
      result := 2;
      end;
      if POS('/RelativeDIPath (',T ) > 0 then
      begin
      result := 3;
      end;
    *)
    if (Aptr^ = '/') then
    begin
      Inc(Aptr);
      if (Aptr^ = 'F') then
      begin
        Inc(Aptr);
        if (Aptr^ = ' ') then
        begin
          Inc(Aptr);
          if (Aptr^ = '(') then
          begin
            result := 1;
          end;
        end;
      end;
    end;

  end;

Var

  Apath, Fromfilename, orgpdf: string;
  FromF, ToF: file;
  UsedSize, FromSize, Tosize, i, N: Integer;
  Buffer, tobuffer: Pointer;
  oldPtr, ToPtr: PChar;
  Foundstr: String;
  f: TSearchRec;
  r, minstat, Isastart: Integer;
begin
  Fromfilename := '';
  orgpdf := '';

  if NpdfFolders = 0 then
    exit;

  minstat := 0;
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('select max(status) From pagetable (NOLOCK) where mastercopyseparationset = '
    + IntToStr(master));
  Datam1.Query1.Open;
  if not Datam1.Query1.Eof then
    minstat := Datam1.Query1.Fields[0].AsInteger;
  Datam1.Query1.Close;

  if LogType = 0 then
    Apath := IncludeTrailingBackSlash(pdfFolders[1].pdfShare) + 'CCpdflogs\*_' +
      IntToStr(master) + '.*'
  else
    Apath := IncludeTrailingBackSlash(pdfFolders[1].pdfShare) +
      'CCpdfinklogs\*_' + IntToStr(master) + '.*';

  r := FindFirst(Apath, faAnyFile, f);
  if r = 0 then
  begin
    if LogType = 0 then
      Fromfilename := IncludeTrailingBackSlash(pdfFolders[1].pdfShare) +
        'CCpdflogs\' + f.Name
    else
      Fromfilename := IncludeTrailingBackSlash(pdfFolders[1].pdfShare) +
        'CCpdfinklogs\' + f.Name;
  end;
  FindClose(f);
  if Fromfilename = '' then
  begin
    exit;
  end;

  Apath := IncludeTrailingBackSlash(pdfFolders[1].pdfShare) + 'CCPDFfiles\*_' +
    IntToStr(master) + '.*';
  r := FindFirst(Apath, faAnyFile, f);
  if r = 0 then
  begin
    orgpdf := IncludeTrailingBackSlash(pdfFolders[1].pdfShare) +
      'CCPDFfiles\' + f.Name;
  end;

  FindClose(f);

  CreateDir(IncludeTrailingBackSlash(TUtils.GetTempDirectory()) + 'TmpPDF');
  DeleteFile(IncludeTrailingBackSlash(TUtils.GetTempDirectory()) +
    'TmpPDF\Pitstop_log.pdf');
  DeleteFile(IncludeTrailingBackSlash(TUtils.GetTempDirectory()) +
    'TmpPDF\Pitstop_buf.pdf');
  DeleteFile(IncludeTrailingBackSlash(TUtils.GetTempDirectory()) +
    'TmpPDF\Pitstop_org.pdf');

  if not CopyFile(PChar(Fromfilename),
    PChar(IncludeTrailingBackSlash(TUtils.GetTempDirectory()) +
    'TmpPDF\Pitstop_log.pdf'), false) then
  begin
    MessageDlg(FormMain.InfraLanguage1.Translate('Cannot load') + ' ' + #13 +
      Fromfilename, mtInformation, [mbOk], 0);
    exit;
  end
  else
    Fromfilename := IncludeTrailingBackSlash(TUtils.GetTempDirectory()) +
      'TmpPDF\Pitstop_log.pdf';

  if orgpdf <> '' then
  begin
    if not CopyFile(PChar(orgpdf),
      PChar(IncludeTrailingBackSlash(TUtils.GetTempDirectory()) +
      'TmpPDF\Pitstop_org.pdf'), false) then
    begin
      orgpdf := '';
    end
    else
    begin
      orgpdf := IncludeTrailingBackSlash(TUtils.GetTempDirectory()) +
        'TmpPDF\Pitstop_org.pdf';
      for N := 1 to Length(orgpdf) do
      begin
        if orgpdf[N] = '\' then
          orgpdf[N] := '/';
      end;

    end;
  end;

  if orgpdf <> '' then
  begin

    Assignfile(FromF, Fromfilename);
    Assignfile(ToF, IncludeTrailingBackSlash(TUtils.GetTempDirectory()) +
      'TmpPDF\Pitstop_buf.pdf');
    UsedSize := 0;
    Reset(FromF, 1);

    Foundstr := '';
    try
      FromSize := FileSize(FromF);
      Tosize := FromSize * 2;

      GetMem(Buffer, FromSize);
      GetMem(tobuffer, Tosize);

      try
        BlockRead(FromF, Buffer^, FromSize);
        oldPtr := Buffer;
        ToPtr := tobuffer;
        i := 0;
        while i < FromSize - 20 do
        begin
          Aptr := oldPtr;
          Isastart := Isstartoffilename;
          if Isastart > 0 then
          begin
            Foundstr := '';
            repeat
              Foundstr := Foundstr + oldPtr^;
              Inc(i);
              Inc(oldPtr);
            until oldPtr^ = ')';
            case Isastart OF
              1:
                Foundstr := '/F (' + orgpdf + ')';
              // 2 : Foundstr := '/DIPath ('+ orgpdf+')';
              // 3 : Foundstr := '/RelativeDIPath ('+ orgpdf+')';

            end;

            Inc(i);
            Inc(oldPtr);

            for N := 1 to Length(Foundstr) do
            begin
              Inc(UsedSize);
              ToPtr^ := Foundstr[N];
              Inc(ToPtr);
            end;
          end;

          Inc(UsedSize);
          ToPtr^ := oldPtr^;
          Inc(ToPtr);
          Inc(i);
          Inc(oldPtr);
        end;

        for i := FromSize - 19 to FromSize do
        begin
          Inc(UsedSize);
          ToPtr^ := oldPtr^;
          Inc(ToPtr);
          Inc(oldPtr);
        end;

        ReWrite(ToF, UsedSize);
        BlockWrite(ToF, tobuffer^, 1);
        CloseFile(ToF);

      finally
        FreeMem(Buffer);
        FreeMem(tobuffer);
      end;
    finally
      CloseFile(FromF);
    end;
  End
  else
    CopyFile(PChar(Fromfilename),
      PChar(IncludeTrailingBackSlash(TUtils.GetTempDirectory()) +
      'TmpPDF\Pitstop_buf.pdf'), false);

  TUtils.ShowPDFFile(IncludeTrailingBackSlash(TUtils.GetTempDirectory()) +
    'TmpPDF\Pitstop_buf.pdf', Prefs.ExternalPDFEditorPath);
end;

procedure TFormMain.ActionThumbresetversionExecute(Sender: TObject);
Var
  i: Integer;
begin

  Formeditatext.ComboBox1.Items.Clear;
  Formeditatext.ComboBox1.text := '';
  Formeditatext.ComboBox1.Style := csDropDownList;
  Formeditatext.Label1.caption := 'Set page version';
  Formeditatext.caption := 'Enter version number';
  Formeditatext.ComboBox1.Items.Clear;
  for i := 0 to 20 do
    Formeditatext.ComboBox1.Items.Add(IntToStr(i));
  Formeditatext.ComboBox1.ItemIndex := 0;
  Formeditatext.ComboBox1.text := '0';
  Formeditatext.ComboBox1.Style := csDropDownList;
  if Formeditatext.ShowModal = mrOK then
  begin
    try
      if Formeditatext.ComboBox1.text = '0' then
      begin
        if MessageDlg
          ('Setting version to 0 will change status to missing - continue ?',
          mtConfirmation, [mbYes, mbNo], 0) = mryes then
          setpagetablethumbdata
            ('set status = 0, inkstatus = 0, proofstatus=0,version = 0 ', '');
      end
      else
        setpagetablethumbdata('set version = ' +
          Formeditatext.ComboBox1.text, '');

      ActionThumbnailrefresh.Execute;
    Except

    end;
  end;
end;

procedure TFormMain.ActiongenCCreportExecute(Sender: TObject);
begin
  FormGenCCrep.ShowModal;
end;

procedure TFormMain.ActiongensingleexcelrepExecute(Sender: TObject);
begin
  if (TreeViewreportfilter.Selected = nil) or
    (TreeViewreportfilter.Selected.Level < 1) then
  Begin
    ShowMessage('Please select a production');
    exit;
  End;

  Formsingleexcelrep.Aktpublid :=
    TTreeViewpagestype(TreeViewreportfilter.Selected.Data^).Publicationid;
  Formsingleexcelrep.aktpubdate :=
    TTreeViewpagestype(TreeViewreportfilter.Selected.Data^).Pubdate;
  Formsingleexcelrep.aktproductionid := -1;

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('Select TOP 1 Productionid from pagetable (NOLOCK) ');
  Datam1.Query1.SQL.Add('where publicationid = ' +
    IntToStr(Formsingleexcelrep.Aktpublid));
  Datam1.Query1.SQL.Add('and ' + Datam1.makedatastr('pagetable.',
    Formsingleexcelrep.aktpubdate));
  Datam1.Query1.Open;

  if not Datam1.Query1.Eof then
  begin
    Formsingleexcelrep.aktproductionid := Datam1.Query1.Fields[0].AsInteger;
  end;
  Datam1.Query1.Close;
  if Formsingleexcelrep.aktproductionid > -1 then
    Formsingleexcelrep.ShowModal;
end;

procedure TFormMain.ActiontoolfindmasterExecute(Sender: TObject);
Var
  editiontext: String;
  APtext, AStext: String;
begin
  Formeditatext.caption := InfraLanguage1.Translate('Find page from master');
  Formeditatext.Label1.caption := 'Enter master number';
  Formeditatext.ComboBox1.Style := csDropDown;
  Formeditatext.ComboBox1.text := '';
  Formeditatext.ComboBox1.Items.Clear;

  if Formeditatext.ShowModal = mrOK then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select DISTINCT pubdate,publicationid,editionid,sectionid,pagename from pagetable (NOLOCK) ');
    Datam1.Query1.SQL.Add('where mastercopyseparationset = ' +
      Formeditatext.ComboBox1.text);
    Datam1.Query1.SQL.Add
      ('order by pubdate,publicationid,editionid,sectionid,pagename');
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
    begin
      APtext := tNames1.publicationIDtoname(Datam1.Query1.Fields[1].AsInteger) +
        ' ' + datetostr(Datam1.Query1.Fields[0].AsDateTime);

      AStext := tNames1.sectionidtoname(Datam1.Query1.Fields[3].AsInteger) + ' '
        + Datam1.Query1.Fields[4].AsString;
      editiontext := '';
      while not Datam1.Query1.Eof do
      begin
        editiontext := editiontext + tNames1.editionIDtoname
          (Datam1.Query1.Fields[2].AsInteger) + ',';
        Datam1.Query1.Next;
      end;
      Delete(editiontext, Length(editiontext), 1);
      MessageDlg('Publication ' + APtext + #13 + 'Edition(s) ' + editiontext +
        #13 + ' section/page ' + AStext, mtInformation, [mbOk], 0);

    End
    else
    begin
      MessageDlg(FormMain.InfraLanguage1.Translate('No page with that number'),
        mtInformation, [mbOk], 0);
    end;
    Datam1.Query1.Close;

  end;
end;

procedure TFormMain.ActionsettimededExecute(Sender: TObject);
var
  fromnode: TTreeNode;
begin
  if TreeViewNeweddtree.Selected = nil then
    exit;
  if TreeViewNeweddtree.Selected.Level < 3 then
    exit;
  fromnode := TreeViewNeweddtree.Selected;
  FormSelnexttimedEd.ProductionID := TTreeViewpagestype(fromnode.Data^)
    .ProductionID;
  FormSelnexttimedEd.SelEd := TTreeViewpagestype(fromnode.Data^).editionid;
  FormSelnexttimedEd.Loaddata;

  if FormSelnexttimedEd.ShowModal = mrOK then
  begin
    Actionrefreshhedtree.Execute;
  end;
end;

procedure TFormMain.GradientApanel(Apanel: TPanel; fromcolor: tcolor;
  Tocolor: tcolor; Horizontal: Boolean);

// husk at sætte rezie på panel til at kalde denne

  procedure DrawGradient(ACanvas: TCanvas; Rect: TRect; Horicontal: Boolean;
    Colors: array of tcolor);
  type
    RGBArray = array [0 .. 2] of Byte;
  var
    X, Y, z, stelle, mx, bis, faColorsh, mass: Integer;
    Faktor: double;
    A: RGBArray;
    b: array of RGBArray;
    merkw: Integer;
    merks: TPenStyle;
    merkp: tcolor;
  begin
    mx := High(Colors);
    if mx > 0 then
    begin
      if Horicontal then
        mass := Rect.right - Rect.left
      else
        mass := Rect.bottom - Rect.Top;
      SetLength(b, mx + 1);
      for X := 0 to mx do
      begin
        Colors[X] := ColorToRGB(Colors[X]);
        b[X][0] := GetRValue(Colors[X]);
        b[X][1] := GetGValue(Colors[X]);
        b[X][2] := GetBValue(Colors[X]);
      end;
      merkw := ACanvas.pen.width;
      merks := ACanvas.pen.Style;
      merkp := ACanvas.pen.Color;
      ACanvas.pen.width := 1;
      ACanvas.pen.Style := psSolid;
      faColorsh := round(mass / mx);
      for Y := 0 to mx - 1 do
      begin
        if Y = mx - 1 then
          bis := mass - Y * faColorsh - 1
        else
          bis := faColorsh;
        for X := 0 to bis do
        begin
          stelle := X + Y * faColorsh;
          Faktor := X / bis;
          for z := 0 to 2 do
            A[z] := Trunc(b[Y][z] + ((b[Y + 1][z] - b[Y][z]) * Faktor));
          ACanvas.pen.Color := RGB(A[0], A[1], A[2]);
          if Horicontal then
          begin
            ACanvas.MoveTo(Rect.left + stelle, Rect.Top);
            ACanvas.LineTo(Rect.left + stelle, Rect.bottom);
          end
          else
          begin
            ACanvas.MoveTo(Rect.left, Rect.Top + stelle);
            ACanvas.LineTo(Rect.right, Rect.Top + stelle);
          end;
        end;
      end;
      b := nil;
      ACanvas.pen.width := merkw;
      ACanvas.pen.Style := merks;
      ACanvas.pen.Color := merkp;
    end
    else
    begin

    end;
  end;

Const
  bgcolor = $00FFDDEE;
  linecolor = $00554366;
var
  r: TRect;
  Colors: array of tcolor;

begin
  SetLength(Colors, 2);

  Colors[0] := fromcolor;
  Colors[1] := Tocolor;

  r.left := 0;
  r.right := Apanel.width;
  r.Top := 0;
  r.bottom := Apanel.Height;

  DrawGradient(THackPanel(Apanel).Canvas, r, Horizontal, Colors);

  THackPanel(Apanel).Canvas.Textout(8, 3, Apanel.caption);
end;

// ???????????????????????????????????????????

procedure TFormMain.TimerPlateviewPopupTimer(Sender: TObject);
Var
  i, i2, Y, X: Integer;
begin
  if not StartuPdone then
    exit;
  try

    TimerPlateviewPopup.Enabled := false;
    Timerautorefresh.Enabled := false;
    i2 := 0;
    for i := 0 to PopupActionBarEx1plateview.Items.Count - 1 do
    begin
      if PopupActionBarEx1plateview.Items[i].Visible then
        Inc(i2);
    end;
    i2 := i2 + 4;
    Y := FormMain.Top + PlateviewMain.Top + plateviewmousecoord.Y +
      TabSheetplates.Top + PageControlMain.Top;

    Y := mouse.CursorPos.Y;
    X := mouse.CursorPos.X;

    // FormMain.Left+PanelMainplateviewpanel.Left+ plateviewmousecoord.x

    PopupActionBarEx1plateview.Popup(X, Y);

  Finally
    Timerautorefresh.Enabled := true;
    // TimerPlateviewPopup.Enabled := false;
  end;
end;

procedure TFormMain.ActionplateprintlistExecute(Sender: TObject);
begin
  FormPlateprint.makeplateprinttext(Views[Viewselected].pressid,
    Views[Viewselected].pressrunid);
  // FormPlateprint.show;
  FormPlateprint.Plateprint(Views[Viewselected].pressrunid);
end;

function TFormMain.dateandtimetostr(Adate: TDateTime; ATime: TDateTime): String;
Var
  adatetime: TDateTime;
begin

  adatetime := DateOf(Adate) + TimeOf(ATime);
  result := DateTimeToStr(adatetime);
end;

procedure TFormMain.strTodateandtime(Adatetimestr: String; Var Adate: TDateTime;
  Var ATime: TDateTime);
Var
  adatetime: TDateTime;
begin
  adatetime := strtodatetime(Adatetimestr);
  Adate := DateOf(adatetime);
  ATime := TimeOf(adatetime);
end;

function TFormMain.GetDatabaseDateTree: String;
Var
  Adate: TDateTime;
begin
  Adate := Now;
  result := '';
  Datam1.Querytree.SQL.Clear;
  Datam1.Querytree.SQL.Add('SELECT GETDATE()');
  Datam1.Querytree.Open;
  if not Datam1.Querytree.Eof then
    Adate := DateOf(Datam1.Querytree.Fields[0].AsDateTime);
  Datam1.Querytree.Close;

  result := IntToStr(MonthOf(Adate)) + '/' + IntToStr(DayOf(Adate)) + '/' +
    IntToStr(YearOf(Adate));

end;

procedure TFormMain.loadAPlatetree(Ltree: TTreeView; frontorderstr: string;
  press: string; Location: string; Pubdatetext: String);
(* procedure fastsetlamps;
  Var
  I : Integer;
  begin
  for i := 0 to Ltree.Items.Count-1 do
  begin
  if Ltree.Items[i].level > 1 then
  begin
  Ltree.Items[i].StateIndex := 9;
  end;
  end;
  end;
*)
  procedure setlamps(LocationID: Integer; pressid: String;
    UsePubdatefilter: Boolean; Pubdatefilter: TDateTime);

    procedure setparentstate(anode: TTreeNode);
    Var
      Childnode: TTreeNode;
      Statesum: Integer;
      akthigh, nonecommon, aktnonecommon: Integer;
      sumorder: array [0 .. 10] of Integer;
    begin

      sumorder[0] := 0; // blank
      sumorder[2] := 1; // missing
      sumorder[1] := 2; // All imaged
      sumorder[3] := 3; // Some imaged
      sumorder[6] := 4; // All common
      sumorder[4] := 5; // Some received
      sumorder[9] := 6; // All imaged once
      sumorder[8] := 7; // Imaging
      sumorder[7] := 8; // Error
      sumorder[5] := 9; // Some not approved   !

      akthigh := 0;
      aktnonecommon := 0;
      Childnode := anode.GetFirstChild;
      Statesum := 0;
      nonecommon := 0;
      while Childnode <> nil do
      begin

       (* if (anode.Level = 2) and (Childnode.StateIndex = 6) then         // Pub level - All common
        begin
        end
        else
               *)
        if (anode.Level <> 2) or (Childnode.StateIndex <> 6) then
        begin

          if Statesum < sumorder[Childnode.StateIndex] then
          begin
            Statesum := sumorder[Childnode.StateIndex];
            akthigh := Childnode.StateIndex;
          end;
        end;

        if (Childnode.StateIndex <> 6) then
        begin

          if (nonecommon < sumorder[Childnode.StateIndex]) then
          begin
            nonecommon := sumorder[Childnode.StateIndex];
            aktnonecommon := Childnode.StateIndex;
          end;
        end;

        Childnode := Childnode.getNextSibling;
      end;
      anode.StateIndex := akthigh;

      if (anode.StateIndex = 6) and (aktnonecommon > 0) then
      begin
        anode.StateIndex := aktnonecommon;
      end;

    end;

  var
    T: String;
    NSQLData, di: Integer;
    SQLData: Array of record pressrunid: Integer;
    status: Integer;
    uniquepage: Integer;
    approved: Integer;
    thisNotApproved: Boolean;
    outputversion: Integer;
  end;
  Npressruns, ipr: Integer;
  pressruns: Array of record pressrunid: Integer;
    State: Integer;
    OrgState: Integer;
    Anymissing: Boolean;
    Anyreceived: Boolean;
    SomeImaged: Boolean;
    AnyImaged: Boolean;
    Anyimaging: Boolean;
    anyerror: Boolean;
    AllImaged: Boolean;
    Allcommon: Boolean;
    SomeNotapproved: Boolean;
    AllImagedOnce: Boolean;
  end;
  aktpressRunid: Integer;
  ISTD, i: Integer;
  SQLCurrentDate: String;
  AllVisible: Boolean;
  WeekNumber : Integer;
  YearOfWeekNumber : Integer;
begin

  // tnames1.Loadnames;
  tNames1.LoadnamesSmall;

  Wtowerstr := '';
  WP1towerstr := '';

  AllVisible := true;
  for i := 0 to Length(Prefs.VisibleTowers) - 1 do
  begin
    if (Prefs.VisibleTowers[i].Visible) AND Prefs.LimitTowers then
    begin
      Wtowerstr := ' and PressTower in (' + '''' + '-99' + '''';
      WP1towerstr := ' and p1.PressTower in (' + '''' + '-99' + '''';
      break;
    end;
    if (not Prefs.VisibleTowers[i].Visible) then
      AllVisible := false;
  end;
  if Wtowerstr <> '' then
  begin
    for i := 0 to Length(Prefs.VisibleTowers) - 1 do
    begin
      if (Prefs.VisibleTowers[i].Visible) then
      begin
        T := Prefs.VisibleTowers[i].Tower;
        Delete(T, 1, pos('-', T));

        Wtowerstr := Wtowerstr + ',' + '''' + T + '''';
        WP1towerstr := WP1towerstr + ',' + '''' + T + '''';
      end;
    end;
    Wtowerstr := Wtowerstr + ')';
    WP1towerstr := WP1towerstr + ')';
  end;

  if (AllVisible) then
  begin
    Wtowerstr := '';
    WP1towerstr := '';
  end;

  SQLCurrentDate := GetDatabaseDateTree;

  Datam1.Querytree.SQL.Clear;
  Datam1.Querytree.SQL.Add('Select distinct p.pressrunid,p.status,p.uniquepage,p.approved,p.pressid,p.outputversion from pagetable p (NOLOCK)');
  Datam1.Querytree.SQL.Add('Where p.active = 1 and p.pagetype < 3 and p.dirty = 0 and DATEPART(year,p.PubDate) < 2100');
  if (WeditionStr <> '') then
    Datam1.Querytree.SQL.Add(WeditionStr);
  if (WpublicationStr <> '') then
    Datam1.Querytree.SQL.Add(WpublicationStr);
  if (Wtowerstr <> '') then
    Datam1.Querytree.SQL.Add(Wtowerstr);

  if ComboBoxGlobalPubDateFilter.text <> LabelAlldays.Caption then
  begin
    if ComboBoxGlobalPubDateFilter.text = LabelFromtoday.Caption then
    begin
      // Datam1.Querytree.SQL.Add(' and (p.pubdate >= ''' + SQLCurrentDate + ''')');
      // Datam1.Querytree.SQL.Add(' and (p.pubdate >= CAST(DATEPART(month,GETDATE()) as varchar(4)) + ''/'' + CAST(DATEPART(day,GETDATE()) as varchar(4)) + ''/'' + CAST(DATEPART(year,GETDATE()) as varchar(4)))');
      Datam1.Querytree.SQL.Add(' and (DATEDIFF(day,GETDATE(),p.pubdate) >= 0)');
    end
    else
    begin
      If (not Prefs.ShowWeekNumberInTree) then
      begin // Dato
        Pubdatefilter := StrToDate(ComboBoxGlobalPubDateFilter.text);
        Datam1.Querytree.SQL.Add(' and ' + Datam1.makedatastr('',
          Pubdatefilter));
      end
      else
      begin // Uge
        WeekNumber :=   StrToInt(Copy(ComboBoxGlobalPubDateFilter.text, 1, 2));
        YearOfWeekNumber := StrToInt(Copy(ComboBoxGlobalPubDateFilter.text, 4, 8));
          if (WeekNumber = 53) AND ((YearOfWeekNumber = 2020) OR (YearOfWeekNumber = 2021)) then
          begin
               Datam1.Querytree.SQL.Add(' and (p.pubdate >= ''2020-12-28'')' );
               Datam1.Querytree.SQL.Add(' and (p.pubdate <= ''2021-01-03'')' );
          end
          else
          begin
            Pubdatefilter :=StartOfAWeek(YearOfWeekNumber, WeekNumber);
            Datam1.Querytree.SQL.Add(' and (p.pubdate >= ''' +
                FormaTDateTime('YYYY-MM-DD', Pubdatefilter) + ''')');
            Pubdatefilter := EndOfAWeek(YearOfWeekNumber, WeekNumber);
            Datam1.Querytree.SQL.Add(' and (p.pubdate <= ''' +
              FormaTDateTime('YYYY-MM-DD', Pubdatefilter) + ''')');
          end;
      end;
    end;
  end;

  if LocationID > 0 then
    Datam1.Querytree.SQL.Add('and p.locationid = ' + IntToStr(LocationID));

  if Pressvisibilylimited then
    Datam1.Querytree.SQL.Add('and p.pressid IN ' + PressvisibilyIN);

  Datam1.Querytree.SQL.Add('order by p.pressid,p.pressrunid');
  Datam1.Querytree.Open;

  NSQLData := 0;
  aktpressRunid := -1;
  Npressruns := 0;
  di := 0;
  while not Datam1.Querytree.Eof do
  begin
    Inc(NSQLData);
    Inc(di);
    SetLength(SQLData, NSQLData + 100);

    SQLData[di - 1].pressrunid := Datam1.Querytree.Fields[0].AsInteger;
    SQLData[di - 1].status := Datam1.Querytree.Fields[1].AsInteger;
    SQLData[di - 1].uniquepage := Datam1.Querytree.Fields[2].AsInteger;
    SQLData[di - 1].approved := Datam1.Querytree.Fields[3].AsInteger;
    SQLData[di - 1].thisNotApproved := (SQLData[di - 1].status > 0) AND
      (SQLData[di - 1].approved IN [0, 2]) AND
      (SQLData[di - 1].uniquepage <> 0);
    SQLData[di - 1].outputversion := Datam1.Querytree.Fields[5].AsInteger;

    if aktpressRunid <> SQLData[di - 1].pressrunid then
    begin
      aktpressRunid := SQLData[di - 1].pressrunid;
      Inc(Npressruns);
    end;
    Datam1.Querytree.Next;
  end;
  Datam1.Querytree.Close;

  SetLength(pressruns, Npressruns + 100);
  for ipr := 0 to Npressruns - 1 do
  begin
    With pressruns[ipr] do
    begin
      State := -1;
      Anymissing := false;
      Anyreceived := false;
      AnyImaged := false;
      Anyimaging := false;
      anyerror := false;
      AllImaged := true;
      Allcommon := true;
      SomeNotapproved := false;
      AllImagedOnce := true;
    end;
  end;
  ipr := -1;
  aktpressRunid := -1;
  for di := 0 to NSQLData - 1 do
  begin
    if aktpressRunid <> SQLData[di].pressrunid then
    begin
      aktpressRunid := SQLData[di].pressrunid;
      Inc(ipr);
      pressruns[ipr].pressrunid := SQLData[di].pressrunid;
    end;

    With pressruns[ipr] do
    begin
      if (SQLData[di].outputversion = 0) And (SQLData[di].uniquepage > 0) then
        AllImagedOnce := false;

      if (SQLData[di].status = 0) And (SQLData[di].uniquepage > 0) then
        Anymissing := true;
      if (SQLData[di].status > 0) And (SQLData[di].uniquepage <> 0) then
        Anyreceived := true;
      if SQLData[di].status IN [6, 16, 26, 36, 46, 56] then
        Anyerror := true
      else
      begin
        if SQLData[di].status >= 50 then
          AnyImaged := true;

        if (SQLData[di].status > 30) and (SQLData[di].status < 50) then
          Anyimaging := true;
      end;

      if (SQLData[di].status < 50) then
        AllImaged := false;
      if SQLData[di].uniquepage > 0 then
        Allcommon := false;

      if (not SomeNotapproved) and (SQLData[di].thisNotApproved) and
        (not AllImaged) and (SQLData[di].approved in [0, 2]) then
      begin
        SomeNotapproved := true;
      end;

    end;
  end;

  for ipr := 0 to Npressruns - 1 do
  begin
    With pressruns[ipr] do
    begin
      State := 0;

      if Anyreceived then
        State := 1;

      if (AllImagedOnce) and (Allcommon = false) and (Prefs.IncludeImageOnceState) then
        State := 8;

      if SomeNotapproved then
        State := 7;

      if (AnyImaged) and (Anymissing) then
        State := 2;

      if AllImaged then
        State := 3;

      if Anyimaging then
        State := 4;

      if (Allcommon) And (State <= 1) then
        State := 5;

      if anyerror then
        State := 6;

    end;
  end;

  for ipr := 0 to Npressruns - 1 do
  begin
    With pressruns[ipr] do
    begin
      case State of
        0:
          ISTD := 2; // 0    =  2      missing
        1:
          ISTD := 4; // 1    =  4      received
        2:
          ISTD := 3; // 2    =  3      some missing some imaged
        3:
          ISTD := 1; // 3    =  1      All imaged
        4:
          ISTD := 8; // 4    =  8      Imaging
        5:
          ISTD := 6; // 5    =  6      All common
        6:
          ISTD := 7; // 6    =  7      ERROR
        7:
          ISTD := 5; // 7    =  5      Some not approved
        8:
          ISTD := 9; // 8    =  9      All imaged once (outputversion>=1)
      else
        ISTD := 0; // blank
      end;
      State := ISTD;
    end;
  end;

  // Apply state to tree control
  for i := 0 to Ltree.Items.Count - 1 do
  begin
    if Ltree.Items[i].Level = 4 then
    begin
      for ipr := 0 to Npressruns - 1 do
      begin
        if TTreeViewpagestype(Ltree.Items[i].Data^).pressrunid = pressruns[ipr].pressrunid
        then
        begin
          TTreeViewpagestype(Ltree.Items[i].Data^).StateIndex := pressruns[ipr].State;
          Ltree.Items[i].StateIndex := TTreeViewpagestype(Ltree.Items[i].Data^).StateIndex;

          break;
        end;
      end;
    end;
  end;

  for i := 0 to Ltree.Items.Count - 1 do
  begin
    if Ltree.Items[i].Level = 3 then
    begin
      setparentstate(Ltree.Items[i]);
    end;
  end;

  for i := 0 to Ltree.Items.Count - 1 do
  begin
    if Ltree.Items[i].Level = 2 then
    begin
      setparentstate(Ltree.Items[i]);
    end;
  end;

end;

// Her starter LoadAPlateTree.....!!
Var
  N, locationnode, productionnode, datenode, publicationnode, issuenode,
    editionnode, sectionnode: TTreeNode;
  LocationID, Publicationid, issueid, editionid, Sectionid: Integer;
  aktpubdate: TDateTime;
  curlev, locationcur, productioncur, publicationcur, issuecur, editioncur,
    sectioncur: Integer;

  found: Boolean;
  hfound: Integer;
  fnode: TTreeNode;
  pressid, groupstr, orderstr, selectstr, Publicationnametext: string;

  i, starti: Integer;
  curnodes: Array [0 .. 7] of TTreeNode;
  trdat: PTTreeViewpagestype;

  Publid, edid, secid: Integer;
  Pdate: TDateTime;

  aktselected: TTreeNode;
  Naktseltext: Integer;
  aktseltext: array [0 .. 4] of string;
  aktproductionid, astaste, Minstate, Maxstate: Integer;
  AllImaged, allmissing, Anyimaging, anyready, anyerror, allunique,
    someimsommis: Boolean;
  Level: Integer;

  anode, Dnode, Pnode, enode, snode: TTreeNode;
  Pstate: Array [1 .. 9] of Boolean;
  Estate: Array [1 .. 9] of Boolean;
  AnySnotcommon: Boolean;

  nextleveldate, T, T2: String;

  Pubdatefilter: TDateTime;
  aktpress: Integer;
  APressrunselstr: String;
  EdImidx: Integer;
  Notappliedpressruns, AkLnameT: String;
  presssectionnumber: Integer;
  pressrunid: Integer;
  SQLCurrentDate: String;
  thisPressID: Integer;
  thisPlanType: Integer;
  thisPressSectionNumber: Integer;
  thisPubDate: TDateTime;
  thisPublicationID: Integer;
  thisEditionID: Integer;
  thisSectionID: Integer;
  thisPressRunMiscInt2: Integer;
  thisPressRunID: Integer;
  thisProductionID: Integer;
  thisPressRunOrderNumber: string;
  thisProductionOrderNumber: string;
  thisProductionComment: string;
  thisPressRunComment: string;
   WeekNumber : Integer;
   YearOfWeekNumber : Integer;
   groupbystr : string;
   dayName : string;
  // thisIssueID : Integer;
begin
  starti := 1;
  if Prefs.LoggedIN then
  begin
    try
      MainUpdateing := true;

      if (ComboBoxpalocationNY.Enabled = false) or (Location = 'All') then
        Location := '*';

      checkfiltercount := -1;

      writeMainlogfile('Startmakeplatetree');
      keeptreesLoading := true;
      mainrefreshing := true;
      TreeStopit := true;
      MainUpdateing := true;

      LocationID := -99;
      pressid := '(-99)';
      Ltree.Items.BeginUpdate;
      if (Location <> '*') and (Location <> '') then
      begin
        LocationID := tNames1.locationnametoid(Location);
      end;

      if (Prefs.TreeExtraPublicationText[4]) then
      begin
        LoadTreePublInputalais; // Really??
      end;

      MainUpdateing := true;

      if CheckBoxNounplanned.Checked then
      begin
        Datam1.Querytree.SQL.Clear;
        // Datam1.Query1.SQL.Add('Select distinct p2.pressrunid,p1.productionid,p3.productionid  ');
        // Datam1.Query1.SQL.Add('from pagetable P1 (NOLOCK), pressrunid p2 (NOLOCK) ');
        // Datam1.Query1.SQL.Add('Where p1.pressrunid = p2.pressrunid and p2.plantype = 0  and p1.dirty = 0 ');

        // NAN 20150915 #####
        Datam1.Querytree.SQL.Add
          ('SELECT DISTINCT P2.PressRunID,P1.ProductionID FROM PageTable P1 (NOLOCK) ');
        Datam1.Querytree.SQL.Add
          ('INNER JOIN PressRunID P2 (NOLOCK) ON P1.PressRunID=P2.PressRunID ');
        Datam1.Querytree.SQL.Add
          ('INNER JOIN ProductionNames P3 (NOLOCK) ON P1.ProductionID=P3.ProductionID ');
        Datam1.Querytree.SQL.Add
          ('WHERE (P2.PlanType = 0 OR P3.PlanType=0)  AND P1.Dirty = 0 ');

        if Pressvisibilylimited then
          Datam1.Querytree.SQL.Add('AND P1.Pressid IN ' + PressvisibilyIN);
        if LocationID > 0 then
          Datam1.Querytree.SQL.Add('AND P1.Locationid = ' + IntToStr(LocationID));
        Datam1.Querytree.Open;
        Notappliedpressruns := '(-99';

        while not Datam1.Querytree.Eof do
        begin
          Notappliedpressruns := Notappliedpressruns + ',' + Datam1.Querytree.Fields[0].AsString;
          Datam1.Querytree.Next;
        end;
        // Datam1.Querytree.SQL.Add(Wp1towerstr);
        Datam1.Querytree.Close;
        Notappliedpressruns := Notappliedpressruns + ')';
      end;
      writeMainlogfile('Plate tree invisible');
      Ltree.Visible := false;

      APressrunselstr := '';

      if (TreeViewPlateview = Ltree) And (CheckBoxolreadyplates.Checked) then
      begin

        SQLCurrentDate := GetDatabaseDateTree;
        MainUpdateing := true;

        Datam1.Querytree.SQL.Clear;
        Datam1.Querytree.SQL.Add('Select distinct p1.pressrunid ');
        Datam1.Querytree.SQL.Add('from pagetable P1 (NOLOCK)');
        Datam1.Querytree.SQL.Add('where (p1.active = 1  and p1.dirty = 0 ) ');

        if ComboBoxGlobalPubDateFilter.text = LabelAlldays.caption then
        begin
        end
        else
        begin
          if ComboBoxGlobalPubDateFilter.text = LabelFromtoday.caption then
          begin
            // Datam1.Querytree.SQL.Add(' and (p.pubdate >= ''' + SQLCurrentDate + ''')');
            // Datam1.Querytree.SQL.Add(' and (p1.pubdate >= CAST(DATEPART(month,GETDATE()) as varchar(4)) + ''/'' + CAST(DATEPART(day,GETDATE()) as varchar(4)) + ''/'' + CAST(DATEPART(year,GETDATE()) as varchar(4)))');
            Datam1.Querytree.SQL.Add(' and (DATEDIFF(day,GETDATE(),p.pubdate) >= 0)');
          end
          else
          begin
            If (not Prefs.ShowWeekNumberInTree) then
            begin // Dato
              Pubdatefilter := StrToDate(ComboBoxGlobalPubDateFilter.text);
              Datam1.Querytree.SQL.Add(' and ' + Datam1.makedatastr('p1.',Pubdatefilter));
            end
            else
            begin // Uge
              WeekNumber :=   StrToInt(Copy(ComboBoxGlobalPubDateFilter.text, 1, 2));
             YearOfWeekNumber := StrToInt(Copy(ComboBoxGlobalPubDateFilter.text, 4, 8));
                    if (WeekNumber = 53) AND ((YearOfWeekNumber = 2020) OR (YearOfWeekNumber = 2021)) then
            begin
                 Datam1.Querytree.SQL.Add(' and (p1.pubdate >= ''2020-12-28'')' );
                 Datam1.Querytree.SQL.Add(' and (p1.pubdate <= ''2021-01-03'')' );
            end
            else
            begin

              Pubdatefilter :=   StartOfAWeek(YearOfWeekNumber, WeekNumber);
              Datam1.Querytree.SQL.Add(' and (p1.pubdate >= ''' +
                FormaTDateTime('YYYY-MM-DD', Pubdatefilter) + ''')');
              Pubdatefilter :=EndOfAWeek(YearOfWeekNumber, WeekNumber);
              Datam1.Querytree.SQL.Add(' and (p1.pubdate <= ''' +
                FormaTDateTime('YYYY-MM-DD', Pubdatefilter) + ''')');
              end;
            end;
          end;
        end;

        if LocationID <> -99 then
        begin
          Datam1.Querytree.SQL.Add('and P1.locationid = ' +
            IntToStr(LocationID));
        end;

        if Pressvisibilylimited then
          Datam1.Querytree.SQL.Add('and p1.pressid IN ' + PressvisibilyIN);

        if (WP1towerstr <> '') then
          Datam1.Querytree.SQL.Add(WP1towerstr);
        Datam1.Querytree.SQL.Add('and (Uniquepage = 1 or Uniquepage = 2)');
        Datam1.Querytree.SQL.Add('and status = 30 and (approved = 1 or approved = -1) and (active = 1)');

        // Datam1.Query1.SQL.Add('and not exists (Select pr.plantype from pressrunid pr where pr.pressrunid = p1.pressrunid and pr.plantype = 0)');

        Datam1.Querytree.SQL.Add('and not exists (');
        Datam1.Querytree.SQL.Add('select p3.flatseparation from pagetable p3 (NOLOCK)');
        Datam1.Querytree.SQL.Add('where p1.flatseparation = p3.flatseparation and p3.active = 1 and (p3.status < 30 or (p3.approved = 2 or p3.approved = 0)  ))');

          // 20211004 - disabled
      // Datam1.Querytree.SQL.Add('and not exists (');
     //   Datam1.Querytree.SQL.Add
      //   ('select p4.flatseparationset from pagetable p4 (NOLOCK)');
      //  Datam1.Querytree.SQL.Add
       //   ('where p1.flatseparationset = p4.flatseparationset and p4.active = 1 and ((p4.approved = 2 or p4.approved = 0)  ))');

        APressrunselstr := '(-22,';
        if Prefs.Debug then
          Datam1.Querytree.SQL.SaveToFile(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +  'sqllogs\' + 'loadplatetreemin.SQL');
        Datam1.Querytree.Open;
        while not Datam1.Querytree.Eof do
        begin
          APressrunselstr := APressrunselstr + Datam1.Querytree.Fields[0].AsString + ',';
          Datam1.Querytree.Next;
        end;
        Datam1.Querytree.Close;
        APressrunselstr := APressrunselstr + '-99)';
      end;

      MainUpdateing := true;
      Sellevelkinds[0] := 0;

      NSellevels := 1;

      Inc(NSellevels);
      Sellevelkinds[NSellevels - 1] := 1;
      Inc(NSellevels);
      Sellevelkinds[NSellevels - 1] := 2;
      Inc(NSellevels);
      Sellevelkinds[NSellevels - 1] := 4;
      Inc(NSellevels);
      Sellevelkinds[NSellevels - 1] := 5;

      Datam1.Querytree.SQL.Clear;
      // 0              1              2            3               4          5            6                                        7
      Datam1.Querytree.SQL.Add
      ('Select distinct p1.pubdate,p1.publicationid,p1.editionid,p1.sectionid,pr.productionid,pr.plantype,ISNULL(c.customername,'''') AS CustomerName,p1.miscint2');
      // 8                                  9    10       11       12           13           14
      Datam1.Querytree.SQL.Add
        (', p2.ordernumber as pressrunidordernumber,1,e1.name,pl.name,p2.pressrunid,p2.InkComment,p2.comment');
      // 15          16
      Datam1.Querytree.SQL.Add(',p1.locationid,p1.pressid ');
      // 17               18
      Datam1.Querytree.SQL.Add
        (',p1.PressSectionNumber,Max(p1.Presstime) as Prtid ');

      if (TimedEdPossible) then
        Datam1.Querytree.SQL.Add
          (', p2.TimedEditionTo,p2.TimedEditionFrom,p2.TimedEditionState,P2.MiscInt2 AS PressRunIDMiscInt2');

      Datam1.Querytree.SQL.Add(',PRE.PressName ');

      if (Prefs.TreeExtraPublicationText[6]) then
        Datam1.Querytree.SQL.Add(',ISNULL(IA.Shortname,'''') as iashortname');
         if (Prefs.TreeExtraPublicationText[7]) then
        Datam1.Querytree.SQL.Add(',ISNULL(OA.Shortname,'''') as oashortname');

      if (Prefs.SectionText[4]) then
        Datam1.Querytree.SQL.Add(',P1.Comment AS pcomment');


      // ########
      if (Prefs.TreeExtraPublicationText[9]) then
        Datam1.Querytree.SQL.Add(',Pr.OrderNumber AS prordernumber');

      // ########
      if (PressRunIDPlanVersionPossible) then
        Datam1.Querytree.SQL.Add(',P2.PlanVersion as PRplanversion');

      Datam1.Querytree.SQL.Add(',SEC.Name');

      Datam1.Querytree.SQL.Add('from pagetable p1 (NOLOCK)');
      Datam1.Querytree.SQL.Add
        ('left outer join customernames c (NOLOCK) on p1.customerid=c.customerid');
      Datam1.Querytree.SQL.Add
        ('inner join productionnames pr (NOLOCK) on pr.productionid=p1.productionid');
      Datam1.Querytree.SQL.Add
        ('left outer join pressrunid p2 (NOLOCK) on p1.pressrunid=p2.pressrunid');
      Datam1.Querytree.SQL.Add
        ('inner join editionnames e1 (NOLOCK) on e1.editionid=p1.editionid');
      Datam1.Querytree.SQL.Add
        ('inner join sectionnames sec (NOLOCK) on sec.sectionid=p1.sectionid');
      Datam1.Querytree.SQL.Add
        ('inner join PublicationNames PL (NOLOCK) on PL.publicationid=p1.publicationid');
      if (Prefs.TreeExtraPublicationText[6]) then
        Datam1.Querytree.SQL.Add
          ('LEFT JOIN InkAliases IA (NOLOCK) on IA.Type=''Publication'' AND IA.Longname=PL.name');
      if (Prefs.TreeExtraPublicationText[7]) then
        Datam1.Querytree.SQL.Add
          ('LEFT JOIN OutputAliases OA (NOLOCK) on OA.Type=''Publication'' AND OA.Longname=PL.name');

      Datam1.Querytree.SQL.Add
        ('inner join PressNames PRE (NOLOCK) on PRE.pressid=p1.pressid');
      Datam1.Querytree.SQL.Add
        ('Where p1.pagetype < 3 and p1.active = 1 and p1.dirty = 0 ');

      // Datam1.Querytree.SQL.Add('and p2.plantype <> 0 ');
      if (WP1editionStr <> '') then
        Datam1.Querytree.SQL.Add(WP1editionStr);
      if (WP1publicationStr <> '') then
        Datam1.Querytree.SQL.Add(WP1publicationStr);
      if (WP1towerstr <> '') then
        Datam1.Querytree.SQL.Add(WP1towerstr);

      if LocationID <> -99 then
        Datam1.Querytree.SQL.Add('and p1.locationid = ' + IntToStr(LocationID));

      if Pressvisibilylimited then
      begin
        Datam1.Querytree.SQL.Add('and p1.pressid IN ' + PressvisibilyIN);
        if (Prefs.TreeExtraPublicationText[6]) then
          Datam1.Querytree.SQL.Add('and IA.pressid IN ' + PressvisibilyIN);

      end;
      if ComboBoxGlobalPubDateFilter.text = LabelAlldays.caption then
      begin
      end
      else
      begin
        if ComboBoxGlobalPubDateFilter.text = LabelFromtoday.caption then
        begin
          // Datam1.Querytree.SQL.Add(' and p1.pubdate >= CONVERT (date, GETDATE())' );
          // Datam1.Querytree.SQL.Add(' and (p1.pubdate >= CAST(DATEPART(month,GETDATE()) as varchar(4)) + ''/'' + CAST(DATEPART(day,GETDATE()) as varchar(4)) + ''/'' + CAST(DATEPART(year,GETDATE()) as varchar(4)))');
          Datam1.Querytree.SQL.Add
            (' and (DATEDIFF(day,GETDATE(),p1.pubdate) >= 0)');

        end
        else
        begin
          If (not Prefs.ShowWeekNumberInTree) then
          Begin // Dato
            Pubdatefilter := StrToDate(ComboBoxGlobalPubDateFilter.text);
            Datam1.Querytree.SQL.Add(' and ' + Datam1.makedatastr('p1.',
              Pubdatefilter));
          End
          else
          Begin // Uge nr
             WeekNumber :=   StrToInt(Copy(ComboBoxGlobalPubDateFilter.text, 1, 2));
             YearOfWeekNumber := StrToInt(Copy(ComboBoxGlobalPubDateFilter.text, 4, 8));
              if (WeekNumber = 53) AND ((YearOfWeekNumber = 2020) OR (YearOfWeekNumber = 2021)) then
            begin
                 Datam1.Querytree.SQL.Add(' and (p1.pubdate >= ''2020-12-28'')' );
                 Datam1.Querytree.SQL.Add(' and (p1.pubdate <= ''2021-01-03'')' );
            end
            else
            begin
              Pubdatefilter := StartOfAWeek(YearOfWeekNumber, WeekNumber);
              Datam1.Querytree.SQL.Add(' and (p1.pubdate >= ''' +
                FormaTDateTime('YYYY-MM-DD', Pubdatefilter) + ''')');
              Pubdatefilter := EndOfAWeek(YearOfWeekNumber, WeekNumber);
              Datam1.Querytree.SQL.Add(' and (p1.pubdate <= ''' +
                FormaTDateTime('YYYY-MM-DD', Pubdatefilter) + ''')');
            end;
          End;
        end;
      end;

      if (TreeViewPlateview = Ltree) And (CheckBoxolreadyplates.Checked) then
      begin
        Datam1.Querytree.SQL.Add(' and p1.pressrunid IN ' + APressrunselstr);
      end;

      if CheckBoxNounplanned.Checked then
        Datam1.Querytree.SQL.Add(' and p1.pressrunid not IN ' +
          Notappliedpressruns);

      if (Prefs.TreeExtraPublicationText[6]) then
        orderstr :=
          'p1.locationid,PRE.PressName, p1.pressid,p1.pubdate,IAshortname, pl.name,p1.publicationid'
        // ,e1.Name
      else  if (Prefs.TreeExtraPublicationText[7]) then
        orderstr :=
          'p1.locationid,PRE.PressName, p1.pressid,p1.pubdate,OAshortname, pl.name,p1.publicationid'
      else
        orderstr :=
          'p1.locationid,PRE.PressName, p1.pressid,p1.pubdate,pl.name,p1.publicationid';
      // ,e1.Name

      if (Prefs.TreeOrder <> 1) OR (Prefs.SeparateNodesPerPressrun) then
        orderstr := orderstr + ',p1.PressSectionNumber ';
      if (Prefs.SeparateNodesPerPressrun) then
        orderstr := orderstr + ',p2.PressRunID ';

      orderstr := orderstr +
       // ',e1.Name,p1.editionid,p1.sectionid,pr.productionid,pr.plantype,customername,p1.miscint2';
        ',e1.Name,p1.editionid,SEC.Name,P1.SectionID,pr.productionid,pr.plantype,customername,p1.miscint2';
      if (Prefs.SeparateNodesPerPressrun) then
        orderstr := orderstr + ',p2.ordernumber,p2.InkComment,p2.comment   '
      else
        orderstr := orderstr +
          ',p2.ordernumber,p2.pressrunid,p2.InkComment,p2.comment   ';

      if (Prefs.TreeOrder = 1) then
        orderstr := orderstr + ',p1.PressSectionNumber ';

      if (TimedEdPossible) then
        orderstr := orderstr +
          ', p2.TimedEditionTo,p2.TimedEditionFrom,p2.TimedEditionState,P2.MiscInt2';

      if (PressRunIDPlanVersionPossible) then
        orderstr := orderstr + ',P2.PlanVersion';

      groupbystr := orderstr;
      groupbystr := StringReplace( groupbystr, 'iashortname','ia.shortname', [rfIgnoreCase]);
      groupbystr := StringReplace( groupbystr, 'oashortname','oa.shortname',  [rfIgnoreCase]);

      //if (Prefs.TreeExtraPublicationText[6]) then
      //  Datam1.Querytree.SQL.Add('group by ' + orderstr + ',IA.shortname')
      //else if (Prefs.TreeExtraPublicationText[7]) then
      //  Datam1.Querytree.SQL.Add('group by ' + orderstr + ',OA.shortname')
      //belse
        Datam1.Querytree.SQL.Add('group by ' + groupbystr);

      if (Prefs.SectionText[4]) then
        Datam1.Querytree.SQL.Add(',P1.Comment');
      // ########
      if (Prefs.TreeExtraPublicationText[9]) then
        Datam1.Querytree.SQL.Add(',pr.OrderNumber');
      // ########

      Datam1.Querytree.SQL.Add('order by ' + orderstr);

      if Prefs.Debug then
        Datam1.Querytree.SQL.SaveToFile(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' + 'pagetree.SQL');
      Tryopen(Datam1.Querytree);
      aktproductionid := -99;

      writeMainlogfile('Plate tree Items.Clear');
      Ltree.Items.Clear;
      aktpubdate := NOW;

      Publicationid := -99;
      issueid := -99;
      editionid := -99;
      Sectionid := -99;
      presssectionnumber := -1;
      pressrunid := -1;

      new(trdat);
      TTreeViewpagestype(trdat^).Publicationid := -1;
      TTreeViewpagestype(trdat^).issueid := -1;
      TTreeViewpagestype(trdat^).editionid := -1;
      TTreeViewpagestype(trdat^).Sectionid := -1;
      TTreeViewpagestype(trdat^).ProductionID := -1;
      TTreeViewpagestype(trdat^).Pubdate := 0;
      TTreeViewpagestype(trdat^).kind := 0;
      TTreeViewpagestype(trdat^).weeknumber := 0;
      TTreeViewpagestype(trdat^).platetreepressid := 0;
      TTreeViewpagestype(trdat^).pressrunid := 0;
      TTreeViewpagestype(trdat^).PagesReady := false;
      TTreeViewpagestype(trdat^).PagesIllegal := false;

      aktpress := -1;

      while not Datam1.Querytree.Eof do
      begin
        MainUpdateing := true;
        thisPressID := Datam1.Querytree.FieldByName('pressid').AsInteger;

        if (aktpress <> thisPressID) And (not Datam1.Querytree.Eof) then
        begin
          MainUpdateing := true;
          aktpress := thisPressID;
          curnodes[0] := TreeViewPlateview.Items.AddChildObject(nil,
            tNames1.pressnameIDtoname(thisPressID), trdat);
          curnodes[0].ImageIndex := 42;
          curnodes[0].selectedIndex := 42;
          curnodes[0].StateIndex := -1;

          aktpubdate := NOW;

          LocationID := -99;
          Publicationid := -99;
          issueid := -99;
          editionid := -99;
          Sectionid := -99;
          nextleveldate := '';
          presssectionnumber := 0;
          pressrunid := -1;

        end;

        // NAN 20160329
        thisPlanType := Datam1.Querytree.FieldByName('plantype').AsInteger;
        thisPubDate := Datam1.Querytree.FieldByName('pubdate').AsDateTime;
        thisPublicationID := Datam1.Querytree.FieldByName('publicationid')
          .AsInteger;
        thisEditionID := Datam1.Querytree.FieldByName('editionid').AsInteger;
        thisSectionID := Datam1.Querytree.FieldByName('sectionid').AsInteger;
        thisPressSectionNumber := Datam1.Querytree.FieldByName('presssectionnumber').AsInteger;
        thisProductionID := Datam1.Querytree.FieldByName('productionid')
          .AsInteger;
        thisPressRunID := Datam1.Querytree.FieldByName('pressrunid').AsInteger;
        thisPressRunMiscInt2 := (Datam1.Querytree.FieldByName('PressRunIDMiscInt2').AsInteger) DIV 256;
        thisPressRunOrderNumber := Datam1.Querytree.FieldByName('pressrunidordernumber').AsString;
        if (Prefs.TreeExtraPublicationText[9]) then
          thisProductionOrderNumber := Datam1.Querytree.FieldByName('prordernumber').AsString
        else
          thisProductionOrderNumber := '';
        thisPressRunComment := Datam1.Querytree.Fields[14].AsString;
        if (thisPressRunMiscInt2 > 0) then
          thisPlanType := thisPressRunMiscInt2;

        for i := 1 to NSellevels - 1 do
        begin
          MainUpdateing := true;
          case Sellevelkinds[i] of
            1:
              begin
                if (aktpubdate <> thisPubDate) then
                begin
                  starti := i;
                  break;
                end;
              end;
            2:
              begin
                if (Prefs.SeparateNodesPerPressrun) then
                begin
                  if (Publicationid <> thisPublicationID) OR
                    (presssectionnumber <> thisPressSectionNumber) then
                  begin
                    starti := i;
                    break;
                  end;
                end
                else
                begin
                  if (Publicationid <> thisPublicationID) then
                  begin
                    starti := i;
                    break;
                  end;
                end;
              end;
            3:
              begin // NEVER USED
                if issueid <> Datam1.Querytree.FieldByName('issueid').AsInteger
                then
                begin

                  starti := i;
                  break;
                end;
              end;
            4:
              begin
                if editionid <> thisEditionID then
                begin
                  starti := i;
                  break;
                end;

              end;
            5:
              begin
                if (Sectionid = thisSectionID) then
                begin

                  starti := i;
                end;
                if (Sectionid <> thisSectionID) then
                begin
                  starti := i;
                  break;
                end;
              end;
          end;
        end;
        for i := starti to NSellevels - 1 do
        begin
          new(trdat);
          MainUpdateing := true;
          TTreeViewpagestype(trdat^).Publicationid := -1;
          TTreeViewpagestype(trdat^).issueid := -1;
          TTreeViewpagestype(trdat^).editionid := -1;
          TTreeViewpagestype(trdat^).Sectionid := -1;
          TTreeViewpagestype(trdat^).Pubdate := 0;
          TTreeViewpagestype(trdat^).kind := Sellevelkinds[i];
          TTreeViewpagestype(trdat^).PagesReady := false;
          TTreeViewpagestype(trdat^).PagesIllegal := false;
          MainUpdateing := true;

          astaste := 0;

          case Sellevelkinds[i] of
            1:
              begin
                aktpubdate := thisPubDate;
                curnodes[i] := Ltree.Items.AddChildObject(curnodes[i - 1],
                  datetostr(aktpubdate), trdat);
                if (Prefs.TreeShowDayName) then
                begin
                  dayName :=   FormaTDateTime('dddd', aktpubdate);
                    if (Length(dayName) > 0) then
                      dayName := UpperCase( Copy(dayName,1,1)) + Copy(dayName,2, Length(dayName)-1);
                  curnodes[i].text := curnodes[i].text + ' ' +  dayName;
                end;
                if (Prefs.TreeShowWeekNumberInfo) then
                begin
                     curnodes[i].text := curnodes[i].text + ' week ' +  IntToStr(WeekOf(aktpubdate));
                end;
                // SJO add week nr in date

                // if NOT FoxrmSettings.CheckBoxShowWeekNr.Checked then
                // curnodes[i].Text := curnodes[i].Text
                // else

                // NAN...
                if (Prefs.ShowWeekNumberInTree) then
                  curnodes[i].text := 'Week ' + IntToStr(WeekOf(aktpubdate));

                curnodes[i].ImageIndex := 40;
                curnodes[i].selectedIndex := 40;
                curnodes[i].StateIndex := 0;
                TTreeViewpagestype(curnodes[i].Data^) :=
                  TTreeViewpagestype(curnodes[i - 1].Data^);
                TTreeViewpagestype(curnodes[i].Data^).Pubdate := aktpubdate;
                TTreeViewpagestype(curnodes[i].Data^).kind := Sellevelkinds[i];
                TTreeViewpagestype(curnodes[i].Data^).StateIndex := -1;
                TTreeViewpagestype(curnodes[i].Data^).pressrunid := 0;
              end;
            2:
              begin
                Publicationid := thisPublicationID;

                if (Prefs.TreeExtraPublicationText[6]) and (Datam1.Querytree.FieldByName('iashortname').AsString <> '') then
                begin
                  if (Prefs.TreeShowAliasFirst) then
                    Publicationnametext := Datam1.Querytree.FieldByName('iashortname').AsString + ' / ' + tNames1.publicationIDtoname(thisPublicationID)
                  else
                    Publicationnametext :=  tNames1.publicationIDtoname(thisPublicationID) + ' / ' + Datam1.Querytree.FieldByName('iashortname').AsString
                end

                else if (Prefs.TreeExtraPublicationText[7]) and (Datam1.Querytree.FieldByName('oashortname').AsString <> '') then
                begin
                   if (Prefs.TreeShowAliasFirst) then
                     Publicationnametext := Datam1.Querytree.FieldByName('oashortname').AsString + ' / ' + tNames1.publicationIDtoname(thisPublicationID)
                   else
                     Publicationnametext :=  tNames1.publicationIDtoname(thisPublicationID)+ ' / ' +  Datam1.Querytree.FieldByName('oashortname').AsString ;
                end
                else
                  Publicationnametext := tNames1.publicationIDtonameReload(thisPublicationID);

                // if (FoxrmSettings.CheckBoxSeparateNodesPerPressrun.Checked) AND (thisPressSectionNumber > 1) then
                // Publicationnametext :=  Publicationnametext + ' [' + IntToStr(thisPressSectionNumber) + ']';

                if (Prefs.SeparateNodesPerPressrun) then
                begin
                  if (thisPressRunComment <> '') then
                    Publicationnametext := Publicationnametext + ' [' + thisPressRunComment + ']'
                  else if (thisPressSectionNumber > 1) AND (thisPressSectionNumber < 99) then
                    Publicationnametext := Publicationnametext + ' [' + IntToStr(thisPressSectionNumber) + ']';
                end;

                curnodes[i] := Ltree.Items.AddChildObject(curnodes[i - 1], Publicationnametext, trdat);

                if thisPlanType = 3 then
                  curnodes[i].ImageIndex := ICON_PLANRED
                else if thisPlanType = 2 then
                  curnodes[i].ImageIndex := ICON_PLANYELLOW
                else if thisPlanType = 0 then
                  curnodes[i].ImageIndex := ICON_PLANUNAPPLIED
                else // thisPlanType = 1
                  curnodes[i].ImageIndex := ICON_PLANAPPLIED;

                curnodes[i].selectedIndex := curnodes[i].ImageIndex;
                curnodes[i].StateIndex := astaste;

                TTreeViewpagestype(curnodes[i].Data^) := TTreeViewpagestype(curnodes[i - 1].Data^);
                TTreeViewpagestype(curnodes[i].Data^).Publicationid := thisPublicationID;
                TTreeViewpagestype(curnodes[i].Data^).kind := Sellevelkinds[i];
                TTreeViewpagestype(curnodes[i].Data^).weeknumber := Datam1.Querytree.FieldByName('miscint2').AsInteger;
                TTreeViewpagestype(curnodes[i].Data^).ProductionID := thisProductionID;
                TTreeViewpagestype(curnodes[i].Data^).StateIndex := -1;
                TTreeViewpagestype(curnodes[i].Data^).PagesReady := false;
                TTreeViewpagestype(curnodes[i].Data^).PagesIllegal := false;

                if (PressRunIDPlanVersionPossible) then
                begin
                  if (Datam1.Querytree.FieldByName('PRplanversion').AsInteger >
                    1) and (Datam1.Querytree.FieldByName('PRplanversion')
                    .AsInteger < 8) then
                    TTreeViewpagestype(curnodes[i].Data^).PagesReady := true;
                  if (Datam1.Querytree.FieldByName('PRplanversion').AsInteger
                    >= 8) then
                    TTreeViewpagestype(curnodes[i].Data^).PagesIllegal := true;
                end;

                if (Prefs.SeparateNodesPerPressrun) then
                  TTreeViewpagestype(curnodes[i].Data^).pressrunid :=
                    thisPressRunID
                else
                  TTreeViewpagestype(curnodes[i].Data^).pressrunid := 0;

                TTreeViewpagestype(curnodes[i].Data^).platetreepressid :=
                  thisPressID;

                if (Prefs.TreeExtraPublicationText[5]) and
                  (Datam1.Querytree.FieldByName('InkComment').AsString <> '')
                then
                  curnodes[i].text := curnodes[i].text + ' / ' +
                    Datam1.Querytree.FieldByName('InkComment').AsString;

                if (Prefs.TreeExtraPublicationText[0]) and
                  (Datam1.Querytree.FieldByName('miscint2').AsInteger > 0) then
                  curnodes[i].text := curnodes[i].text + ' / ' +
                    Datam1.Querytree.FieldByName('miscint2').AsString;

                if (Prefs.TreeExtraPublicationText[1]) and
                  (thisPressRunOrderNumber <> '') then
                  curnodes[i].text := curnodes[i].text + ' / ' +
                    thisPressRunOrderNumber;

                if (Prefs.TreeExtraPublicationText[2]) and
                  (thisPressRunComment <> '') then
                  curnodes[i].text := curnodes[i].text + ' / ' +
                    thisPressRunComment;

                if (Prefs.TreeExtraPublicationText[3]) and
                  (Datam1.Querytree.Fields[6].AsString <> '') then
                  curnodes[i].text := curnodes[i].text + ' / ' +
                    Datam1.Querytree.Fields[6].AsString;

                if (Prefs.TreeExtraPublicationText[4]) then
                begin
                  AkLnameT := getTreePublInputalais(TTreeViewpagestype(curnodes[i].Data^).Publicationid);
                  if AkLnameT <> '' then
                  begin
                    if (Prefs.TreeShowAliasFirst) then
                      curnodes[i].text := AkLnameT + ' / ' + curnodes[i].text
                    else
                      curnodes[i].text := curnodes[i].text + ' / ' + AkLnameT;
                  end;
                end;

                // ########

                if (Prefs.TreeExtraPublicationText[9]) AND (thisProductionOrderNumber <> '') then
                  curnodes[i].text := curnodes[i].text + ' / ' + thisProductionOrderNumber;
                // ########

              end;
            3:
              begin // NEVER USED
                issueid := Datam1.Querytree.FieldByName('issueid').AsInteger;
                curnodes[i] := Ltree.Items.AddChildObject(curnodes[i - 1],
                  tNames1.issueIDtoname(issueid), trdat);
                curnodes[i].ImageIndex := 23;
                curnodes[i].selectedIndex := 23;
                curnodes[i].StateIndex := astaste;
                TTreeViewpagestype(curnodes[i].Data^) :=
                  TTreeViewpagestype(curnodes[i - 1].Data^);
                TTreeViewpagestype(curnodes[i].Data^).issueid := issueid;
                TTreeViewpagestype(curnodes[i].Data^).kind := Sellevelkinds[i];
                TTreeViewpagestype(curnodes[i].Data^).ProductionID :=
                  thisProductionID;
                TTreeViewpagestype(curnodes[i].Data^).platetreepressid :=
                  thisPressID;
                TTreeViewpagestype(curnodes[i].Data^).pressrunid := -1;
                TTreeViewpagestype(curnodes[i].Data^).StateIndex := -1;
                TTreeViewpagestype(curnodes[i].Data^).pressrunid := 0;
              end;
            4:
              begin
                editionid := thisEditionID;

                curnodes[i] := Ltree.Items.AddChildObject(curnodes[i - 1],
                  tNames1.editionIDtoname(thisEditionID), trdat);
                EdImidx := 11;
                curnodes[i].StateIndex := astaste;

                TTreeViewpagestype(curnodes[i].Data^) := TTreeViewpagestype(curnodes[i - 1].Data^);
                TTreeViewpagestype(curnodes[i].Data^).editionid := thisEditionID;
                TTreeViewpagestype(curnodes[i].Data^).kind := Sellevelkinds[i];
                TTreeViewpagestype(curnodes[i].Data^).ProductionID := thisProductionID;
                TTreeViewpagestype(curnodes[i].Data^).pressrunid := thisPressRunID;
                TTreeViewpagestype(curnodes[i].Data^).Sectionid := thisSectionID;
                TTreeViewpagestype(curnodes[i].Data^).platetreepressid := thisPressID;

                TTreeViewpagestype(curnodes[i].Data^).StateIndex := -1;
                if (TimedEdPossible) then
                begin
                  TTreeViewpagestype(curnodes[i].Data^).TimedTo :=
                    Datam1.Querytree.FieldByName('TimedEditionTo').AsInteger;
                  TTreeViewpagestype(curnodes[i].Data^).TimedFrom :=
                    Datam1.Querytree.FieldByName('TimedEditionFrom').AsInteger;
                  TTreeViewpagestype(curnodes[i].Data^).timedState :=
                    Datam1.Querytree.FieldByName('TimedEditionState').AsInteger;
                  if TTreeViewpagestype(curnodes[i].Data^).TimedFrom > 0 then
                  begin
                    case TTreeViewpagestype(curnodes[i].Data^).timedState OF
                      0:
                        begin
                          EdImidx := ICON_TIMEDEDITIONWHITE;
                        end;
                      1 .. 2:
                        begin
                          EdImidx := ICON_TIMEDEDITIONGREEN;
                        end;
                      10:
                        begin
                          EdImidx := ICON_TIMEDEDITIONRED;
                        end;

                    end;
                  end
                  else
                  begin
                    if TTreeViewpagestype(curnodes[i].Data^).timedState = 10
                    then
                    begin
                      EdImidx := ICON_TIMEDEDITIONRED;
                    end;

                  end;
                end;

                curnodes[i].ImageIndex := EdImidx;
                curnodes[i].selectedIndex := EdImidx;

                if (Prefs.TreeExtraEditionText[0]) and
                  (Datam1.Querytree.Fields[13].AsString <> '') then
                  curnodes[i].text := curnodes[i].text + ' / ' +
                    Datam1.Querytree.Fields[13].AsString;
                if (Prefs.TreeExtraEditionText[1]) and
                  (Datam1.Querytree.Fields[14].AsString <> '') then
                  curnodes[i].text := curnodes[i].text + ' / ' +
                    Datam1.Querytree.Fields[14].AsString;
                if (Prefs.TreeExtraEditionText[2]) and
                  (Datam1.Querytree.Fields[8].AsString <> '') then
                  curnodes[i].text := curnodes[i].text + ' / ' +
                    Datam1.Querytree.Fields[8].AsString;

                if (Prefs.TreeExtraEditionText[3]) and
                  (YearOf(Datam1.Querytree.FieldByName('Prtid').AsDateTime) >
                  2000) then
                  curnodes[i].text := curnodes[i].text + ' / ' +
                    FormaTDateTime('dd-hh:mm',
                    Datam1.Querytree.FieldByName('Prtid').AsDateTime);

              end;
            5:
              begin
                Sectionid := thisSectionID;

                if (Prefs.SectionText[3]) and
                  (Datam1.Querytree.Fields[14].AsString <> '') then
                begin
                  T := Datam1.Querytree.Fields[14].AsString;
                End
                else
                begin
                  T := tNames1.sectionidtoname(thisSectionID);
                end;

                if (Prefs.SectionText[1]) then // pagetable pressseqnumber
                  T := T + ' / ' + Datam1.Querytree.Fields[17].AsString;

                if (Prefs.SectionText[0]) then // pressruncomment
                  T := T + ' / ' + Datam1.Querytree.Fields[14].AsString;

                if (Prefs.SectionText[2]) then // pressrunid
                  T := T + ' / ' + Datam1.Querytree.Fields[12].AsString;

                if (Prefs.SectionText[4]) then // PageTable comment (TOP 1)
                begin
                  T2 := Datam1.Querytree.FieldByName('pcomment').AsString;
                  if (T2 <> '') then
                    T := T + ' (' + T2 + ')';
                end;


                if (Prefs.SectionText[5]) then // PageTable comment (TOP 1)
                begin
                  T2 := Datam1.Querytree.FieldByName('InkComment').AsString;
                  if (T2 <> '') then
                    T := T + ' (' + T2 + ')';
                end;

                curnodes[i] := Ltree.Items.AddChildObject(curnodes[i - 1],
                  T, trdat);
                curnodes[i].ImageIndex := 0;
                curnodes[i].selectedIndex := 0;

                curnodes[i].StateIndex := astaste;
                TTreeViewpagestype(curnodes[i].Data^) :=
                  TTreeViewpagestype(curnodes[i - 1].Data^);
                TTreeViewpagestype(curnodes[i].Data^).Sectionid := Sectionid;
                TTreeViewpagestype(curnodes[i].Data^).kind := Sellevelkinds[i];
                TTreeViewpagestype(curnodes[i].Data^).ProductionID := thisProductionID;
                TTreeViewpagestype(curnodes[i].Data^).StateIndex := -1;
                TTreeViewpagestype(curnodes[i].Data^).pressrunid := thisPressRunID;
                TTreeViewpagestype(curnodes[i].Data^).Sectionid := thisSectionID;
                TTreeViewpagestype(curnodes[i].Data^).Publicationid := thisPublicationID;
                TTreeViewpagestype(curnodes[i].Data^).editionid := thisEditionID;
                TTreeViewpagestype(curnodes[i].Data^).platetreepressid := thisPressID;

                // TTreeViewpagestype(curnodes[i].data^).PublItree := curnodes[i].Parent.Parent.AbsoluteIndex;
                // TTreeViewpagestype(curnodes[i].data^).EdItree := curnodes[i].Parent.AbsoluteIndex;
              end;
          end;
        end;

        Publicationid := thisPublicationID;
        aktpubdate := thisPubDate;
        ReplaceTime(aktpubdate, EncodeTime(0, 0, 0, 0));
        presssectionnumber := thisPressSectionNumber;

        if tNames1.issuenames.Count > 1 then
        begin
          issueid := 1;
          // Datam1.Querytree.FieldByName('issueid').AsInteger;
        end;

        if tNames1.editionnames.Count > 1 then
        begin
          editionid := thisEditionID;
        end;

        if tNames1.sectionnames.Count > 1 then
        begin
          Sectionid := thisSectionID;
        end;

        Datam1.Querytree.Next;
      end;
      Datam1.Querytree.Close;

      if (Prefs.ShowNewProductSign) then
      begin
        Datam1.Querytree.SQL.Clear;
        Datam1.Querytree.SQL.Add('Select Count (Distinct Pressrunid) from pressrunid (NOLOCK)');
        Datam1.Querytree.Open;
        checkfiltercount := Datam1.Querytree.Fields[0].AsInteger;
        Datam1.Querytree.Close;
        Actionnewprods.Visible := false;
        Resetfilterrefreshsign;
      end;

      writeMainlogfile(' platetree start setlamps');
      setlamps(LocationID, pressid, Pubdatetext <> LabelAlldays.caption, Pubdatefilter);
      writeMainlogfile(' platetree End setlamps');

      writeMainlogfile(' platetree Start expantion');
      if (not Prefs.KeepTreeExpansion) then
      begin
        for i := 0 to Ltree.Items.Count - 1 do
        begin
          MainUpdateing := true;
          if (Ltree.Items[i].Level < Prefs.SeparationMinTreeLevel) then
            Ltree.Items[i].Expand(false);
        end;
      End
      else
      begin
        (*
          for i := 0 to Ltree.Items.Count-1 do
          begin
          if Ltree.Items[i].Level = 0 then
          Ltree.Items[i].expand(true);
          end;
        *)
      end;
      writeMainlogfile(' platetree End expantion');
    Finally
      writeMainlogfile(' platetree Start Loadkeeptrees');

      Loadkeeptrees(Location, Ltree);
      writeMainlogfile(' platetree End Loadkeeptrees');
      Resetfilterrefreshsign;
      writeMainlogfile(' platetree Endupdate');
      Ltree.Items.EndUpdate;
      TreeViewPlateview.Visible := true;
      TreeStopit := false;

      (* if FoxrmSettings.CheckBoxDelaytreelamp.Checked then
        begin
        DoALamptreerefresh := true;
        writeMainlogfile('CheckBoxDelaytreelamp');
        end;
      *)
      keeptreesLoading := false;
      writeMainlogfile('Endmakeplatetree');
      Ltree.Visible := true;
      writeMainlogfile(' platetree Visible');
      // Actionplaterefresh.Execute;
      // NAN - direct call instead..
      pagetableloadstatus := false;
      plateviewrefresh(false, 'ActionplaterefreshExecute');

      MainUpdateing := false;

    end;
  end;
end;

function TFormMain.Limitsectionselection(Publicationid: Integer;
  Astrings: Tstrings): Boolean;
Var
  Anyfound, isposible: Boolean;
  Foundnames: Tstrings;
  i: Integer;
begin
  Foundnames := Tstringlist.Create;

  result := false;
  Anyfound := false;
  try
    isposible := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' +
      'publicationsections' + '''');

    Datam1.Query3.Open;
    if not Datam1.Query3.Eof then
    begin
      isposible := true;
    end;
    Datam1.Query3.Close;

    if isposible then
    begin

      Datam1.Query3.SQL.Clear;
      Datam1.Query3.SQL.Add
        ('Select DISTINCT p1.sectionid,s.name from publicationsections p1, sectionnames s');
      Datam1.Query3.SQL.Add('Where publicationid = ' + IntToStr(Publicationid));
      Datam1.Query3.SQL.Add('and p1.sectionid = s.sectionid');
      Datam1.Query3.SQL.Add('order by s.name');
      if Prefs.Debug then
        Datam1.Query3.SQL.SaveToFile
          (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'
          + 'Limited2.SQL');
      Tryopen(Datam1.Query3);
      if not Datam1.Query3.Eof then
      begin
        Anyfound := true;

        while not Datam1.Query3.Eof do
        begin
          Foundnames.Add(tNames1.sectionidtoname(Datam1.Query3.Fields[0]
            .AsInteger));
          Datam1.Query3.Next;
        end;
        Astrings.Clear;
        for i := 0 to Foundnames.Count - 1 do
        begin
          Astrings.Add(Foundnames[i]);

        end;
        result := true;
      end;
      Datam1.Query3.Close
    end;

  Finally
    Foundnames.free;

  end;
end;

function TFormMain.Limiteditionselection(Publicationid: Integer;
  Astrings: Tstrings): Boolean;
Var
  Anyfound, isposible: Boolean;
  Foundnames: Tstrings;
  i: Integer;
begin
  Foundnames := Tstringlist.Create;

  result := false;
  Anyfound := false;
  try
    isposible := false;
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('select * from dbo.sysobjects');
    Datam1.Query3.SQL.Add('where name = ' + '''' +
      'publicationeditions' + '''');

    Datam1.Query3.Open;
    if not Datam1.Query3.Eof then
    begin
      isposible := true;

    end;
    Datam1.Query3.Close;

    if isposible then
    begin

      Datam1.Query3.SQL.Clear;
      Datam1.Query3.SQL.Add
        ('Select DISTINCT p1.editionid,e.name from publicationeditions p1, editionnames e');
      Datam1.Query3.SQL.Add('Where publicationid = ' + IntToStr(Publicationid));
      Datam1.Query3.SQL.Add('and p1.editionid = e.editionid');
      Datam1.Query3.SQL.Add('order by e.name');
      if Prefs.Debug then
        Datam1.Query3.SQL.SaveToFile
          (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'
          + 'Limited.SQL');
      Tryopen(Datam1.Query3);
      if not Datam1.Query3.Eof then
      begin
        Anyfound := true;

        while not Datam1.Query3.Eof do
        begin
          Foundnames.Add(tNames1.editionIDtoname(Datam1.Query3.Fields[0]
            .AsInteger));
          Datam1.Query3.Next;
        end;
        Astrings.Clear;
        for i := 0 to Foundnames.Count - 1 do
        begin
          Astrings.Add(Foundnames[i]);

        end;
        result := true;
      end;
      Datam1.Query3.Close
    end;

  Finally
    Foundnames.free;

  end;
end;

procedure TFormMain.ActionprodallcopiesExecute(Sender: TObject);
begin
  Actionprodallcopies.Checked := not Actionprodallcopies.Checked;
end;

procedure TFormMain.postapplyplan(LocationID: Integer; pressid: Integer;
  ProductionID: Integer; Publicationid: Integer; Pubdate: TDateTime;
  Editmode: Longint; existingPlanOverwrite: Boolean);
// 0 load,1 edit,2 create,3 copy, 4 move, 5 apply
Var
  T1, T2: string;
  Irun: Integer;
  Name: string;
  Npressruns: Integer;
  pressrunids:
    Array [1 .. 1000] of record
      pressrunid: Integer;
      presssectionnumber: Integer;
      editionid: Integer;
    end;
  T: string;
  Ordoffset, aktedid, i: Integer;
  ordnumstr: String;
  Allarenum: Boolean;
  Postonproductionid: Integer;
  hasConfigProblem: Boolean;
  inksystem: string;
  AYear, AMonth, ADay, AHour, AMinute, ASecond, AMilliSecond: Word;

begin
  Formprodplan.plantimdadd('Post Start ');

  Npressruns := 0;
  Postonproductionid := -1;

  Datam1.Query2.SQL.Clear;
  Datam1.Query2.SQL.Add
    ('Select distinct p1.CopySeparationSet,p1.MasterCopySeparationSet,p2.MasterCopySeparationSet,p1.UniquePage,p1.pressid from pagetable p1 (NOLOCK), PageTable p2 (NOLOCK) ');
  Datam1.Query2.SQL.Add('where p1.MasterCopySeparationSet = 0');
  Datam1.Query2.SQL.Add('and p2.UniquePage = 1');
  Datam1.Query2.SQL.Add
    ('and p2.PubDate = p1.PubDate and p2.PublicationID = p1.PublicationID  and p2.SectionID = p1.SectionID and p2.PageName = p1.PageName');

  Datam1.Query2.SQL.Add('order by p2.MasterCopySeparationSet');
  Tryopen(Datam1.Query2);
  while not Datam1.Query2.Eof do
  begin
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('Update pagetable set mastercopyseparationset = ' +
      Datam1.Query2.Fields[2].AsString);
    Datam1.Query3.SQL.Add('where copyseparationset = ' + Datam1.Query2.Fields[0]
      .AsString);
    Datam1.Query3.SQL.Add('and pressid = ' + Datam1.Query2.Fields[4].AsString);
    Datam1.Query3.ExecSQL;
    Datam1.Query2.Next;
  end;
  Datam1.Query2.Close;

  if (PDFMasterOK) AND
    (FormApplyproduction.CheckBoxpressspecifik.Checked = false) then
  begin
    Datam1.Query2.SQL.Clear;
    Datam1.Query2.SQL.Add
      ('update pagetable set pdfmaster = MasterCopySeparationSet ');
    Datam1.Query2.SQL.Add
      ('where Uniquepage <> 1 and MasterCopySeparationSet <> pdfmaster');
    Datam1.Query2.SQL.Add('and LocationId = ' + IntToStr(LocationID));
    Datam1.Query2.SQL.Add('and Pressid = ' + IntToStr(pressid));
    Datam1.Query2.SQL.Add('and Publicationid = ' + IntToStr(Publicationid));
    Datam1.Query2.SQL.Add('and ' + Datam1.makedatastr('', Pubdate));
    if Prefs.Debug then
      Datam1.Query2.SQL.SaveToFile
        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
        'Setpdfmaster.SQL');
    Datam1.Query2.ExecSQL;
  end;

  // NAN 20170606 - delay presssectionnumber retrieval
  Datam1.Query2.SQL.Clear;
  Datam1.Query2.SQL.Add
    ('SELECT distinct pressrunid,editionid,MIN(PressSectionNumber),productionid From pagetable (NOLOCK) ');
  Datam1.Query2.SQL.Add('WHERE LocationId = ' + IntToStr(LocationID));
  Datam1.Query2.SQL.Add('and Pressid = ' + IntToStr(pressid));
  Datam1.Query2.SQL.Add('and Publicationid = ' + IntToStr(Publicationid));
  Datam1.Query2.SQL.Add('and ' + Datam1.makedatastr('', Pubdate));
  Datam1.Query2.SQL.Add('and pagetype < 3');
  Datam1.Query2.SQL.Add('group by pressrunid,editionid,productionid');
  Datam1.Query2.SQL.Add('order by pressrunid,editionid');
  Tryopen(Datam1.Query2);
  while not Datam1.Query2.Eof do
  begin
    Postonproductionid := Datam1.Query2.Fields[3].AsInteger;
    Inc(Npressruns);
    pressrunids[Npressruns].pressrunid := Datam1.Query2.Fields[0].AsInteger;
    pressrunids[Npressruns].editionid := Datam1.Query2.Fields[1].AsInteger;
    pressrunids[Npressruns].presssectionnumber := Datam1.Query2.Fields[2]
      .AsInteger;; // Min!
    Datam1.Query2.Next;
  end;
  Datam1.Query2.Close;

  if Postonproductionid > -1 then
  begin
    Datam1.Query2.SQL.Clear;
    Datam1.Query2.SQL.Add('update productionnames ');
    Datam1.Query2.SQL.Add('Set name = ' + '''' +
      Formprodplan.createproductionname(Publicationid, pressid,
      Pubdate) + '''');
    Datam1.Query2.SQL.Add('where productionid = ' +
      IntToStr(Postonproductionid));
    Datam1.Query2.ExecSQL;
  end;

  for Irun := 1 to Npressruns do
  begin
    Formprodplan.IgnorePagicheck := false;

    if FormApplyproduction.Creep <> 0 then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Exec spPlanApplyCreep');
      Datam1.Query1.SQL.Add('@CreepPer100pages = :CreepPer100pages ,');
      Datam1.Query1.SQL.Add('@PublicationID = ' +
        IntToStr(Publicationid) + ' ,');
      Datam1.Query1.SQL.Add('@Pubdate = :Pubdate' + ' ,');
      Datam1.Query1.SQL.Add('@EditionID = ' +
        IntToStr(pressrunids[Irun].editionid));
      Datam1.Query1.parambyname('Pubdate').AsDateTime := Pubdate;
      Datam1.Query1.parambyname('CreepPer100pages').AsFloat :=
        FormApplyproduction.Creep;
      Datam1.Query1.ExecSQL;
    end;

    (* if Irun <> pressrunids[Irun].presssectionnumber then
      begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable set presssectionnumber = ' + IntToStr(Irun));
      Datam1.Query1.SQL.Add('where pressrunid = ' + IntToStr(pressrunids[Irun].pressrunid));
      Datam1.Query1.execsql;
      end;
    *)

    // NAN Fix potential illegal presssectionnumber for dinky-pages
    // Ensure all pages have same presssectionnumber
    try
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('UPDATE pagetable set presssectionnumber = ' + IntToStr(pressrunids[Irun].presssectionnumber));
      Datam1.Query1.SQL.Add('WHERE pressrunid = ' + IntToStr(pressrunids[Irun].pressrunid));
      Datam1.Query1.ExecSQL;
    except
    End;
    // end;

    // ### 20210302 - fix active flag for antipanoramas..
    try
      DataM1.Query1.sql.clear;
      DataM1.Query1.sql.add('UPDATE PageTable SET Active=0,ReadyTime=GETDATE() WHERE PageType=2 AND ProductionID=' +  inttostr(plateframesproductionid));
       Datam1.Query1.ExecSQL;
    except
    End;


    if (Prefs.PlanningExportXMLPlan) then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('insert planexportjobs (productionid,pressrunid,eventtime)');
      Datam1.Query1.SQL.Add('values (' + IntToStr(ProductionID) + ',' +
        IntToStr(pressrunids[Irun].pressrunid) + ',getdate())');
      Datam1.Query1.ExecSQL;
    end;

    if (RipSetupIDInPageTable) AND
      (FormApplyproduction.ComboBoxRipSetupname.ItemIndex >= 0) and
      (FormApplyproduction.ComboBoxPreflightSetup.ItemIndex >= 0) and
      (FormApplyproduction.ComboBoxInksaveSetup.ItemIndex >= 0) then
      ApplyRipSetups(plateframesproductionid,
        FormApplyproduction.ComboBoxRipSetupname.text,
        FormApplyproduction.ComboBoxPreflightSetup.text,
        FormApplyproduction.ComboBoxInksaveSetup.text);

    if (Prefs.PostPlanSPPressrunExecute) then
    // And (ImportCenterPreImportCustomPossible)  then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Exec spImportCenterPressRunCustom');
      Datam1.Query1.SQL.Add('@PressRunID = ' +
        IntToStr(pressrunids[Irun].pressrunid));
      if PDFMasterOK then
      begin
        if FormApplyproduction.CheckBoxpressspecifik.Checked then
          Datam1.Query1.SQL.Add(',@PressSpecificPages = 1')
        else
          Datam1.Query1.SQL.Add(',@PressSpecificPages = 0');
      end;
      if Prefs.Debug then
        Datam1.Query1.SQL.SaveToFile
          (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'
          + 'Custpost.SQL');
      trysql(Datam1.Query1);
    end;

    if (Prefs.PostPlanSPPressrunExecute2) And (ImportCenterPressRunCustom2Possible) then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Exec spImportCenterPressRunCustom2');
      Datam1.Query1.SQL.Add('@PressRunID = ' +
        IntToStr(pressrunids[Irun].pressrunid));

      if Prefs.Debug then
        Datam1.Query1.SQL.SaveToFile
          (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'
          + 'Custpost2.SQL');
      trysql(Datam1.Query1);
    end;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pressrunid');
    Datam1.Query1.SQL.Add('Set ordernumber = ' + '''' + FormApplyproduction.Editordernumber.text + '''');
    Datam1.Query1.SQL.Add('where PressRunID = ' + IntToStr(pressrunids[Irun].pressrunid));
    Datam1.Query1.ExecSQL(false);

    if FormApplyproduction.GroupBoxRipsetup.Visible then
    begin
      if Comment2INPressrunid then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('update pressrunid');
        Datam1.Query1.SQL.Add('Set Comment2 = ' + '''' + FormApplyproduction.ComboBoxRIPsetup.text + '''');
        Datam1.Query1.SQL.Add('where PressRunID = ' + IntToStr(pressrunids[Irun].pressrunid));
        Datam1.Query1.ExecSQL(false);
      end;
    end;

    if (Prefs.SetSecionNamesInPressrunComment) then
    begin
      T := '';
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Select distinct sectionid from pagetable (NOLOCK) ');
      Datam1.Query1.SQL.Add('Where PressRunID = ' +IntToStr(pressrunids[Irun].pressrunid));
      Datam1.Query1.Open;
      while not Datam1.Query1.Eof do
      begin
        if Length(T) < 200 then
        begin
          if T = '' then
            T := T + tNames1.sectionidtoname(Datam1.Query1.Fields[0].AsInteger)
          else
            T := T + ' / ' + tNames1.sectionidtoname
              (Datam1.Query1.Fields[0].AsInteger);
        end;
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pressrunid');
      Datam1.Query1.SQL.Add('Set Comment = ' + '''' + T + '''');
      Datam1.Query1.SQL.Add('where PressRunID = ' +
        IntToStr(pressrunids[Irun].pressrunid));
      Datam1.Query1.ExecSQL(false);




    end;

  end;
  Formprodplan.plantimdadd('Post 2.9 ');

  if (Prefs.PostPlanSPProductionExecute) And
    (ImportCenterProductionCustomPossible3) then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Exec spImportCenterProductionCustom');
    Datam1.Query1.SQL.Add('@ProductionID = ' + IntToStr(Postonproductionid));

    if Prefs.Debug then
      Datam1.Query1.SQL.SaveToFile
        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
        'Custpost3.SQL');
    trysql(Datam1.Query1);
  end;

  // 20210908
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('UPDATE PageTable');
  Datam1.Query1.SQL.Add('SET HardProofStatus=0 WHERE ProductionID= ' + IntToStr(plateframesproductionid));
  trysql(Datam1.Query1);

  Formprodplan.plantimdadd('Post 3 ');
  if (Prefs.PlanningAutoOrderNumberBergen) then
  begin // helsingør
    Ordoffset := 0;
    aktedid := -1;
    ordnumstr := FormApplyproduction.Editordernumber.text;
    Delete(ordnumstr, 1, 1);

    Datam1.Query2.SQL.Clear;
    Datam1.Query2.SQL.Add
      ('Select distinct pressrunid,editionid From pagetable (NOLOCK) ');
    Datam1.Query2.SQL.Add('Where LocationId = ' + IntToStr(LocationID));
    Datam1.Query2.SQL.Add('and Publicationid = ' + IntToStr(Publicationid));
    Datam1.Query2.SQL.Add('and ' + Datam1.makedatastr('', Pubdate));
    Datam1.Query2.SQL.Add('order by editionId ');

    Tryopen(Datam1.Query2);
    while not Datam1.Query2.Eof do
    begin
      if aktedid <> Datam1.Query2.Fields[1].AsInteger then
      begin
        aktedid := Datam1.Query2.Fields[1].AsInteger;
        Inc(Ordoffset);
      end;
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pressrunid');
      Datam1.Query1.SQL.Add('Set ordernumber = ' + '''' + IntToStr(Ordoffset) +
        ordnumstr + '''');
      Datam1.Query1.SQL.Add('where PressRunID = ' + Datam1.Query2.Fields[0]
        .AsString);
      Datam1.Query1.ExecSQL(false);
      Datam1.Query2.Next;
    end;
    Datam1.Query2.Close;
  end;

  if FormApplyproduction.ComboBoxplannedname.ItemIndex > 0 then
  begin
    sectionlongname.Clear;
    sectionalias.Clear;
    Editionlongname.Clear;
    Editionalias.Clear;
    Publicationlongname.Clear;
    Publicationalias.Clear;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Select Type,LongName,ShortName From InputAliases');
    Datam1.Query1.SQL.Add('order by Type');
    Tryopen(Datam1.Query1);
    while not Datam1.Query1.Eof do
    begin
      if Datam1.Query1.Fields[0].AsString = 'Publication' then
      begin
        Publicationlongname.Add(Datam1.Query1.Fields[1].AsString);
        Publicationalias.Add(Datam1.Query1.Fields[2].AsString);
      end;
      if Datam1.Query1.Fields[0].AsString = 'Edition' then
      begin
        Editionlongname.Add(Datam1.Query1.Fields[1].AsString);
        Editionalias.Add(Datam1.Query1.Fields[2].AsString);
      end;
      if Datam1.Query1.Fields[0].AsString = 'Section' then
      begin
        sectionlongname.Add(Datam1.Query1.Fields[1].AsString);
        sectionalias.Add(Datam1.Query1.Fields[2].AsString);
      end;

      Datam1.Query1.Next;
    end;
    Formprodplan.plantimdadd('Post 10 ');

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select distinct editionid,sectionid,pagename,copyseparationset From pagetable (NOLOCK) ');
    Datam1.Query1.SQL.Add('Where LocationId = ' + IntToStr(LocationID));
    Datam1.Query1.SQL.Add('and Publicationid = ' + IntToStr(Publicationid));
    Datam1.Query1.SQL.Add('and ' + Datam1.makedatastr('', Pubdate));
    Datam1.Query1.SQL.Add('and pagetype < 3');
    Datam1.Query1.SQL.Add
      ('order by editionid,sectionid,pagename,copyseparationset');
    Tryopen(Datam1.Query1);
    while not Datam1.Query1.Eof do
    begin
      T1 := '';
      T2 := '';

      if (FormApplyproduction.ComboBoxplannedname.ItemIndex > 0) And
        (Length(Prefs.PlannedNameDefinitions) > 0) then
      begin
        T1 := Prefs.PlannedNameDefinitions
          [FormApplyproduction.ComboBoxplannedname.ItemIndex].Format;
        T2 := Prefs.PlannedNameDefinitions
          [FormApplyproduction.ComboBoxplannedname.ItemIndex].dateformat;
      end
      else
      begin
        T1 := FormApplyproduction.ComboBoxplannedname.text;
        T2 := FormApplyproduction.ComboBoxplannedname.text;
      end;

      name := applyplannedpagenamestoplan(Publicationid, Pubdate,
        FormApplyproduction.UpDownweek.Position,
        Datam1.Query1.Fields[0].AsInteger, Datam1.Query1.Fields[1].AsInteger,
        LocationID, Datam1.Query1.Fields[2].AsString, T1, T2);

      Datam1.Query2.SQL.Clear;
      Datam1.Query2.SQL.Add('update pagetable');
      Datam1.Query2.SQL.Add('Set PlanPageName = ' + '''' + name + '''');
      Datam1.Query2.SQL.Add('where copyseparationset = ' + Datam1.Query1.Fields[3].AsString);
      trysql(Datam1.Query2);
      Datam1.Query1.Next;
    end;
  end;

  Formprodplan.plantimdadd('Post 11 ');
  try
    Datam1.Query2.SQL.Clear;
    Datam1.Query2.SQL.Add('Exec spPlancenterpostplan3 ');
    Datam1.Query2.SQL.Add('@PublicationID = ' + IntToStr(Publicationid) + ' ,');
    Datam1.Query2.SQL.Add('@Pubdate = :Pubdate' + ' ,');
    Datam1.Query2.SQL.Add('@PressID = ' + IntToStr(pressid));
    Datam1.Query2.parambyname('Pubdate').AsDateTime := Pubdate;
    trysql(Datam1.Query2);
  except
  end;

  try
    Datam1.Query2.SQL.Clear;
    Datam1.Query2.SQL.Add('exec SPplancenterpostplanProd3 ');
    Datam1.Query2.SQL.Add('@productionID = ' + IntToStr(ProductionID));
    trysql(Datam1.Query2);
  except
  end;

  Formprodplan.plantimdadd('Post 12 ');

  IF (FormApplyproduction.DateTimePickerdeadlinedate.checked) then
  begin

    DecodeDate(FormApplyproduction.DateTimePickerdeadlinedate.Date, AYear, AMonth, ADay);
    DecodeTime(FormApplyproduction.DateTimePickerdeadlinetime.Time, AHour, AMinute, ASecond, AMilliSecond);

    DataM1.Query2.sql.clear;
    DataM1.Query2.sql.add('UPDATE Pagetable SET Deadline = :deadline WHERE productionid = ' + inttostr(plateframesproductionid));
    DataM1.Query2.ParamByName('deadline').AsDateTime := EncodeDateTime(AYear, AMonth, ADay, AHour, AMinute, 0, 0);
    formmain.trysql(DataM1.Query2);
  end;

  // Autoplanexport(1,ProductionId,0,0,0,0,0,0,0,0);

  Formprodplan.plantimdadd('Post 13 ');
  if (Prefs.PlanXMLExportFolder <> '') then
    FormExportcustomplan.Makecustomxmlexport(Prefs.PlanXMLExportFolder,
      IncludeTrailingBackSlash(TUtils.GetTempDirectory()) + 'CustomExport.xml',
      '01_P_PRO_', LocationID, pressid, ProductionID, Publicationid, Pubdate);

  Formprodplan.plantimdadd('Post 14 ');

  Formprodplan.plantimdadd('Post 15 ');

 // if FormApplyproduction.ComboBoxPlatesorting.ItemIndex > 0 then
  if FormApplyproduction.ComboBoxPlatesorting.text<>'' then
    ApplySortingPositionIfEmpty(ProductionID, FormApplyproduction.ComboBoxPlatesorting.text);

  Formprodplan.plantimdadd('Post 15.1 ' + FormApplyproduction.ComboBoxPlatesorting.text + ' ' + IntToStr(ProductionID));
// if FormApplyproduction.ComboBoxPlatesorting.text<>'' then

//  begin
//    Datam1.Query2.SQL.Clear;
//    Datam1.Query2.SQL.Add('update pagetable');
//    T := FormApplyproduction.ComboBoxPlatesorting.text;

//    if (Prefs.OrStackpositionsTogether) then
//      Datam1.Query2.SQL.Add('set SortingPosition = SortingPosition + ' + '''' + T + '''')
//    else
//      Datam1.Query2.SQL.Add('set sortingposition = ' + '''' + T + '''');

//    Datam1.Query2.SQL.Add('Where ProductionId = ' + IntToStr(ProductionID));
//    trysql(Datam1.Query2);

//    Formprodplan.plantimdadd('Post 15.2 ' + T + ' ' + IntToStr(ProductionID));
//  end;
  Formprodplan.plantimdadd('Post 16 ');

  if PDFMasterOK then
  begin
    Datam1.Query2.SQL.Clear;
    Datam1.Query2.SQL.Add('update pagetable');
    Datam1.Query2.SQL.Add('set pdfmaster  = mastercopyseparationset');
    Datam1.Query2.SQL.Add('Where ProductionId = ' + IntToStr(ProductionID));
    // ## NAN changed 20150928
    Datam1.Query2.SQL.Add('AND PDFMaster <= 0');
    trysql(Datam1.Query2);
  end;

  //20210908
  Datam1.Query2.SQL.Clear;
  Datam1.Query2.SQL.Add('UPDATE PageTable');
  Datam1.Query2.SQL.Add('set HardProofStatus = 0');
  Datam1.Query2.SQL.Add('Where ProductionId = ' + IntToStr(ProductionID));
  trysql(Datam1.Query2);

  if (AutoRetryQueuePossible) and (existingPlanOverwrite = false) then
  begin
    Datam1.Query2.SQL.Clear;
    Datam1.Query2.SQL.Add('Insert AutoRetryQueue  ');
    Datam1.Query2.SQL.Add('Values (' + IntToStr(ProductionID) + ' ,');
    Datam1.Query2.SQL.Add('0,' + '''' + '' + '''');
    Datam1.Query2.SQL.Add(',getdate() )');
    trysql(Datam1.Query2);
  end;

  Formprodplan.plantimdadd('Post 17 ');
  if (UTypes.AutoRetryQueueFileCenterPossible) and
    (Editmode <> PLANADDMODE_APPLY) and (existingPlanOverwrite = false) then
  begin
    Datam1.Query2.SQL.Clear;
    Datam1.Query2.SQL.Add('Insert AutoRetryQueueFileCenter   ');
    Datam1.Query2.SQL.Add('Values (' + IntToStr(ProductionID) + ' ,');
    Datam1.Query2.SQL.Add('0,' + '''' + '' + '''');
    Datam1.Query2.SQL.Add(',GETDATE() )');
    trysql(Datam1.Query2);
  end;

  Formprodplan.plantimdadd('Post 18 ');
  if (Editmode = PLANADDMODE_APPLY) And
    (UTypes.Global_spImportCenterRetryMissingPagesPossible) then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Exec spImportCenterRetryMissingPages');
    Datam1.Query1.SQL.Add('@ProductionID = ' + IntToStr(Postonproductionid));

    if Prefs.Debug then
      Datam1.Query1.SQL.SaveToFile
        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
        'Custpost3.SQL');
    trysql(Datam1.Query1);
  end;

  inksystem := '';
  for i := 0 to Length(Prefs.InkGenerationSystemPerPress) - 1 do
  begin
    if (Prefs.InkGenerationSystemPerPress[i].Key = tNames1.pressnameIDtoname
      (pressid)) then
    begin
      inksystem := Prefs.InkGenerationSystemPerPress[i].Value;
      break;
    end;
  end;

  if inksystem = 'ABB' then
  begin
    applyAbbinkcomment(ProductionID);
  end;

  if inksystem = 'Honeywell' then
  begin
    applyHoneyinkcomment(ProductionID, false);
  end;

  if inksystem = 'Honeywell 0..99' then
  begin
    applyHoneyinkcomment(ProductionID, true);
  end;

  if inksystem = 'PERRETTA' then
  begin
    applyPERRETTAinkcomment(ProductionID);
  end;

  Newtreeprodid := ProductionID;
  Datam1.UpdateTreeStateOnProduction(false);

  hasConfigProblem := false;
  if (Prefs.PlanningRipSetup) AND (RipSetupIDInPageTable) then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('SELECT TOP 1 RipSetupID FROM PageTable WITH (NOLOCK) WHERE RipSetupID=0 AND PageType<3 AND ProductionID = '
      + IntToStr(ProductionID));
    Tryopen(Datam1.Query1);

    IF not Datam1.Query1.Eof then
    begin
      MessageDlg
        ('Warning: Rip,Preflight,Inksave setup not set correctly (missing Output Defaults?).'
        + #13#10 + 'Please use Page Re-processsing option to set parameters',
        mtwarning, [mbOk], 0);
      hasConfigProblem := true;
    end;
    Datam1.Query1.Close;
  end;

  if (NOT hasConfigProblem) AND (Prefs.PlanningPageFormat) AND (PDFMasterOK)
  then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('SELECT TOP 1 PageFormatID FROM PageTable WITH (NOLOCK) WHERE PageFormatID=0 AND PageType<3 AND ProductionID = '
      + IntToStr(ProductionID));
    Tryopen(Datam1.Query1);

    IF NOT Datam1.Query1.Eof then
    begin
      MessageDlg
        ('Warning: Page format not set correctly (missing Publication Default?).'
        + #13#10 + 'Please use Page Re-processsing option to set parameters',
        mtwarning, [mbOk], 0);
      hasConfigProblem := false;
    end;
    Datam1.Query1.Close;
  end;


  // Plantimming.SaveToFile(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory())+'Plantime.txt');

  screen.Cursor := crdefault;
  try
    ActionEnable('postapplyplan');
  except
  end;
end;

procedure TFormMain.applyAbbinkcomment(ProductionID: Longint);

Var
  i, aktedi: Integer;

begin
  aktedi := -1;

  Datam1.Query2.SQL.Clear;
  Datam1.Query2.SQL.Add
    ('Select distinct pressrunid,presssectionnumber,editionid from pagetable (NOLOCK) ');
  Datam1.Query2.SQL.Add('where productionid = ' + IntToStr(ProductionID));
  Datam1.Query2.SQL.Add('order by editionid,presssectionnumber ');
  Tryopen(Datam1.Query2);
  i := 1;
  while not Datam1.Query2.Eof do
  begin
    if (aktedi <> Datam1.Query2.Fields[2].AsInteger) then
    begin
      aktedi := Datam1.Query2.Fields[2].AsInteger;
      i := 1;
    end
    else
      Inc(i);
    if i < 10 then
    begin
      Datam1.Query3.SQL.Clear;
      Datam1.Query3.SQL.Add('update pressrunid set inkcomment =  ' + '''' +
        IntToStr(i) + '''');
      Datam1.Query3.SQL.Add('where pressrunid = ' + Datam1.Query2.Fields[0]
        .AsString);
      trysql(Datam1.Query3);
    end;
    Datam1.Query2.Next;
  end;
  Datam1.Query2.Close;
end;

procedure TFormMain.applyHoneyinkcomment(ProductionID: Integer;
  usenumbers: Boolean);
Var
  i, aktedi: Integer;
  Abbinkname: String;
  Maxi: Integer;
begin
  aktedi := -1;
  Maxi := 25;
  if usenumbers then
    Maxi := 99;
  Abbinkname := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  Datam1.Query2.SQL.Clear;
  Datam1.Query2.SQL.Add
    ('Select distinct pressrunid,presssectionnumber,editionid from pagetable (NOLOCK) ');
  Datam1.Query2.SQL.Add('where productionid = ' + IntToStr(ProductionID));
  Datam1.Query2.SQL.Add('order by editionid,presssectionnumber ');
  Tryopen(Datam1.Query2);
  i := 1;
  while not Datam1.Query2.Eof do
  begin
    if (aktedi <> Datam1.Query2.Fields[2].AsInteger) then
    begin
      aktedi := Datam1.Query2.Fields[2].AsInteger;
      i := 1;
    end
    else
      Inc(i);
    if i < Maxi then
    begin
      Datam1.Query3.SQL.Clear;
      if usenumbers then
        Datam1.Query3.SQL.Add('update pressrunid set inkcomment =  ' + '''' +
          IntToStr(i - 1) + '''')
      else
        Datam1.Query3.SQL.Add('update pressrunid set inkcomment =  ' + '''' +
          Abbinkname[i] + '''');
      Datam1.Query3.SQL.Add('where pressrunid = ' + Datam1.Query2.Fields[0]
        .AsString);
      trysql(Datam1.Query3);
    end;
    Datam1.Query2.Next;
  end;
  Datam1.Query2.Close;
end;

procedure TFormMain.applyPERRETTAinkcomment(ProductionID: Longint);
Var
  aktpressRunid: Integer;
  aktLsecid: Integer;
  aktLpag: Integer;
begin
  aktpressRunid := -1;
  aktLsecid := -1;
  aktLpag := 10000;

  Datam1.Query2.SQL.Clear;
  Datam1.Query2.SQL.Add
    ('Select sectionid,pressrunid,min(Pagination) from pagetable (NOLOCK) ');
  Datam1.Query2.SQL.Add('where productionid = ' + IntToStr(ProductionID));
  Datam1.Query2.SQL.Add('group by pressrunid,sectionid');
  Datam1.Query2.SQL.Add('order by pressrunid,sectionid');
  Tryopen(Datam1.Query2);
  while not Datam1.Query2.Eof do
  begin
    if aktpressRunid <> Datam1.Query2.Fields[1].AsInteger then
    begin
      if aktpressRunid <> -1 then
      begin
        Datam1.Query3.SQL.Clear;
        Datam1.Query3.SQL.Add('Update pressrunid set inkcomment = ' + '''' +
          tNames1.sectionidtoname(aktLsecid) + '''');
        Datam1.Query3.SQL.Add('Where pressrunid = ' + IntToStr(aktpressRunid));
        trysql(Datam1.Query3);
      end;
      aktpressRunid := Datam1.Query2.Fields[1].AsInteger;
      aktLsecid := Datam1.Query2.Fields[0].AsInteger;
      aktLpag := Datam1.Query2.Fields[2].AsInteger;
    end;

    if aktLpag > Datam1.Query2.Fields[2].AsInteger then
    begin
      aktLpag := Datam1.Query2.Fields[2].AsInteger;
      aktLsecid := Datam1.Query2.Fields[0].AsInteger;
    end;
    Datam1.Query2.Next;
  end;

  if aktpressRunid <> -1 then
  begin
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('Update pressrunid set inkcomment = ' + '''' +
      tNames1.sectionidtoname(aktLsecid) + '''');
    Datam1.Query3.SQL.Add('Where pressrunid = ' + IntToStr(aktpressRunid));
    trysql(Datam1.Query3);
  end;

end;

procedure TFormMain.ActionplatesplitExecute(Sender: TObject);
Var
  tmpl: string;
  Oldcopyflatseparationset: String;
  copyflatseparationset
  // ,flatseparationset
  // ,flatseparation
    : Int64;

  nup, sheetside, tmpllistnum, i: Integer;

  Sheetnumber, NewPpos, IP: Integer;

begin

  if not AnyPlatesselected then
    exit;

  tmpl := PlatetemplateArray[Views[Viewselected].platesData
    [Views[Viewselected].LPV.Selected.Index].templatelistid].TemplateName;
  tmpllistnum := Views[Viewselected].platesData
    [Views[Viewselected].LPV.Selected.Index].templatelistid;
  inittypes.getdevicelistfromtemplate(tmpllistnum);

  FormChlayout.Aktpressname := tNames1.pressnameIDtoname
    (Views[Viewselected].platesData[Views[Viewselected].LPV.Selected.
    Index].pressid);
  FormChlayout.Curtemplate := PlatetemplateArray[tmpllistnum].TemplateName;

  FormChlayout.Allowtoshowdiv2 := PlatetemplateArray[tmpllistnum]
    .NupOnplate div 2;
  sheetside := 0;
  Sheetnumber := 1;

  if FormChlayout.ShowModal = mrOK then
  begin
    if (Prefs.SwapPlateMerger) then
    begin
      copyflatseparationset := 0;
      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin
          copyflatseparationset := Views[Viewselected].platesData[i].pages[1]
            .copyseparationset;
          break;
        end;
      end;

      if copyflatseparationset > 0 then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('Exec spOutputSplitFlatsCustom @CopyFlatSeparationSet = ' +
          IntToStr(copyflatseparationset));
        Datam1.Query1.SQL.Add(',@FinalTemplateID = ' +
          IntToStr(PlatetemplateArray[FormChlayout.Newtemplatelistid]
          .TemplateID));
        if Prefs.Debug then
          Datam1.Query1.SQL.SaveToFile
            (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
            'sqllogs\' + 'split.SQL');
        Datam1.Query1.ExecSQL;
      end;
    end
    else
    begin

      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin
          tmpllistnum := Views[Viewselected].platesData
            [Views[Viewselected].LPV.Selected.Index].templatelistid;
          nup := PlatetemplateArray[tmpllistnum].NupOnplate;
          Oldcopyflatseparationset :=
            IntToStr(Views[Viewselected].platesData
            [Views[Viewselected].LPV.Selected.Index].copyflatseparationset);
          NewPpos := 0;
          if PlatetemplateArray[FormChlayout.Newtemplatelistid].PagesAcross >
            PlatetemplateArray[FormChlayout.Newtemplatelistid].PagesDown then
          begin
            // ny plade er 2 vandret 1 lodret

            copyflatseparationset := Views[Viewselected].platesData[i].pages[1]
              .copyseparationset;

            for IP := 1 to nup do
            begin
              Inc(NewPpos);
              if NewPpos > PlatetemplateArray[FormChlayout.Newtemplatelistid].PagesAcross
              then
              begin
                NewPpos := 1;
                if sheetside = 1 then
                begin
                  sheetside := 0;
                  Inc(Sheetnumber);
                end
                else
                begin
                  sheetside := 1;
                end;
                copyflatseparationset := Views[Viewselected].platesData[i].pages
                  [IP].copyseparationset;
              end;
              Datam1.Query1.SQL.Clear;
              Datam1.Query1.SQL.Add('update pagetable');
              Datam1.Query1.SQL.Add('set deviceid = 0');
              Datam1.Query1.SQL.Add(', pressrunid = ' + IntToStr(2));
              Datam1.Query1.SQL.Add(', Sheetnumber = ' + IntToStr(Sheetnumber));
              Datam1.Query1.SQL.Add(', SheetSide = ' + IntToStr(sheetside));
              Datam1.Query1.SQL.Add(', pagepositions = ' + '''' +
                IntToStr(NewPpos) + '''');
              Datam1.Query1.SQL.Add(', templateid = ' +
                IntToStr(PlatetemplateArray[FormChlayout.Newtemplatelistid]
                .TemplateID));
              Datam1.Query1.SQL.Add(', copyflatseparationset = ' +
                IntToStr(copyflatseparationset));
              Datam1.Query1.SQL.Add('where pagetype <> 999');
              Datam1.Query1.SQL.Add('and locationid = ' +
                IntToStr(Views[Viewselected].platesData[i].LocationID));
              Datam1.Query1.SQL.Add('and productionid = ' +
                IntToStr(Views[Viewselected].platesData[i].ProductionID));
              Datam1.Query1.SQL.Add('and pressrunid = ' +
                IntToStr(Views[Viewselected].platesData[i].runid));
              Datam1.Query1.SQL.Add('and copyseparationset = ' +
                IntToStr(Views[Viewselected].platesData[i].pages[IP]
                .copyseparationset));
              Datam1.Query1.SQL.Add('and copyflatseparationset = ' +
                Oldcopyflatseparationset);
              Datam1.Query1.SQL.Add(WeditionStr);
              trysql(Datam1.Query1);

              Datam1.Query1.SQL.Clear;
              Datam1.Query1.SQL.Add('update pagetable');
              Datam1.Query1.SQL.Add
                ('set flatseparationset = ((copyflatseparationset * 100) + copynumber),');
              Datam1.Query1.SQL.Add
                ('flatseparation = (((copyflatseparationset * 100) + copynumber) * 100) + colorid');
              Datam1.Query1.SQL.Add('where copyflatseparationset = ' +
                IntToStr(copyflatseparationset));
              trysql(Datam1.Query1);

            end;

          end
          else
          begin

          end;
        end;
      end;
    end;
  end;
  ActionplaterefreshExecute(FormMain);

end;

procedure TFormMain.ActionAddtimeditionExecute(Sender: TObject);
Var
  fromnode: TTreeNode;
begin
  fromnode := TreeViewNeweddtree.Selected;
  FormAddtimedEds.Toedi := TTreeViewpagestype(fromnode.Data^).editionid;
  FormAddtimedEds.ProductionID := TTreeViewpagestype(fromnode.Data^)
    .ProductionID;
  FormAddtimedEds.Loaddata(FormAddtimedEds.ProductionID);
  if FormAddtimedEds.ShowModal = mrOK then
  begin
    Actionrefreshhedtree.Execute;
    if TreeViewNeweddtree.Selected.Level < 3 then
    begin
      TreeViewNeweddtree.Selected.Expand(false);
    end;
  end;
end;

procedure TFormMain.ActionprodhidefinprodExecute(Sender: TObject);
begin
  Actionprodhidefinprod.Checked := not Actionprodhidefinprod.Checked;
  Newrefreshprogress;
end;

procedure TFormMain.ActionplanchangelayoutExecute(Sender: TObject);
Var
  N: TTreeNode;
  IPLF, i: Integer;
  Curiplf: Integer;

begin
  Formprodplan.ItsArepair := false;
  Planloggingtype := 992;
  Planloggingmessage := 'Plan layout changed';

  try
    if TreeViewplan.Selected = nil then
      exit;
    if TreeViewplan.Selected.Level < 1 then
      exit;

    try
      // loadids('Actionplanchangelayout');

      plateframesloadedname := '';
      Formprodplan.planningaction := 6;

      N := FormMain.TreeViewplan.Selected;
      while N.Level > 1 do
        N := N.Parent;

      plateframeslocationid := Tplantreedata(N.Data^).LocationID;
      plateframespressid := Tplantreedata(N.Data^).pressid;
      Formprodplan.ComboBoxLocation.Items := tNames1.locationnames;
      Formprodplan.ComboBoxLocation.ItemIndex :=
        Formprodplan.ComboBoxLocation.Items.IndexOf
        (tNames1.locationIDtoname(plateframeslocationid));
      Formprodplan.possiblepressesonlocation(plateframeslocationid,
        Formprodplan.ComboBoxpress.Items);
      Formprodplan.ComboBoxpress.ItemIndex :=
        Formprodplan.ComboBoxpress.Items.IndexOf
        (tNames1.pressnameIDtoname(plateframespressid));
      Formprodplan.ComboBoxpublication.Items := tNames1.publicationnames;
      Formprodplan.Anychange := false;
      N := FormMain.TreeViewplan.Selected;
      while N.Level > 2 do
        N := N.Parent;

      plateframeslocationid := Tplantreedata(N.Data^).LocationID;
      plateframespressid := Tplantreedata(N.Data^).pressid;

      Formprodplan.ComboBoxLocation.Items := tNames1.locationnames;
      Formprodplan.ComboBoxLocation.ItemIndex :=
        Formprodplan.ComboBoxLocation.Items.IndexOf
        (tNames1.locationIDtoname(plateframeslocationid));
      Formprodplan.possiblepressesonlocation(plateframeslocationid,
        Formprodplan.ComboBoxpress.Items);
      Formprodplan.ComboBoxpress.ItemIndex :=
        Formprodplan.ComboBoxpress.Items.IndexOf
        (tNames1.pressnameIDtoname(plateframespressid));
      Formprodplan.ComboBoxpublication.Items := tNames1.publicationnames;
      Formprodplan.Anychange := true;

      plateframesproductionid := Tplantreedata(N.Data^).ProductionID;
      plateframesPubdate := Tplantreedata(N.Data^).Pubdate;
      plateframesPublicationid := Tplantreedata(N.Data^).Publicationid;
      plateframeslocationid := Tplantreedata(N.Data^).LocationID;
      plateframespressid := Tplantreedata(N.Data^).pressid;
      Formprodplan.SetprodrundataToUI;

      Formprodplan.ComboBoxpublication.ItemIndex :=
        Formprodplan.ComboBoxpublication.Items.IndexOf
        (tNames1.publicationIDtoname(plateframesPublicationid));
      plateframesPubdate := Tplantreedata(N.Data^).Pubdate;

      if plateframesproductionid > -1 then
        Formprodplan.EditProductionname.text := tNames1.productionrunIDtoname
          (plateframesproductionid)
      else
        Formprodplan.EditProductionname.text := plateframesproductionname;
      Formprodplan.DateTimePickerPubdate.Date := plateframesPubdate;

      if not Formprodplan.activated then
      begin
        Formprodplan.ColumnToSort := 0;
        FormApplyproduction.CheckBoxAllowunplannedcolors.Checked :=
          Prefs.PlanningAllowUnplannedColors;
        Formprodplan.activated := true;
      end;


      // Formprodplan.Setbluebar;

      Formtower.CheckBox1.Checked := Prefs.UseDatabasePressTowerInfo;
      selIpl := 0;
      FormMain.ProgressBarmain.Position := 0;
      Formprodplan.ProgressBarprod.Position := 0;

      // Formprodplan.planisactive := true;

      Formprodplan.ActionRun.ImageIndex := 74;
      Formprodplan.ActionRun.caption := 'Apply';

      Curiplf := -1;
      for IPLF := 1 to Nplateframes do
      begin
        if plateframes[IPLF].Selected then
        begin
          planpartpressrunid := plateframes[IPLF].pressrunid;
          Curiplf := IPLF;
          break;
        end;
      end;

      if Curiplf = -1 then
      begin
        beep;
        MessageDlg('No pressrun selected ', mtError, [mbOk], 0);
        exit;
      end;

      makeplateframes(ScrollBoxplanmain, ActionnewplanSmallimages.Checked);
      if PageControlplanning.ActivePageIndex = 1 then
        Formprodplan.makepagelist(PBExListviewPlandata, 0);

      Formprodplan.loadpressruniddata;
      Multisecplan := false;

      Formeditatext.caption := 'Change plate layout';
      Formeditatext.Label1.caption := 'New layout';
      Formeditatext.ComboBox1.Items.Clear;
      Formeditatext.ComboBox1.Style := csDropDownList;
      for i := 1 to NPlatetemplateArray do
      begin
        if PlatetemplateArray[i].pressid = plateframespressid then
          Formeditatext.ComboBox1.Items.Add(PlatetemplateArray[i].TemplateName);
      end;

      Formeditatext.ComboBox1.ItemIndex := Formeditatext.ComboBox1.Items.IndexOf
        (PlatetemplateArray[plateframesdata[1].prodplates[0].templatelistid]
        .TemplateName);
      // Formprodplan.editmode := 6;

      if Formeditatext.ShowModal = mrOK then
      begin
        Formprodplan.JustAlayoutchange := true;
        Formprodplan.Changelayoutonrun(Formeditatext.ComboBox1.text);
        if Formprodplan.ShowModal = mrOK then
        begin

        end;
      end;
      // Formprodplan.runproduction(true);
      // Formprodplan.planisactive := false;
    Except
    end;

  Finally
    Makeplantree(-1);
    Formprodplan.JustAlayoutchange := false;
    Formeditatext.ComboBox1.Style := csDropDown;
    Formprodplan.Editmode := PLANADDMODE_LOAD;
    findplantreenode;
    Formprodplan.planisactive := false;
    Formprodplan.planningaction := 0;
  end;
end;

procedure TFormMain.writeinitlog(logstr: String);
Var
  nowtime: TDateTime;
begin
  try

    nowtime := NOW;
    if isstarting and Prefs.Debug then
    begin
      logstr := '[' + DateTimeToStr(nowtime) + '] : ' + logstr +   Chr(13) + Chr(10);
      TFile.AppendAllText( IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'plancenterinit.log', logstr);
    //  InitlogStrs.Add(logstr);

     // InitlogStrs.SaveToFile
      //  (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
      //  'plancenterinit.log');

    end;

  Except
  end;

end;

procedure TFormMain.ActionConfadvinpExecute(Sender: TObject);
Var
  // skaldeklarerespgadll : Integer;
  resulttat: Integer;
begin
  if Configallowed then
  begin

    Runningdll := true;
    resulttat := ReConnectDB(DLLErrormessage);
    if resulttat = 1 then
      resulttat := PublicationEditionSectionAliasSetup(DLLErrormessage);
    LoadIDs('ActionConfadvinp', false);
    Runningdll := false;
  end;
end;

procedure TFormMain.ActionpagespreviewExecute(Sender: TObject);
Var
  proofed: Boolean;
  master, pdfmaster, i: Integer;
begin


  try
    master := -1;
    for i := 1 to StringGridHS.RowCount do
    begin
      if SuperHSdata[i - 1].Selected then
      begin
        master := SuperHSdata[i - 1].mastercopyseparationset;
        pdfmaster := SuperHSdata[i - 1].pdfmaster;
        break;
      end;
    end;

    if master <> -1 then
    begin
      Datam1.Query1.SQL.Clear;

      Datam1.Query1.SQL.Add
        ('select proofstatus,status from pagetable (NOLOCK) where mastercopyseparationset = '
        + IntToStr(master));
      if Prefs.Debug then
        Datam1.Query1.SQL.SaveToFile
          (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'
          + 'PagePreviewstat.SQL');
      Tryopen(Datam1.Query1);
      proofed := false;
      while not Datam1.Query1.Eof do
      begin
        if ((Datam1.Query1.FieldByName('proofstatus').AsInteger >= 10) and
          (Datam1.Query1.FieldByName('status').AsInteger > 0)) then
        begin
          proofed := true;
          break;
        end;
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;

      if proofed then
      begin
        formprev2.Lowrespath := getfileserverFrommaster
          (PATHTYPE_CCPREVIEWS, master);

        formprev2.prevmaster := master;

        if (Prefs.AllowParalelView) then
        begin
          if (((formprev2.Active) or (formprev2.Showing))) then
          begin
            formprev2.gotospecific(formprev2.prevmaster);
          End
          else
          begin
            formprev2.Show;
          end;
        end
        else
        begin
          formprev2.ShowModal;
          Actionrefreshpages.Execute;
          resetpreselHS;
        end;

      end
      else
      begin
        MessageDlg(InfraLanguage1.Translate('not proofed'), mtInformation,
          [mbOk], 0);
      end;
    End
    else
    begin
      MessageDlg(InfraLanguage1.Translate('No page selected'), mtInformation,
        [mbOk], 0);
    end;
  Except
  end;
end;

procedure TFormMain.StringGridHSDblClick(Sender: TObject);
begin
  Actionpagespreview.Execute;

end;

function TFormMain.CompareJpgIds(filename: String; Pubdate: TDateTime;
  Publicationid: Integer; Sectionid: Integer; pagename: string): Integer;
// 0 nofileid,1 fileok,2 filenotok
var
  AJPEGCommentRead: TJPGGetComment;
  T: String;
  Y, m, D: Integer;
  Pdate, publ, sec, ed, page: String;

begin
  (*

    ##Adresseavisen#20090402#A#1#12##
    Publication Adresseavisen
    Dato 20090402  YYYYMMDD
    Edition A
    Section 1
    pagename 12
  *)
  result := 0;
  if filename <> '' then
  begin

    publ := '';
    Pdate := '';
    ed := '';
    sec := '';
    page := '';

    AJPEGCommentRead := TJPGGetComment.Create(Self);
    AJPEGCommentRead.JPEGCommentSettings := [tjReadOnly];
    AJPEGCommentRead.filename := filename;
    if AJPEGCommentRead.JPEGComment.Count > 0 then
    begin
      T := AJPEGCommentRead.JPEGComment[0];
      if pos('##', T) > 0 then
      begin

        Delete(T, 1, pos('##', T));
        Delete(T, 1, 1);
        publ := Copy(T, 1, pos('#', T) - 1);
        Delete(T, 1, pos('#', T));
        Pdate := Copy(T, 1, pos('#', T) - 1);
        Delete(T, 1, pos('#', T));
        ed := Copy(T, 1, pos('#', T) - 1);
        Delete(T, 1, pos('#', T));
        sec := Copy(T, 1, pos('#', T) - 1);
        Delete(T, 1, pos('#', T));
        page := Copy(T, 1, pos('#', T) - 1);

        if (Length(Pdate) = 8) and (publ <> '') { and (page <> '') } then
        begin
          result := 2;
          page := Uppercase(page);
          pagename := Uppercase(pagename);
          Y := StrToInt(Copy(Pdate, 1, 4));
          m := StrToInt(Copy(Pdate, 5, 2));
          D := StrToInt(Copy(Pdate, 7, 2));

          if (DateOf(Pubdate) = EncodeDate(Y, m, D)) and
            (tNames1.publicationNameToID(publ) = Publicationid)
          { and (page = pagename) } then
          begin
            result := 1;
          end;
        end;
      end;
    end;
    AJPEGCommentRead.free;
  end;

end;

procedure TFormMain.ActionplatetreepdfbookExecute(Sender: TObject);
var
  runnode: TTreeNode;
  pressid: Integer;
  // locationid,
  pressrunid: Integer;
  // Makeall,
  usepressrunid: Boolean;
  Pressrunselstr: string;
  anode, n1, n2, n3: TTreeNode;
  ProductionID: Integer;
  npressrunid: Integer;
  resulttat: Integer;
  FinalPdfFilePath: String;
  DomakeOK: Boolean;
  szErrorMessage: PAnsiChar;

begin
  pressrunid := 0;
  npressrunid := 0;

  DomakeOK := true;
  try
    try

      if not MakePdfBookFlatsPosible then
        exit;

      if TreeViewPlateview.Selected = nil then
        exit;
      runnode := TreeViewPlateview.Selected;
      if runnode = nil then
        exit;
      if runnode.Level < 2 then
        exit;
      Pressrunselstr := '(-48';
      ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;
      n1 := runnode;
      if runnode.Level = 2 then
        usepressrunid := false
      else
        usepressrunid := true;
      try

        pressrunid := 0;
        npressrunid := 0;
        if usepressrunid then
        begin
          anode := n1;
          DomakeOK := true;
          if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
          begin
            Inc(npressrunid);
            pressrunid := TTreeViewpagestype(anode.Data^).pressrunid;
            if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
              Pressrunselstr) = 0 then
              Pressrunselstr := Pressrunselstr + ',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
          end;
          n2 := n1.GetFirstChild;
          while n2 <> nil do
          begin
            anode := n2;
            if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
            begin
              if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid), Pressrunselstr) = 0 then
              begin
                Inc(npressrunid);
                pressrunid := TTreeViewpagestype(anode.Data^).pressrunid;
                Pressrunselstr := Pressrunselstr + ',' +
                  IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
              end;
            end;

            n3 := n2.GetFirstChild;
            while n3 <> nil do
            begin
              anode := n3;
              if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
              begin
                if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid), Pressrunselstr) = 0 then
                begin
                  pressrunid := TTreeViewpagestype(anode.Data^).pressrunid;
                  Pressrunselstr := Pressrunselstr + ',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
                  Inc(npressrunid);
                end;
              end;
              n3 := n3.getNextSibling;
            end;
            n2 := n2.getNextSibling;
          end;
        End
        else
        begin
          DomakeOK := true;
        end;

      except
      end;

      Pressrunselstr := Pressrunselstr + ') ';

      while runnode.Level > 1 do
        runnode := runnode.Parent;

      if npressrunid > 1 then
      begin
        DomakeOK :=
          MessageDlg
          ('The book can only contain one or all pressrun''''s, make all pressruns ',
          mtConfirmation, [mbYes, mbNo], 0) = mryes;
        pressrunid := -1;
      end;

      if DomakeOK then
      begin
        pressid := tNames1.pressnametoid(runnode.Parent.text);
        // locationid := tnames1.locationnametoid(ComboBoxpalocationNY.Text);
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('Select TOP 1 inkstatus,flatproofstatus from pagetable (NOLOCK) ');
        Datam1.Query1.SQL.Add
          ('where (flatproofstatus <> 10) and (inkstatus < 6)');
        Datam1.Query1.SQL.Add('and active = 1');
        Datam1.Query1.SQL.Add('and pagetype <> 3');
        Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
        if pressrunid > 0 then
          Datam1.Query1.SQL.Add('and pressrunid = ' + IntToStr(pressrunid));
        Tryopen(Datam1.Query1);

        if not Datam1.Query1.Eof then
        begin
          DomakeOK :=
            MessageDlg
            ('Some plateflats are not ready. Continiue with book creation? ',
            mtConfirmation, [mbYes, mbNo], 0) = mryes;
        end;
        Datam1.Query1.Close;
      end;
      if DomakeOK then
      begin

        if SaveDialogPDFBook.Execute then
        begin
          FinalPdfFilePath := SaveDialogPDFBook.filename;
          Runningdll := true;

          resulttat := ReConnectDB(DLLErrormessage);
          if resulttat = 1 then
          begin
            DeleteFile(FinalPdfFilePath);
            sleep(30);
            nProductionID_PDF := ProductionID;
            if pressrunid > 0 then
              nPressRunID_PDF := pressrunid
            else
              nPressRunID_PDF := 0;

            szErrorMessage := AnsiStrAlloc(256);

            resulttat := MakePdfBookFlats(nProductionID_PDF, nPressRunID_PDF,
              TUtils.StringToPAnsiChar(FinalPdfFilePath), szErrorMessage);
            sleep(30);
            if resulttat = 0 then
            begin
              MessageDlg('Cannot make PDF Book ' + strpas(szErrorMessage),
                mtError, [mbOk], 0)
            End
            else
            begin
              if FileExists(FinalPdfFilePath) then
              begin
                case Prefs.ShowPdfBook of
                  0:
                    begin
                      MessageDlg(extractfilename(FinalPdfFilePath) + ' Done ',
                        mtInformation, [mbOk], 0);
                    end;
                  1:
                    begin
                      if MessageDlg('Show ' + extractfilename(FinalPdfFilePath)
                        + ' ?', mtConfirmation, [mbYes, mbNo], 0) = mryes then
                        TUtils.ExecNewProcess('explorer.exe', FinalPdfFilePath);
                    end;
                  2:
                    begin
                      TUtils.ExecNewProcess('explorer.exe', FinalPdfFilePath);
                    end;
                end;
              End
            end;
          end;
        end;
      end;
    Except
    end;
  finally
    Runningdll := false;
  end;

end;

procedure TFormMain.ActionplatestimmedcolorsExecute(Sender: TObject);
Var
  Anymissing: Boolean;
  NMasters: Integer;
  Masters: Array [1 .. 16] of record Ncolors: Integer;
  Colors: Array [1 .. 10] of Integer;
  Frommaster: Integer;
  ToMaster: Integer;
  foundaedtouse: Boolean;
end;
fromfile, tofile, Aktfileserverpath: String;
Nexted, Nmissing, lookBackineditionid, Amainlocid, i, ic, Topressrunid,
  frompressrunid, IP: Integer;
MissingColorids:
String;
Settustrans, nowheretogo: Boolean;

begin
  Amainlocid := 0;
  if not AnyPlatesselected then
    exit;
  if not FormSelplatecopies.doit then
    exit;

  Datam1.Query2.SQL.Clear;
  Datam1.Query2.SQL.Add('Select TOP 1 MainLocationID from GeneralPreferences');
  Datam1.Query2.Open;
  if not Datam1.Query2.Eof then
    Amainlocid := Datam1.Query2.Fields[0].AsInteger;
  Datam1.Query2.Close;

  Settustrans := true;

  for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
  begin
    if Views[Viewselected].LPV.Items[i].Selected then
    begin
      Topressrunid := Views[Viewselected].pressrunid;
      for IP := 1 to 10 do
        Masters[IP].Ncolors := 0;
      NMasters := 0;

      for IP := 1 to PlatetemplateArray
        [Views[Viewselected].platesData[i].templatelistid].NupOnplate do
      begin
        Anymissing := false;
        MissingColorids := '(-99';
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('Select distinct Colorid from pagetable (NOLOCK) ');
        Datam1.Query1.SQL.Add('Where productionid = ' +
          IntToStr(Views[Viewselected].platesData[i].ProductionID));
        Datam1.Query1.SQL.Add('and editionid =  ' +
          IntToStr(Views[Viewselected].platesData[i].editionid));
        Datam1.Query1.SQL.Add('and Sectionid = ' +
          IntToStr(Views[Viewselected].platesData[i].pages[IP].Sectionid));
        Datam1.Query1.SQL.Add('and pagename = ' + '''' + Views[Viewselected]
          .platesData[i].pages[IP].pagename + '''');
        // Datam1.Query1.SQL.Add('and active = 1');
        Datam1.Query1.SQL.Add('and status = 0');
        Datam1.Query1.SQL.Add('and copynumber = 1');
        if Prefs.Debug then
          Datam1.Query1.SQL.SaveToFile
            (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
            'sqllogs\' + 'Getmissingcolors.SQL');
        Datam1.Query1.Open;
        Nmissing := 0;

        while not Datam1.Query1.Eof do
        begin
          Anymissing := true;
          Inc(Nmissing);
          MissingColorids := MissingColorids + ',' + Datam1.Query1.Fields
            [0].AsString;
          Datam1.Query1.Next;
        end;
        Datam1.Query1.Close;
        MissingColorids := MissingColorids + ')';
        lookBackineditionid := Views[Viewselected].platesData[i].editionid;
        if Anymissing then
        begin
          Repeat
            Nexted := -11;
            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add
              ('Select TOP 1 pr.pressrunid,p.mastercopyseparationset,p.Colorid,p.locationid,p.editionid from pagetable p (NOLOCK) , pressrunid pr (NOLOCK) ');
            Datam1.Query1.SQL.Add('Where p.productionid = ' +
              IntToStr(Views[Viewselected].platesData[i].ProductionID));
            Datam1.Query1.SQL.Add('and p.pressrunid = pr.pressrunid ');
            Datam1.Query1.SQL.Add('and pr.timededitionto =  ' +
              IntToStr(lookBackineditionid));
            Datam1.Query1.SQL.Add('and p.Sectionid = ' +
              IntToStr(Views[Viewselected].platesData[i].pages[IP].Sectionid));
            Datam1.Query1.SQL.Add('and p.pagename = ' + '''' +
              Views[Viewselected].platesData[i].pages[IP].pagename + '''');
            Datam1.Query1.SQL.Add('and p.active = 1');
            Datam1.Query1.SQL.Add('and p.copynumber = 1');
            Datam1.Query1.Open;
            nowheretogo := Datam1.Query1.Eof;
            if not Datam1.Query1.Eof then
            begin
              Nexted := Datam1.Query1.Fields[4].AsInteger;
            end;
            Datam1.Query1.Close;

            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add
              ('Select DISTINCT pr.pressrunid,p.mastercopyseparationset,p.Colorid,p.locationid,p.editionid from pagetable p (NOLOCK) , pressrunid pr (NOLOCK) ');
            Datam1.Query1.SQL.Add('Where p.productionid = ' +
              IntToStr(Views[Viewselected].platesData[i].ProductionID));
            Datam1.Query1.SQL.Add('and p.pressrunid = pr.pressrunid ');
            Datam1.Query1.SQL.Add('and pr.timededitionto =  ' +
              IntToStr(lookBackineditionid));
            Datam1.Query1.SQL.Add('and p.Sectionid = ' +
              IntToStr(Views[Viewselected].platesData[i].pages[IP].Sectionid));
            Datam1.Query1.SQL.Add('and p.pagename = ' + '''' +
              Views[Viewselected].platesData[i].pages[IP].pagename + '''');
            Datam1.Query1.SQL.Add('and p.active = 1');
            Datam1.Query1.SQL.Add('and p.copynumber = 1');
            Datam1.Query1.SQL.Add('and p.Colorid IN ' + MissingColorids);
            Datam1.Query1.SQL.Add(' and p.status > 10 ');

            Datam1.Query1.Open;

            if Prefs.Debug then
              Datam1.Query1.SQL.SaveToFile
                (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
                'sqllogs\' + 'GetFromEdmissingcolors.SQL');
            if not Datam1.Query1.Eof then
            begin
              Settustrans := Amainlocid = Datam1.Query1.Fields[3].AsInteger;
              Inc(NMasters);
              Masters[NMasters].Ncolors := 0;
              while not Datam1.Query1.Eof do
              begin
                Inc(Masters[NMasters].Ncolors);
                Masters[NMasters].Colors[Masters[NMasters].Ncolors] :=
                  Datam1.Query1.Fields[2].AsInteger;
                Masters[NMasters].Frommaster := Datam1.Query1.Fields[1]
                  .AsInteger;
                Masters[NMasters].ToMaster := Views[Viewselected].platesData[i]
                  .pages[IP].mastercopyseparationset;
                Datam1.Query1.Next;
              end;

              Masters[NMasters].foundaedtouse := false;
              if Masters[NMasters].Ncolors <> Nmissing then
              begin
                lookBackineditionid := Nexted;
              end
              else
                Masters[NMasters].foundaedtouse := true;
            end
            else
              lookBackineditionid := Nexted;
            Datam1.Query1.Close;
          Until (Masters[NMasters].foundaedtouse) OR (nowheretogo);
        end;
      end;

      for IP := 1 to NMasters do
      begin
        for ic := 1 to Masters[IP].Ncolors do
        begin
          Aktfileserverpath := getfileserverFrommaster(PATHTYPE_CCFILES,
            Masters[IP].Frommaster);
          fromfile := IncludeTrailingBackSlash(Aktfileserverpath) +
            IntToStr(Masters[IP].Frommaster) + '.' + tNames1.ColornameIDtoname
            (Masters[IP].Colors[ic]);
          tofile := IncludeTrailingBackSlash(Aktfileserverpath) +
            IntToStr(Masters[IP].ToMaster) + '.' + tNames1.ColornameIDtoname
            (Masters[IP].Colors[ic]);

          if CopyFile(PChar(fromfile), PChar(tofile), false) then
          begin
            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add('update pagetable ');
            if Settustrans then
              Datam1.Query1.SQL.Add('set status = 30')
            else
              Datam1.Query1.SQL.Add('set status = 10');

            Datam1.Query1.SQL.Add('where mastercopyseparationset = ' +
              IntToStr(Masters[IP].ToMaster));
            Datam1.Query1.SQL.Add('And colorid = ' +
              IntToStr(Masters[IP].Colors[ic]));
            trysql(Datam1.Query1);
          end;
        end;

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('update pagetable ');
        Datam1.Query1.SQL.Add('set miscint4 = 0,proofstatus=0,inkstatus=0 ');
        Datam1.Query1.SQL.Add('where mastercopyseparationset = ' +
          IntToStr(Masters[IP].ToMaster));
        Datam1.Query1.SQL.Add('and colorid IN ' + MissingColorids);
        trysql(Datam1.Query1);
      end;
    end;
  end;

  ActionplaterefreshExecute(FormMain);
end;

procedure TFormMain.ActioneditionedittypesExecute(Sender: TObject);
var
  fromnode: TTreeNode;
begin
  fromnode := TreeViewNeweddtree.Selected;
  FormChangetotimed.Toedi := TTreeViewpagestype(fromnode.Data^).editionid;
  FormChangetotimed.ProductionID := TTreeViewpagestype(fromnode.Data^)
    .ProductionID;
  FormChangetotimed.Loaddata(FormChangetotimed.ProductionID);
  if FormChangetotimed.ShowModal = mrOK then
  begin
    Actionrefreshhedtree.Execute;
    if TreeViewNeweddtree.Selected.Level < 3 then
    begin
      TreeViewNeweddtree.Selected.Expand(false);
    end;
  end;
end;

procedure TFormMain.ActionplatetowerExecute(Sender: TObject);
var
  i: Integer;
  T, FirstSelected: string;
begin
  if not AnyPlatesselected then
    exit;

  FirstSelected := '';
  if PBExListviewplateinfo.Focused then
  begin
    for i := 0 to PBExListviewplateinfo.Items.Count - 1 do
    begin
      if PBExListviewplateinfo.Items[i].Selected then
      begin
        FirstSelected := PBExListviewplateinfo.Items[i].SubItems
          [PBExListviewplateinfoflatsepsubitem];
        break;
      end;
    end;
  end
  else
  begin
    for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
    begin
      if Views[Viewselected].LPV.Items[i].Selected then
      begin
        FirstSelected := IntToStr(Views[Viewselected].platesData[i]
          .copyflatseparationset);
        break;
      end;
    end;
  end;

  FormWebnaming.pressid := Views[Viewselected].platesData
    [Views[Viewselected].LPV.Selected.ImageIndex].pressid;
  FormWebnaming.Webkindname := 1;
  FormWebnaming.Labelwizardheader1.caption := 'Tower name';

  // Use instead of FormActivate
  FormWebnaming.InitNames;

  // Get current selection and set combobox..
  T := '';
  if (FirstSelected <> '') then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('SELECT TOP 1 PressTower FROM  PageTable WITH (NOLOCK)');
    if PBExListviewplateinfo.Focused then
      Datam1.Query1.SQL.Add('where FlatSeparation = ' + FirstSelected)
    else
      Datam1.Query1.SQL.Add('where CopyFlatSeparationSet = ' + FirstSelected);
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
      T := Datam1.Query1.Fields[0].AsString;
    Datam1.Query1.Close;

    if (T <> '') then
      FormWebnaming.ComboBox1.ItemIndex :=
        FormWebnaming.ComboBox1.Items.IndexOf(T);
  end;

  if FormWebnaming.ShowModal = mrOK then
  begin
    T := FormWebnaming.ComboBox1.text;
    if T = '<None>' then
      T := '';
    if PBExListviewplateinfo.Focused then
    begin
      for i := 0 to PBExListviewplateinfo.Items.Count - 1 do
      begin
        if PBExListviewplateinfo.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set presstower = ' + '''' + T + '''');
          Datam1.Query1.SQL.Add('where flatseparation = ' +
            PBExListviewplateinfo.Items[i].SubItems
            [PBExListviewplateinfoflatsepsubitem]);

          trysql(Datam1.Query1);
        end;
      end;
    end
    else
    begin
      if not AnyPlatesselected then
        exit;

      if not FormSelplatecopies.doit then
        exit;
      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set presstower = ' + '''' + T + '''');
          Datam1.Query1.SQL.Add('where pagetype <> 999');
          Datam1.Query1.SQL.Add('and locationid = ' +
            IntToStr(Views[Viewselected].platesData[i].LocationID));
          Datam1.Query1.SQL.Add('and productionid = ' +
            IntToStr(Views[Viewselected].platesData[i].ProductionID));
          Datam1.Query1.SQL.Add('and Copyflatseparationset = ' +
            IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
          Datam1.Query1.SQL.Add('and ' + FormSelplatecopies.Copyselstr);
          trysql(Datam1.Query1);
        end;
      end;
    end;
    ActionplaterefreshExecute(FormMain);
  end;
end;

procedure TFormMain.ActionplateZoneExecute(Sender: TObject);
Var
  i: Integer;
  T, FirstSelected: string;
begin
  if not AnyPlatesselected then
    exit;

  FirstSelected := '';
  if PBExListviewplateinfo.Focused then
  begin
    for i := 0 to PBExListviewplateinfo.Items.Count - 1 do
    begin
      if PBExListviewplateinfo.Items[i].Selected then
      begin
        FirstSelected := PBExListviewplateinfo.Items[i].SubItems
          [PBExListviewplateinfoflatsepsubitem];
        break;
      end;
    end;
  end
  else
  begin
    for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
    begin
      if Views[Viewselected].LPV.Items[i].Selected then
      begin
        FirstSelected := IntToStr(Views[Viewselected].platesData[i]
          .copyflatseparationset);
        break;
      end;
    end;
  end;

  FormWebnaming.pressid := Views[Viewselected].platesData
    [Views[Viewselected].LPV.Selected.ImageIndex].pressid;
  FormWebnaming.Webkindname := 2;
  FormWebnaming.Labelwizardheader1.caption := 'Plate zone';

  // Use instead of FormActivate
  FormWebnaming.InitNames;

  // Get current selection and set combobox..
  T := '';
  if (FirstSelected <> '') then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('SELECT TOP 1 PressZone FROM  PageTable WITH (NOLOCK)');
    if PBExListviewplateinfo.Focused then
      Datam1.Query1.SQL.Add('where FlatSeparation = ' + FirstSelected)
    else
      Datam1.Query1.SQL.Add('where CopyFlatSeparationSet = ' + FirstSelected);

    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
      T := Datam1.Query1.Fields[0].AsString;
    Datam1.Query1.Close;

    if (T <> '') then
      FormWebnaming.ComboBox1.ItemIndex :=
        FormWebnaming.ComboBox1.Items.IndexOf(T);
  end;

  if FormWebnaming.ShowModal = mrOK then
  begin
    if PBExListviewplateinfo.Focused then
    begin
      for i := 0 to PBExListviewplateinfo.Items.Count - 1 do
      begin
        if PBExListviewplateinfo.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set PressZone = ' + '''' +
            FormWebnaming.ComboBox1.text + '''');
          Datam1.Query1.SQL.Add('where flatseparation = ' +
            PBExListviewplateinfo.Items[i].SubItems
            [PBExListviewplateinfoflatsepsubitem]);

          trysql(Datam1.Query1);
        end;
      end;
    end
    else
    begin
      if not AnyPlatesselected then
        exit;

      if not FormSelplatecopies.doit then
        exit;
      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set PressZone = ' + '''' +
            FormWebnaming.ComboBox1.text + '''');
          Datam1.Query1.SQL.Add('where pagetype <> 999');
          Datam1.Query1.SQL.Add('and locationid = ' +
            IntToStr(Views[Viewselected].platesData[i].LocationID));
          Datam1.Query1.SQL.Add('and productionid = ' +
            IntToStr(Views[Viewselected].platesData[i].ProductionID));
          Datam1.Query1.SQL.Add('and Copyflatseparationset = ' +
            IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
          Datam1.Query1.SQL.Add('and ' + FormSelplatecopies.Copyselstr);
          trysql(Datam1.Query1);
        end;
      end;
    end;
    ActionplaterefreshExecute(FormMain);
  end;
end;

procedure TFormMain.ActionPlateHighLowExecute(Sender: TObject);
Var
  i, SelectedCopyNumber: Integer;
  T, FirstSelected: string;
begin
  if not AnyPlatesselected then
    exit;

  FirstSelected := '';
  if PBExListviewplateinfo.Focused then
  begin
    for i := 0 to PBExListviewplateinfo.Items.Count - 1 do
    begin
      if PBExListviewplateinfo.Items[i].Selected then
      begin
        FirstSelected := PBExListviewplateinfo.Items[i].SubItems
          [PBExListviewplateinfoflatsepsubitem];
        break;
      end;
    end;
  end
  else
  begin
    for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
    begin
      if Views[Viewselected].LPV.Items[i].Selected then
      begin
        FirstSelected := IntToStr(Views[Viewselected].platesData[i]
          .copyflatseparationset);
        break;
      end;
    end;
  end;

  FormWebnaming.pressid := Views[Viewselected].platesData
    [Views[Viewselected].LPV.Selected.ImageIndex].pressid;
  FormWebnaming.Webkindname := 3;
  FormWebnaming.Labelwizardheader1.caption := 'Plate High Low';

  // Use instead of FormActivate
  FormWebnaming.InitNames;

  // Get current selection and set comboboxes..
  T := '';
  if (FirstSelected <> '') then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('SELECT TOP 1 PressHighLow FROM  PageTable WITH (NOLOCK)');
    if PBExListviewplateinfo.Focused then
      Datam1.Query1.SQL.Add('where FlatSeparation = ' + FirstSelected)
    else
      Datam1.Query1.SQL.Add('where CopyFlatSeparationSet = ' + FirstSelected);
    Datam1.Query1.SQL.Add('and CopyNumber=1');
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
      T := Datam1.Query1.Fields[0].AsString;
    Datam1.Query1.Close;

    if (T <> '') then
      FormWebnaming.ComboBox1.ItemIndex :=
        FormWebnaming.ComboBox1.Items.IndexOf(T);

    T := '';
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('SELECT TOP 1 PressHighLow FROM PageTable WITH (NOLOCK)');
    if PBExListviewplateinfo.Focused then
      Datam1.Query1.SQL.Add('where FlatSeparation = ' + FirstSelected)
    else
      Datam1.Query1.SQL.Add('where CopyFlatSeparationSet = ' + FirstSelected);
    Datam1.Query1.SQL.Add('and CopyNumber=2');
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
      T := Datam1.Query1.Fields[0].AsString;
    Datam1.Query1.Close;

    if (T <> '') then
      FormWebnaming.ComboBox2.ItemIndex :=
        FormWebnaming.ComboBox1.Items.IndexOf(T);
  end;

  FormWebnaming.CheckBocApplyToAllPlates.Enabled :=
    not PBExListviewplateinfo.Items[i].Selected;

  if FormWebnaming.ShowModal = mrOK then
  begin
    if PBExListviewplateinfo.Focused then
    begin
      for i := 0 to PBExListviewplateinfo.Items.Count - 1 do
      begin
        if PBExListviewplateinfo.Items[i].Selected then
        begin

          SelectedCopyNumber :=
            StrToInt(PBExListviewplateinfo.Items[i].SubItems[0]);
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          if (SelectedCopyNumber < 2) then
            Datam1.Query1.SQL.Add('set PressHighLow = ' + '''' +
              FormWebnaming.ComboBox1.text + '''')
          else
            Datam1.Query1.SQL.Add('set PressHighLow = ' + '''' +
              FormWebnaming.ComboBox2.text + '''');
          Datam1.Query1.SQL.Add('where flatseparation = ' +
            PBExListviewplateinfo.Items[i].SubItems
            [PBExListviewplateinfoflatsepsubitem]);

          trysql(Datam1.Query1);
        end;
      end;
    end
    else
    begin
      if not AnyPlatesselected then
        exit;

      // if not FormSelplatecopies.doit then exit;
      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if (Views[Viewselected].LPV.Items[i].Selected) OR
          (FormWebnaming.CheckBocApplyToAllPlates.Checked) then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set PressHighLow = ' + '''' +
            FormWebnaming.ComboBox1.text + '''');
          Datam1.Query1.SQL.Add('where pagetype <> 999');
          Datam1.Query1.SQL.Add('and locationid = ' +
            IntToStr(Views[Viewselected].platesData[i].LocationID));
          Datam1.Query1.SQL.Add('and productionid = ' +
            IntToStr(Views[Viewselected].platesData[i].ProductionID));
          Datam1.Query1.SQL.Add('and Copyflatseparationset = ' +
            IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
          Datam1.Query1.SQL.Add('and CopyNumber=1');
          trysql(Datam1.Query1);

          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set PressHighLow = ' + '''' +
            FormWebnaming.ComboBox2.text + '''');
          Datam1.Query1.SQL.Add('where pagetype <> 999');
          Datam1.Query1.SQL.Add('and locationid = ' +
            IntToStr(Views[Viewselected].platesData[i].LocationID));
          Datam1.Query1.SQL.Add('and productionid = ' +
            IntToStr(Views[Viewselected].platesData[i].ProductionID));
          Datam1.Query1.SQL.Add('and Copyflatseparationset = ' +
            IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
          Datam1.Query1.SQL.Add('and CopyNumber=2');
          trysql(Datam1.Query1);

        end;
      end;
    end;
    ActionplaterefreshExecute(FormMain);
  end;
end;

procedure TFormMain.ActionplateTrueSheetsideExecute(Sender: TObject);
Var
  i, currentSide: Integer;
  T, FirstFlatSeparationStr: string;
begin
  if not AnyPlatesselected then
    exit;
  if PBExListviewplateinfo.Focused then
    exit;

  FirstFlatSeparationStr := '';
  if PBExListviewplateinfo.Focused then
  begin
    for i := 0 to PBExListviewplateinfo.Items.Count - 1 do
    begin
      if PBExListviewplateinfo.Items[i].Selected then
      begin
        FirstFlatSeparationStr := PBExListviewplateinfo.Items[i].SubItems
          [PBExListviewplateinfoflatsepsubitem];
        break;
      end;
    end;
  end;

  FormWebnaming.pressid := Views[Viewselected].platesData
    [Views[Viewselected].LPV.Selected.ImageIndex].pressid;
  FormWebnaming.Webkindname := 4;
  FormWebnaming.Labelwizardheader1.caption := 'Change Front or Back';

  // Use instead of FormActivate
  FormWebnaming.InitNames;

  // Get current selection and set combobox..
  currentSide := -1;
  if (FirstFlatSeparationStr <> '') then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('SELECT TOP 1 SheetSide FROM PageTable WITH (NOLOCK)');
    Datam1.Query1.SQL.Add('where FlatSeparation = ' + FirstFlatSeparationStr);
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
      currentSide := Datam1.Query1.Fields[0].AsInteger;
    Datam1.Query1.Close;

    if (currentSide <> -1) then
      FormWebnaming.ComboBox1.ItemIndex := currentSide; // o: front, 1: back
  end;

  if FormWebnaming.ShowModal = mrOK then
  begin
    if not AnyPlatesselected then
      exit;

    for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
    begin
      if Views[Viewselected].LPV.Items[i].Selected then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('update pagetable');
        if (FormWebnaming.ComboBox1.text = 'Front') then
          Datam1.Query1.SQL.Add('set SheetSide = 0')
        else
          Datam1.Query1.SQL.Add('set SheetSide = 1');

        Datam1.Query1.SQL.Add('where locationid = ' +
          IntToStr(Views[Viewselected].platesData[i].LocationID));
        Datam1.Query1.SQL.Add('and productionid = ' +
          IntToStr(Views[Viewselected].platesData[i].ProductionID));
        Datam1.Query1.SQL.Add('and Copyflatseparationset = ' +
          IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
        trysql(Datam1.Query1);
      end;
    end;
    ActionplaterefreshExecute(FormMain);
  end;
end;

procedure TFormMain.ActionplateCylinderExecute(Sender: TObject);
Var
  i, ic, SelectSheetSide: Integer;
  T, FirstSelected: String;
begin
  SelectSheetSide := -1;
  FirstSelected := '';

  if not AnyPlatesselected then
    exit;

  for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
  begin
    if Views[Viewselected].LPV.Items[i].Selected then
    begin
      Formpresscylinder.ProductionID := Views[Viewselected].platesData[i]
        .ProductionID;
      Formpresscylinder.pressid := Views[Viewselected].platesData[i].pressid;
      break;
    end;
  end;

  Formpresscylinder.NColoridstocyl := 0;
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('Select distinct p.Colorid,c.ColorName from pagetable p (NOLOCK) , colornames c (NOLOCK) ');
  Datam1.Query1.SQL.Add('Where p.productionID = ' +
    IntToStr(Formpresscylinder.ProductionID));
  Datam1.Query1.SQL.Add('And p.Colorid not in (5,6,51,52,53,54) ');
  Datam1.Query1.SQL.Add('And p.Colorid = C.Colorid ');
  Datam1.Query1.SQL.Add('order by p.Colorid ');
  FormMain.Tryopen(Datam1.Query1);
  while not Datam1.Query1.Eof do
  begin
    Inc(Formpresscylinder.NColoridstocyl);
    Formpresscylinder.Coloridstocyl[Formpresscylinder.NColoridstocyl].Colorid :=
      Datam1.Query1.Fields[0].AsInteger;
    Formpresscylinder.Coloridstocyl[Formpresscylinder.NColoridstocyl]
      .cylname := '';
    Formpresscylinder.Coloridstocyl[Formpresscylinder.NColoridstocyl].Colorname
      := Datam1.Query1.Fields[1].AsString;
    Datam1.Query1.Next;
  end;
  Datam1.Query1.Close;

  if PBExListviewplateinfo.Focused then
  begin
    for i := 0 to PBExListviewplateinfo.Items.Count - 1 do
    begin
      if PBExListviewplateinfo.Items[i].Selected then
      begin
        FirstSelected := PBExListviewplateinfo.Items[i].SubItems
          [PBExListviewplateinfoflatsepsubitem];
        break;
      end;
    end;
  end
  else
  begin
    for i := 0 to (Views[Viewselected].LPV.Items.Count - 1) do
    begin
      if Views[Viewselected].LPV.Items[i].Selected then
      begin
        FirstSelected := IntToStr(Views[Viewselected].platesData[i]
          .copyflatseparationset);
        break;
      end;
    end;
  end;

  if (FirstSelected <> '') then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('SELECT TOP 1 SheetSide FROM Pagetable WITH (NOLOCK)');
    if PBExListviewplateinfo.Focused then
      Datam1.Query1.SQL.Add('WHERE FlatSeparation = ' + FirstSelected)
    else
      Datam1.Query1.SQL.Add('WHERE CopyFlatSeparationSet = ' + FirstSelected);
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
      SelectSheetSide := Datam1.Query1.Fields[0].AsInteger;
    Datam1.Query1.Close;
  end;

  Formpresscylinder.InitNames(SelectSheetSide);

  if Formpresscylinder.ShowModal = mrOK then
  begin
    if PBExListviewplateinfo.Focused then
    begin
      for i := 0 to PBExListviewplateinfo.Items.Count - 1 do
      begin
        if PBExListviewplateinfo.Items[i].Selected then
        begin
          T := Formpresscylinder.ValueListEditorCyl.Values
            [PBExListviewplateinfo.Items[i].SubItems[1]];
          if Length(T) > 5 then
            Delete(T, 5, 100);
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set PressCylinder = ' + '''' + T + '''');
          Datam1.Query1.SQL.Add('where flatseparation = ' +
            PBExListviewplateinfo.Items[i].SubItems
            [PBExListviewplateinfoflatsepsubitem]);
          trysql(Datam1.Query1);
        end;
      end;
    End
    else
    begin
      if not FormSelplatecopies.doit then
        exit;
      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin
          for ic := 1 to Formpresscylinder.NColoridstocyl do
          begin
            T := Formpresscylinder.ValueListEditorCyl.Values
              [Formpresscylinder.Coloridstocyl[ic].Colorname];
            if Length(T) > 5 then
              Delete(T, 5, 100);
            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add('update pagetable');
            Datam1.Query1.SQL.Add('set PressCylinder = ' + '''' + T + '''');
            Datam1.Query1.SQL.Add('where pagetype <> 999');
            Datam1.Query1.SQL.Add('and locationid = ' +
              IntToStr(Views[Viewselected].platesData[i].LocationID));
            Datam1.Query1.SQL.Add('and productionid = ' +
              IntToStr(Views[Viewselected].platesData[i].ProductionID));
            Datam1.Query1.SQL.Add('and Copyflatseparationset = ' +
              IntToStr(Views[Viewselected].platesData[i]
              .copyflatseparationset));
            Datam1.Query1.SQL.Add('and ' + FormSelplatecopies.Copyselstr);
            Datam1.Query1.SQL.Add('and Colorid = ' +
              IntToStr(Formpresscylinder.Coloridstocyl[ic].Colorid));
            trysql(Datam1.Query1);
          end;
        end;
      end;
    end;
  end;
  ActionplaterefreshExecute(FormMain);
end;

function TFormMain.checkdevbeforerelease: Boolean;
Var
  i: Integer;
  setor, somedevnotset: Boolean;
  Instring: String;
  Warningtext: String;
begin
  Warningtext := '';
  result := true;
  if (Prefs.MustSetDeviceOnRelease) then
  begin

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select TOP 1 pressrunid,deviceid,PressTower,PressCylinder,PressZone,PressHighLow,SortingPosition,Comment from pagetable (NOLOCK) ');
    Instring := '';
    case Prefs.ReleaseRuleBasedOn of
      0:
        begin
          if Releaseproductionids.Count > 0 then
          begin
            Instring := 'Where productionid IN (';
            for i := 0 to Releaseproductionids.Count - 1 do
            begin
              Instring := Instring + Releaseproductionids[i] + ',';
            end;
            Instring[Length(Instring)] := ')';
          end;
        end;
      1:
        begin
          if ReleasePressrunids.Count > 0 then
          begin
            Instring := 'Where pressrunid IN (';
            for i := 0 to ReleasePressrunids.Count - 1 do
            begin
              Instring := Instring + ReleasePressrunids[i] + ',';
            end;
            Instring[Length(Instring)] := ')';
          end;
        end;
      2:
        begin
          if ReleasePlates.Count > 0 then
          begin
            Instring := 'Where pressrunid IN (';
            for i := 0 to ReleasePlates.Count - 1 do
            begin
              Instring := Instring + ReleasePlates[i] + ',';
            end;
            Instring[Length(Instring)] := ')';
          End
          else
          begin
            if ReleasePressrunids.Count > 0 then
            begin
              Instring := 'Where pressrunid IN (';
              for i := 0 to ReleasePressrunids.Count - 1 do
              begin
                Instring := Instring + ReleasePressrunids[i] + ',';
              end;
              Instring[Length(Instring)] := ')';
            End
            else
            begin
              if Releaseproductionids.Count > 0 then
              begin
                Instring := 'Where productionid IN (';
                for i := 0 to Releaseproductionids.Count - 1 do
                begin
                  Instring := Instring + Releaseproductionids[i] + ',';
                end;
                Instring[Length(Instring)] := ')';
              end;
            end;
          end;
        end;

    end;

    if Instring <> '' then
    begin

      Datam1.Query1.SQL.Add(Instring);

      Datam1.Query1.SQL.Add('and (active = 1');
      Datam1.Query1.SQL.Add('And pagetype <> 3) and (');

      setor := false;
      if Prefs.ReleaseRules[0] then
      begin
        Warningtext := Warningtext + 'Devices, ';
        if setor then
          Datam1.Query1.SQL.Add('OR ');
        setor := true;
        Datam1.Query1.SQL.Add('deviceid < 1 ');
      end;
      if Prefs.ReleaseRules[1] then
      begin
        Warningtext := Warningtext + 'PressTowers, ';
        if setor then
          Datam1.Query1.SQL.Add('OR ');
        setor := true;

        Datam1.Query1.SQL.Add(' PressTower = ' + '''' + '' + '''');
      end;
      if Prefs.ReleaseRules[2] then
      begin
        Warningtext := Warningtext + 'PressCylinders, ';
        if setor then
          Datam1.Query1.SQL.Add('OR ');
        setor := true;

        Datam1.Query1.SQL.Add(' PressCylinder = ' + '''' + '' + '''');
      end;
      if Prefs.ReleaseRules[3] then
      begin
        Warningtext := Warningtext + 'PressZones, ';
        if setor then
          Datam1.Query1.SQL.Add('OR ');
        setor := true;

        Datam1.Query1.SQL.Add(' PressZone = ' + '''' + '' + '''');
      end;
      if Prefs.ReleaseRules[4] then
      begin
        Warningtext := Warningtext + 'Towers, ';
        if setor then
          Datam1.Query1.SQL.Add('OR ');
        setor := true;

        Datam1.Query1.SQL.Add(' PressHighLow = ' + '''' + '' + '''');
      end;
      if Prefs.ReleaseRules[5] then
      begin
        Warningtext := Warningtext + 'SortingPositions, ';
        if setor then
          Datam1.Query1.SQL.Add('OR ');
        setor := true;

        Datam1.Query1.SQL.Add(' SortingPosition = ' + '''' + '' + '''');
      end;
      if Prefs.ReleaseRules[6] then
      begin
        Warningtext := Warningtext + 'Comments, ';
        if setor then
          Datam1.Query1.SQL.Add('OR ');
        setor := true;

        Datam1.Query1.SQL.Add(' Comment = ' + '''' + '' + '''');
      end;
      Datam1.Query1.SQL.Add(')');
      if Prefs.Debug then
        Datam1.Query1.SQL.SaveToFile
          (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'
          + 'Checkbeforerelase.SQL');
      Datam1.Query1.Open;
      somedevnotset := not Datam1.Query1.Eof;

      Datam1.Query1.Close;

      if somedevnotset then
      begin
        result := MessageDlg('The release rules for ' + Warningtext +
          ' are not fulfilled' + #13 + ' Continue?', mtConfirmation,
          [mbYes, mbNo], 0) = mryes;
      end;
    end;
  end;
end;

procedure TFormMain.ActionplatepanoramaExecute(Sender: TObject);
Var
  tmpl: string;
  Oldcopyflatseparationset: String;
  copyflatseparationset, flatseparationset, FlatSeparation: Int64;
  nup, sheetside, tmpllistnum, Newtmpllistnum, i: Integer;

  Sheetnumber, NewPpos, IP: Integer;
  aktprodid: Integer;
  Sel1, sel2: Integer;
  Sel1ok, sel2ok: Boolean;
  pageindex1, pageindex2: Integer;
  Side1, Side2: Integer;
  Sel1Pos, Sel2Pos: Integer;

  PosList: array [1 .. 64] of Integer;
  Lowpos, highpos: Integer;

  ic, Icpy, Sel1copyflatsepset, Sel2copyflatsepset: Integer;

  sel1master, sel2master: Integer;
  Npressruns: Integer;
  pressruns: Array [1 .. 300] of record editionid: Integer;
  Sectionid: Integer;
  pressrunid: Integer;
  presssectionnumber: Integer;
end;
Newpressrunid, Aktseq, Akteditionid: Integer;
Pressruninlist, pagenamelist: String;

begin
  try

    Sel1ok := true;
    sel2ok := true;

    try

      if not AnyPlatesselected then
        exit;
      tmpl := '';
      Sel1 := -1;
      sel2 := -1;

      ic := 0;
      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin
          Inc(ic);
        end;
      end;

      if ic <> 2 then
      begin
        MessageDlg('Exactly two plates must be selected', mtInformation,
          [mbOk], 0);
        exit;
      end;

      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin
          if Sel1 = -1 then
          begin
            Sel1 := i;

          end
          else
          begin
            sel2 := i;
          end;
        end;

        if (Sel1 <> -1) and (sel2 <> -1) then
          break;

      end;

      if (Sel1 = -1) OR (sel2 = -1) then
      begin
        MessageDlg('Two plates must be selected', mtInformation, [mbOk], 0);
        exit;
      end;

      tmpl := PlatetemplateArray[Views[Viewselected].platesData[sel2]
        .templatelistid].TemplateName;
      tmpllistnum := Views[Viewselected].platesData[sel2].templatelistid;

      if PlatetemplateArray[tmpllistnum].NupOnplate > 1 then
        sel2ok := false;

      tmpl := PlatetemplateArray[Views[Viewselected].platesData[Sel1]
        .templatelistid].TemplateName;
      tmpllistnum := Views[Viewselected].platesData[Sel1].templatelistid;

      if PlatetemplateArray[tmpllistnum].NupOnplate > 1 then
        Sel1ok := false;

      if (not Sel1ok) OR (not sel2ok) then
      begin
        MessageDlg('Both selected plates must be 1-up', mtInformation,
          [mbOk], 0);
        exit;
      end;

      pageindex1 := Views[Viewselected].platesData[Sel1].pages[1].pageindex;
      pageindex2 := Views[Viewselected].platesData[sel2].pages[1].pageindex;

      Side1 := Views[Viewselected].platesData[Sel1].Front;
      Side2 := Views[Viewselected].platesData[sel2].Front;

      if Side1 = Side2 then
      begin
        MessageDlg('Sheetside on selected plates must be different',
          mtInformation, [mbOk], 0);
        exit;
      end;

      Sel1copyflatsepset := Views[Viewselected].platesData[Sel1]
        .copyflatseparationset;
      Sel2copyflatsepset := Views[Viewselected].platesData[sel2]
        .copyflatseparationset;

      inittypes.getdevicelistfromtemplate(tmpllistnum);

      FormChlayout.Aktpressname := tNames1.pressnameIDtoname
        (Views[Viewselected].platesData[Views[Viewselected].LPV.Selected.
        Index].pressid);
      FormChlayout.Curtemplate := PlatetemplateArray[tmpllistnum].TemplateName;

      FormChlayout.Allowtoshowdiv2 := 2;

      sheetside := 0;
      Sheetnumber := 1;

      sel1master := Views[Viewselected].platesData[Sel1].pages[1]
        .mastercopyseparationset;
      sel2master := Views[Viewselected].platesData[sel2].pages[1]
        .mastercopyseparationset;

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select TOP 1 productionid from pagetable (NOLOCK) ');
      Datam1.Query1.SQL.Add('Where pressrunid = ' +
        IntToStr(Views[Viewselected].pressrunid));

      Datam1.Query1.Open;
      if not Datam1.Query1.Eof then
      begin
        aktprodid := Datam1.Query1.Fields[0].AsInteger;
      end
      else
      begin
        MessageDlg('Cannot find production - check planning', mtInformation,
          [mbOk], 0);
        exit;
      end;
      Datam1.Query1.Close;

      Npressruns := 0;
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('select distinct presssectionnumber,editionid,sectionid,pressrunid from pagetable (NOLOCK) ');
      Datam1.Query1.SQL.Add('Where pressrunid = ' +
        IntToStr(Views[Viewselected].pressrunid));
      Datam1.Query1.SQL.Add
        ('order by presssectionnumber,editionid,sectionid,pressrunid ');

      Datam1.Query1.Open;
      while not Datam1.Query1.Eof do
      begin
        Inc(Npressruns);
        pressruns[Npressruns].presssectionnumber := Datam1.Query1.Fields[0]
          .AsInteger;
        pressruns[Npressruns].editionid := Datam1.Query1.Fields[1].AsInteger;
        pressruns[Npressruns].Sectionid := Datam1.Query1.Fields[2].AsInteger;
        pressruns[Npressruns].pressrunid := Datam1.Query1.Fields[3].AsInteger;
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;

      Akteditionid := Views[Viewselected].platesData[Sel1].editionid;

      FormChlayout.Mustbetwoup := true;

      if FormChlayout.ShowModal = mrOK then
      begin
        FormChlayout.Mustbetwoup := false;
        Newtmpllistnum := FormChlayout.Newtemplatelistid;
        for i := 1 to 64 do
        begin
          if Views[Viewselected].platesData[Sel1].Front = 0 then
            PosList[i] := PlatetemplateArray[Newtmpllistnum]
              .PageNumberingFront[i]
          else
            PosList[i] := PlatetemplateArray[Newtmpllistnum]
              .PageNumberingBack[i];
        end;

        if PosList[1] < PosList[2] then
        begin
          Lowpos := 1;
          highpos := 2;
        end
        else
        begin
          Lowpos := 2;
          highpos := 1;
        end;
        if pageindex1 < pageindex2 then
        begin
          Sel1Pos := Lowpos;
          Sel2Pos := highpos;
        end
        else
        begin
          Sel1Pos := highpos;
          Sel2Pos := Lowpos;
        end;

        (*
          Sel1Pos := (Sel1Pos - NewBack[Lowpos]) +1;
          Sel2Pos := (Sel2Pos - NewBack[Lowpos]) +1;
        *)

        Datam1.Query2.SQL.Clear;
        Datam1.Query2.SQL.Add
          ('Select TOP 1 SequenceNumber from pressrunid (NOLOCK) where pressrunid = '
          + IntToStr(Views[Viewselected].pressrunid));

        Aktseq := 1;
        Datam1.Query2.Open;
        if not Datam1.Query2.Eof then
        begin
          Aktseq := Datam1.Query2.Fields[0].AsInteger;
        end
        else
        begin
          MessageDlg('Cannot find pressrun check planning', mtInformation,
            [mbOk], 0);
          exit;
        end;

        Datam1.Query2.Close;

        pagenamelist := '(' + '''' + Views[Viewselected].platesData[Sel1].pages
          [1].pagename + '''' + ',' + '''' + Views[Viewselected].platesData
          [sel2].pages[1].pagename + '''' + ')';

        Datam1.Query2.SQL.Clear;
        Datam1.Query2.SQL.Add
          ('Select TOP 1 p1.pressrunid,pr.SequenceNumber from pagetable p1 (NOLOCK) ,pressrunid pr (NOLOCK)  where p1.pressrunid <> '
          + IntToStr(Views[Viewselected].pressrunid));
        Datam1.Query2.SQL.Add('and p1.templateid = ' +
          IntToStr(PlatetemplateArray[Newtmpllistnum].TemplateID));
        Datam1.Query2.SQL.Add('and p1.productionid = ' + IntToStr(aktprodid));
        Datam1.Query2.SQL.Add('and p1.editionid = ' + IntToStr(Akteditionid));
        Datam1.Query2.SQL.Add('and p1.editionid = ' + IntToStr(Akteditionid));
        Datam1.Query2.SQL.Add('and p1.pressrunid = pr.pressrunid ');
        Datam1.Query2.SQL.Add('and pr.SequenceNumber = ' +
          IntToStr(Aktseq + 1));
        Datam1.Query2.SQL.Add('and p1.sectionid = ' +
          IntToStr(Views[Viewselected].platesData[Sel1].pages[1].Sectionid));
        Datam1.Query2.SQL.Add('and p1.pagename not in ' + pagenamelist);
        Newpressrunid := -1;
        if Prefs.Debug then
          Datam1.Query2.SQL.SaveToFile
            (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
            'sqllogs\' + 'Makepanogetpr.SQL');

        Datam1.Query2.Open;
        if not Datam1.Query2.Eof then
        begin
          Newpressrunid := Datam1.Query2.Fields[0].AsInteger;
        end;
        Datam1.Query2.Close;

        if Newpressrunid = -1 then
        begin
          Datam1.Query2.SQL.Clear;
          Datam1.Query2.SQL.Add
            ('Select distinct pressrunid from pagetable (NOLOCK)  ');
          Datam1.Query2.SQL.Add('Where productionid =  ' + IntToStr(aktprodid));

          Pressruninlist := '(';
          Datam1.Query2.Open;
          while not Datam1.Query2.Eof do
          begin
            Pressruninlist := Pressruninlist + Datam1.Query2.Fields[0]
              .AsString + ',';
            Datam1.Query2.Next;
          end;
          Datam1.Query2.Close;

          Pressruninlist[Length(Pressruninlist)] := ')';

          Datam1.Query2.SQL.Clear;
          Datam1.Query2.SQL.Add
            ('update pressrunid set SequenceNumber = SequenceNumber +1 ');
          Datam1.Query2.SQL.Add('where SequenceNumber > ' + IntToStr(Aktseq));
          Datam1.Query2.SQL.Add('and pressrunid IN ' + Pressruninlist);
          // Datam1.Query2.SQL.Add('and Editionid IN ' + IntToStr(akteditionid));
          Datam1.Query2.ExecSQL;

          Datam1.Query2.SQL.Clear;

          Datam1.Query2.SQL.Add('DECLARE @PressRunID int');
          Datam1.Query2.SQL.Add('DECLARE @SequenceNumber int');

          Datam1.Query2.SQL.Add('begin TRANSACTION');
          Datam1.Query2.SQL.Add('SET @PressRunID = -1');
          Datam1.Query2.SQL.Add('SET @SequenceNumber = ' +
            IntToStr(Aktseq + 1));
          Datam1.Query2.SQL.Add
            ('SET @PressRunID = (Select top 1 number from allnum');
          Datam1.Query2.SQL.Add
            ('where not exists(select PressRunID from PressRunID');
          Datam1.Query2.SQL.Add('where allnum.number = PressRunID.PressRunID)');
          Datam1.Query2.SQL.Add('and allnum.number >= 1)');
          Datam1.Query2.SQL.Add
            ('INSERT INTO PressRunID  (PressRunID,SequenceNumber)');
          Datam1.Query2.SQL.Add
            ('VALUES                  (@PressRunID,@SequenceNumber)');
          Datam1.Query2.SQL.Add('if @@ERROR <> 0');
          Datam1.Query2.SQL.Add('begin');
          Datam1.Query2.SQL.Add('	ROLLBACK');
          Datam1.Query2.SQL.Add('	RETURN');
          Datam1.Query2.SQL.Add('END');
          Datam1.Query2.SQL.Add('COMMIT');
          Datam1.Query2.SQL.Add('Select @PressRunID');

          Datam1.Query2.Open;
          Newpressrunid := Datam1.Query2.Fields[0].AsInteger;

          Datam1.Query2.Close;

          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('Select * from pressrunid ');
          Datam1.Query1.SQL.Add('Where pressrunid = ' + IntToStr(Views[Viewselected].pressrunid));

          Datam1.Query1.Open;

          Datam1.Query2.SQL.Clear;
          Datam1.Query2.SQL.Add('update pressrunid set ');
          Datam1.Query2.SQL.Add(' Deadline1 = ' + '''' +
            FormaTDateTime(SQLdatetimeformat,
            Datam1.Query1.FieldByName('Deadline1').AsDateTime) + '''' + ',');
          Datam1.Query2.SQL.Add(' Deadline2 = ' + '''' +
            FormaTDateTime(SQLdatetimeformat,
            Datam1.Query1.FieldByName('Deadline2').AsDateTime) + '''' + ',');
          Datam1.Query2.SQL.Add(' Deadline3 = ' + '''' +
            FormaTDateTime(SQLdatetimeformat,
            Datam1.Query1.FieldByName('Deadline3').AsDateTime) + '''' + ',');
          Datam1.Query2.SQL.Add(' Deadline4 = ' + '''' +
            FormaTDateTime(SQLdatetimeformat,
            Datam1.Query1.FieldByName('Deadline4').AsDateTime) + '''' + ',');

          Datam1.Query2.SQL.Add(' PriorityBeforeHottime = ' +
            IntToStr(Datam1.Query1.FieldByName('PriorityBeforeHottime')
            .AsInteger) + ',');
          Datam1.Query2.SQL.Add(' PriorityDuringHottime = ' +
            IntToStr(Datam1.Query1.FieldByName('PriorityDuringHottime')
            .AsInteger) + ',');
          Datam1.Query2.SQL.Add(' PriorityAfterHottime = ' +
            IntToStr(Datam1.Query1.FieldByName('PriorityAfterHottime')
            .AsInteger) + ',');

          Datam1.Query2.SQL.Add(' PriorityHottimebegin = ' + '''' +
            FormaTDateTime(SQLdatetimeformat,
            Datam1.Query1.FieldByName('PriorityHottimebegin').AsDateTime) +
            '''' + ',');
          Datam1.Query2.SQL.Add(' PriorityHottimeEnd = ' + '''' +
            FormaTDateTime(SQLdatetimeformat,
            Datam1.Query1.FieldByName('PriorityHottimeEnd').AsDateTime) +
            '''' + ',');

          Datam1.Query2.SQL.Add(' Comment = ' + '''' + Datam1.Query1.FieldByName
            ('Comment').AsString + '''' + ',');

          Datam1.Query2.SQL.Add(' UsePressTowerInfo = ' +
            IntToStr(Datam1.Query1.FieldByName('UsePressTowerInfo')
            .AsInteger) + ',');

          Datam1.Query2.SQL.Add(' OrderNumber = ' + '''' +
            Datam1.Query1.FieldByName('OrderNumber').AsString + '''' + ',');
          Datam1.Query2.SQL.Add(' InkComment = ' + '''' +
            Datam1.Query1.FieldByName('InkComment').AsString + '''' + ',');

          Datam1.Query2.SQL.Add(' Backwards = ' +
            IntToStr(Datam1.Query1.FieldByName('Backwards').AsInteger) + ',');
          Datam1.Query2.SQL.Add(' PerfectBound = ' +
            IntToStr(Datam1.Query1.FieldByName('PerfectBound')
            .AsInteger) + ',');
          Datam1.Query2.SQL.Add(' Inserted = ' +
            IntToStr(Datam1.Query1.FieldByName('Inserted').AsInteger) + ',');

          Datam1.Query2.SQL.Add(' PlanName = ' + '''' +
            Datam1.Query1.FieldByName('PlanName').AsString + '''' + ',');

          Datam1.Query2.SQL.Add(' PressSystem = ' + '''' +
            Datam1.Query1.FieldByName('PressSystem').AsString + '''' + ',');
          Datam1.Query2.SQL.Add(' TimedEditionFrom = ' +
            IntToStr(Datam1.Query1.FieldByName('TimedEditionFrom')
            .AsInteger) + ',');
          Datam1.Query2.SQL.Add(' TimedEditionTo = ' +
            IntToStr(Datam1.Query1.FieldByName('TimedEditionTo')
            .AsInteger) + ',');
          Datam1.Query2.SQL.Add(' TimedEditionState = ' +
            IntToStr(Datam1.Query1.FieldByName('TimedEditionState')
            .AsInteger) + ',');
          Datam1.Query2.SQL.Add(' FromZone = ' +
            IntToStr(Datam1.Query1.FieldByName('FromZone').AsInteger) + ',');
          Datam1.Query2.SQL.Add(' ToZone = ' +
            IntToStr(Datam1.Query1.FieldByName('ToZone').AsInteger) + ',');
          Datam1.Query2.SQL.Add(' Circulation = ' +
            IntToStr(Datam1.Query1.FieldByName('Circulation').AsInteger) + ',');
          Datam1.Query2.SQL.Add(' Circulation2 = ' +
            IntToStr(Datam1.Query1.FieldByName('Circulation2')
            .AsInteger) + ',');
          Datam1.Query2.SQL.Add(' PlanType = ' +
            IntToStr(Datam1.Query1.FieldByName('PlanType').AsInteger) + ',');
          Datam1.Query2.SQL.Add(' Comment2 = ' + '''' +
            Datam1.Query1.FieldByName('Comment2').AsString + '''' + ',');
          Datam1.Query2.SQL.Add(' MiscInt1 = ' +
            IntToStr(Datam1.Query1.FieldByName('MiscInt1').AsInteger) + ',');
          Datam1.Query2.SQL.Add(' MiscInt2 = ' +
            IntToStr(Datam1.Query1.FieldByName('MiscInt2').AsInteger) + ',');
          Datam1.Query2.SQL.Add(' MiscString1 = ' + '''' +
            Datam1.Query1.FieldByName('MiscString1').AsString + '''' + ',');
          Datam1.Query2.SQL.Add(' MiscString2 = ' + '''' +
            Datam1.Query1.FieldByName('MiscString2').AsString + '''' + ',');
          Datam1.Query2.SQL.Add(' MiscDate = ' + '''' +
            FormaTDateTime(SQLdatetimeformat,
            Datam1.Query1.FieldByName('MiscDate').AsDateTime) + '''' + ',');
          Datam1.Query2.SQL.Add(' PlanVersion = ' +
            IntToStr(Datam1.Query1.FieldByName('PlanVersion').AsInteger) + ',');
          Datam1.Query2.SQL.Add(' PlanSystem = ' + '''' +
            Datam1.Query1.FieldByName('PlanSystem').AsString + '''');
          Datam1.Query2.SQL.Add('Where pressrunid = ' +
            IntToStr(Newpressrunid));
          // Datam1.Query2.SQL.SaveToFile(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'+'test.SQL');
          Datam1.Query2.ExecSQL;

          Datam1.Query1.Close;
        end;

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('update pagetable');
        Datam1.Query1.SQL.Add('set deviceid = 0');
        Datam1.Query1.SQL.Add(', Sheetnumber = ' +
          IntToStr(Views[Viewselected].platesData[Sel1].Sheetnumber));
        Datam1.Query1.SQL.Add(', SheetSide = ' +
          IntToStr(Views[Viewselected].platesData[Sel1].Front));
        Datam1.Query1.SQL.Add(', pagepositions = ' + '''' +
          IntToStr(Sel1Pos) + '''');
        Datam1.Query1.SQL.Add(', pageposition = ' + IntToStr(Sel1Pos));
        Datam1.Query1.SQL.Add(', pagesonplate = 2');
        Datam1.Query1.SQL.Add(', templateid = ' +
          IntToStr(PlatetemplateArray[Newtmpllistnum].TemplateID));
        Datam1.Query1.SQL.Add(', copyflatseparationset = ' +
          IntToStr(Sel1copyflatsepset));
        Datam1.Query1.SQL.Add(', pressrunid = ' + IntToStr(Newpressrunid));

        Datam1.Query1.SQL.Add('where pagetype <> 999');
        Datam1.Query1.SQL.Add('and copyflatseparationset = ' +
          IntToStr(Sel1copyflatsepset));
        if Prefs.Debug then
          Datam1.Query1.SQL.SaveToFile
            (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
            'sqllogs\' + 'Makepano1.SQL');
        trysql(Datam1.Query1);

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('update pagetable');
        Datam1.Query1.SQL.Add('set deviceid = 0');
        Datam1.Query1.SQL.Add(', Sheetnumber = ' +
          IntToStr(Views[Viewselected].platesData[Sel1].Sheetnumber));
        Datam1.Query1.SQL.Add(', SheetSide = ' +
          IntToStr(Views[Viewselected].platesData[Sel1].Front));
        Datam1.Query1.SQL.Add(', pagepositions = ' + '''' +
          IntToStr(Sel2Pos) + '''');
        Datam1.Query1.SQL.Add(', pageposition = ' + IntToStr(Sel2Pos));
        Datam1.Query1.SQL.Add(', pagesonplate = 2');
        Datam1.Query1.SQL.Add(', templateid = ' +
          IntToStr(PlatetemplateArray[Newtmpllistnum].TemplateID));
        Datam1.Query1.SQL.Add(', copyflatseparationset = ' +
          IntToStr(Sel1copyflatsepset));
        Datam1.Query1.SQL.Add(', pressrunid = ' + IntToStr(Newpressrunid));
        Datam1.Query1.SQL.Add('Where copyflatseparationset = ' +
          IntToStr(Sel2copyflatsepset));
        if Prefs.Debug then
          Datam1.Query1.SQL.SaveToFile
            (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
            'sqllogs\' + 'Makepano2.SQL');
        trysql(Datam1.Query1);

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('update pagetable');
        Datam1.Query1.SQL.Add
          ('set flatseparationset = ((copyflatseparationset * 100) + copynumber),');
        Datam1.Query1.SQL.Add
          ('flatseparation = (((copyflatseparationset * 100) + copynumber) * 100) + colorid');
        Datam1.Query1.SQL.Add('where copyflatseparationset = ' +
          IntToStr(Sel1copyflatsepset));
        if Prefs.Debug then
          Datam1.Query1.SQL.SaveToFile
            (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
            'sqllogs\' + 'Makepano3.SQL');
        trysql(Datam1.Query1);
      end;
    Except

    end;
  Finally
    FormChlayout.Mustbetwoup := false;
    ActionPlaterefreshtreeExecute(FormMain);
  end;
end;

{ procedure TFormMain.Autorefreshseparations;
  begin
  DOAutorefreshseparations;
  end;
}
procedure TFormMain.loadSuperHSDB2(autosizecols: Boolean);
begin
  writeMainlogfile('Load separationlist start');
  DOloadSuperHSDB2(autosizecols);
  writeMainlogfile('Load separationlist end');
end;

procedure TFormMain.clearhs;
begin
  DOclearhs;

end;

procedure TFormMain.HSToExcel;
begin
  DoHSToExcel;
end;

procedure TFormMain.resetsuperhsselection;
begin
  DOresetsuperhsselection;
end;

function TFormMain.getfirstselectedhs: Integer;
begin
  result := Dogetfirstselectedhs;
end;

procedure TFormMain.getpreselHS;
begin
  // DogetpreselHS;
end;

procedure TFormMain.doseparationsapproval;
begin
  DOdoseparationsapproval;
end;

procedure TFormMain.resetpreselHS;
begin
  DoresetpreselHS;

end;

procedure TFormMain.doseparationsReapproval;
begin
  DOdoseparationsReapproval;
end;

procedure TFormMain.doseparationsAutoapproval;
begin
  DOdoseparationsAutoapproval;
end;

procedure TFormMain.DOPageDisapproveExecute;
begin
  DODOPageDisapproveExecute;
end;

{ procedure TFormMain.releaseonseprationset;
  begin
  Doreleaseonseprationset;

  end;
}
procedure TFormMain.DoPagereleaseExecute;
begin
  DODoPagereleaseExecute(false);
end;

procedure TFormMain.DoPageHoldExecute;
begin
  DoDoPageHoldExecute;
end;

procedure TFormMain.ActionplatefiltertopExecute(Sender: TObject);
begin
  sleep(1);
end;

procedure TFormMain.ActionPLFfilterShowallExecute(Sender: TObject);
begin
  Actionplatefiltertop.caption := ActionPLFfilterShowall.caption;
  Actionplatefiltertop.Checked := false;
  PlatefilterType := 0;
  if not loadplateview(false, false) then
    plateviewtreedeselect;
end;

procedure TFormMain.ActionPLFfiltermissingExecute(Sender: TObject);
begin
  Actionplatefiltertop.caption := ActionPLFfiltermissing.caption;
  Actionplatefiltertop.Checked := true;
  PlatefilterType := 1;
  if not loadplateview(false, false) then
    plateviewtreedeselect;
end;

procedure TFormMain.ActionPLFfilterReadyExecute(Sender: TObject);
begin
  Actionplatefiltertop.caption := ActionPLFfilterReady.caption;
  Actionplatefiltertop.Checked := true;
  PlatefilterType := 2;
  if not loadplateview(false, false) then
    plateviewtreedeselect;
end;

procedure TFormMain.ActionPLFfilterhidemissingExecute(Sender: TObject);
begin
  Actionplatefiltertop.caption := ActionPLFfilterhidemissing.caption;
  Actionplatefiltertop.Checked := true;
  PlatefilterType := 3;
  if not loadplateview(false, false) then
    plateviewtreedeselect;
end;

procedure TFormMain.ActionplateoutputversionExecute(Sender: TObject);
Var
  i: Integer;
begin
  Formeditatext.ComboBox1.Items.Clear;
  Formeditatext.ComboBox1.text := '';
  Formeditatext.ComboBox1.Style := csDropDownList;

  Formeditatext.caption := 'Enter version number';
  Formeditatext.ComboBox1.Items.Clear;
  for i := 0 to 20 do
    Formeditatext.ComboBox1.Items.Add(IntToStr(i));

  Formeditatext.ComboBox1.ItemIndex := 0;
  Formeditatext.ComboBox1.text := '0';
  Formeditatext.ComboBox1.Style := csDropDownList;

  if PBExListviewplateinfo.Focused then
  begin
    Formeditatext.Label1.caption := 'Set output version on selected colors';
    if Formeditatext.ShowModal = mrOK then
    begin

      for i := 0 to PBExListviewplateinfo.Items.Count - 1 do
      begin
        if PBExListviewplateinfo.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set Outputversion = ' +
            Formeditatext.ComboBox1.text);
          Datam1.Query1.SQL.Add('where flatseparation = ' +
            PBExListviewplateinfo.Items[i].SubItems
            [PBExListviewplateinfoflatsepsubitem]);
          trysql(Datam1.Query1);
        end;
      end;
    end;
  End
  else
  begin
    Formeditatext.Label1.caption := 'Set output version on selected colors';
    if Formeditatext.ShowModal = mrOK then
    begin
      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set Outputversion = ' +
            Formeditatext.ComboBox1.text);
          Datam1.Query1.SQL.Add('where CopyFlatSeparationSet = ' +
            IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
          trysql(Datam1.Query1);
        end;
      end;
    end;
  end;
end;

procedure TFormMain.ListViewEdtoCustomDrawItem(Sender: TCustomListView;
  Item: TListItem; State: TCustomDrawState; var DefaultDraw: Boolean);
begin
  if Item.SubItems.Count > 0 then
  begin
    if pos('Dink', Item.SubItems[0]) > 0 then
      ListViewEdto.Canvas.Brush.Color := ClSilver;
  end;
  DefaultDraw := true;

end;

// addnewsubedition - Apply add subedition (Edition view)

procedure TFormMain.addnewsubedition(LocationID: Integer; Pubdate: TDateTime;
  Publicationid: Integer; FromEdId: Integer; ToEdid: Integer;
  Addfrommain: Boolean; ApplyascommonIDX: Integer;
  // FormAddeditionview.RadioGroupcommon.ItemIndex,
  KeepdeviceIDX: Integer; // FormAddeditionview.RadioGroupdevice.ItemIndex,
  ApprovalIDX: Integer; HoldIDX: Longint; ProductionID: Integer);
// FormAddeditionview.RadioGroupunique.ItemIndex

Var
  newproductionisok: Boolean;

  aktproductionid, Ncolors, aktseparationset, Newpressrunid, aktpressRunid,
    Ncopies, i, Akteditionid, fromeditionid, toeditionid, aktpublicationid,
    aktpressid, Aktlocationid: Integer;
  aktpublicationdate: TDateTime;
  L: TListItem;
  Aktcopyflatseparationset, Aktsheet, aktsheetside: Integer;
  Nrecords: Integer;

  DTpubdate: TDateTime;
  PubDateStr, Publication, Issue, edition, section: string;
  foundlastsel: Boolean;

  inserted, backwards, perfectbound: Integer;
  planpagename: string;

  Nprcount: Integer;
  NAdduntilnow: Integer;
  Adduntilnow: Array [1 .. 100] of record
    editionid: Integer;
    pressrunid: Integer;
  end;

  anytorepair, erroroccured: Boolean;

  Nrecs: Integer;
  testi: Integer;
  tecopsep: Integer;
  Aeditiontype: editiontype;
  IEdN: Integer;
  prevers: Integer;
  maxPressSectionNumber: Integer;
  T: String;
  Akteditiontype: editiontype;
  APressSectionNumber: Integer;
  pageFormatID: Integer;
  ripsetupID: Integer;
  pdfmasterID: Integer;
  firstpressID: Integer;

begin
  Ncolors := 0;
  try
    if (Prefs.PressSpecific = false) then
      ProductionID := 0;

    if FormMain.Setplanlock(true) then
    begin

      pageFormatID := 0;
      ripsetupID := 0;
      pdfmasterID := 0;
      firstpressID := -1;

      newproductionisok := true;
      NAdduntilnow := 0;
      erroroccured := false;
      if Addfrommain then
        fromeditionid := Gaddfromeditionid
      else
        fromeditionid := FromEdId;

      aktpublicationid := Publicationid;
      aktpublicationdate := Pubdate;
      Aktlocationid := LocationID;
      Akteditionid := ToEdid;
      toeditionid := Akteditionid;
      aktproductionid := ProductionID;

      if (aktproductionid = 0) then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('Select TOP 1 productionid from pagetable (NOLOCK)');
        Datam1.Query1.SQL.Add('Where publicationid = ' +
          IntToStr(aktpublicationid));
        Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
          aktpublicationdate));
        Datam1.Query1.SQL.Add('And locationid = ' + IntToStr(Aktlocationid));
        Datam1.Query1.SQL.Add('And editionid = ' + IntToStr(fromeditionid));
        Datam1.Query1.SQL.Add('And copynumber = 1');
        Datam1.Query1.Open;
        if not Datam1.Query1.Eof then
          aktproductionid := Datam1.Query1.FieldByName('ProductionID')
            .AsInteger;
        Datam1.Query1.Close;
      end;

      // for progress bar
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select count(separation) as sep from pagetable (NOLOCK)');
      if (ProductionID > 0) then
      begin
        Datam1.Query1.SQL.Add('Where ProductionID = ' +
          IntToStr(aktproductionid));
      end
      else
      begin
        Datam1.Query1.SQL.Add('Where publicationid = ' +
          IntToStr(aktpublicationid));
        Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
          aktpublicationdate));
        Datam1.Query1.SQL.Add('And locationid = ' + IntToStr(Aktlocationid));
      end;
      Datam1.Query1.SQL.Add('And editionid = ' + IntToStr(fromeditionid));
      Datam1.Query1.SQL.Add('And copynumber = 1');
      Datam1.Query1.Open;
      if not Datam1.Query1.Eof then
        Nrecs := Datam1.Query1.Fields[0].AsInteger;
      Datam1.Query1.Close;

      if Addfrommain then
      begin
        ProgressBaredition.max := Nrecs;
        ProgressBaredition.Position := 0;
        screen.Cursor := crhourglass;
        GroupBoxedition.Visible := true;
        GroupBoxedition.Repaint;
      end;

      // Get next PressSectionNumber for new subedition
      maxPressSectionNumber := 0;
      APressSectionNumber := 1;
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select max(PressSectionNumber) from pagetable (NOLOCK)');
      if (ProductionID > 0) then
      begin
        Datam1.Query1.SQL.Add('Where ProductionID = ' +
          IntToStr(aktproductionid));
      end
      else
      begin
        Datam1.Query1.SQL.Add('Where publicationid = ' +
          IntToStr(aktpublicationid));
        Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
          aktpublicationdate));
        Datam1.Query1.SQL.Add('And locationid = ' + IntToStr(Aktlocationid));
      end;
      Datam1.Query1.SQL.Add('And copynumber = 1');
      Datam1.Query1.Open;
      if not Datam1.Query1.Eof then
        maxPressSectionNumber := Datam1.Query1.Fields[0].AsInteger;
      Datam1.Query1.Close;

      // Get RipSetup,PageFormatID from master
      if (PDFMasterOK) then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('Select TOP 1 PressID from pagetable (NOLOCK)');
        if (ProductionID > 0) then
        begin
          Datam1.Query1.SQL.Add('Where ProductionID = ' +
            IntToStr(aktproductionid));
        end
        else
        begin
          Datam1.Query1.SQL.Add('Where publicationid = ' +
            IntToStr(aktpublicationid));
          Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
            aktpublicationdate));
          Datam1.Query1.SQL.Add('And locationid = ' + IntToStr(Aktlocationid));
        end;
        Datam1.Query1.SQL.Add('And copynumber = 1');
        Datam1.Query1.Open;
        if not Datam1.Query1.Eof then
          firstpressID := Datam1.Query1.Fields[0].AsInteger;
        Datam1.Query1.SQL.Clear;

        Datam1.Query1.SQL.Add
          ('Select TOP 1 PDFMaster,PageFormatID,RipSetupID from pagetable (NOLOCK)');
        if (ProductionID > 0) then
        begin
          Datam1.Query1.SQL.Add('Where ProductionID = ' +
            IntToStr(aktproductionid));
        end
        else
        begin
          Datam1.Query1.SQL.Add('Where publicationid = ' +
            IntToStr(aktpublicationid));
          Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
            aktpublicationdate));
          Datam1.Query1.SQL.Add('And locationid = ' + IntToStr(Aktlocationid));
          Datam1.Query1.SQL.Add('And PressID = ' + IntToStr(firstpressID));
        end;
        Datam1.Query1.SQL.Add('And copynumber = 1');
        Datam1.Query1.Open;

        if not Datam1.Query1.Eof then
        begin
          pdfmasterID := Datam1.Query1.Fields[0].AsInteger;
          pageFormatID := Datam1.Query1.Fields[1].AsInteger;
          ripsetupID := Datam1.Query1.Fields[2].AsInteger;
        end;
        Datam1.Query1.Close;
      end;

      // Do the main select on 'From'-edition
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Select  ' + Allpagetablestr +
        ' from pagetable (NOLOCK)');
      if (ProductionID > 0) then
      begin
        Datam1.Query1.SQL.Add('Where ProductionID = ' +
          IntToStr(aktproductionid));
      end
      else
      begin
        Datam1.Query1.SQL.Add('Where publicationid = ' +
          IntToStr(aktpublicationid));
        Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
          aktpublicationdate));
        Datam1.Query1.SQL.Add('And locationid = ' + IntToStr(Aktlocationid));
      end;
      Datam1.Query1.SQL.Add('And editionid = ' + IntToStr(fromeditionid));
      Datam1.Query1.SQL.Add('And copynumber = 1');
      Datam1.Query1.SQL.Add
        ('order by pressid,pressrunid,sheetnumber,sheetside,PagePosition,separationset,colorid');

      if Prefs.Debug then
        Datam1.Query1.SQL.SaveToFile
          (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'
          + 'SQLaddedition.SQL');

      Tryopen(Datam1.Query1);
      aktpressRunid := -1;
      Newpressrunid := -1;
      Aktcopyflatseparationset := -1;
      Aktsheet := -1;
      aktsheetside := -1;
      aktseparationset := -1;
      aktpressid := -1;
      Nrecords := 0;
      testi := 0;
      APressSectionNumber := maxPressSectionNumber;

      while not Datam1.Query1.Eof do
      begin
        T := Datam1.Query1.FieldByName('pagename').AsString;

        IEdN := Findpageineditionsys(Datam1.Query1.FieldByName('pagename')
          .AsString, Datam1.Query1.FieldByName('sectionid').AsInteger);

        if Datam1.Query1.FieldByName('pagetype').AsInteger = 3 then
        begin
          Akteditiontype := editiontype(ListViewEdtodink.Items[IEdN].Data^);
        end
        else
        begin
          Akteditiontype := editiontype(ListViewEdto.Items[IEdN].Data^);
        end;

        // Akteditiontype - state of new edition

        Inc(Nrecords);
        if (aktpressid <> Datam1.Query1.Fields[31].AsInteger) then
        begin
          aktpressid := Datam1.Query1.Fields[31].AsInteger;
          Datam1.Query3.SQL.Clear;
          Datam1.Query3.SQL.Add
            ('Select MAX(copynumber) from pagetable (NOLOCK) ');
          if (ProductionID > 0) then
          begin
            Datam1.Query3.SQL.Add('Where ProductionID = ' +
              IntToStr(aktproductionid));
          end
          else
          begin
            Datam1.Query3.SQL.Add('Where publicationid = ' +
              IntToStr(aktpublicationid));
            Datam1.Query3.SQL.Add(' and ' + Datam1.makedatastr('',
              aktpublicationdate));
            Datam1.Query3.SQL.Add('And locationid = ' +
              IntToStr(Aktlocationid));
          end;
          Datam1.Query3.SQL.Add('And editionid = ' + IntToStr(fromeditionid));
          Datam1.Query3.SQL.Add('And pressid = ' + IntToStr(aktpressid));
          Datam1.Query3.Open;
          if not Datam1.Query1.Eof then
          begin
            Ncopies := Datam1.Query3.Fields[0].AsInteger;
          end;
          Datam1.Query3.Close;
        end;

        if (Newpressrunid = -1) or
          (aktpressRunid <> Datam1.Query1.Fields[39].AsInteger) then
        begin
          // make new pressrun

          Inc(testi);
          Newpressrunid := -1;
          Nprcount := 0;
          repeat
            Inc(APressSectionNumber);
            Inc(Nprcount);
            aktpressRunid := Datam1.Query1.Fields[39].AsInteger;
            Datam1.Query3.SQL.Clear;
            Datam1.Query3.SQL.Add('delete pressrunid');
            Datam1.Query3.SQL.Add
              ('where not exists(select distinct pa.pressrunid from pagetable pa (NOLOCK) where pressrunid.pressrunid = pa.pressrunid )');
            trysql(Datam1.Query3);

            Datam1.Query3.SQL.Clear;
            Datam1.Query3.SQL.Add('Declare @PressRunID int');
            Datam1.Query3.SQL.Add
              ('	if not EXISTS (SELECT PressRunID FROM PageTable WITH (NOLOCK) WHERE PressRunID = 1)');
            Datam1.Query3.SQL.Add('		SET @PressRunID = 1');
            Datam1.Query3.SQL.Add('	else');
            Datam1.Query3.SQL.Add('	begin');
            Datam1.Query3.SQL.Add
              ('		SET @PressRunID = (SELECT TOP 1 Number FROM AllNum AS A WITH (NOLOCK) WHERE not EXISTS (SELECT PressRunID FROM PressRunID AS P WHERE P.PressRunID=A.Number))');
            Datam1.Query3.SQL.Add('		if @PressRunID IS NULL');
            Datam1.Query3.SQL.Add('			SET @PressRunID=1');
            Datam1.Query3.SQL.Add('	END');
            Datam1.Query3.SQL.Add('SELECT @PressRunID');
            Datam1.Query3.Open;
            if not Datam1.Query3.Eof then
            begin
              Newpressrunid := Datam1.Query3.Fields[0].AsInteger;
            end;
            Datam1.Query3.Close;

            prevers := 1;
            Datam1.Query3.SQL.Clear;
            Datam1.Query3.SQL.Add('Select TOP 1 * from pressrunid');
            Datam1.Query3.Open;
            if Datam1.Query3.Fields.Count > 30 then
              prevers := 2;
            Datam1.Query3.Close;

            if prevers > 1 then
            begin // Ny version af pressrunid tabel
              Datam1.Query3.SQL.Clear;
              Datam1.Query3.SQL.Add('DECLARE @SequenceNumber int');
              Datam1.Query3.SQL.Add('DECLARE @Deadline1 datetime');
              Datam1.Query3.SQL.Add('DECLARE @Deadline2 datetime');
              Datam1.Query3.SQL.Add('DECLARE @Deadline3 datetime');
              Datam1.Query3.SQL.Add('DECLARE @Deadline4 datetime');
              Datam1.Query3.SQL.Add('DECLARE @PriorityBeforeHottime int');
              Datam1.Query3.SQL.Add('DECLARE @PriorityDuringHottime int');
              Datam1.Query3.SQL.Add('DECLARE @PriorityAfterHottime int');
              Datam1.Query3.SQL.Add('DECLARE @PriorityHottimebegin datetime');
              Datam1.Query3.SQL.Add('DECLARE @PriorityHottimeEnd datetime');
              Datam1.Query3.SQL.Add('DECLARE @Comment varchar(512)');
              Datam1.Query3.SQL.Add('DECLARE @UsePressTowerInfo int');
              Datam1.Query3.SQL.Add('DECLARE @OrderNumber varchar(50)');
              Datam1.Query3.SQL.Add('DECLARE @InkComment varchar(50)');
              Datam1.Query3.SQL.Add('DECLARE @Backwards int');
              Datam1.Query3.SQL.Add('DECLARE @perfectbound int');
              Datam1.Query3.SQL.Add('DECLARE @inserted int');

              Datam1.Query3.SQL.Add('DECLARE @Planname varchar(50)');
              Datam1.Query3.SQL.Add('DECLARE @Presssystem varchar(50)');
              Datam1.Query3.SQL.Add('DECLARE @Plantype int');

              Datam1.Query3.SQL.Add('DECLARE @TimedEditionFrom int');
              Datam1.Query3.SQL.Add('DECLARE @TimedEditionTo int');
              Datam1.Query3.SQL.Add('DECLARE @TimedEditionState int');

              Datam1.Query3.SQL.Add('DECLARE @FromZone int');
              Datam1.Query3.SQL.Add('DECLARE @ToZone int');
              Datam1.Query3.SQL.Add('DECLARE @Circulation int');
              Datam1.Query3.SQL.Add('DECLARE @Circulation2 int');
              Datam1.Query3.SQL.Add('DECLARE @Comment2 varchar(512)');

              Datam1.Query3.SQL.Add('DECLARE @Miscint1 int');
              Datam1.Query3.SQL.Add('DECLARE @Miscint2 int');

              Datam1.Query3.SQL.Add('DECLARE @Miscstring1 varchar(50)');
              Datam1.Query3.SQL.Add('DECLARE @Miscstring2 varchar(50)');
              Datam1.Query3.SQL.Add('DECLARE @miscdate datetime');
              Datam1.Query3.SQL.Add('DECLARE @planversion int');

              Datam1.Query3.SQL.Add
                ('DECLARE @t TABLE (SequenceNumber int,Deadline1 datetime,Deadline2 datetime,Deadline3 datetime,Deadline4 datetime,');
              Datam1.Query3.SQL.Add
                ('PriorityBeforeHottime int,PriorityDuringHottime int,PriorityAfterHottime int,PriorityHottimebegin datetime,PriorityHottimeEnd datetime,');
              Datam1.Query3.SQL.Add
                ('Comment varchar(512),UsePressTowerInfo int,OrderNumber varchar(50),InkComment varchar(50),Backwards int,perfectbound int,inserted int,');
              Datam1.Query3.SQL.Add
                ('Planname varchar(50),Presssystem varchar(50),Plantype int,TimedEditionFrom int,TimedEditionTo int,TimedEditionState int,');
              Datam1.Query3.SQL.Add
                ('FromZone int,ToZone int,Circulation int,Circulation2 int,Comment2 varchar(512),');
              Datam1.Query3.SQL.Add
                ('Miscint1 int,Miscint2 int,Miscstring1 varchar(50),Miscstring2 varchar(50),miscdate datetime,Planversion int)');

              Datam1.Query3.SQL.Add('INSERT INTO @t');
              Datam1.Query3.SQL.Add
                ('	SELECT DISTINCT SequenceNumber,Deadline1,Deadline2,Deadline3,Deadline4,PriorityBeforeHottime,');
              Datam1.Query3.SQL.Add
                ('	PriorityDuringHottime,PriorityAfterHottime,PriorityHottimebegin,PriorityHottimeEnd,');
              Datam1.Query3.SQL.Add
                ('	Comment,UsePressTowerInfo,OrderNumber,InkComment,Backwards,perfectbound,inserted,');
              Datam1.Query3.SQL.Add
                ('	Planname,Presssystem,Plantype int,TimedEditionFrom,TimedEditionTo,TimedEditionState,');
              Datam1.Query3.SQL.Add
                ('	FromZone,ToZone,Circulation,Circulation2,Comment2,');
              Datam1.Query3.SQL.Add
                ('	Miscint1,Miscint2,Miscstring1,Miscstring2,miscdate,Planversion');

              Datam1.Query3.SQL.Add('FROM pressrunid as p WITH (NOLOCK)');
              Datam1.Query3.SQL.Add('	WHERE p.pressrunid = ' +
                IntToStr(aktpressRunid));

              Datam1.Query3.SQL.Add('SET @SequenceNumber = ' +
                IntToStr(APressSectionNumber));
              Datam1.Query3.SQL.Add
                ('SET @Deadline1 = (SELECT Deadline1 FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @Deadline2 = (SELECT Deadline2 FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @Deadline3 = (SELECT Deadline3 FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @Deadline4 = (SELECT Deadline4 FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @PriorityBeforeHottime = (SELECT PriorityBeforeHottime FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @PriorityDuringHottime = (SELECT PriorityDuringHottime FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @PriorityAfterHottime = (SELECT PriorityAfterHottime FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @PriorityHottimebegin = (SELECT PriorityHottimebegin FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @PriorityHottimeEnd = (SELECT PriorityHottimeEnd FROM @t)');
              Datam1.Query3.SQL.Add('SET @Comment = (SELECT Comment FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @UsePressTowerInfo = (SELECT UsePressTowerInfo FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @OrderNumber = (SELECT OrderNumber FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @InkComment = (SELECT InkComment FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @Backwards = (SELECT Backwards FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @perfectbound = (SELECT perfectbound FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @inserted = (SELECT inserted FROM @t)');

              Datam1.Query3.SQL.Add
                ('SET @Planname = (SELECT Planname FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @Presssystem = (SELECT Presssystem FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @Plantype = (SELECT Plantype FROM @t)');

              Datam1.Query3.SQL.Add
                ('SET @FromZone = (SELECT FromZone FROM @t)');
              Datam1.Query3.SQL.Add('SET @ToZone = (SELECT ToZone FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @Circulation = (SELECT Circulation FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @Circulation2 = (SELECT Circulation2 FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @Comment2 = (SELECT Comment2 FROM @t)');

              Datam1.Query3.SQL.Add
                ('SET @TimedEditionFrom = (SELECT TimedEditionFrom FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @TimedEditionTo = (SELECT TimedEditionTo FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @TimedEditionState = (SELECT TimedEditionState FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @Miscint1 = (SELECT Miscint1 FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @Miscint2 = (SELECT Miscint2 FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @Miscstring1 = (SELECT Miscstring1 FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @Miscstring2 = (SELECT Miscstring2 FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @miscdate = (SELECT miscdate FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @planversion = (SELECT planversion FROM @t)');

              Datam1.Query3.SQL.Add('insert pressrunid');
              Datam1.Query3.SQL.Add
                ('(PressRunID,SequenceNumber,Deadline1,Deadline2,Deadline3,Deadline4,PriorityBeforeHottime,');
              Datam1.Query3.SQL.Add
                ('PriorityDuringHottime,PriorityAfterHottime,PriorityHottimebegin,PriorityHottimeEnd,Comment,UsePressTowerInfo,');
              Datam1.Query3.SQL.Add
                ('OrderNumber,InkComment,Backwards,PerfectBound,Inserted,PlanName,PressSystem,PlanType,TimedEditionFrom,TimedEditionTo,TimedEditionState,');
              Datam1.Query3.SQL.Add
                ('FromZone,ToZone,Circulation,Circulation2,Comment2,MiscInt1,MiscInt2,MiscString1,MiscString2,MiscDate,PlanVersion)');

              Datam1.Query3.SQL.Add('values(' + IntToStr(Newpressrunid) +
                ',@SequenceNumber,@Deadline1,@Deadline2,@Deadline3,@Deadline4,@PriorityBeforeHottime,@PriorityDuringHottime,');
              Datam1.Query3.SQL.Add
                ('@PriorityAfterHottime,@PriorityHottimebegin,@PriorityHottimeEnd,@Comment,@UsePressTowerInfo,');
              Datam1.Query3.SQL.Add
                ('@OrderNumber,@InkComment,@Backwards,@perfectbound,@inserted,');
              Datam1.Query3.SQL.Add
                ('@Planname,@Presssystem,@Plantype,@TimedEditionFrom,@TimedEditionTo,@TimedEditionState,');
              Datam1.Query3.SQL.Add
                ('@FromZone,@ToZone,@Circulation,@Circulation2,@Comment2,');
              Datam1.Query3.SQL.Add
                ('@Miscint1,@Miscint2,@Miscstring1,@Miscstring2,@miscdate,@planversion )');

              if Prefs.Debug then
                Datam1.Query3.SQL.SaveToFile
                  (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
                  'sqllogs\' + 'SQLaddeditionmakepressrunid.SQL');
              try
                trysql(Datam1.Query3);
              except
                Newpressrunid := -1;
                sleep(2000);
              end;
            end
            else
            begin
              Datam1.Query3.SQL.Clear; // Gammel version af pressrunid tabel
              Datam1.Query3.SQL.Add('DECLARE @SequenceNumber int');
              Datam1.Query3.SQL.Add('DECLARE @Deadline1 datetime');
              Datam1.Query3.SQL.Add('DECLARE @Deadline2 datetime');
              Datam1.Query3.SQL.Add('DECLARE @Deadline3 datetime');
              Datam1.Query3.SQL.Add('DECLARE @Deadline4 datetime');
              Datam1.Query3.SQL.Add('DECLARE @PriorityBeforeHottime int');
              Datam1.Query3.SQL.Add('DECLARE @PriorityDuringHottime int');
              Datam1.Query3.SQL.Add('DECLARE @PriorityAfterHottime int');
              Datam1.Query3.SQL.Add('DECLARE @PriorityHottimebegin datetime');
              Datam1.Query3.SQL.Add('DECLARE @PriorityHottimeEnd datetime');
              Datam1.Query3.SQL.Add('DECLARE @Comment varchar(512)');
              Datam1.Query3.SQL.Add('DECLARE @UsePressTowerInfo int');
              Datam1.Query3.SQL.Add('DECLARE @OrderNumber varchar(50)');
              Datam1.Query3.SQL.Add('DECLARE @InkComment varchar(50)');
              Datam1.Query3.SQL.Add('DECLARE @Backwards int');
              Datam1.Query3.SQL.Add('DECLARE @perfectbound int');
              Datam1.Query3.SQL.Add('DECLARE @inserted int');
              Datam1.Query3.SQL.Add
                ('DECLARE @t TABLE (SequenceNumber int,Deadline1 datetime,Deadline2 datetime,Deadline3 datetime,Deadline4 datetime,');
              Datam1.Query3.SQL.Add
                ('PriorityBeforeHottime int,PriorityDuringHottime int,PriorityAfterHottime int,PriorityHottimebegin datetime,PriorityHottimeEnd datetime,');
              Datam1.Query3.SQL.Add
                ('Comment varchar(512),UsePressTowerInfo int,OrderNumber varchar(50),InkComment varchar(50),Backwards int,perfectbound int,inserted int)');

              Datam1.Query3.SQL.Add('INSERT INTO @t');
              Datam1.Query3.SQL.Add
                ('	SELECT DISTINCT SequenceNumber,Deadline1,Deadline2,Deadline3,Deadline4,PriorityBeforeHottime,');
              Datam1.Query3.SQL.Add
                ('	PriorityDuringHottime,PriorityAfterHottime,PriorityHottimebegin,PriorityHottimeEnd,');
              Datam1.Query3.SQL.Add
                ('	Comment,UsePressTowerInfo,OrderNumber,InkComment,Backwards,perfectbound,inserted');

              Datam1.Query3.SQL.Add('FROM pressrunid as p WITH (NOLOCK)');
              Datam1.Query3.SQL.Add('	WHERE p.pressrunid = ' +
                IntToStr(aktpressRunid));

              Datam1.Query3.SQL.Add
                ('SET @SequenceNumber = (SELECT SequenceNumber FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @Deadline1 = (SELECT Deadline1 FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @Deadline2 = (SELECT Deadline2 FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @Deadline3 = (SELECT Deadline3 FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @Deadline4 = (SELECT Deadline4 FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @PriorityBeforeHottime = (SELECT PriorityBeforeHottime FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @PriorityDuringHottime = (SELECT PriorityDuringHottime FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @PriorityAfterHottime = (SELECT PriorityAfterHottime FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @PriorityHottimebegin = (SELECT PriorityHottimebegin FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @PriorityHottimeEnd = (SELECT PriorityHottimeEnd FROM @t)');
              Datam1.Query3.SQL.Add('SET @Comment = (SELECT Comment FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @UsePressTowerInfo = (SELECT UsePressTowerInfo FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @OrderNumber = (SELECT OrderNumber FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @InkComment = (SELECT InkComment FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @Backwards = (SELECT Backwards FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @perfectbound = (SELECT perfectbound FROM @t)');
              Datam1.Query3.SQL.Add
                ('SET @inserted = (SELECT inserted FROM @t)');

              Datam1.Query3.SQL.Add('insert pressrunid values(' +
                IntToStr(Newpressrunid) +
                ',@SequenceNumber,@Deadline1,@Deadline2,@Deadline3,@Deadline4,@PriorityBeforeHottime,@PriorityDuringHottime,');
              Datam1.Query3.SQL.Add
                ('@PriorityAfterHottime,@PriorityHottimebegin,@PriorityHottimeEnd,@Comment,@UsePressTowerInfo,');
              Datam1.Query3.SQL.Add
                ('@OrderNumber,@InkComment,@Backwards,@perfectbound,@inserted)');

              if Prefs.Debug then
                Datam1.Query3.SQL.SaveToFile
                  (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
                  'sqllogs\' + 'SQLaddeditionmakepressrunid.SQL');
              try
                trysql(Datam1.Query3);
              except
                Newpressrunid := -1;
                sleep(2000);
              end;
            end;
          until (Newpressrunid > 0) or (Nprcount > 20);

          if Nprcount > 20 then
          begin
            erroroccured := true;
            break;
          end
          else
          begin
            if NAdduntilnow < 100 then
            begin
              Inc(NAdduntilnow);
              Adduntilnow[NAdduntilnow].editionid := toeditionid;
              Adduntilnow[NAdduntilnow].pressrunid := Newpressrunid;
            end;
          end;
        end;

        // PressRun is now created

        if aktseparationset <> Datam1.Query1.Fields[1].AsInteger then
        begin
          aktseparationset := Datam1.Query1.Fields[1].AsInteger;
          Datam1.Query3.SQL.Clear;
          Datam1.Query3.SQL.Add
            ('Select count(separation) from pagetable (NOLOCK) ');
          Datam1.Query3.SQL.Add('Where separationset = ' +
            IntToStr(aktseparationset));
          Datam1.Query3.Open;
          Ncolors := Datam1.Query3.Fields[0].AsInteger;
          Datam1.Query3.Close;
        end;

        Datam1.Query2.SQL.Clear;
        Datam1.Query2.SQL.Add('Exec spPlancenterImportCenterAddSeparation3');
        Datam1.Query2.SQL.Add('@PageCountChanged=0');
        Datam1.Query2.SQL.Add(',@KeepColors=1');

        // CHCH

        if (Datam1.Query1.FieldByName('Uniquepage').AsInteger = 0) then
        begin
          Datam1.Query2.SQL.Add(',@KeepApproval=0'); // if FROM-edition common
        end
        else
        begin
          case ApplyascommonIDX of
            0:
              Datam1.Query2.SQL.Add(',@KeepApproval=1'); // No change
            1:
              Datam1.Query2.SQL.Add(',@KeepApproval=0'); // Re-approve
            2:
              Datam1.Query2.SQL.Add(',@KeepApproval=0'); // No approval
          end;
        end;

        Datam1.Query2.SQL.Add(',@KeepUnique=1');
        if (Prefs.PressSpecific) then
          Datam1.Query2.SQL.Add(',@UseMainLocation=1')
        else
          Datam1.Query2.SQL.Add(',@UseMainLocation=0');

        if (Aktsheet <> Datam1.Query1.FieldByName('sheetnumber').AsInteger) or
          (aktsheetside <> Datam1.Query1.FieldByName('sheetside').AsInteger)
        then
        begin
          Aktsheet := Datam1.Query1.FieldByName('sheetnumber').AsInteger;
          aktsheetside := Datam1.Query1.FieldByName('sheetside').AsInteger;
          Datam1.Query2.SQL.Add(',@FirstPagePosition=1');
        End
        else
          Datam1.Query2.SQL.Add(',@FirstPagePosition=0');

        Datam1.Query2.SQL.Add(',@CopyFlatSeparationSet=' +
          IntToStr(Aktcopyflatseparationset));
        Datam1.Query2.SQL.Add(',@NumberOfColors = ' + IntToStr(Ncolors));
        Datam1.Query2.SQL.Add(',@Copies = 1');
        Datam1.Query2.SQL.Add(',@PublicationID = ' +
          IntToStr(Datam1.Query1.FieldByName('Publicationid').AsInteger));
        Datam1.Query2.SQL.Add(',@SectionID = ' +
          IntToStr(Datam1.Query1.FieldByName('sectionid').AsInteger));
        Datam1.Query2.SQL.Add(',@EditionID = ' + IntToStr(toeditionid));
        Datam1.Query2.SQL.Add(',@IssueID  = ' +
          IntToStr(Datam1.Query1.FieldByName('issueid').AsInteger));
        Datam1.Query2.SQL.Add(',@PubDate = :pubdate');
        Datam1.Query2.SQL.Add(',@PageName = ' + '''' + Datam1.Query1.FieldByName
          ('pagename').AsString + '''');
        Datam1.Query2.SQL.Add(',@ColorID = ' +
          IntToStr(Datam1.Query1.FieldByName('colorid').AsInteger));
        Datam1.Query2.SQL.Add(',@TemplateID = ' +
          IntToStr(Datam1.Query1.FieldByName('templateid').AsInteger));
        Datam1.Query2.SQL.Add(',@ProofID = ' +
          IntToStr(Datam1.Query1.FieldByName('proofid').AsInteger));

        if KeepdeviceIDX = 0 then
          Datam1.Query2.SQL.Add(',@DeviceID = 0')
        else
          Datam1.Query2.SQL.Add(',@DeviceID = ' +
            IntToStr(Datam1.Query1.FieldByName('DeviceID').AsInteger));

        Datam1.Query2.SQL.Add(',@Version = ' +
          IntToStr(Datam1.Query1.FieldByName('version').AsInteger));
        Datam1.Query2.SQL.Add(',@Pagination = ' +
          IntToStr(Datam1.Query1.FieldByName('pagination').AsInteger));

        // CHCH
        if (Datam1.Query1.FieldByName('Uniquepage').AsInteger = 0) OR
          (Akteditiontype.Changeto = 1) then
        begin
          if ApprovalIDX = 0 then
            Datam1.Query2.SQL.Add(',@Approval = 0') // Must approve
          else
            Datam1.Query2.SQL.Add(',@Approval = -1'); // No approval
        end
        else
        begin

          case ApplyascommonIDX of
            0:
              Datam1.Query2.SQL.Add(',@Approval = ' +
                IntToStr(Datam1.Query1.FieldByName('Approved').AsInteger));
            // no change
            1:
              Datam1.Query2.SQL.Add(',@Approval = 0'); // Re-approve
            2:
              Datam1.Query2.SQL.Add(',@Approval = -1'); // No approval
          end;

        end;

        if HoldIDX = 0 then
          Datam1.Query2.SQL.Add(',@Hold = 1')
        else
          Datam1.Query2.SQL.Add(',@Hold = 0'); // OK

        Datam1.Query2.SQL.Add(',@Active = ' +
          IntToStr(Datam1.Query1.FieldByName('active').AsInteger));
        Datam1.Query2.SQL.Add(',@Priority = ' +
          IntToStr(Datam1.Query1.FieldByName('priority').AsInteger));
        Datam1.Query2.SQL.Add(',@PagePositions = ' + '''' +
          Datam1.Query1.FieldByName('pagepositions').AsString + '''');
        Datam1.Query2.SQL.Add(',@PageType = ' +
          IntToStr(Datam1.Query1.FieldByName('pagetype').AsInteger));
        Datam1.Query2.SQL.Add(',@PagesOnPlate = ' +
          IntToStr(Datam1.Query1.FieldByName('PagesOnPlate').AsInteger));
        Datam1.Query2.SQL.Add(',@SheetNumber = ' +
          IntToStr(Datam1.Query1.FieldByName('sheetnumber').AsInteger));
        Datam1.Query2.SQL.Add(',@SheetSide = ' +
          IntToStr(Datam1.Query1.FieldByName('sheetside').AsInteger));
        Datam1.Query2.SQL.Add(',@PressId = ' + IntToStr(aktpressid));
        // Datam1.Query2.SQL.Add(',@PressSectionNumber = ' + IntToStr(Datam1.Query1.FieldByName('presssectionnumber').AsInteger));
        Datam1.Query2.SQL.Add(',@PressSectionNumber = ' +
          IntToStr(APressSectionNumber));

        Datam1.Query2.SQL.Add(',@SortingPosition = ' + '''' +
          Datam1.Query1.FieldByName('SortingPosition').AsString + '''');
        Datam1.Query2.SQL.Add(',@PressTower = ' + '''' +
          Datam1.Query1.FieldByName('PressTower').AsString + '''');
        Datam1.Query2.SQL.Add(',@PressZone = ' + '''' +
          Datam1.Query1.FieldByName('PressZone').AsString + '''');
        Datam1.Query2.SQL.Add(',@PressCylinder = ' + '''' +
          Datam1.Query1.FieldByName('PressCylinder').AsString + '''');
        Datam1.Query2.SQL.Add(',@PressHighlow = ' + '''' +
          Datam1.Query1.FieldByName('PressHighlow').AsString + '''');
        Datam1.Query2.SQL.Add(',@ProductionID = ' +
          IntToStr(Datam1.Query1.FieldByName('ProductionID').AsInteger));
        aktproductionid := Datam1.Query1.FieldByName('ProductionID').AsInteger;
        Datam1.Query2.SQL.Add(',@PressrunID = ' + IntToStr(Newpressrunid));

        if (Length(Prefs.PlannedNameDefinitions) > 1) And
          (Formapplyedplanname.ComboBoxplannedname.ItemIndex > -1) then
        begin
          planpagename := applyplannedpagenamestoplan
            (Datam1.Query1.FieldByName('Publicationid').AsInteger,
            Datam1.Query1.FieldByName('pubdate').AsDateTime,
            Formapplyedplanname.UpDownweek.Position, toeditionid,
            Datam1.Query1.FieldByName('sectionid').AsInteger,
            Datam1.Query1.FieldByName('locationid').AsInteger,
            Datam1.Query1.FieldByName('pagename').AsString,
            Prefs.PlannedNameDefinitions
            [Formapplyedplanname.ComboBoxplannedname.ItemIndex].Format,
            Prefs.PlannedNameDefinitions
            [Formapplyedplanname.ComboBoxplannedname.ItemIndex].dateformat);
          Datam1.Query2.SQL.Add(',@PlanPageName = ' + '''' +
            planpagename + '''');
        End
        else
          Datam1.Query2.SQL.Add(',@PlanPageName = ' + '''' +
            Datam1.Query1.FieldByName('PlanPageName').AsString + '''');

        Datam1.Query2.SQL.Add(',@IssueSequenceNumber = ' +
          IntToStr(Datam1.Query1.FieldByName('issuesequencenumber').AsInteger));

        if Akteditiontype.Changeto = 1 then
          Datam1.Query2.SQL.Add(',@UniquePage = 1 ')
        else
        begin
          Datam1.Query2.SQL.Add(',@UniquePage = ' +
            IntToStr(Datam1.Query1.FieldByName('uniquepage').AsInteger));
        end;

        Datam1.Query2.SQL.Add(',@LocationID = ' +
          IntToStr(Datam1.Query1.FieldByName('LocationID').AsInteger));
        Datam1.Query2.SQL.Add(',@FlatProofID = ' +
          IntToStr(Datam1.Query1.FieldByName('FlatProofConfigurationID')
          .AsInteger));
        Datam1.Query2.SQL.Add(',@Creep = :creep');
        Datam1.Query2.SQL.Add(',@MarkGroups = ' + '''' +
          Datam1.Query1.FieldByName('MarkGroups').AsString + '''');
        Datam1.Query2.SQL.Add(',@PageIndex = ' +
          IntToStr(Datam1.Query1.FieldByName('pageindex').AsInteger));
        Datam1.Query2.SQL.Add(',@HardProofID = ' +
          IntToStr(Datam1.Query1.FieldByName('HardProofConfigurationID')
          .AsInteger));
        Datam1.Query2.SQL.Add(',@DeadLine = :DeadLine');
        Datam1.Query2.SQL.Add(',@Comment = ' + '''' + Datam1.Query1.FieldByName
          ('Comment').AsString + '''');

        if Datam1.Query1.FieldByName('pagetype').AsInteger = 3 then
          Datam1.Query2.SQL.Add(',@MasterEditionID = ' +
            IntToStr(tNames1.editionnametoid(ListViewEdtodink.Items[IEdN]
            .SubItems[2])))
        else
          Datam1.Query2.SQL.Add(',@MasterEditionID = ' +
            IntToStr(tNames1.editionnametoid(ListViewEdto.Items[IEdN]
            .SubItems[2])));

        Datam1.Query2.SQL.Add(',@MasterLocationID = ' +
          IntToStr(Akteditiontype.Masterlocationid));
        Datam1.Query2.SQL.Add(',@ColorIndex  = ' +
          IntToStr(Datam1.Query1.FieldByName('Colorid').AsInteger));
        Datam1.Query2.SQL.Add(',@CustomerID  = ' +
          IntToStr(Datam1.Query1.FieldByName('CustomerID').AsInteger));
        Datam1.Query2.SQL.Add(',@CopiesToProduce= 1');
        Datam1.Query2.SQL.Add(',@Miscint1= ' + Datam1.Query1.FieldByName
          ('Miscint1').AsString);
        Datam1.Query2.SQL.Add(',@Miscint2= ' + Datam1.Query1.FieldByName
          ('Miscint2').AsString);
        Datam1.Query2.SQL.Add(',@Miscint3= ' + Datam1.Query1.FieldByName
          ('Miscint3').AsString);
        Datam1.Query2.SQL.Add(',@Miscint4= ' + Datam1.Query1.FieldByName
          ('Miscint4').AsString);
        Datam1.Query2.SQL.Add(',@Miscstring1= ' + '''' +
          Datam1.Query1.FieldByName('Miscstring1').AsString + '''');
        Datam1.Query2.SQL.Add(',@Miscstring2= ' + '''' +
          Datam1.Query1.FieldByName('Miscstring2').AsString + '''');
        Datam1.Query2.SQL.Add(',@Miscstring3= ' + '''' +
          Datam1.Query1.FieldByName('Miscstring3').AsString + '''');
        Datam1.Query2.SQL.Add(',@Miscdate= :miscdate');

        if (PDFMasterOK) then
        begin
          Datam1.Query2.SQL.Add(',@PageFormatID= ' + IntToStr(pageFormatID));
          Datam1.Query2.SQL.Add(',@RipSetupID= ' + IntToStr(ripsetupID));
        end;

        Datam1.Query2.parambyname('miscdate').AsDateTime :=
          Datam1.Query1.FieldByName('miscdate').AsDateTime;
        Datam1.Query2.parambyname('pubdate').AsDateTime :=
          Datam1.Query1.FieldByName('Pubdate').AsDateTime;
        Datam1.Query2.parambyname('DeadLine').AsDateTime :=
          Datam1.Query1.FieldByName('DeadLine').AsDateTime;
        Datam1.Query2.parambyname('Creep').AsFloat :=
          Datam1.Query1.FieldByName('creep').AsFloat;

        if Prefs.Debug then
          Datam1.Query2.SQL.SaveToFile
            (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
            'sqllogs\' + 'spimport.SQL');

        try
          Datam1.Query2.Open;
        Except
          erroroccured := true;
          break;
        end;
        Aktcopyflatseparationset := Datam1.Query2.Fields[1].AsInteger;
        tecopsep := Datam1.Query2.Fields[0].AsInteger;

        Datam1.Query2.Close;

        Datam1.Query2.SQL.Clear;
        Datam1.Query2.SQL.Add('update pagetable set pressrunid = ' +
          IntToStr(Newpressrunid));
        Datam1.Query2.SQL.Add('where copyflatseparationset = ' +
          IntToStr(Aktcopyflatseparationset));
        try
          trysql(Datam1.Query2);
        Except
          erroroccured := true;
          break;
        end;
        if Addfrommain then
        begin
          ProgressBaredition.Position := ProgressBaredition.Position + 1;
          ProgressBaredition.Refresh;
        End
        else
        begin
          FormAddtimedEds.ProgressBar1.Position :=
            FormAddtimedEds.ProgressBar1.Position + 1;

        end;

        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Select ' + p1Allpagetablestr +
        ' from pagetable p1 (NOLOCK)');
      if (ProductionID > 0) then
      begin
        Datam1.Query1.SQL.Add('Where P1.ProductionID = ' +
          IntToStr(aktproductionid));
      end
      else
      begin
        Datam1.Query1.SQL.Add('Where p1.publicationid = ' +
          IntToStr(aktpublicationid));
        Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('p1.',
          aktpublicationdate));
        Datam1.Query1.SQL.Add('And p1.locationid = ' + IntToStr(Aktlocationid));
      end;
      Datam1.Query1.SQL.Add('And p1.editionid = ' + IntToStr(toeditionid));
      Datam1.Query1.SQL.Add('And p1.copynumber = 1');
      Datam1.Query1.SQL.Add('order by p1.copyseparationset');

      if Prefs.Debug then
        Datam1.Query1.SQL.SaveToFile
          (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'
          + 'SQLaddedition.SQL');

      Tryopen(Datam1.Query1);
      while not Datam1.Query1.Eof do
      begin
        IEdN := Findpageineditionsys(Datam1.Query1.FieldByName('pagename')
          .AsString, Datam1.Query1.FieldByName('sectionid').AsInteger);

        if Datam1.Query1.FieldByName('pagetype').AsInteger = 3 then
        begin
          Akteditiontype := editiontype(ListViewEdtodink.Items[IEdN].Data^);
        end
        else
        begin
          Akteditiontype := editiontype(ListViewEdto.Items[IEdN].Data^);
        end;

        Datam1.Query2.SQL.Clear;
        Datam1.Query2.SQL.Add
          ('exec spPlancenterImportCenterAddSeparationPhase3');
        Datam1.Query2.SQL.Add('@PublicationID = ' +
          IntToStr(Datam1.Query1.FieldByName('Publicationid').AsInteger));
        Datam1.Query2.SQL.Add(',@SectionID = ' +
          IntToStr(Datam1.Query1.FieldByName('sectionid').AsInteger));
        Datam1.Query2.SQL.Add(',@EditionID = ' + IntToStr(toeditionid));
        Datam1.Query2.SQL.Add(',@IssueID  = ' +
          IntToStr(Datam1.Query1.FieldByName('issueid').AsInteger));
        Datam1.Query2.SQL.Add(',@PubDate = :pubdate');
        Datam1.Query2.SQL.Add(',@PageName = ' + '''' + Datam1.Query1.FieldByName
          ('pagename').AsString + '''');
        Datam1.Query2.SQL.Add(',@ColorID = ' +
          IntToStr(Datam1.Query1.FieldByName('colorid').AsInteger));
        Datam1.Query2.SQL.Add(',@PageType = ' +
          IntToStr(Datam1.Query1.FieldByName('pagetype').AsInteger));

        if Akteditiontype.Changeto = 0 then // All common
        begin
          Datam1.Query2.SQL.Add(',@UniquePage = 0');
          if Datam1.Query1.FieldByName('pagetype').AsInteger = 3 then
            Datam1.Query2.SQL.Add(',@MasterEditionID = ' +
              IntToStr(tNames1.editionnametoid(ListViewEdtodink.Items[IEdN]
              .SubItems[2])))
          else
            Datam1.Query2.SQL.Add(',@MasterEditionID = ' +
              IntToStr(tNames1.editionnametoid(ListViewEdto.Items[IEdN]
              .SubItems[2])));
        End
        else
        begin
          Datam1.Query2.SQL.Add(',@UniquePage = 1');
          Datam1.Query2.SQL.Add(',@MasterEditionID = ' + IntToStr(toeditionid));
        end;

        Datam1.Query2.SQL.Add(',@pressspecifik = ' +
          IntToStr(Integer(Prefs.PressSpecific)));

        if Datam1.Query1.FieldByName('pagetype').AsInteger = 3 then // Dinky
          Datam1.Query2.SQL.Add(',@MasterpressID = ' +
            IntToStr(tNames1.pressnametoid(ListViewEdtodink.Items[IEdN]
            .SubItems[1])))
        else
          Datam1.Query2.SQL.Add(',@MasterpressID = ' +
            IntToStr(tNames1.pressnametoid(ListViewEdto.Items[IEdN]
            .SubItems[1])));

        Datam1.Query2.parambyname('pubdate').AsDateTime :=
          Datam1.Query1.FieldByName('Pubdate').AsDateTime;
        if Prefs.Debug then
          Datam1.Query2.SQL.SaveToFile
            (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
            'sqllogs\' + 'SQLaddedition2.SQL');

        trysql(Datam1.Query2);

        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;

      // Multi fix af trans/polled status på edition     or (PageTable.Status >= 50)
      Datam1.Query2.SQL.Clear;
      Datam1.Query2.SQL.Add('update pagetable set status = 30');
      Datam1.Query2.SQL.Add
        ('where ((pagetable.status = 10) or (PageTable.Status >= 50))');

      Datam1.Query2.SQL.Add('and pagetable.productionid = ' +
        IntToStr(aktproductionid));
      Datam1.Query2.SQL.Add('and pagetable.Editionid =  ' +
        IntToStr(toeditionid));
      Datam1.Query2.SQL.Add('and pagetable.locationid = ' +
        IntToStr(Aktlocationid));

      Datam1.Query2.SQL.Add
        ('and exists (Select p2.mastercopyseparationset from pagetable p2');
      Datam1.Query2.SQL.Add('where');
      Datam1.Query2.SQL.Add
        ('pagetable.mastercopyseparationset = p2.mastercopyseparationset');
      Datam1.Query2.SQL.Add('and p2.status >= 30');
      Datam1.Query2.SQL.Add('and p2.Colorid = pagetable.Colorid');
      Datam1.Query2.SQL.Add('and p2.uniquepage = 1');
      Datam1.Query2.SQL.Add('and p2.editionid <> pagetable.editionid');
      Datam1.Query2.SQL.Add('and p2.locationid = pagetable.locationid)');
      if Prefs.Debug then
        Datam1.Query2.SQL.SaveToFile
          (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'
          + 'SQLaddeditiontransfix.SQL');
      trysql(Datam1.Query2);

      if not erroroccured then
      begin
        for i := 1 to NAdduntilnow do
        begin
          if not productionIsok(aktproductionid, Adduntilnow[i].pressrunid,
            aktpublicationid, aktpublicationdate, -1) then
          begin
            newproductionisok := false;
            break;
          end;
        end;
      End
      else
      begin
        newproductionisok := false;
        if Datam1.Query1.Active then
          Datam1.Query1.Close;

        if Datam1.Query2.Active then
          Datam1.Query2.Close;

        if Datam1.Query3.Active then
          Datam1.Query3.Close;

        // den er gået død

      end;
      if (not newproductionisok) or (erroroccured) then
      begin
        MessageDlg(InfraLanguage1.Translate
          ('Could not apply new data - please try again'), mtError, [mbOk], 0);
        for i := 1 to NAdduntilnow do
        begin
          Deleteproductionwitherror(aktproductionid, Adduntilnow[i].pressrunid,
            aktpublicationid, aktpublicationdate, -1);
        end;
      end;

      FormMain.Setplanlock(true);

      Datam1.Query3.SQL.Clear;
      Datam1.Query3.SQL.Add('delete pressrunid');
      Datam1.Query3.SQL.Add
        ('where not exists(select distinct pa.pressrunid from pagetable pa where pressrunid.pressrunid = pa.pressrunid )');
      trysql(Datam1.Query3);

      if (Prefs.PlanRepair) then
      begin
        if FormMain.Setplanlock(true) then
        begin
          Datam1.Query3.SQL.Clear;
          Datam1.Query3.SQL.Add
            ('SELECT TOP 1 P1.CopySeparationSet,P1.PublicationID,P1.PubDate,P1.SectionID,P1.PageName FROM PageTable P1 WITH (NOLOCK)');
          Datam1.Query3.SQL.Add
            ('WHERE (P1.uniquepage <> 1 and p1.copyseparationset <> p1.mastercopyseparationset) and');
          Datam1.Query3.SQL.Add
            ('(( EXISTS (SELECT MasterCopySeparationSet FROM PageTable P2 WITH (NOLOCK) WHERE P1.MasterCopySeparationSet=P2.MasterCopySeparationSet AND (P1.PublicationID<>P2.PublicationID OR P1.PubDate <> P2.PubDate)))');
          Datam1.Query3.SQL.Add
            ('or (not EXISTS (SELECT P3.MasterCopySeparationSet FROM PageTable P3  WITH (NOLOCK) WHERE P1.MasterCopySeparationSet=P3.MasterCopySeparationSet AND p3.uniquepage = 1)))');
          if Prefs.Debug then
            Datam1.Query3.SQL.SaveToFile
              (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
              'sqllogs\' + 'Chepagetable.SQL');
          Datam1.Query3.Open;
          anytorepair := not Datam1.Query3.Eof;
          Datam1.Query3.Close;

          if anytorepair then
          begin
            Datam1.Query3.SQL.Clear;
            Datam1.Query3.SQL.Add('Exec spRepairPageTable @PressSpecificPlan = '
              + IntToStr(Integer(FormApplyproduction.CheckBoxpressspecifik.
              Checked)));
            FormMain.trysql(Datam1.Query3);
          end;
        end;

        FormMain.Setplanlock(false);

      end;
    end;
  finally

    if Addfrommain then
    begin
      writeeditioneditlog(true);
      GroupBoxedition.Visible := false;
      screen.Cursor := crdefault;

      loadAPagetree(TreeViewNeweddtree, '', '', ComboBoxpalocationNY.text,
        ComboBoxGlobalPubDateFilter.text);
    end;
    FormMain.Setplanlock(false);
  end;

end;

procedure TFormMain.ActioneditionAddExecute(Sender: TObject);
Var
  L: TListItem;
  fromlevel, fromnode, N: TTreeNode;
  aktproductionid, Akteditionid, toeditionid, aktpublicationid, aktpressid,
    Aktlocationid: Integer;
  aktpublicationdate: TDateTime;
  trdat: PTTreeViewpagestype;
  wherejustpub, wherestr, akteditionname: string;
  Pedition: ^editiontype;
  S: string;
  dbl1: Integer;
  defaultapproval: Integer;
  defaulthold: Integer;
  LocationID: Integer;
begin
  aktpressid := 0;
  try
    fromnode := TreeViewNeweddtree.Selected;

    aktpublicationid := TTreeViewpagestype(fromnode.Data^).Publicationid;
    aktpublicationdate := TTreeViewpagestype(fromnode.Data^).Pubdate;
    Aktlocationid := tNames1.locationnametoid(ComboBoxpalocationNY.text);
    Akteditionid := TTreeViewpagestype(fromnode.Data^).editionid;
    aktproductionid := TTreeViewpagestype(fromnode.Data^).ProductionID;

    N := fromnode.Parent;

    if tNames1.editionnames.Count = 1 then
    begin
      MessageDlg(InfraLanguage1.Translate('There is only one edition name'),
        mtInformation, [mbOk], 0);
      exit;
    end;
    S := TreeViewNeweddtree.Selected.text;
    dbl1 := pos('/', S);
    Delete(S, dbl1, 100);
    S := Trim(S);
    Gaddfromeditionid := tNames1.editionnametoid(S);
    FormAddeditionview.caption := 'New subedition';
    FormAddeditionview.ListBox1.Items := tNames1.editionnames;

    if FormAddeditionview.ListBox1.Items.Count = 0 then
    begin
      MessageDlg(InfraLanguage1.Translate('All editions are in use'),
        mtInformation, [mbOk], 0);
      exit;
    end;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select TOP 1 PressID FROM PageTable WITH (NOLOCK) WHERE ProductionID=' +
      IntToStr(aktproductionid));
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
    begin
      aktpressid := Datam1.Query1.Fields[0].AsInteger;
    end;
    Datam1.Query1.Close;

    (* defaultapproval := 0;

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Select TOP 1 DefaultApprove FROM PublicationNames WHERE PublicationID=' + IntToStr(aktpublicationid) );
      Datam1.Query1.Open;
      if not Datam1.Query1.Eof then
      begin
      defaultapproval :=  Datam1.Query1.Fields[0].AsInteger;
      end;
      Datam1.Query1.Close; *)

    FormAddeditionview.RadioGroupunique.ItemIndex :=
      Prefs.AddEditionDefaultApprovalUniquePage;

    (* defaulthold := 0;
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Select TOP 1 Hold FROM PublicationTemplates WITH (NOLOCK) WHERE PublicationID=' + IntToStr(aktpublicationid) );
      Datam1.Query1.Open;
      if not Datam1.Query1.Eof then
      begin
      defaulthold :=  Datam1.Query1.Fields[0].AsInteger;
      end;
      Datam1.Query1.Close; *)

    // defaulthold := 1 - Prefs.AddEditionDefaultHold;

    FormAddeditionview.RadioGrouphold.ItemIndex := Prefs.AddEditionDefaultHold;

    if FormAddeditionview.ShowModal <> mrOK then
      exit;

    toeditionid := tNames1.editionnametoid(FormAddeditionview.ListBox1.Items
      [FormAddeditionview.ListBox1.ItemIndex]);

    new(trdat);
    N := TreeViewNeweddtree.Items.AddChildObject(N,
      FormAddeditionview.ListBox1.Items
      [FormAddeditionview.ListBox1.ItemIndex], trdat);

    N.ImageIndex := 1;
    N.selectedIndex := 1;

    TTreeViewpagestype(N.Data^).ProductionID := aktproductionid;
    TTreeViewpagestype(N.Data^).Publicationid := aktpublicationid;
    TTreeViewpagestype(N.Data^).Pubdate := aktpublicationdate;
    TTreeViewpagestype(N.Data^).editionid := toeditionid;
    TTreeViewpagestype(N.Data^).kind := 4;
    TreeViewNeweddtree.Selected := N;
  TreeViewNeweddtree.Repaint;

    fromlevel := fromnode;
    while fromlevel.Level > 5 do
      fromlevel := fromlevel.Parent;

    wherejustpub := 'Where uniquepage = 1';

    LocationID := GetSelectedLocationID();
    if (LocationID > 0) then
      wherestr := 'Where locationid = ' + IntToStr(LocationID)
    else
      wherestr := 'Where 1=1';

    N := fromlevel;
    while N.Level > 0 do
    begin
      case TTreeViewpagestype(N.Data^).kind of
        // 0=all,1=location,2=publication,pubdate,3=issue,4=edition,5=section
        1:
          begin
            wherestr := wherestr + ' and ' + Datam1.makedatastr('',
              TTreeViewpagestype(N.Data^).Pubdate);
            wherejustpub := wherejustpub + ' and ' + Datam1.makedatastr('',
              TTreeViewpagestype(N.Data^).Pubdate);

          end;
        2:
          begin
            wherestr := wherestr + ' and publicationid = ' +
              IntToStr(TTreeViewpagestype(N.Data^).Publicationid);
            wherejustpub := wherejustpub + ' and publicationid = ' +
              IntToStr(TTreeViewpagestype(N.Data^).Publicationid);
          end;
        4:
          begin
            wherestr := wherestr + ' and editionid = ' +
              IntToStr(TTreeViewpagestype(N.Data^).editionid);
            akteditionname := tNames1.editionIDtoname
              (TTreeViewpagestype(N.Data^).editionid);
            Akteditionid := tNames1.editionnametoid(akteditionname);
          end;
      end;
      N := N.Parent;
    end; // ændring + pagetype <> 3
    wherestr := wherestr + ' and copynumber = 1 ';

    if (Prefs.PressSpecific) and (aktpressid > 0) then
    begin
      wherestr := wherestr + ' and PressID= ' + IntToStr(aktpressid);
    end;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select distinct sectionid,pagename,pageindex,mastercopyseparationset,uniquepage,locationid,copyseparationset,pressid,pagetype from pagetable (NOLOCK) ');
    Datam1.Query1.SQL.Add(wherestr);
    Datam1.Query1.SQL.Add('Order by pressid,sectionid,pageindex');
    Datam1.Query1.Open;
    ListViewEdto.Items.Clear;
    ListViewEdtodink.Items.Clear;
    while not Datam1.Query1.Eof do
    begin
      if Datam1.Query1.Fields[8].AsInteger = 3 then
        L := ListViewEdtodink.Items.Add
      else
        L := ListViewEdto.Items.Add;
      new(Pedition);
      L.Data := Pedition;

      editiontype(L.Data^).adding := true;
      editiontype(L.Data^).mastercopyseparationset := Datam1.Query1.Fields[3]
        .AsInteger;
      editiontype(L.Data^).copyseparationset := 0;

      editiontype(L.Data^).Mastereditionid := Akteditionid;
      editiontype(L.Data^).Masterlocationid := Datam1.Query1.Fields[5]
        .AsInteger;
      editiontype(L.Data^).editionid := toeditionid;
      editiontype(L.Data^).LocationID := Datam1.Query1.Fields[5].AsInteger;
      editiontype(L.Data^).Sectionid := Datam1.Query1.Fields[0].AsInteger;
      editiontype(L.Data^).pressid := Datam1.Query1.Fields[7].AsInteger;
      editiontype(L.Data^).OrgMasterpressid := Datam1.Query1.Fields[7]
        .AsInteger;
      editiontype(L.Data^).OrgMasterlocationid := Datam1.Query1.Fields[5]
        .AsInteger;
      editiontype(L.Data^).OrgMastereditionid := Akteditionid;
      editiontype(L.Data^).OrgMastersectionid := Datam1.Query1.Fields[0]
        .AsInteger;
      editiontype(L.Data^).Orgmastercopyseparationset := Datam1.Query1.Fields[3]
        .AsInteger;
      editiontype(L.Data^).Orgpagemasterpagename := Datam1.Query1.Fields
        [1].AsString;

      L.caption := tNames1.sectionidtoname(Datam1.Query1.Fields[0].AsInteger);
      L.SubItems.Add(Datam1.Query1.Fields[1].AsString);
      L.SubItems.Add(tNames1.pressnameIDtoname(Datam1.Query1.Fields[7]
        .AsInteger));
      L.SubItems.Add(akteditionname);
      L.SubItems.Add(tNames1.sectionidtoname(Datam1.Query1.Fields[0]
        .AsInteger));
      L.SubItems.Add(L.SubItems[0]);
      L.ImageIndex := 2;
      if (Datam1.Query1.Fields[4].AsInteger <> 1) then
      begin
        Datam1.Query2.SQL.Clear;
        Datam1.Query2.SQL.Add
          ('Select TOP 1 locationid,editionid,sectionid,pagename,pressid from pagetable (NOLOCK) ');
        Datam1.Query2.SQL.Add('where uniquepage = 1');
        Datam1.Query2.SQL.Add('and mastercopyseparationset = ' +
          IntToStr(Datam1.Query1.Fields[3].AsInteger));
        Datam1.Query2.Open;
        if not Datam1.Query2.Eof then
        begin
          L.SubItems[1] := tNames1.pressnameIDtoname
            (Datam1.Query2.Fields[4].AsInteger);
          L.SubItems[2] := tNames1.editionIDtoname
            (Datam1.Query2.Fields[1].AsInteger);
          L.SubItems[3] := tNames1.sectionidtoname
            (Datam1.Query2.Fields[2].AsInteger);
          L.SubItems[4] := Datam1.Query2.Fields[3].AsString;
        end;
        Datam1.Query2.Close;
      end;

      if FormAddeditionview.RadioGrouptype.ItemIndex = 1 then
      begin
        editiontype(L.Data^).Unique := 0;
        editiontype(L.Data^).Changeto := 0;
        L.ImageIndex := 2;
      end
      else
      begin
        editiontype(L.Data^).Unique := 1;
        editiontype(L.Data^).Changeto := 1;
        L.ImageIndex := 0;
        // l.SubItems[1] := tnames1.pressnameIDtoname(Datam1.Query2.Fields[4].AsInteger);
        L.SubItems[2] := tNames1.editionIDtoname(toeditionid);
      end;
      if Datam1.Query1.Fields[8].AsInteger = 3 then
        L.ImageIndex := 6;

      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;

    ActioneditionAdd.Enabled := false;
  Except
  end;

  Checkforedchanges;

end;

procedure TFormMain.TimerautupdateTimer(Sender: TObject);
// Var
// I : Integer;
begin
  if not StartuPdone then
    exit;
  { Timerautupdate.Enabled := false;
    if (hoursbetween(now,Lastupdatetime) > Autoupdateevery) OR (Prefs.Debug) then
    begin

    Lastupdatetime := now;
    ThrfoundAnyfiletoautoupdate := false;
    AutoUpdateTHR.Execute;
    if ThrfoundAnyfiletoautoupdate then
    begin
    if MessageDlg('New Plancenter version is available.  Update now?',mtConfirmation, [mbYes, mbNo], 0) = mrYes then
    begin
    StartAutoupdater(ExtractFilePath(Axpplication.ExeName)+'Autoupdate.exe','',true);
    End
    else
    Timerautupdate.Enabled := true;
    end
    else
    Timerautupdate.Enabled := true;
    End
    else
    Timerautupdate.Enabled := true;
  }
end;

function TFormMain.GetFileLastAccessTime(sFileName: string;
  filetimetype: Integer): TDateTime;
var
  ffd: TWin32FindData;
  dft: DWORD;
  lft: TFileTime;
  h: THandle;

begin
  result := NOW;
  try
    h := Winapi.Windows.FindFirstFile(PChar(sFileName), ffd);
    if (INVALID_HANDLE_VALUE <> h) then
    begin

      Winapi.Windows.FindClose(h);

      case filetimetype of
        0:
          FileTimeToLocalFileTime(ffd.ftCreationTime, lft);
        1:
          FileTimeToLocalFileTime(ffd.ftLastAccessTime, lft);
        2:
          FileTimeToLocalFileTime(ffd.ftLastWriteTime, lft);
      else
        FileTimeToLocalFileTime(ffd.ftLastAccessTime, lft);
      end;

      FileTimeToDosDateTime(lft, LongRec(dft).Hi, LongRec(dft).Lo);
      result := FileDateToDateTime(dft);
    end;
  Except
  end;
end;

{ procedure TFormMain.StartAutoupdater(ProgramName      : String;
  programparameter : string;
  Visible : Boolean);
  var
  StartInfo  : TStartupInfo;
  ProcInfo   : TProcessInformation;
  CreateOK   : Boolean;
  T : String;
  begin
  FillChar(StartInfo,SizeOf(TStartupInfo),#0);
  FillChar(ProcInfo,SizeOf(TProcessInformation),#0);
  StartInfo.cb := SizeOf(TStartupInfo);
  if not visible then
  begin
  StartInfo.dwFlags := STARTF_USESHOWWINDOW;
  StartInfo.wShowWindow := SW_HIDE;
  end;
  T := '"'+ProgramName+'"' + ' "' +programparameter+'"';
  CreateOK := CreateProcess(nil,Pchar(T), nil, nil,False,
  CREATE_NEW_CONSOLE or NORMAL_PRIORITY_CLASS,
  nil, nil, StartInfo, ProcInfo);
  end;


}
procedure TFormMain.ComboBoxpalocationNYChange(Sender: TObject);
var
  chtype: Integer;
begin

  chtype := setalllocationcombos(TComboBox(Sender).text);

  if chtype = 2 then // ???
  begin
    TreeViewpagelist.Items.Clear;
    TreeViewThumbs.Items.Clear;
    TreeViewPlateview.Items.Clear;
    TreeViewprodcontrol.Items.Clear;
    TreeViewNeweddtree.Items.Clear;
    TreeViewplan.Items.Clear;
    TreeViewLogfilter.Items.Clear;
    TreeViewreportfilter.Items.Clear;
    screen.Cursor := crhourglass;
  end
  else
  begin
    case PageControlMain.ActivePageIndex of
      VIEW_SEPARATIONS:
        begin
          ActionrefreshpagefilterExecute(Self);
        end;
      VIEW_THUMBNAILS:
        begin
          ActionThumbnailFilterrefreshExecute(Self);
        end;
      VIEW_PLATES:
        begin
          ActionPlaterefreshtreeExecute(Self);
        end;
      VIEW_PRODUCTIONS:
        begin
          ActionprogressrefreshfilterExecute(Self);
        end;
      VIEW_EDITIONS:
        begin
          ActionrefreshhedtreeExecute(Self);
        end;
      VIEW_PLANS:
        begin
          ActionnewplanrefreshExecute(Self);
        end;
      VIEW_LOGS:
        begin
          ActionLogrefreshfilterExecute(Self);
        end;
      VIEW_REPORTS:
        begin
          ActionreportfilterExecute(Self);
        end;
      VIEW_ACTIVEQUEUE:
        begin
          ActionactiverefreshExecute(Self);
        end;
    end;
    if PageControlMain.ActivePageIndex = VIEW_THUMBNAILS then
      ActionrefreshpagefilterExecute(Self);
  end;

end;

procedure TFormMain.ComboBoxprodlocationNyChange(Sender: TObject);
Var
  chtype: Integer;
begin
  chtype := setalllocationcombos(TComboBox(Sender).text);

  if chtype = 2 then
  begin
    TreeViewpagelist.Items.Clear;
    TreeViewThumbs.Items.Clear;
    TreeViewPlateview.Items.Clear;
    TreeViewprodcontrol.Items.Clear;
    TreeViewNeweddtree.Items.Clear;
    TreeViewplan.Items.Clear;
    TreeViewLogfilter.Items.Clear;
    TreeViewreportfilter.Items.Clear;
    screen.Cursor := crhourglass;
  end
  else
  begin
    ActionprogressrefreshfilterExecute(Self);
  end;
end;

procedure TFormMain.PartialapplyPlan(autoseted: Boolean);

Var
  Numberofplannedruns: Integer;
  applymode: Integer; // 1 load, 2 wizard same press 3 wizard other press
  Aktlocationid, aktpressid: Integer;
  Newlocationid, Newpressid: Integer;
  stepcancel: Boolean;
  stepi, IPLF, stepdir, prevstep: Integer;
  T, TN: String;
  NEditions, i: Integer;
  Editions: Array [0 .. 100] of Integer;
  editionlist: string;
  Maxpages: Integer;
  Nsections: Integer;
  sections: Array [1 .. 100] of record Sectionid: Integer;
  Npages: Integer;
  Pageoffset: Integer;
  PageInsert: Integer;
end;
sectionlist:
string;

Npressrunsbefore, Npressrunsafter, Sequencebefore: Integer;
Selplateframe:
Integer;

function checkpagename(Name: string): Integer;
begin
  result := -1;
  try
    result := StrToInt(name);
  except
  end;
end;

procedure Resetsequence;
Var
  Npressruns, iseq, pr: Integer;
begin

  Datam1.Query2.SQL.Clear;
  Datam1.Query2.SQL.Add
    ('Select Count(distinct pressrunid) From pagetable (NOLOCK) ');
  Datam1.Query2.SQL.Add('Where LocationId = ' +
    IntToStr(plateframeslocationid));
  Datam1.Query2.SQL.Add('and Pressid = ' + IntToStr(plateframespressid));
  Datam1.Query2.SQL.Add('and Publicationid = ' +
    IntToStr(plateframesPublicationid));
  Datam1.Query2.SQL.Add('and ' + Datam1.makedatastr('', plateframesPubdate));

  Tryopen(Datam1.Query2);
  Npressrunsafter := Datam1.Query2.Fields[0].AsInteger;
  Datam1.Query2.Close;

  if Npressrunsafter <> Npressrunsbefore then
  begin
    Datam1.Query2.SQL.Clear;
    Datam1.Query2.SQL.Add
      ('Select distinct pressrunid,editionid,presssectionnumber From pagetable (NOLOCK) ');
    Datam1.Query2.SQL.Add('Where LocationId = ' +
      IntToStr(plateframeslocationid));
    Datam1.Query2.SQL.Add('and Pressid = ' + IntToStr(plateframespressid));
    Datam1.Query2.SQL.Add('and Publicationid = ' +
      IntToStr(plateframesPublicationid));
    Datam1.Query2.SQL.Add('and ' + Datam1.makedatastr('', plateframesPubdate));
    Datam1.Query2.SQL.Add('order by presssectionnumber');
    Tryopen(Datam1.Query2);
    Npressruns := 0;
    while not Datam1.Query2.Eof do
    begin
      Inc(Npressruns);
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pressrunid set SequenceNumber = ' +
        IntToStr(Npressruns));
      Datam1.Query1.SQL.Add('where pressrunid = ' + Datam1.Query2.Fields[0]
        .AsString);
      Datam1.Query1.ExecSQL;
      Datam1.Query2.Next;
    end;
    Datam1.Query2.Close;
  End
  else
  begin
    iseq := 0;
    for iseq := 1 to nseqbeforepart do
    begin

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Select TOP 1 pressrunid from pagetable (NOLOCK) ');
      Datam1.Query1.SQL.Add('where productionid = ' +
        IntToStr(plateframesproductionid));
      Datam1.Query1.SQL.Add('and sectionid = ' +
        IntToStr(seqbeforepart[iseq].Sectionid));
      Datam1.Query1.SQL.Add('and editionid = ' +
        IntToStr(seqbeforepart[iseq].editionid));
      Datam1.Query1.SQL.Add('and pagename = ' + '''' + seqbeforepart[iseq]
        .minpagename + '''');
      pr := -1;
      Tryopen(Datam1.Query1);
      if not Datam1.Query1.Eof then
        pr := Datam1.Query1.Fields[0].AsInteger;
      Datam1.Query1.Close;

      if pr > 0 then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('update pagetable set presssectionnumber = ' +
          IntToStr(seqbeforepart[iseq].seq));
        Datam1.Query1.SQL.Add('Where Pressrunid = ' + IntToStr(pr));
        trysql(Datam1.Query1);
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('update pressrunid set SequenceNumber = ' +
          IntToStr(seqbeforepart[iseq].seq));
        Datam1.Query1.SQL.Add('Where Pressrunid = ' + IntToStr(pr));
        trysql(Datam1.Query1);
      end;
    end;
  end;
end;

procedure Resetpagina;
Var
  lowpag: Integer;
begin

  Datam1.Query2.SQL.Clear;
  Datam1.Query2.SQL.Add('Select distinct pressrunid From pagetable (NOLOCK) ');
  Datam1.Query2.SQL.Add('Where LocationId = ' +
    IntToStr(plateframeslocationid));
  Datam1.Query2.SQL.Add('and Pressid = ' + IntToStr(plateframespressid));
  Datam1.Query2.SQL.Add('and Publicationid = ' +
    IntToStr(plateframesPublicationid));
  Datam1.Query2.SQL.Add('and ' + Datam1.makedatastr('', plateframesPubdate));

  Tryopen(Datam1.Query2);

  while not Datam1.Query2.Eof do
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Select top 1 pagination From pagetable (NOLOCK) ');
    Datam1.Query1.SQL.Add('Where pressrunid = ' + Datam1.Query2.Fields[0]
      .AsString);
    Datam1.Query1.SQL.Add('order by pagination');
    Tryopen(Datam1.Query1);
    if not Datam1.Query1.Eof then
      lowpag := Datam1.Query1.Fields[0].AsInteger;

    Datam1.Query1.Close;

    lowpag := lowpag - 1;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable');
    Datam1.Query1.SQL.Add('set pagination = pagination - ' + IntToStr(lowpag));
    Datam1.Query1.SQL.Add('Where pressrunid = ' + Datam1.Query2.Fields[0]
      .AsString);
    trysql(Datam1.Query1);
    Datam1.Query2.Next;
  end;

  Datam1.Query2.Close;

end;

procedure Preparewizardtounplanned(ProductionID: Integer; LocationID: Integer;
  pressid: Longint);

Var
  // N : ttreenode;
  i
  // ,iplf
    : Integer;
  L: TListItem;
begin
  try

    plateframeslocationid := LocationID;
    plateframespressid := pressid;
    Formprodplan.ComboBoxLocation.Items := tNames1.locationnames;
    Formprodplan.ComboBoxLocation.ItemIndex :=
      Formprodplan.ComboBoxLocation.Items.IndexOf
      (tNames1.locationIDtoname(plateframeslocationid));
    Formprodplan.possiblepressesonlocation(plateframeslocationid,
      Formprodplan.ComboBoxpress.Items);
    Formprodplan.ComboBoxpress.ItemIndex :=
      Formprodplan.ComboBoxpress.Items.IndexOf
      (tNames1.pressnameIDtoname(plateframespressid));
    Formprodplan.ComboBoxpublication.Items := tNames1.publicationnames;
    Formprodplan.Anychange := true;
    Formaddplan.DateTimePicker1.Date :=
      Tplantreedata(TreeViewplan.Selected.Data^).Pubdate;
    Formaddplan.ComboBoxedition.Items := tNames1.editionnames;
    Formaddplan.ComboBoxedition.ItemIndex :=
      Formaddplan.ComboBoxedition.Items.IndexOf
      (Formeditionorder.ListBox1.Items[0]);

    plateframesproductionid := Tplantreedata(TreeViewplan.Selected.Data^)
      .ProductionID;
    Formaddplan.planname := tNames1.productionrunIDtoname
      (plateframesproductionid);
    Formaddplan.Editplanname.text := Formaddplan.planname;
    Formaddplan.Publicationid := Tplantreedata(TreeViewplan.Selected.Data^)
      .Publicationid;

    FormAddpressrun.PBExListviewSections.Items.Clear;
    for i := 1 to Nsections do
    begin
      L := FormAddpressrun.PBExListviewSections.Items.Add;
      L.caption := tNames1.sectionidtoname(sections[i].Sectionid);
      if (sections[i].Npages > FormAddpressrun.MaxOnPress) and
        (FormAddpressrun.MaxOnPress > 0) then
        L.SubItems.Add(IntToStr(FormAddpressrun.MaxOnPress))
      else
        L.SubItems.Add(IntToStr(sections[i].Npages));
      L.SubItems.Add('');
      L.SubItems.Add('');
      L.SubItems.Add('0');
      L.SubItems.Add('0');
      L.SubItems.Add(IntToStr(sections[i].Pageoffset));
      L.SubItems.Add('1');

    end;
  Except
  end;
end;

begin
  FormMain.planlogging('PartialapplyExecute');
  try
    if TreeViewplan.Selected = nil then
      exit;
    if TreeViewplan.Selected.Level < 1 then
      exit;
    Formloadpressplan.Itspartial := true;
    Aktlocationid := Tplantreedata(TreeViewplan.Selected.Data^).LocationID;
    aktpressid := Tplantreedata(TreeViewplan.Selected.Data^).pressid;
    Newlocationid := Tplantreedata(TreeViewplan.Selected.Data^).LocationID;
    Newpressid := Tplantreedata(TreeViewplan.Selected.Data^).pressid;
    plateframesApplyproductionid := Tplantreedata(TreeViewplan.Selected.Data^)
      .ProductionID;
    Selplateframe := 1;
    for i := 1 to Nplateframes do
    begin
      if plateframes[i].Selected then
      begin
        Selplateframe := i;
        break;
      end;
    end;

    stepcancel := false;
    stepi := 0;
    stepdir := 1;
    prevstep := 0;

    i := 1;
    Npressrunsbefore := Nplateframes;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select distinct presssectionnumber,editionid,sectionid,min(pagename) from pagetable (NOLOCK) ');
    Datam1.Query1.SQL.Add('where productionid = ' +
      IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
    Datam1.Query1.SQL.Add('group by presssectionnumber,editionid,sectionid');
    Datam1.Query1.SQL.Add('order by editionid,sectionid');
    Tryopen(Datam1.Query1);
    nseqbeforepart := 0;

    while not Datam1.Query1.Eof do
    begin
      Inc(nseqbeforepart);
      seqbeforepart[nseqbeforepart].editionid := Datam1.Query1.Fields[1]
        .AsInteger;
      seqbeforepart[nseqbeforepart].Sectionid := Datam1.Query1.Fields[2]
        .AsInteger;
      seqbeforepart[nseqbeforepart].minpagename := Datam1.Query1.Fields
        [3].AsString;
      seqbeforepart[nseqbeforepart].seq := Datam1.Query1.Fields[0].AsInteger;
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;

    if Nplateframes > 1 then
    begin
      for IPLF := 1 to Nplateframes do
      begin
        if plateframes[IPLF].Selected then
        begin
          i := IPLF;
          planpartpressrunid := plateframes[IPLF].pressrunid;
          Sequencebefore := plateframes[IPLF].SequenceNumber;
          break;
        end;
      end;
    end;

    makeplateframes(ScrollBoxplanmain, ActionnewplanSmallimages.Checked);
    if PageControlplanning.ActivePageIndex = 1 then
      Formprodplan.makepagelist(PBExListviewPlandata, 0);

    Formprodplan.loadpressruniddata;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select distinct editionid,presssectionnumber from pagetable (NOLOCK) ');
    Datam1.Query1.SQL.Add('where productionid = ' +
      IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
    Datam1.Query1.SQL.Add('And pagetype < 3 ');
    Datam1.Query1.SQL.Add('order by presssectionnumber,editionid');

    Tryopen(Datam1.Query1);
    NEditions := 0;
    editionlist := '(';
    while not Datam1.Query1.Eof do
    begin
      if (NEditions = 0) or (Datam1.Query1.FieldByName('editionid').AsInteger <>
        Editions[NEditions - 1]) then
      begin
        Inc(NEditions);
        Editions[NEditions] := Datam1.Query1.FieldByName('editionid').AsInteger;
        editionlist := editionlist + IntToStr(Editions[NEditions]) + ',';
      end;
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;

    editionlist[Length(editionlist)] := ')';

    if Prefs.PartialNoSecionChange then
    begin
      sectionlist := '(';
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select distinct p.sectionid from pagetable p (NOLOCK) , pressrunid pr (NOLOCK) ');
      Datam1.Query1.SQL.Add('where productionid = ' +
        IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
      Datam1.Query1.SQL.Add('And p.pagetype < 3 and pr.PlanType < 1');
      Datam1.Query1.SQL.Add('and pr.pressrunid = ' +
        IntToStr(plateframes[Selplateframe].pressrunid));
      Datam1.Query1.SQL.Add('And p.pressid = ' + IntToStr(plateframespressid));
      Datam1.Query1.SQL.Add('And p.pressrunid = pr.pressrunid');
      Datam1.Query1.SQL.Add('order by p.sectionid');
      Tryopen(Datam1.Query1);
      Nsections := 0;
      while not Datam1.Query1.Eof do
      begin
        Inc(Nsections);
        sections[Nsections].Sectionid := Datam1.Query1.FieldByName('sectionid')
          .AsInteger;
        sections[Nsections].Pageoffset := 0;
        sectionlist := sectionlist +
          IntToStr(sections[Nsections].Sectionid) + ',';
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;
      sectionlist[Length(sectionlist)] := ')';
    end
    else
    begin
      sectionlist := '(';
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select distinct sectionid from pagetable (NOLOCK) ');
      Datam1.Query1.SQL.Add('where productionid = ' +
        IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
      Datam1.Query1.SQL.Add('And pagetype < 3 ');
      Datam1.Query1.SQL.Add('and pressrunid = ' +
        IntToStr(plateframes[Selplateframe].pressrunid));
      Datam1.Query1.SQL.Add('order by sectionid');
      Tryopen(Datam1.Query1);
      Nsections := 0;
      while not Datam1.Query1.Eof do
      begin
        Inc(Nsections);
        sections[Nsections].Sectionid := Datam1.Query1.FieldByName('sectionid')
          .AsInteger;
        sections[Nsections].Pageoffset := 0;
        sectionlist := sectionlist +
          IntToStr(sections[Nsections].Sectionid) + ',';
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;
      sectionlist[Length(sectionlist)] := ')';
    end;
    for i := 1 to Nsections do
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Select min(pageindex) from pagetable (NOLOCK) ');
      Datam1.Query1.SQL.Add('where productionid = ' +
        IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
      Datam1.Query1.SQL.Add('And sectionid = ' +
        IntToStr(sections[i].Sectionid));
      Datam1.Query1.SQL.Add('and pressrunid = ' +
        IntToStr(plateframes[Selplateframe].pressrunid));
      Datam1.Query1.SQL.Add('And pagetype < 3 ');
      Tryopen(Datam1.Query1);
      if not Datam1.Query1.Eof then
      begin
        sections[i].Pageoffset := Datam1.Query1.Fields[0].AsInteger;
        if sections[i].Pageoffset > 0 then
          Dec(sections[i].Pageoffset);
      end;
      Datam1.Query1.Close;
    end;

    applyColorproofids := -1;
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Select distinct proofid from pagetable (NOLOCK) ');
    Datam1.Query1.SQL.Add('where productionid = ' +
      IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
    Datam1.Query1.SQL.Add('and colorid <> ' +
      IntToStr(tNames1.Colornametoid('K')));
    Datam1.Query1.SQL.Add('and pressrunid = ' +
      IntToStr(plateframes[Selplateframe].pressrunid));
    Tryopen(Datam1.Query1);
    while not Datam1.Query1.Eof do
    begin
      applyColorproofids := Datam1.Query1.Fields[0].AsInteger;
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;

    applyMonoproofids := -1;
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Select distinct proofid from pagetable (NOLOCK) ');
    Datam1.Query1.SQL.Add('where productionid = ' +
      IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
    Datam1.Query1.SQL.Add('and colorid = ' +
      IntToStr(tNames1.Colornametoid('K')));
    Datam1.Query1.SQL.Add('And pagetype < 3 ');
    Datam1.Query1.SQL.Add('and pressrunid = ' +
      IntToStr(plateframes[Selplateframe].pressrunid));
    Tryopen(Datam1.Query1);
    while not Datam1.Query1.Eof do
    begin
      applyMonoproofids := Datam1.Query1.Fields[0].AsInteger;
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;

    if applyColorproofids = -1 then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Select distinct proofid from pagetable (NOLOCK) ');
      Datam1.Query1.SQL.Add('where productionid = ' +
        IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
      Datam1.Query1.SQL.Add('And pagetype < 3 ');
      Datam1.Query1.SQL.Add('and pressrunid = ' +
        IntToStr(plateframes[Selplateframe].pressrunid));
      Tryopen(Datam1.Query1);
      while not Datam1.Query1.Eof do
      begin
        applyColorproofids := Datam1.Query1.Fields[0].AsInteger;
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;

    end;
    if applyMonoproofids = -1 then
      applyMonoproofids := applyColorproofids;

    FormAddpressrun.MaxOnPress := -1;
    for i := 0 to Length(Prefs.MaxPagesPerPress) - 1 do
    begin
      if Uppercase(tNames1.pressnameIDtoname(plateframespressid))
        = Uppercase(Prefs.MaxPagesPerPress[i].Key) then
      begin
        if (Prefs.MaxPagesPerPress[i].Value <> '') and
          (Prefs.MaxPagesPerPress[i].Value <> '0') then
        begin
          FormAddpressrun.MaxOnPress :=
            StrToInt(Prefs.MaxPagesPerPress[i].Value);
        end;
      end;
    end;

    for i := 1 to Nsections do
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select count(distinct(pageindex)) from pagetable (NOLOCK) ');
      Datam1.Query1.SQL.Add('where productionid = ' +
        IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
      Datam1.Query1.SQL.Add('and sectionid = ' +
        IntToStr(sections[i].Sectionid));
      Datam1.Query1.SQL.Add('And pagetype < 3 ');
      Datam1.Query1.SQL.Add('and pressrunid = ' +
        IntToStr(plateframes[Selplateframe].pressrunid));
      Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(plateframespressid));
      Tryopen(Datam1.Query1);
      sections[i].Npages := 0;
      if not Datam1.Query1.Eof then
      begin
        Maxpages := Datam1.Query1.Fields[0].AsInteger;
        sections[i].Npages := Datam1.Query1.Fields[0].AsInteger;
      end;
      Datam1.Query1.Close;
      if sections[i].Npages mod 2 = 1 then
        Inc(sections[i].Npages);
    end;

    Formeditionorder.ListBox1.Items.Clear;
    for i := 1 to NEditions do
    begin
      if Formeditionorder.ListBox1.Items.IndexOf
        (tNames1.editionIDtoname(Editions[i])) < 0 then
        Formeditionorder.ListBox1.Items.Add
          (tNames1.editionIDtoname(Editions[i]));
    end;
    Formeditionorder.ComboBox1.Items := tNames1.editionnames;
    Formeditionorder.ComboBox1.ItemIndex := 0;

    Maxpages := 0;
    for i := 1 to Nsections do
    begin
      if Maxpages < sections[i].Npages then
        Maxpages := sections[i].Npages;
    end;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Select distinct colorid from pagetable (NOLOCK) ');
    Datam1.Query1.SQL.Add('where productionid = ' +
      IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
    Datam1.Query1.SQL.Add('And pagetype < 3 ');
    Datam1.Query1.SQL.Add('and pressrunid = ' +
      IntToStr(plateframes[Selplateframe].pressrunid));
    Datam1.Query1.SQL.Add('order by colorid');
    Tryopen(Datam1.Query1);
    Formprodplan.NApplymodecolors := 0;
    Formprodplan.ApplyingToPDF := false;
    while not Datam1.Query1.Eof do
    begin
      Inc(Formprodplan.NApplymodecolors);
      if Formprodplan.NApplymodecolors <= 16 then
      begin
        if Datam1.Query1.Fields[0].AsInteger = tNames1.PDFCOLORID then
          Formprodplan.ApplyingToPDF := true;
        Formprodplan.Applymodecolors[Formprodplan.NApplymodecolors] :=
          Datam1.Query1.Fields[0].AsInteger;
      end;
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;

    Formprodplan.moveunplannedfromprodcutionid :=
      Tplantreedata(TreeViewplan.Selected.Data^).ProductionID;
    Formprodplan.moveunplannedfrompressid :=
      Tplantreedata(TreeViewplan.Selected.Data^).pressid;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select TOP 1 p1.pressrunid,p2.comment,p2.ordernumber from pagetable p1 (NOLOCK) , pressrunid p2 (NOLOCK) ');
    Datam1.Query1.SQL.Add('Where p1.productionid = ' +
      IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
    Datam1.Query1.SQL.Add('and p1.pressrunid = p2.pressrunid');
    Datam1.Query1.SQL.Add('And p1.pagetype < 3 ');
    Datam1.Query1.SQL.Add('and p1.pressrunid = ' +
      IntToStr(plateframes[Selplateframe].pressrunid));
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
    begin
      Formprodplan.Movepressruncomment := Datam1.Query1.Fields[1].AsString;
      Formprodplan.movepressrunorder := Datam1.Query1.Fields[2].AsString;
    end;
    Datam1.Query1.Close;

    stepi := 1;

    Repeat
      case stepi of
        0:
          begin

          end;
        1:
          begin

            if Formapplytounplanned.RadioButtonload.Checked then
            begin
              stepi := 3;
            end;

            if Formapplytounplanned.RadioButtonwizard.Checked then
            begin
              if (Prefs.Proversion > 0) OR (autoseted) or (NEditions = 1) then
              begin
                stepi := 2;
              end
              else
              begin
                case Formeditionorder.ShowModal of
                  mryes:
                    begin
                      prevstep := 1;
                      stepi := 2;
                    end;
                  mrNo:
                    begin
                      exit;
                    end;
                else
                  begin
                    exit;
                  end;
                end;
              end;
            end;
          end;
      end;
    until (stepi >= 2);

    if (Formapplytounplanned.RadioButtonload.Checked) then
    begin
      applymode := PLANAPPLYMODE_LOAD;
      Formprodplan.Editmode := PLANADDMODE_APPLY;
      plateframespressid := Newpressid;
      plateframeslocationid := Newlocationid;
      Formloadpressplan.editionlist := editionlist;
      Formloadpressplan.sectionlist := sectionlist;
      Formloadpressplan.Maxpages := Maxpages;
      Formloadpressplan.defaultpublid :=
        Tplantreedata(TreeViewplan.Selected.Data^).Publicationid;
      Formloadpressplan.Applytodate :=
        Tplantreedata(TreeViewplan.Selected.Data^).Pubdate;
      Formloadpressplan.Applytopublid :=
        Tplantreedata(TreeViewplan.Selected.Data^).Publicationid;

      Formloadpressplan.CheckBoxusecurprod.Visible := true;
      Formloadpressplan.CheckBoxusecurprod.Checked := true;
      Formloadpressplan.Changeoffset1.Visible := true;
      plateframesPublicationid := 1;
      plateframesPubdate := NOW;

      plateframesproductionid := Tplantreedata(TreeViewplan.Selected.Data^)
        .ProductionID;
      Formloadpressplan.Applytopprodname := tNames1.productionrunIDtoname
        (plateframesproductionid);

      (* if Formloadpressplan.Applytopprodname = '' then
        begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('Select TOP 1 * from productionnames (NOLOCK) ');
        Datam1.Query1.SQL.Add('where productionid = '+IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).productionid));

        tryopen(Datam1.Query1);
        if not Datam1.Query1.Eof then
        begin
        Formloadpressplan.Applytopprodname := Datam1.Query1.Fields[1].AsString;
        Datam1.Query1.Next;
        end;
        Datam1.Query1.Close;
        end;
      *)

      if Formapplytounplanned.RadioButtonload.Checked then
      begin
        if Formprodplan.loadpressplan(ScrollBoxplanmain, true,
          ActionnewplanSmallimages.Checked, true, false) then
        begin

          //FormApplyproduction.GroupBoxdevice.Visible := true;
          FormApplyproduction.initialize(false);
          if FormApplyproduction.ShowModal = mrOK then
          begin
            if not Setplanlock(true) then
            begin

            end
            else
            begin
              if Formprodplan.runproduction(true) then
              begin
                if FormApplyproduction.ComboBoxdevice.ItemIndex > 0 then
                begin
                  SpecificDeviceID := tNames1.devicenametoid
                    (FormApplyproduction.ComboBoxdevice.text);
                  if (SpecificDeviceID <= 0) then
                  begin
                    SpecificDeviceID := inittypes.DeviceGroupnametoID
                      (FormApplyproduction.ComboBoxdevice.text);
                    if (SpecificDeviceID > 0) then
                      SpecificDeviceID := SpecificDeviceID + 100;
                  end;
                  applysepecifikdeviceid(SpecificDeviceID,
                    plateframesproductionid);
                end;

                if (RipSetupIDInPageTable) AND
                  (FormApplyproduction.ComboBoxRipSetupname.ItemIndex >= 0) and
                  (FormApplyproduction.ComboBoxPreflightSetup.ItemIndex >= 0)
                  and (FormApplyproduction.ComboBoxInksaveSetup.ItemIndex >= 0)
                then
                  ApplyRipSetups(plateframesproductionid,
                    FormApplyproduction.ComboBoxRipSetupname.text,
                    FormApplyproduction.ComboBoxPreflightSetup.text,
                    FormApplyproduction.ComboBoxInksaveSetup.text);

                 if (FormApplyproduction.ComboBoxPageFormat.ItemIndex > 0) then
                      ApplySpecificPageFormat( FormApplyproduction.ComboBoxPageFormat.Text, plateframesproductionid);


                postapplyplan(plateframeslocationid, plateframespressid,
                  plateframesproductionid, plateframesPublicationid,
                  plateframesPubdate, Formprodplan.Editmode, true);
                // existingPlan = true!

                Resetsequence;
                Resetpagina;

              end;
            end;
          end;
        end;
      end;
    end
    else
    begin
      applymode := PLANAPPLYMODE_WIZARD;

      Numberofplannedruns := 0;
      if not Datam1.Query1.Eof then
      begin
        Numberofplannedruns := Datam1.Query1.Fields[0].AsInteger;
      end;

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select top 1 (pr.SequenceNumber)  From pagetable p1 (NOLOCK) , PressRunID pr (NOLOCK) ');
      Datam1.Query1.SQL.Add
        ('Where pr.PlanType > 0 And pr.PressRunID = p1.PressRunID');
      Datam1.Query1.SQL.Add('and p1.productionid = ' +
        IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
      Datam1.Query1.SQL.Add('and p1.pressid = ' +
        IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).pressid));
      Datam1.Query1.SQL.Add('order by  SequenceNumber desc');
      Datam1.Query1.Open;
      Formprodplan.NextPartseqnum := 0;
      if not Datam1.Query1.Eof then
      begin
        Formprodplan.NextPartseqnum := Datam1.Query1.Fields[0].AsInteger;
      end;
      Datam1.Query1.Close;
      Preparewizardtounplanned(Tplantreedata(TreeViewplan.Selected.Data^)
        .ProductionID, Newlocationid, Newpressid);
      Formprodplan.Editmode := PLANADDMODE_APPLY;
      Formprodplan.planningaction := 6;
      Mainwizard(false); // herherher
      // Resetsequence;
      Resetpagina;
      (*
        if FoxrmSettings.CheckBoxsecInpressruncom.checked then
        begin

        Inc(Numberofplannedruns);
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('update pagetable');
        Datam1.Query1.SQL.Add('Set PressSectionNumber = ' +IntToStr(Numberofplannedruns));
        Datam1.Query1.SQL.Add('where PressRunID = ' + Datam1.Query2.Fields[0].AsString);
        Datam1.Query1.ExecSQL(false);

        Datam1.Query2.Close;
        end;
      *)
    end;

  Finally
    Setplanlock(false);
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable set active = 1');
    Datam1.Query1.SQL.Add
      ('Where colorid = 4 and pagetype < 2 AND Publicationid = ' +
      IntToStr(plateframesPublicationid));
    Datam1.Query1.SQL.Add('and ' + Datam1.makedatastr('', plateframesPubdate));

    trysql(Datam1.Query1);

    Formprodplan.planningaction := 0;
  end;
end;

function TFormMain.setalllocationcombos(newlocationname: string): Integer;
// -1 error, 0 no change, 1 normal change, 2 server change
Var
  i: Integer;
begin
  result := 1;
  CurrentLocationid := -1;

  if (Prefs.KeepTreeExpansion) then
  begin
    MainUpdateing := true;
  end;
  Currentlocationname := newlocationname;

  if newlocationname <> '*' then
  begin
    CurrentLocationid := tNames1.locationnametoid(newlocationname);
  end;

  if (newlocationname = '*') then
    newlocationname := 'All';

  ComboBoxpalocationNY.ItemIndex := ComboBoxpalocationNY.Items.IndexOf(newlocationname);
  ComboBoxplanlocation.ItemIndex := ComboBoxplanlocation.Items.IndexOf(newlocationname);
  ComboBoxactivequeue.ItemIndex := ComboBoxactivequeue.Items.IndexOf(newlocationname);
  // if (FoxrmSettings.CheckBoxKeeptreeexpantion.checked)  then
  // begin

  (* ComboBoxpalocationNy.ItemIndex := ComboBoxpalocationNy.Items.IndexOf(newlocationname);

    if PageControlMain.ActivePageIndex <> 1 then
    ComboBoxThumblocationNy.ItemIndex := ComboBoxThumblocationNy.Items.IndexOf(newlocationname);

    if PageControlMain.ActivePageIndex <> 2 then
    ComboBoxPlatelocation.ItemIndex := ComboBoxPlatelocation.Items.IndexOf(newlocationname);

    if PageControlMain.ActivePageIndex <> 3 then
    ComboBoxprodlocationNy.ItemIndex := ComboBoxprodlocationNy.Items.IndexOf(newlocationname);

    if PageControlMain.ActivePageIndex <> 4 then
    ComboBoxeditionlocation.ItemIndex := ComboBoxeditionlocation.Items.IndexOf(newlocationname);

    if PageControlMain.ActivePageIndex <> 5 then
    ComboBoxplanlocation.ItemIndex := ComboBoxplanlocation.Items.IndexOf(newlocationname);

    if PageControlMain.ActivePageIndex <> 6 then
    ComboBoxLoglocation.ItemIndex := ComboBoxLoglocation.Items.IndexOf(newlocationname);

    if PageControlMain.ActivePageIndex <> 7 then
    ComboBoxreportlocation.ItemIndex := ComboBoxreportlocation.Items.IndexOf(newlocationname);

    if PageControlMain.ActivePageIndex <> 9 then
    ComboBoxactivequeue.ItemIndex := ComboBoxactivequeue.Items.IndexOf(newlocationname);
  *)
  // end;
  if (GroupBoxdevicelist.Visible) and (newlocationname <> 'All') then
  begin

    if FrameDeviceplacer1.ComboBoxlocationManage.Items.Count > 0 then
    begin
      if (true) OR (not Prefs.DeviceControlUsePressDevices) then
      begin
        for i := 0 to FrameDeviceplacer1.ComboBoxlocationManage.Items.Count - 1 do
        begin
          if Uppercase(FrameDeviceplacer1.ComboBoxlocationManage.Items[i])  = Uppercase(Currentlocationname) then
          begin
            FrameDeviceplacer1.ComboBoxlocationManage.ItemIndex := i;
            break;
          end;
        end;
      end;
    end;

  end;

end;

procedure TFormMain.ComboBoxplanlocationChange(Sender: TObject);
var
  chtype: Integer;
begin
  chtype := FormMain.setalllocationcombos(TComboBox(Sender).text);

  if chtype = 2 then
  begin
    TreeViewpagelist.Items.Clear;
    TreeViewThumbs.Items.Clear;
    TreeViewPlateview.Items.Clear;
    TreeViewprodcontrol.Items.Clear;
    TreeViewNeweddtree.Items.Clear;
    TreeViewplan.Items.Clear;
    TreeViewLogfilter.Items.Clear;
    TreeViewreportfilter.Items.Clear;
    screen.Cursor := crhourglass;
  end
  else
  begin
    // loadids('ComboBoxplanlocationChange');
    Makeplantree(-1);

  end;
  try
  except
    ActionEnable('ComboBoxplanlocationChange');
  end;
end;

procedure TFormMain.UnapplyAll();
var
  INpressruns, prodName: String;
  i, oneuptmpl: Integer;
  Apressrun, Navailpressruns, Neededpressruns: Integer;
  availpressruns: Array [1 .. 200] of Integer;
  ProductionID: Integer;
  pressid: Integer;
begin

  if DBVersion <= 1 then
    exit;
  availpressruns[1] := 0;// #### 20230512 Apressrun;

  ProductionID := Tplantreedata(TreeViewplan.Selected.Data^).ProductionID;
  pressid := Tplantreedata(TreeViewplan.Selected.Data^).pressid;
  INpressruns := '(-99';
  Navailpressruns := 0;
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('select distinct pr.pressrunid,p.productionid,p.presssectionnumber from pressrunid pr (NOLOCK) ,pagetable p (NOLOCK) ');
  Datam1.Query1.SQL.Add
    ('where pr.pressrunid = p.pressrunid and p.productionid = ' +
    IntToStr(ProductionID));
  Datam1.Query1.SQL.Add('and p.pressid = ' + IntToStr(pressid));
  Datam1.Query1.SQL.Add('ORDER BY p.presssectionnumber');
  Datam1.Query1.Open;
  while not Datam1.Query1.Eof do
  begin
    INpressruns := INpressruns + ',' + Datam1.Query1.Fields[0].AsString;
    Apressrun := Datam1.Query1.Fields[0].AsInteger;
    Inc(Navailpressruns);
    availpressruns[Navailpressruns] := Datam1.Query1.Fields[0].AsInteger;
    Datam1.Query1.Next;
  end;
  Datam1.Query1.Close;

  // sELECTE FIRST PRESSRUN
  Apressrun := availpressruns[1];

  INpressruns := INpressruns + ')';
  Neededpressruns := 0;
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('select distinct p.Sectionid,p.editionid from pagetable p (NOLOCK) ');
  Datam1.Query1.SQL.Add('where p.productionid = ' + IntToStr(ProductionID));
  Datam1.Query1.SQL.Add('and p.pressid = ' + IntToStr(pressid));
  Datam1.Query1.Open;
  while not Datam1.Query1.Eof do
  begin
    Inc(Neededpressruns);
    Datam1.Query1.Next;
  end;
  Datam1.Query1.Close;

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('update pressrunid set PlanType = 0 where pressrunid IN ' + INpressruns);
  trysql(Datam1.Query1);

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('update ProductionNames set PlanType = 0 where productionid = ' +
    IntToStr(ProductionID));
  trysql(Datam1.Query1);

  oneuptmpl := -1;
  if (Prefs.RecombineOnUnapply) OR (Prefs.UseMultiPressTemplateLoad) then
  begin
    for i := 1 to NPlatetemplateArray do
    begin
      if (PlatetemplateArray[i].pressid = pressid) and
        (PlatetemplateArray[i].NupOnplate = 1) then
      begin
        oneuptmpl := i;
        break;
      end;
    end;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Update pagetable set flatseparation = separation, flatseparationset = separationset, copyflatseparationset = copyseparationset');
    Datam1.Query1.SQL.Add(',pageposition = 1,pagepositions = ' + '''' +
      '1' + '''');
    // Datam1.Query1.SQL.Add(',sheetnumber=(pageindex-1)/2+1,sheetside=(pageindex+1)%2');
    if (oneuptmpl > -1) then
    begin
      Datam1.Query1.SQL.Add(',TemplateID = ' +
        IntToStr(PlatetemplateArray[oneuptmpl].TemplateID));

    end;
    Datam1.Query1.SQL.Add(',pressrunid = ' + IntToStr(Apressrun));
    Datam1.Query1.SQL.Add('where productionid = ' + IntToStr(ProductionID));

    if Prefs.Debug then
      Datam1.Query1.SQL.SaveToFile
        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
        'Unapply.SQL');
    trysql(Datam1.Query1);

    if (spPlanCenterConsecutivePaginationPossible) then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add(' exec spPlanCenterConsecutivePagination ');
      Datam1.Query1.SQL.Add('@ProductionID = ' + IntToStr(ProductionID));
      trysql(Datam1.Query1);
    end;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('delete pressrunid where ');
    Datam1.Query1.SQL.Add('pressrunid IN ' + INpressruns);
    Datam1.Query1.SQL.Add('and pressrunid <> ' + IntToStr(Apressrun));
    trysql(Datam1.Query1);

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Update pressrunid set SequenceNumber = 1');
    Datam1.Query1.SQL.Add('where  pressrunid = ' + IntToStr(Apressrun));
    trysql(Datam1.Query1);

    (*
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Update pagetable set PressSectionNumber = 1');
      Datam1.Query1.SQL.Add('where  pressrunid = ' + IntToStr(Apressrun));
      trysql(Datam1.Query1);
    *)

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('DELETE FROM PageTable ');
    Datam1.Query1.SQL.Add('where productionid = ' + IntToStr(ProductionID));
    Datam1.Query1.SQL.Add
      ('and  (PageType=3 OR ColorID=6 OR CHARINDEX(''dinkey'',PageName)>0)');
    trysql(Datam1.Query1);

    // 20200908 - delete plate copy 2
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('DELETE FROM PageTable ');
    Datam1.Query1.SQL.Add('where productionid = ' + IntToStr(ProductionID));
    Datam1.Query1.SQL.Add('and CopyNumber>1 ');
    trysql(Datam1.Query1);

    if (Prefs.UseMultiPressTemplateLoad) then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('UPDATE PageTable ');
      Datam1.Query1.SQL.Add('SET Status=30,OutputVersion=0 WHERE Status>30  ');
      Datam1.Query1.SQL.Add('AND productionid = ' + IntToStr(ProductionID));
      trysql(Datam1.Query1);
    end;

  end;

  if (Prefs.LogPlanningActions) then
  begin
    Planloggingtype := 992;
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select TOP 1 Name from ProductionNames (NOLOCK) where productionid = ' +
      IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
    Datam1.Query1.Open;
    prodName := '';
    if not Datam1.Query1.Eof then
      prodName := Datam1.Query1.Fields[0].AsString;
    Datam1.Query1.Close;

    Datam1.Query2.SQL.Clear;
    Datam1.Query2.SQL.Add('Select top 1 separation from pagetable (NOLOCK) ');
    Datam1.Query2.SQL.Add('Where productionid = ' + IntToStr(ProductionID));
    Datam1.Query2.SQL.Add('and active = 1 and pagetype <> 3');
    Datam1.Query2.Open;
    Planloggingseparation := -1;
    if not Datam1.Query2.Eof then
      Planloggingseparation := Datam1.Query2.Fields[0].AsVariant;
    Datam1.Query2.Close;

    if (Planloggingseparation > -1) and (Planloggingtype > 0) And
      (prodName <> '') then
    begin
      if Planloggingmessage = '' then
      begin
        Planloggingmessage := 'Unapplied';
      end;

      SaveEventlog(992, Planloggingseparation, 0, Planloggingmessage, prodName,
        1, Tplantreedata(TreeViewplan.Selected.Data^).ProductionID);
    end;
    Planloggingseparation := -1;
    Planloggingmessage := '';
    Planloggingtype := -1;
  end;
end;

procedure TFormMain.ActionunapplyallExecute(Sender: TObject);
Var
  INpressruns, prodName: String;
  i, oneuptmpl: Integer;
  Apressrun, Navailpressruns, Neededpressruns: Integer;
  availpressruns: Array [1 .. 200] of Integer;

begin
  UnapplyAll();
  Makeplantree(-1);
  findplantreenode;
end;

procedure TFormMain.Savekeeptrees(Locationname: String; ATreeView: TTreeView);
Var
  // treetype : Integer; //1 pagetree 2 platetree 3 planningtree
  N: TTreeNode;
  selpubdate: TDateTime;
  i, tr, Selpubid, SelEdid, Selsecid: Integer;

begin
  // writeMainlogfile('Start proc savekeeptrees');
  try
    if (PageControlMain.ActivePageIndex = VIEW_PLANS) OR (keeptreesLoading) then
      exit;

    if (Locationname = 'All') then
      Locationname := '*';
    (*
      if (ATreeView = TreeViewpagelist) And (CheckBoxAllLocationsPa.checked) then
      begin
      Locationname := '*';
      end;
      if (ATreeView = TreeViewThumbs) And (CheckBoxThumball.checked) then
      begin
      Locationname := '*';
      end;
      if (ATreeView = TreeViewprodcontrol) And (CheckBoxAllLocationsProd.checked) then
      begin
      Locationname := '*';
      end;
    *)
    tr := -1;
    for i := 1 to Nkeeptrees do
    begin
      if keeptrees[i].Locationname = Locationname then
      begin
        tr := i;
        break;
      end;
    end;

    Keeptreeselection.Anyselect := false;
    if ATreeView.Selected <> nil then
    begin
      if ATreeView.Selected.Level > 0 then
      begin
        Keeptreeselection.Anyselect := true;
        N := ATreeView.Selected;
        Keeptreeselection.Selectionlevel := N.Level;
        while N.Level > 0 do
        begin
          case N.Level of
            1:
              Keeptreeselection.Pubdate := TTreeViewpagestype(N.Data^).Pubdate;
            2:
              Keeptreeselection.Publicationid := TTreeViewpagestype(N.Data^)
                .Publicationid;
            3:
              Keeptreeselection.editionid := TTreeViewpagestype(N.Data^)
                .editionid;
            4:
              Keeptreeselection.Sectionid := TTreeViewpagestype(N.Data^)
                .Sectionid;
          end;
          N := N.Parent;
        end;

        if (N.Level = 0) and (PageControlMain.ActivePageIndex = VIEW_PLATES)
        then
        begin
          Keeptreeselection.pressid := tNames1.pressnametoid(N.text);
        end;

      end;
    end;

    if tr > 0 then
    begin

      keeptrees[tr].Ntree := -1;

      SetLength(keeptrees[tr].tree, ATreeView.Items.Count + 10);

      if PageControlMain.ActivePageIndex = VIEW_PRODUCTIONS then
      begin
      end;

      for i := 0 to ATreeView.Items.Count - 1 do
      begin
        if ((ATreeView.Items[i].Level > 0) OR
          (PageControlMain.ActivePageIndex = VIEW_PLATES)) and
          ((ATreeView.Items[i].Expanded) OR (ATreeView.Items[i].Selected)) then
        begin
          Inc(keeptrees[tr].Ntree);

          selpubdate := 0;
          Selpubid := -1;
          SelEdid := -1;
          Selsecid := -1;

          if (ATreeView.Items[i].Level = 0) then
          begin
            keeptrees[tr].tree[keeptrees[tr].Ntree].Level :=
              ATreeView.Items[i].Level;
            keeptrees[tr].tree[keeptrees[tr].Ntree].Expanded :=
              ATreeView.Items[i].Expanded;
            keeptrees[tr].tree[keeptrees[tr].Ntree].Selected :=
              ATreeView.Items[i].Selected;

            keeptrees[tr].tree[keeptrees[tr].Ntree].Pubdate := selpubdate;
            keeptrees[tr].tree[keeptrees[tr].Ntree].Publicationid := Selpubid;
            keeptrees[tr].tree[keeptrees[tr].Ntree].editionid := SelEdid;
            keeptrees[tr].tree[keeptrees[tr].Ntree].Sectionid := Selsecid;
            keeptrees[tr].tree[keeptrees[tr].Ntree].pressid :=
              tNames1.pressnametoid(ATreeView.Items[i].text);

          end
          else
          begin

            if TTreeViewpagestype(ATreeView.Items[i].Data^).kind > 0 then
              selpubdate := TTreeViewpagestype
                (ATreeView.Items[i].Data^).Pubdate;
            if TTreeViewpagestype(ATreeView.Items[i].Data^).kind > 1 then
              Selpubid := TTreeViewpagestype(ATreeView.Items[i].Data^)
                .Publicationid;
            if TTreeViewpagestype(ATreeView.Items[i].Data^).kind > 2 then
              SelEdid := TTreeViewpagestype(ATreeView.Items[i].Data^).editionid;
            if TTreeViewpagestype(ATreeView.Items[i].Data^).kind > 4 then
              Selsecid := TTreeViewpagestype(ATreeView.Items[i].Data^)
                .Sectionid;

            keeptrees[tr].tree[keeptrees[tr].Ntree].Level :=
              ATreeView.Items[i].Level;
            keeptrees[tr].tree[keeptrees[tr].Ntree].Expanded :=
              ATreeView.Items[i].Expanded;
            keeptrees[tr].tree[keeptrees[tr].Ntree].Selected :=
              ATreeView.Items[i].Selected;

            keeptrees[tr].tree[keeptrees[tr].Ntree].Pubdate := selpubdate;
            keeptrees[tr].tree[keeptrees[tr].Ntree].Publicationid := Selpubid;
            keeptrees[tr].tree[keeptrees[tr].Ntree].editionid := SelEdid;
            keeptrees[tr].tree[keeptrees[tr].Ntree].Sectionid := Selsecid;

            if PageControlMain.ActivePageIndex = VIEW_PLATES then
              keeptrees[tr].tree[keeptrees[tr].Ntree].pressrunid :=
                TTreeViewpagestype(ATreeView.Items[i].Data^).pressrunid
            else
              keeptrees[tr].tree[keeptrees[tr].Ntree].pressrunid := -1;

          end;
        end;
      end;
    end;
  except
    writeMainlogfile('Except savekeeptrees ' +
      IntToStr(PageControlMain.ActivePageIndex));
  end;
  // writeMainlogfile('End proc savekeeptrees');
end;

procedure TFormMain.Loadkeeptrees(Locationname: String; ATreeView: TTreeView);
Var
  // treetype : Integer; //1 pagetree 2 platetree 3 planningtree
  i, tr, itr, ipress: Integer;
  found: Integer;
  selit: Integer;
  minlevel: Integer;
  Foundpress: Boolean;
  presstofind: String;
  Npress: Integer;
  Pressstatarts: Array [1 .. 20] of Integer;
begin
  keeptreesLoading := true;
  Foundpress := false;
  writeMainlogfile('Start proc Loadkeeptrees');

  // ### NAN 2017210517 - ComboBoxpalocationNY filter is master filter
  // all other location/press combos must show the same

  if (ComboBoxpalocationNY.text = 'All') then
    Locationname := '*';

  ATreeView.Items.BeginUpdate;
  try

    (* if (ATreeView = TreeViewpagelist) And (CheckBoxAllLocationsPa.checked) then
      begin
      Locationname := '*';
      end;
      if (ATreeView = TreeViewThumbs) And (CheckBoxThumball.checked) then
      begin
      Locationname := '*';
      end;
      if (ATreeView = TreeViewprodcontrol) And (CheckBoxAllLocationsProd.checked) then
      begin
      Locationname := '*';
      end; *)

    tr := -1;
    selit := -1;
    for i := 1 to Nkeeptrees do
    begin
      if keeptrees[i].Locationname = Locationname then
      begin
        tr := i;
        break;
      end;
    end;
    if tr > 0 then
    begin
      // 0 mulig presse 1 pubdate 2 publ 3 ed 4 sec

      Npress := 1;
      Pressstatarts[1] := 0;

      if PageControlMain.ActivePageIndex = VIEW_PLATES then
      begin
        (*
          if Keeptreeselection.pressid  < 1 then
          begin
          if FoxrmSettings.EditDefaultplateselect.Text <> '' then
          begin
          Keeptreeselection.pressid := tnames1.pressnametoid(FoxrmSettings.EditDefaultplateselect.Text);
          end;
          end;
        *)

        Npress := 0;
        Pressstatarts[1] := 0;

        if (Prefs.PlateTreeExpansion = 0) OR (Keeptreeselection.pressid < 1)
        then
        begin
          for ipress := 0 to ATreeView.Items.Count - 1 do
          begin
            if ATreeView.Items[ipress].Level = 0 then
            begin
              Inc(Npress);
              Pressstatarts[Npress] := ipress;
            end;
          end;
        End
        else
        begin
          for ipress := 0 to ATreeView.Items.Count - 1 do
          begin
            if (ATreeView.Items[ipress].Level = 0) then
            begin
              if ATreeView.Items[ipress].text = tNames1.pressnameIDtoname
                (Keeptreeselection.pressid) then
              begin
                Npress := 1;
                Pressstatarts[Npress] := ipress;

                break;
              end;
            end;
          end;
        end;
      end;

      Pressstatarts[Npress + 1] := ATreeView.Items.Count - 1;

      for ipress := 1 to Npress do
      begin
        for itr := 0 to keeptrees[tr].Ntree do
        begin

          found := -1;
          if (keeptrees[tr].tree[itr].Expanded) then
          begin

            for i := Pressstatarts[ipress] to ATreeView.Items.Count - 1 do
            begin
              if (ATreeView.Items[i].Level > 0) then
              begin
                if keeptrees[tr].tree[itr].Level = ATreeView.Items[i].Level then
                begin
                  case keeptrees[tr].tree[itr].Level of
                    1:
                      begin
                        if TTreeViewpagestype(ATreeView.Items[i].Data^)
                          .Pubdate = keeptrees[tr].tree[itr].Pubdate then
                        begin
                          found := i;
                          break;
                        end;
                      end;
                    2:
                      begin

                        if (TTreeViewpagestype(ATreeView.Items[i].Data^)
                          .Pubdate = keeptrees[tr].tree[itr].Pubdate) and
                          (TTreeViewpagestype(ATreeView.Items[i].Data^)
                          .Publicationid = keeptrees[tr].tree[itr].Publicationid)
                        then
                        begin
                          found := i;
                          break;
                        end;
                      end;
                    3:
                      begin
                        if (TTreeViewpagestype(ATreeView.Items[i].Data^)
                          .Pubdate = keeptrees[tr].tree[itr].Pubdate) and
                          (TTreeViewpagestype(ATreeView.Items[i].Data^)
                          .Publicationid = keeptrees[tr].tree[itr]
                          .Publicationid) and
                          (TTreeViewpagestype(ATreeView.Items[i].Data^)
                          .editionid = keeptrees[tr].tree[itr].editionid) then
                        begin
                          found := i;
                          break;
                        end;
                      end;
                    4:
                      begin
                        if PageControlMain.ActivePageIndex = VIEW_PLATES then
                        begin
                          if (TTreeViewpagestype(ATreeView.Items[i].Data^)
                            .Pubdate = keeptrees[tr].tree[itr].Pubdate) and
                            (TTreeViewpagestype(ATreeView.Items[i].Data^)
                            .Publicationid = keeptrees[tr].tree[itr]
                            .Publicationid) and
                            (TTreeViewpagestype(ATreeView.Items[i].Data^)
                            .editionid = keeptrees[tr].tree[itr].editionid) and
                            ((TTreeViewpagestype(ATreeView.Items[i].Data^)
                            .Sectionid = keeptrees[tr].tree[itr].Sectionid) and
                            ((TTreeViewpagestype(ATreeView.Items[i].Data^)
                            .pressrunid = keeptrees[tr].tree[itr].pressrunid) or
                            (keeptrees[tr].tree[itr].pressrunid < 0))) then
                          begin
                            found := i;
                            break;
                          end;
                        end
                        else
                        begin
                          if (TTreeViewpagestype(ATreeView.Items[i].Data^)
                            .Pubdate = keeptrees[tr].tree[itr].Pubdate) and
                            (TTreeViewpagestype(ATreeView.Items[i].Data^)
                            .Publicationid = keeptrees[tr].tree[itr]
                            .Publicationid) and
                            (TTreeViewpagestype(ATreeView.Items[i].Data^)
                            .editionid = keeptrees[tr].tree[itr].editionid) and
                            (TTreeViewpagestype(ATreeView.Items[i].Data^)
                            .Sectionid = keeptrees[tr].tree[itr].Sectionid) then
                          begin
                            found := i;
                            break;
                          end;
                        end;
                      end;
                  end;

                end;
              end
              else
              begin

              end;
            end;

          end;

          if found > -1 then
          begin
            if ATreeView.Items[found].Level = 1 then
              ATreeView.Items[found].Parent.Expand(false);
            if keeptrees[tr].tree[itr].Expanded then
              ATreeView.Items[found].Expand(false);
          end;
        end;
      end;

      selit := -1;
      Foundpress := true;
      if (PageControlMain.ActivePageIndex = VIEW_PLATES) and
        (Keeptreeselection.pressid > 0) then
      begin
        Foundpress := false;
        presstofind := tNames1.pressnameIDtoname(Keeptreeselection.pressid);
      end;

      writeMainlogfile('Start find selection');
      if (Keeptreeselection.Anyselect) then
      begin

        for i := 0 to ATreeView.Items.Count - 1 do
        begin
          if (not Foundpress) and (presstofind = ATreeView.Items[i].text) then
            Foundpress := true;
          if Foundpress then
          begin
            if (ATreeView.Items[i].Level = Keeptreeselection.Selectionlevel)
            then
            begin
              if ATreeView.Items[i].Level = 4 then
              begin
                if (Keeptreeselection.Pubdate = TTreeViewpagestype
                  (ATreeView.Items[i].Data^).Pubdate) and
                  (Keeptreeselection.Publicationid = TTreeViewpagestype
                  (ATreeView.Items[i].Data^).Publicationid) and
                  (Keeptreeselection.editionid = TTreeViewpagestype
                  (ATreeView.Items[i].Data^).editionid) and
                  (Keeptreeselection.Sectionid = TTreeViewpagestype
                  (ATreeView.Items[i].Data^).Sectionid) then
                begin
                  selit := i;
                  break;
                end;
              end;
              if ATreeView.Items[i].Level = 3 then
              begin
                if (Keeptreeselection.Pubdate = TTreeViewpagestype
                  (ATreeView.Items[i].Data^).Pubdate) and
                  (Keeptreeselection.Publicationid = TTreeViewpagestype
                  (ATreeView.Items[i].Data^).Publicationid) and
                  (Keeptreeselection.editionid = TTreeViewpagestype
                  (ATreeView.Items[i].Data^).editionid) then
                begin
                  selit := i;
                  break;
                end;
              end;
              if ATreeView.Items[i].Level = 2 then
              begin
                if (Keeptreeselection.Pubdate = TTreeViewpagestype
                  (ATreeView.Items[i].Data^).Pubdate) and
                  (Keeptreeselection.Publicationid = TTreeViewpagestype
                  (ATreeView.Items[i].Data^).Publicationid) then
                begin
                  selit := i;
                  break;
                end;
              end;
              if ATreeView.Items[i].Level = 1 then
              begin
                if (Keeptreeselection.Pubdate = TTreeViewpagestype
                  (ATreeView.Items[i].Data^).Pubdate) then
                begin
                  selit := i;
                  break;
                end;
              end;
            end;
          end;
        end;
      end;
      writeMainlogfile('End find selection');

      if (selit > -1)
      { and ((PageControlMain.ActivePageIndex <> VIEW_PLATES) OR (Foundpress)) }
      then
      begin
        ATreeView.Items[selit].Selected := true;
      end;
    end;

    if ATreeView.Items.Count > 0 then
    begin

      if { (not ATreeView.Items[0].Expanded) } true then
      begin

        minlevel := Prefs.TreeAutoExpandLevel;
        // StrToInt(FoxrmSettings.EditNewautoexpand.Text);
        for i := 0 to ATreeView.Items.Count - 1 do
        begin
          if ATreeView.Items[i].Level < minlevel then
            ATreeView.Items[i].Expand(false);
        end;

      end;
    end;

    if ATreeView.Selected <> nil then
    begin
      ATreeView.Selected.MakeVisible;
    end;
  Except

    writeMainlogfile('Except Loadkeeptrees ' +
      IntToStr(PageControlMain.ActivePageIndex));
  end;

  ATreeView.Items.EndUpdate;

  keeptreesLoading := false;
  writeMainlogfile('End proc Loadkeeptrees');
end;

procedure TFormMain.SelectProductionTreeNode(Publicationid: Integer;
  Pubdate: TDateTime);
var
  foundNode, i: Integer;
begin
  foundNode := -1;

  for i := 0 to TreeViewprodcontrol.Items.Count - 1 do
  begin
    if TreeViewprodcontrol.Items[i].Level = 2 then
    begin
      if (TTreeViewpagestype(TreeViewprodcontrol.Items[i].Data^)
        .Pubdate = Pubdate) and
        (TTreeViewpagestype(TreeViewprodcontrol.Items[i].Data^)
        .Publicationid = Publicationid) then
      begin
        foundNode := i;
        break;
      end;
    end;
  end;

  if (foundNode > -1) then
  begin
    TreeViewprodcontrol.Items[foundNode].Selected := true;
    TreeViewprodcontrol.Repaint;
  end;

end;

procedure TFormMain.TreeExpanded(Sender: TObject; Node: TTreeNode);
Var
  T: string;
begin
  if activated then
  begin
    if TTreeView(Sender).Visible then // NYTREE
    begin
      sleep(100);
      (* case PageControlMain.ActivePageIndex of
        0 : T := ComboBoxpalocationNy.Text;
        1 : T := ComboBoxThumblocationNy.Text;
        2 : T := ComboBoxPlatelocation.Text;
        3 : T := ComboBoxprodlocationNy.Text;
        4 : T := ComboBoxeditionlocation.Text;
        6 : T := ComboBoxLoglocation.Text;
        7 : T := ComboBoxreportlocation.Text;
        end;
        sleep(100);
        Savekeeptrees(T,TTreeView(sender));
      *)
      Savekeeptrees(ComboBoxpalocationNY.text, TTreeView(Sender));
      sleep(100);
    end;
  end;
end;

procedure TFormMain.TreeCollapsed(Sender: TObject; Node: TTreeNode);
Var
  T: string;
begin
  if TTreeView(Sender).Visible then // NYTREE
  begin
    (* case PageControlMain.ActivePageIndex of
      0 : T := ComboBoxpalocationNy.Text;
      1 : T := ComboBoxThumblocationNy.Text;
      2 : T := ComboBoxPlatelocation.Text;
      3 : T := ComboBoxprodlocationNy.Text;
      4 : T := ComboBoxeditionlocation.Text;
      6 : T := ComboBoxLoglocation.Text;
      7 : T := ComboBoxreportlocation.Text;
      end;
      Savekeeptrees(t,TTreeView(sender));
    *)
    Savekeeptrees(ComboBoxpalocationNY.text, TTreeView(Sender));
  end;
end;

procedure TFormMain.PBExListviewOKLogCustomDrawSubItem(Sender: TCustomListView;
  Item: TListItem; SubItem: Integer; State: TCustomDrawState;
  var DefaultDraw: Boolean);
Var
  T: string;
begin

  Sender.Canvas.Brush.Color := clWhite;
  Sender.Canvas.Brush.Color := clWhite;
  Sender.Canvas.Font := FormMain.Font;
  Sender.Canvas.Font.Color := clblack;
  if Item.Selected then
  begin
    Sender.Canvas.Brush.Color := clActiveCaption;
    Sender.Canvas.Font := FormMain.Font;
    Sender.Canvas.Font.Color := clHighlightText;
  end;

  DefaultDraw := true;

  SubItem := SubItem - 1;
  if Item.SubItems.Count < SubItem then
    exit;
  T := Item.SubItems[SubItem];
  if T <> '' then
  begin
    if SubItem = 0 then
    begin
      Sender.Canvas.Brush.Color := inittypes.geteventcolorfromnumber
        (StrToInt(Item.SubItems[Item.SubItems.Count - 1]));
    end;
  end;
  if (ColorToRGB(Sender.Canvas.Brush.Color) < 100) then
    Sender.Canvas.Font.Color := clWhite
  else
    Sender.Canvas.Font.Color := clblack;
  DefaultDraw := true;
end;

procedure TFormMain.ComboBoxlocationManageChange(Sender: TObject);
begin
  FrameDeviceplacer1.ComboBoxlocationManageChange(Sender);

end;

procedure TFormMain.ComboBoxlogeventChange(Sender: TObject);
begin
  ActionLogrefresh.Execute;
end;

procedure TFormMain.SaveEventlog(Event: Integer; Separation: Integer;
  FlatSeparation: Integer; ErrorMsg: String; filename: String; Version: Integer;
  MiscInt: Longint); // Productionid
Var
  spsize: Integer;
  description: string;
begin
  if Separation < 0 then
    Separation := 0;
  if FlatSeparation < 0 then
    FlatSeparation := 0;
  if Uppercase(filename) = 'FILENAME' then
    filename := '';

  if (Prefs.CurrentWindowsDomain <> '') then
    description := 'PlanCenter (' + TUtils.GetThisComputerName + ') ' +
      Prefs.CurrentWindowsDomain + '\' + Prefs.CurrentWindowsUser
  else
    description := 'PlanCenter (' + TUtils.GetThisComputerName + ') ' +
      Prefs.Username;

  spsize := Datam1.getspparamcount('spAddLogEntry');

  Datam1.Query2.SQL.Clear;

  if filename <> '' then
  begin

    Datam1.Query2.SQL.Clear;
    Datam1.Query2.SQL.Add('exec spAddLogEntry ');
    Datam1.Query2.SQL.Add(' @ProcessID = ' + IntToStr(PLCProcessID));
    Datam1.Query2.SQL.Add(' ,@Event = ' + IntToStr(Event));
    Datam1.Query2.SQL.Add(' ,@Separation = ' + IntToStr(Separation));
    Datam1.Query2.SQL.Add(' ,@FlatSeparation = ' + IntToStr(FlatSeparation));
    Datam1.Query2.SQL.Add(' ,@ErrorMsg = ' + '''' + ErrorMsg + '''');
    if spsize > 5 then
      Datam1.Query2.SQL.Add(' ,@DaysToKeep = 0 ');
    if spsize > 6 then
      Datam1.Query2.SQL.Add(' ,@FileName = ' + '''' + filename + '''');
    if spsize > 7 then
      Datam1.Query2.SQL.Add(' ,@Version = ' + IntToStr(Version));
    if spsize > 8 then
      Datam1.Query2.SQL.Add(' ,@MiscInt = ' + IntToStr(MiscInt));
    if spsize > 9 then
      Datam1.Query2.SQL.Add(' ,@MiscString = ' + '''' + description + '''');

    FormMain.trysql(Datam1.Query2);

  end;

end;

procedure TFormMain.FindDialoglogFind(Sender: TObject);
var
  T: String;

  function Machit(textinview: String): Boolean;
  begin
    result := false;
    if not(frmatchcase IN FindDialoglog.options) then
      textinview := Uppercase(textinview);

    if frwholeword IN FindDialoglog.options then
      result := T = textinview
    else
      result := pos(T, textinview) > 0;
  end;

var
  i: Integer;
  Aview: TPBExListview;
  frpos, topos: Integer;
  foundany: Boolean;
begin
  foundany := false;
  T := FindDialoglog.FindText;
  if not(frmatchcase IN FindDialoglog.options) then
    T := Uppercase(T);

  case PageControlLog.ActivePageIndex of
    0:
      Aview := PBExListviewOKLog;
    1:
      Aview := PBExListviewErrorLog;

  end;

  if frdown IN FindDialoglog.options then
  begin
    frpos := logfindpos + 1;
    topos := Aview.Items.Count - 1;
    if frpos < Aview.Items.Count - 1 then
    begin
      for i := frpos to topos do
      begin
        if Machit(Aview.Items[i].SubItems[1]) then
        begin
          foundany := true;
          logfindpos := i;
          Aview.Items[i].Selected := true;
          Aview.Selected := Aview.Items[i];
          Aview.Items[i].MakeVisible(false);
          break;
        end;
      end;
    end;
  end
  else
  begin
    frpos := logfindpos - 1;
    topos := 0;
    if frpos > -1 then
    begin
      for i := frpos downto topos do
      begin
        if Machit(Aview.Items[i].SubItems[1]) then
        begin
          foundany := true;
          logfindpos := i;
          Aview.Items[i].Selected := true;
          Aview.Selected := Aview.Items[i];
          Aview.Items[i].MakeVisible(false);
          break;
        end;
      end;
    end;

  end;
  if not foundany then
    beep;

end;

procedure TFormMain.ActionlogfindExecute(Sender: TObject);
begin
  logfindpos := 0;
  FindDialoglog.FindText := '';
  if PageControlMain.ActivePageIndex = VIEW_LOGS then
  begin
    case PageControlLog.ActivePageIndex of
      0:
        begin
          if PBExListviewOKLog.Selected <> nil then
          begin
            logfindpos := PBExListviewOKLog.Selected.Index;
            FindDialoglog.FindText := PBExListviewOKLog.Selected.SubItems[1];
          end;
        end;
      1:
        begin
          if PBExListviewErrorLog.Selected <> nil then
          begin
            logfindpos := PBExListviewErrorLog.Selected.Index;
            FindDialoglog.FindText := PBExListviewErrorLog.Selected.SubItems[1];
          end;
        end;
    end;
    if FindDialoglog.Execute then
    begin

    end;
  end;
end;

procedure TFormMain.changepressformatree(Var Atree: TTreeView;
  LocationID: Longint);
var
  ProductionID, pressid: Integer;
  INpressruns: String;
  runnode: TTreeNode;

begin
  try
    try
      if Atree.Selected = nil then
        exit;
      runnode := Atree.Selected;
      if runnode = nil then
        exit;
      if runnode.Level < 2 then
        exit;

      ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Select TOP 1 pressid from pagetable (NOLOCK)  ');
      Datam1.Query1.SQL.Add('Where productionid = ' + IntToStr(ProductionID));
      Datam1.Query1.Open;

      if not Datam1.Query1.Eof then
      begin
        pressid := Datam1.Query1.Fields[0].AsInteger;
        Datam1.Query1.Close;
      end
      else
      begin
        Datam1.Query1.Close;
        exit;
      end;
      INpressruns := '';
      if FormNewChangepress.init(pressid, ProductionID, LocationID,
        TTreeViewpagestype(runnode.Data^).Publicationid,
        TTreeViewpagestype(runnode.Data^).Pubdate, INpressruns) then
        FormNewChangepress.ShowModal;
    Except

    end;
  finally

  end;
end;

procedure TFormMain.ActionpltrechangepressExecute(Sender: TObject);
begin
  changepressformatree(TreeViewPlateview,
    tNames1.locationnametoid(ComboBoxpalocationNY.text));
  ActionPlaterefreshtree.Execute;
end;

procedure TFormMain.ActionnewplanMoveExecute(Sender: TObject);
Var
  INpressruns: String;
  N: TTreeNode;
  T: String;
begin
  try
    Formprodplan.ItsArepair := false;
    if TreeViewplan.Selected = nil then
      exit;
    N := TreeViewplan.Selected;
    if N.Level < 1 then
      exit;

    plateframespressid := Tplantreedata(N.Data^).pressid;
    plateframeslocationid := Tplantreedata(N.Data^).LocationID;
    plateframesPublicationid := Tplantreedata(N.Data^).Publicationid;
    plateframesPubdate := Tplantreedata(N.Data^).Pubdate;

    while N.Level > 1 do
      N := N.Parent;
    T := datetostr(plateframesPubdate);
    if T <> '' then
      beep;
    INpressruns := '';
    if FormNewChangepress.init(plateframespressid, plateframesproductionid,
      plateframeslocationid, plateframesPublicationid, plateframesPubdate,
      INpressruns) then
      FormNewChangepress.ShowModal;

    ActionnewplanrefreshExecute(Self);

  finally
    Setplanlock(false);
  end;
end;

function TFormMain.compagerplatelayouts(Tmpl1: Integer; Tmpl2: Longint)
  : Boolean;
Var
  i1: Integer;
begin
  result := true;
  if (PlatetemplateArray[Tmpl1].NupOnplate <> PlatetemplateArray[Tmpl2]
    .NupOnplate) then
  begin
    result := false;
  end
  else
  begin
    for i1 := 1 to PlatetemplateArray[Tmpl1].NupOnplate do
    begin
      if (PlatetemplateArray[Tmpl1].PageNumberingFront[i1] <> PlatetemplateArray
        [Tmpl2].PageNumberingFront[i1]) or
        (PlatetemplateArray[Tmpl1].PageNumberingBack[i1] <> PlatetemplateArray
        [Tmpl2].PageNumberingBack[i1]) then
      begin
        result := false;
        break;
      end;
    end;
  end;

end;

procedure TFormMain.ActionPlanCopytopressExecute(Sender: TObject);
begin
  Formprodplan.ItsArepair := false;
  Standardplantonewpress();
end;

procedure TFormMain.ActionplatecopypressExecute(Sender: TObject);
Var
  aktproductioninplates: Integer;

begin
  // ComboBoxplanlocation.Items := ComboBoxPlatelocation.Items;
  // ComboBoxplanlocation.ItemIndex := ComboBoxPlatelocation.ItemIndex;

  if (ComboBoxpalocationNY.Enabled) and (ComboBoxpalocationNY.text <> 'All')
  then
    ComboBoxplanlocation.ItemIndex := ComboBoxplanlocation.Items.IndexOf
      (ComboBoxpalocationNY.text);

  aktproductioninplates := TTreeViewpagestype(TreeViewPlateview.Selected.Data^)
    .ProductionID;

  Makeplantree(aktproductioninplates);

  if TreeViewplan.Selected <> nil then
    selecttheplanfromtree(TreeViewplan.Selected);

  Standardplantonewpress();

end;

function TFormMain.differentremotefolder(fromlocationid: Integer;
  tolocationid: Longint): Boolean;
Var
  fromfolder, tofolder: String;
begin
  result := fromlocationid <> tolocationid;

  try
    fromfolder := IntToStr(fromlocationid);
    tofolder := IntToStr(tolocationid);

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add
      ('Select locationid,RemoteFolder from locationnames (NOLOCK) ');
    Datam1.Query3.SQL.Add('Where locationid = ' + IntToStr(fromlocationid));
    Datam1.Query3.SQL.Add('or locationid = ' + IntToStr(tolocationid));
    Tryopen(Datam1.Query3);

    while not Datam1.Query3.Eof do
    begin
      if Datam1.Query3.Fields[0].AsInteger = fromlocationid then
        fromfolder := Uppercase(Datam1.Query3.Fields[1].AsString);
      if Datam1.Query3.Fields[0].AsInteger = tolocationid then
        tofolder := Uppercase(Datam1.Query3.Fields[1].AsString);
      Datam1.Query3.Next;
    end;
    Datam1.Query3.Close;

    result := fromfolder <> tofolder;
  Except

  end;
end;

procedure TFormMain.ActionprodcopytopressExecute(Sender: TObject);
Var
  aktproductioninprod, i: Integer;
  INpressruns: String;
begin
  try

    if TreeViewprodcontrol.Selected = nil then
      exit;
    if TreeViewprodcontrol.Selected.Level < 0 then
      exit;

    if (ComboBoxpalocationNY.Enabled) and (ComboBoxpalocationNY.text <> 'All')
    then
      ComboBoxplanlocation.ItemIndex := ComboBoxplanlocation.Items.IndexOf
        (ComboBoxpalocationNY.text);

    INpressruns := '(-99';

    for i := 1 to StringGridprods.RowCount do
    begin
      if StringGridprodsdata[i].Selected then
      begin
        INpressruns := INpressruns + ',' +
          IntToStr(StringGridprodsdata[i].pressrunid);
      end;
    end;

    INpressruns := INpressruns + ')';
    if INpressruns = '(-99)' then
    begin
      exit;
    end;

    aktproductioninprod := -1;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select TOP 1 productionid from pagetable (NOLOCK)  ');
    Datam1.Query1.SQL.Add('Where pressrunid IN ' + INpressruns);
    Datam1.Query1.Open;

    if not Datam1.Query1.Eof then
    begin
      aktproductioninprod := Datam1.Query1.Fields[0].AsInteger;
    End
    else
      exit;
    Datam1.Query1.Close;

    Makeplantree(aktproductioninprod);

    if TreeViewplan.Selected <> nil then
      selecttheplanfromtree(TreeViewplan.Selected);
    Standardplantonewpress();

  Except
  end;
end;

function TFormMain.Getdafaultdeadline(Pubdate: TDateTime;
  Publicationid: Longint): TDateTime;
var
  deadl, adedl
  // ,dedltime
    : TDateTime;
  daybefore: Integer;
begin
  daybefore := 2;
  daybefore := daybefore - 1;
  deadl := DateOf(Pubdate);
  deadl := EncodeDateTime(YearOf(Pubdate), MonthOf(Pubdate), DayOf(Pubdate),
    18, 0, 0, 0);

  result := deadl;
  if publdeadpossible then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select TOP 1 deadline from publicationnames (NOLOCK) ');
    Datam1.Query1.SQL.Add('where publicationid = ' + IntToStr(Publicationid));
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
    begin
      adedl := Datam1.Query1.Fields[0].AsDateTime;
      if YearOf(adedl) > 1980 then
      begin
        daybefore := DayOf(adedl);
        daybefore := daybefore - 1;
        deadl := EncodeDateTime(YearOf(Pubdate), MonthOf(Pubdate),
          DayOf(Pubdate), 0, 0, 0, 0);
        daybefore := 0 - daybefore;
        deadl := IncDay(deadl, daybefore);
        deadl := deadl + TimeOf(adedl);
        result := deadl;
      end;
    end;
    Datam1.Query1.Close;
  end;
end;

procedure TFormMain.ActionunknowprevExecute(Sender: TObject);
Var
  i: Integer;
begin
  try
    for i := 0 to ListViewunkowfiles.Items.Count - 1 do
    begin
      if ListViewunkowfiles.Items[i].Selected then
      begin
        Formtiffpreview.Tiff_filename := ListViewunkowfiles.Items[i]
          .SubItems[3];
        Formtiffpreview.caption := Formtiffpreview.Tiff_filename;
        Formtiffpreview.ImageEnView1.IO.LoadFromFileTIFF
          (Formtiffpreview.Tiff_filename);
        Formtiffpreview.ShowModal;
        Formtiffpreview.caption := 'Tiff preview';

        (*
          Formresampleprogress.ProgressBar1.Position := 0;
          Formresampleprogress.show;
          Formresampleprogress.Repaint;
          if Formfilepreview.Genprevfiles then
          begin
          Formresampleprogress.Close;
          Formfilepreview.ImageEn1.IO.LoadFromFileJpeg(IncludeTrailingBackSlash(TUtils.GetTempDirectory())+'Prevtemp\aprev.jpg');
          Formfilepreview.showmodal;
          End
          else
          Formresampleprogress.Close;

        *)
        break;
      end;
    end;
  Finally
    (*
      if Formresampleprogress.Active then
      Formresampleprogress.Close;
    *)
  end;
end;

procedure TFormMain.ActionunknowcolorprevExecute(Sender: TObject);
var
  i, i2, fcounter, Isel: Integer;
  Nocolorprev: Boolean;
begin
  try
    Nocolorprev := false;
    Isel := -1;
    for i := 0 to ListViewunkowfiles.Items.Count - 1 do
    begin
      if ListViewunkowfiles.Items[i].Selected then
      begin
        Isel := i;
        break;
      end;
    end;

    if Isel > -1 then
    begin

      Formfilepreview.Nfiles := 1;
      Formfilepreview.Files[1].Name := ListViewunkowfiles.Items[Isel]
        .SubItems[3];
      Formfilepreview.Files[1].Color := ListViewunkowfiles.Items[Isel]
        .SubItems[0];
      if ListViewunkowfiles.Items[Isel].SubItems[0] = '?' then
      begin
        Formfilepreview.Files[1].Color := 'K';
        Nocolorprev := true;
      end
      else
      begin
        fcounter := 0;
        Formfilepreview.Files[1].Color := ListViewunkowfiles.Items[Isel]
          .SubItems[0];
        for i2 := 0 to ListViewunkowfiles.Items.Count - 1 do
        begin
          if i2 <> Isel then
          begin
            if (ListViewunkowfiles.Items[i2].SubItems[4]
              = ListViewunkowfiles.Items[Isel].SubItems[4]) then
            begin
              if (ListViewunkowfiles.Items[i2].SubItems[0] = '?') then
              begin
                Nocolorprev := true;
                break;
              end;
              Inc(fcounter);
              if (Formfilepreview.Nfiles < 4) then
                Inc(Formfilepreview.Nfiles);
              Formfilepreview.Files[Formfilepreview.Nfiles].Name :=
                ListViewunkowfiles.Items[i2].SubItems[3];
              Formfilepreview.Files[Formfilepreview.Nfiles].Color :=
                ListViewunkowfiles.Items[i2].SubItems[0];
            end;
          end;
          if fcounter > 5 then
            break;
        end;
        if fcounter > 4 then
        begin
          Nocolorprev := true;
          Formfilepreview.Nfiles := 1;
        end;
      end;
      if Nocolorprev then
      begin
        Formfilepreview.Nfiles := 1;
        Formfilepreview.Files[1].Color := 'K';
      end;

      if Nocolorprev then
      begin
        MessageDlg
          ('not all colors can be determined - the file will be shown as mono',
          mtInformation, [mbOk], 0);
      end;

      Formresampleprogress.ProgressBar1.Position := 0;
      Formresampleprogress.Show;
      Formresampleprogress.Repaint;
      if Formfilepreview.Genprevfiles then
      begin
        Formresampleprogress.Close;
        Formfilepreview.ImageEn1.IO.LoadFromFileJpeg
          (IncludeTrailingBackSlash(TUtils.GetTempDirectory()) +
          'Prevtemp\aprev.jpg');
        Formfilepreview.ShowModal;
      End
      else
        Formresampleprogress.Close;
    end;

  Finally
    if Formresampleprogress.Active then
      Formresampleprogress.Close;
  end;
end;

procedure TFormMain.ActiontoolmakeedplanExecute(Sender: TObject);
begin
  if (ExportPressTemplateDataPossible) then
    ExportPressTemplateDataDialog(DLLErrormessage);
end;

procedure TFormMain.ActionconfigunknowcolorsetupExecute(Sender: TObject);
begin
  FormColordetectionsetup.ShowModal;
end;

procedure TFormMain.ActionproductionchrpressExecute(Sender: TObject);
var
  Publicationid, ProductionID, pressid, LocationID: Integer;
  Pubdate: TDateTime;
  INpressruns: String;
  i, pressrunid: Integer;
begin
  try
    try
      if TreeViewprodcontrol.Selected = nil then
        exit;
      if TreeViewprodcontrol.Selected.Level < 0 then
        exit;

      pressrunid := -1;
      INpressruns := '(-99';

      for i := 1 to StringGridprods.RowCount do
      begin
        if StringGridprodsdata[i].Selected then
        begin
          pressrunid := StringGridprodsdata[i].pressrunid;
          INpressruns := INpressruns + ',' +
            IntToStr(StringGridprodsdata[i].pressrunid);
        end;
      end;

      INpressruns := INpressruns + ')';
      if INpressruns = '(-99)' then
      begin
        exit;
      end;

      ProductionID := -1;

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select TOP 1 productionid,publicationid,pubdate,pressid,locationid from pagetable (Nolock)');
      Datam1.Query1.SQL.Add('Where pressrunid IN ' + INpressruns);
      Datam1.Query1.Open;

      if not Datam1.Query1.Eof then
      begin
        ProductionID := Datam1.Query1.Fields[0].AsInteger;
        Publicationid := Datam1.Query1.Fields[1].AsInteger;
        Pubdate := Datam1.Query1.Fields[2].AsDateTime;
        pressid := Datam1.Query1.Fields[3].AsInteger;
        LocationID := Datam1.Query1.Fields[4].AsInteger;
      End
      else
      begin
        Datam1.Query1.Close;
        exit;
      end;

      Datam1.Query1.Close;

      if FormNewChangepress.init(pressid, ProductionID, LocationID,
        Publicationid, Pubdate, INpressruns) then
        FormNewChangepress.ShowModal;
    Except

    end;

  finally
    Actionprogressrefreshfilter.Execute;
    ActionProgressrefresh.Execute;
  end;
end;

procedure TFormMain.ActionprodtreeprihotExecute(Sender: TObject);
Var
  runnode: TTreeNode;
  pressid: Integer;
  // locationid,
  pressrunid: Integer;

  Pressrunselstr: string;
  anode, n1, n2, n3: TTreeNode;
  ProductionID: Integer;
  starttime, endtime: TDateTime;
begin
  try
    if TreeViewprodcontrol.Selected = nil then
      exit;
    runnode := TreeViewprodcontrol.Selected;
    if runnode = nil then
      exit;
    if runnode.Level < 2 then
      exit;
    Pressrunselstr := '(-48';
    ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;
    n1 := runnode;
    anode := n1;

    while anode.Level > 1 do
      anode := anode.Parent;

    pressid := tNames1.pressnametoid(anode.Parent.text);
    // locationid := tnames1.locationnametoid(ComboBoxPlatelocation.Text);

    try

      case n1.Level of
        2:
          begin
            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add
              ('Select distinct pressrunid from Pagetable (Nolock)');
            Datam1.Query1.SQL.Add('Where productionid = ' +
              IntToStr(TTreeViewpagestype(n1.Data^).ProductionID));
            Datam1.Query1.Open;
            while not Datam1.Query1.Eof do
            begin
              Pressrunselstr := Pressrunselstr + ',' + Datam1.Query1.Fields
                [0].AsString;
              Datam1.Query1.Next;
            end;
            Datam1.Query1.Close;
          end;
        3:
          begin
            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add
              ('Select distinct pressrunid from Pagetable (Nolock)');
            Datam1.Query1.SQL.Add('Where productionid = ' +
              IntToStr(TTreeViewpagestype(n1.Data^).ProductionID));
            Datam1.Query1.SQL.Add('And editionid = ' +
              IntToStr(TTreeViewpagestype(n1.Data^).editionid));
            Datam1.Query1.Open;
            while not Datam1.Query1.Eof do
            begin
              Pressrunselstr := Pressrunselstr + ',' + Datam1.Query1.Fields
                [0].AsString;
              Datam1.Query1.Next;
            end;
            Datam1.Query1.Close;

          end;
        4:
          begin
            Pressrunselstr := Pressrunselstr + ',' +
              IntToStr(TTreeViewpagestype(n1.Data^).pressrunid);
          end;
      end;
    except
    end;

    Pressrunselstr := Pressrunselstr + ') ';

    FormHottime.DateTimePickerdatebegin.Date := DateOf(NOW);
    FormHottime.DateTimePickerdateEnd.Date := DateOf(NOW);
    FormHottime.DateTimePickerTimebegin.Time := TimeOf(NOW);
    FormHottime.DateTimePickerTimeEnd.Time := TimeOf(NOW);

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select TOP 1 PriorityHottimebegin,PriorityHottimeEnd,PriorityBeforeHottime,PriorityDuringHottime,PriorityAfterHottime from pressrunid (Nolock)');
    Datam1.Query1.SQL.Add('Where pressrunid IN ' + Pressrunselstr);
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
    begin
      if Datam1.Query1.Fields[0].AsDateTime > EncodeDate(2000, 1, 1) then
      begin
        FormHottime.DateTimePickerdatebegin.Date :=
          DateOf(Datam1.Query1.Fields[0].AsDateTime);
        FormHottime.DateTimePickerdateEnd.Date :=
          DateOf(Datam1.Query1.Fields[1].AsDateTime);
        FormHottime.DateTimePickerTimebegin.Time :=
          TimeOf(Datam1.Query1.Fields[0].AsDateTime);
        FormHottime.DateTimePickerTimeEnd.Time :=
          TimeOf(Datam1.Query1.Fields[1].AsDateTime);

        FormHottime.PriorityBeforeHottime.Position := Datam1.Query1.Fields[2]
          .AsInteger;
        FormHottime.PriorityDuringHottime.Position := Datam1.Query1.Fields[3]
          .AsInteger;
        FormHottime.PriorityAfterHottime.Position := Datam1.Query1.Fields[4]
          .AsInteger;
      end;
    end;
    Datam1.Query1.Close;

    if FormHottime.ShowModal = mrOK then
    begin
      starttime := FormHottime.DateTimePickerdatebegin.Date +
        TimeOf(FormHottime.DateTimePickerTimebegin.Time);
      endtime := FormHottime.DateTimePickerdateEnd.Date +
        TimeOf(FormHottime.DateTimePickerTimeEnd.Time);
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pressrunid set ');
      Datam1.Query1.SQL.Add('PriorityHottimebegin = :PriorityHottimebegin');
      Datam1.Query1.SQL.Add(',PriorityHottimeEnd =  :PriorityHottimeEnd');
      Datam1.Query1.SQL.Add(',PriorityBeforeHottime = ' +
        FormHottime.edit1.text);
      Datam1.Query1.SQL.Add(',PriorityDuringHottime = ' +
        FormHottime.Edit2.text);
      Datam1.Query1.SQL.Add(',PriorityAfterHottime = ' +
        FormHottime.Edit3.text);
      Datam1.Query1.params[0].AsDateTime := starttime;
      Datam1.Query1.params[1].AsDateTime := endtime;
      Datam1.Query1.SQL.Add('Where pressrunid IN ' + Pressrunselstr);
      Datam1.Query1.ExecSQL;
    end;
  Except
  end;

end;

(*
  Var
  pressrunid,I : Integer;
  starttime,endtime : TDateTime;
  begin
  pressrunid := -1;

  for i := 1 to StringGridprods.RowCount do
  begin
  if StringGridprodsdata[i].Selected then
  begin
  pressrunid := StringGridprodsdata[i].pressrunid;
  break;
  end;
  end;
  if pressrunid > -1 THEN
  begin



  end;
  end;
*)

procedure TFormMain.ActionShowDeleteLogExecute(Sender: TObject);
var
  S: string;
  Line: string;
  i: Integer;
  filename: string;
begin
  S := '';
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('exec ' + Prefs.ShowLogStoredProc);
  Datam1.Query1.Open;
  while not Datam1.Query1.Eof do
  begin
    Line := '';
    for i := 0 to Datam1.Query1.Fields.Count - 1 do
    begin
      if i > 0 then
        Line := Line + ';';
      Line := Line + Datam1.Query1.Fields[i].AsString;
    end;
    S := S + Line + #13#10;
    Datam1.Query1.Next;
  end;
  Datam1.Query1.Close;

  S := TUtils.CsvToFixedSpaced(S);

  filename := IncludeTrailingBackSlash(TUtils.GetTempDirectory) +
    'PlanCreateDelete.log';
  with Tstringlist.Create do
    try
      Add(S);
      SaveToFile(filename);
    finally
      free;
    end;

  ShellExecute(Application.Handle, 'open', 'notepad.exe',
    PChar('''' + filename + ''''), nil, SW_SHOWNORMAL);
end;

procedure TFormMain.ActionShowdevicelistExecute(Sender: TObject);
begin

  if not GroupBoxdevicelist.Visible then
  begin
    ActionShowdevicelist.caption := 'Hide device list';
    Panel4.Realign;
    GroupBoxdevicelist.Visible := true;
    GroupBoxdevicelist.Refresh;
  end
  else
  begin
    ActionShowdevicelist.caption := 'Show device list';
    Panel4.Realign;
    GroupBoxdevicelist.Visible := false;
    // NAN 20151220
    // PageControlMain.refresh;
  end;

end;

procedure TFormMain.ActionShowFileCenterQueuesExecute(Sender: TObject);
Var
  i: Integer;
begin
  ActionMainMenuBar1X.ActionClient.Items.Clear;
  for i := 0 to 10 do
  Begin
    ActionMainMenuBar1X.ActionClient.Items.Add
  End;
end;

procedure TFormMain.FrameDeviceplacer1Timer1Timer(Sender: TObject);
begin
  if not StartuPdone then
    exit;
  // memotestPrefs.Debug.Lines.Add('FrameDeviceplacer1Timer1Timer');
  // memotestPrefs.Debug.refresh;
  FrameDeviceplacer1.TimerdeviceupdateTimer(Sender);

end;

procedure TFormMain.ChartpageGetLegendRect(Sender: TCustomChart;
  var Rect: TRect);
Var
  h: Integer;
begin
  h := Rect.bottom - Rect.Top;
  Rect.Top := 8;
  Rect.bottom := Rect.Top + h;
end;

procedure TFormMain.ChartsumGetLegendRect(Sender: TCustomChart;
  var Rect: TRect);
Var
  h: Integer;
begin
  h := Rect.bottom - Rect.Top;
  Rect.Top := 8;
  Rect.bottom := Rect.Top + h;

end;

procedure TFormMain.ChartpageClickSeries(Sender: TCustomChart;
  Series: TChartSeries; ValueIndex: Integer; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  beep;
end;

procedure TFormMain.Printrgaprhrep;

var
  // ScaleX, ScaleY: Integer;
  // RR: TRect;
  frect, torect: TRect;
  PPict, Spict, Tpict: tbitmap;

begin
  PPict := tbitmap.Create;
  Spict := tbitmap.Create;
  Tpict := tbitmap.Create;
  Chartpage.SaveToBitmapFiLe(IncludeTrailingBackSlash(TUtils.GetTempDirectory())
    + 'tmpP.bmp');
  Chartpage.SaveToBitmapFiLe(IncludeTrailingBackSlash(TUtils.GetTempDirectory())
    + 'tmpS.bmp');
  PPict.LoadFromFile(IncludeTrailingBackSlash(TUtils.GetTempDirectory()) +
    'tmpP.bmp');
  Spict.LoadFromFile(IncludeTrailingBackSlash(TUtils.GetTempDirectory()) +
    'tmpS.bmp');

  Tpict.Height := PPict.Height + Spict.Height;
  Tpict.width := PPict.width;
  frect.Top := 0;
  frect.left := 0;
  frect.bottom := PPict.Height;
  frect.right := PPict.width;
  torect := frect;
  Tpict.Canvas.CopyRect(torect, PPict.Canvas, frect);
  torect.Top := PPict.Height;
  torect.bottom := Tpict.Height;
  Tpict.Canvas.CopyRect(torect, Spict.Canvas, frect);
  Tpict.SaveToFile(IncludeTrailingBackSlash(TUtils.GetTempDirectory()) +
    'tmpT.bmp');

  ImageEnchprint.IO.LoadFromFile
    (IncludeTrailingBackSlash(TUtils.GetTempDirectory()) + 'tmpT.bmp');
  ImageEnchprint.Repaint;
  if PrinterSetupDialog1.Execute then
  begin
    Printer.beginDoc;
    Printer.Title := 'Plancenter chart';
    ImageEnchprint.IO.PrintImage(Printer.Canvas, 0, 0, 0, 0, ievpCENTER,
      iehpCENTER, iesFITTOPAGE, 0, 0, 1);
    Printer.EndDoc;
    RichEditcharts.Print('Plancenter info');
  end;
end;

procedure TFormMain.Savergaprhrep;
var
  // ScaleX, ScaleY: Integer;
  // RR: TRect;
  frect, torect: TRect;
  PPict, Spict, Tpict: tbitmap;
  rtffilename: String;
begin
  if SaveDialogreport.Execute then
  begin
    PPict := tbitmap.Create;
    Spict := tbitmap.Create;
    Tpict := tbitmap.Create;
    Chartpage.SaveToBitmapFiLe
      (IncludeTrailingBackSlash(TUtils.GetTempDirectory()) + 'tmpP.bmp');
    Chartpage.SaveToBitmapFiLe
      (IncludeTrailingBackSlash(TUtils.GetTempDirectory()) + 'tmpS.bmp');
    PPict.LoadFromFile(IncludeTrailingBackSlash(TUtils.GetTempDirectory()) +
      'tmpP.bmp');
    Spict.LoadFromFile(IncludeTrailingBackSlash(TUtils.GetTempDirectory()) +
      'tmpS.bmp');

    Tpict.Height := PPict.Height + Spict.Height;
    Tpict.width := PPict.width;

    frect.Top := 0;
    frect.left := 0;
    frect.bottom := PPict.Height;
    frect.right := PPict.width;
    torect := frect;
    Tpict.Canvas.CopyRect(torect, PPict.Canvas, frect);
    torect.Top := PPict.Height;
    torect.bottom := Tpict.Height;
    Tpict.Canvas.CopyRect(torect, Spict.Canvas, frect);
    Tpict.SaveToFile(IncludeTrailingBackSlash(TUtils.GetTempDirectory()) +
      'tmpT.bmp');

    ImageEnchprint.IO.LoadFromFile
      (IncludeTrailingBackSlash(TUtils.GetTempDirectory()) + 'tmpT.bmp');
    ImageEnchprint.Repaint;
    // ImageEnIO2.SaveToFilebmp(SaveDialogreport.FileName);

    if SaveDialogreport.FilterIndex = 1 then
      ImageEnchprint.IO.SaveToFileBMP(SaveDialogreport.filename)
    else
      ImageEnchprint.IO.SaveToFileJpeg(SaveDialogreport.filename);

    rtffilename := SaveDialogreport.filename;
    rtffilename := changefileext(rtffilename, '.rtf');
    RichEditcharts.Lines.SaveToFile(rtffilename);

  end;
end;

procedure TFormMain.makedevicereport;

  function textdt(Fromatime: TDateTime; ToAtime: TDateTime): String;
  Var
    T: String;
  begin
    T := FormaTDateTime('dd-mm hh ', Fromatime) + ' to ' +
      FormaTDateTime('dd-mm hh ', ToAtime);
    result := T;
  end;

Var
  i, i2: Integer;
  first, StarttidOK, endtidOK: Boolean;
  lastsumtid, Sumtid, Starttid, endtid, tid: TDateTime;
  N: TTreeNode;
  wherestr, TimeWherestr: String;
  fromtidtype, totidtype: Integer;

  Nplates, tothours, totminutes, sumpages, sumcount, amax: Integer;

  avgsum, lastsum, Npages, Npageversions, minb, Npagesstat,
    Npagesstatver: Integer;

  Devids: Array [0 .. 9] of Integer;
  lasttid, firstOut, Lastout: TDateTime;
  IncSize, anum, NDevices: Integer;
  Prtext: String;
  Aintxt, aouttxt, indevstr: String;
  Specifikpulb: Boolean;
  LocationID: Integer;
begin
  Starttid := Today;
  endtid := Today;

  TimeWherestr := ' ';

  if (ComboBoxpalocationNY.Enabled) then
    LocationID := tNames1.locationnametoid(ComboBoxpalocationNY.text)
  else
    LocationID := -1;

  for i := 0 to 9 do
  begin
    Chartdevusage.Series[i].Clear;
    Chartdevusage.Series[i].Active := false;
  end;

  Formdevicereport.DateTimePicker1.DateTime := IncDay(NOW, -1);
  Specifikpulb := false;
  if TreeViewreportfilter.Selected <> nil then
  begin
    N := TreeViewreportfilter.Selected;

    wherestr := ' p.productionid > -99 ';
    while N.Level > 0 do
    begin
      case TTreeViewpagestype(N.Data^).kind of
        1:
          begin // date
            wherestr := wherestr + ' and ' + Datam1.makedatastr('p.',
              TTreeViewpagestype(N.Data^).Pubdate);
            Formdevicereport.DateTimePicker1.Date :=
              TTreeViewpagestype(N.Data^).Pubdate;
          end;
        2:
          begin // date + publ
            Specifikpulb := true;
            wherestr := wherestr + ' and p.publicationid = ' +
              IntToStr(TTreeViewpagestype(N.Data^).Publicationid);
          end;
        4:
          begin // date + publ + ed
            wherestr := wherestr + ' and p.editionid = ' +
              IntToStr(TTreeViewpagestype(N.Data^).editionid);
          end;
        5:
          begin // date + publ + ed +sec
            wherestr := wherestr + ' and p.sectionid = ' +
              IntToStr(TTreeViewpagestype(N.Data^).Sectionid);
          end;
      end;
      N := N.Parent;
    end;
  end;

  if Specifikpulb then
  begin

  end
  else
  begin
    exit;
    if Formdevicereport.ShowModal = mrOK then
    begin
      Starttid := EncodeDateTime(YearOf(Formdevicereport.DateTimePicker1.Date),
        MonthOf(Formdevicereport.DateTimePicker1.Date),
        DayOf(Formdevicereport.DateTimePicker1.Date),
        hourof(Formdevicereport.DateTimePicker2.Time),
        minuteof(Formdevicereport.DateTimePicker2.Time), 0, 0);
      endtid := inchour(Starttid, StrToInt(Formdevicereport.Edithours.text));
      Aintxt := '''' + FormaTDateTime('yyyy-mm-dd hh:nn', Starttid) + '''';
      aouttxt := '''' + FormaTDateTime('yyyy-mm-dd hh:nn', endtid) + '''';
      TimeWherestr := 'AND ((p.outputtime >=  ' + Aintxt + 'or p.outputtime >= '
        + Aintxt + 'or p.outputtime >= ' + Aintxt + ' ) and ' +
        ' (p.outputtime <= ' + aouttxt + 'or p.outputtime <= ' + aouttxt +
        'or p.outputtime <= ' + aouttxt + ' )) ';
    end
    else
    begin
      exit;
    end;

  end;
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('select distinct d.deviceid,d.devicename from DeviceConfigurations d (NOLOCK) , pagetable p (NOLOCK) ');
  Datam1.Query1.SQL.Add('where ' + wherestr +
    ' and p.status >= 45 and p.OutputTime  > ' + '''' + '2000-1-1' + '''');
  Datam1.Query1.SQL.Add(TimeWherestr);
  Datam1.Query1.SQL.Add('And p.pagetype <> 3');
  if (LocationID > 0) then
    Datam1.Query1.SQL.Add('and d.locationid = ' + IntToStr(LocationID));
  Datam1.Query1.SQL.Add('and d.deviceid = p.deviceid');
  Datam1.Query1.SQL.Add('order by d.devicename');
  Datam1.Query1.Open;
  indevstr := '(-99';
  i := -1;
  NDevices := 0;
  while not Datam1.Query1.Eof do
  begin
    Inc(i);

    if i > 9 then
      break;
    Inc(NDevices);
    Chartdevusage.Series[i].Title := Datam1.Query1.Fields[1].AsString;

    Chartdevusage.Series[i].Active := true;
    Devids[i] := Datam1.Query1.Fields[0].AsInteger;
    indevstr := indevstr + ',' + Datam1.Query1.Fields[0].AsString;
    Datam1.Query1.Next;
  end;
  Datam1.Query1.Close;
  indevstr := indevstr + ')';

  Datam1.Query1.SQL.Clear; // ,MIN(p.ApproveTime),MAX(p.ApproveTime)
  Datam1.Query1.SQL.Add
    ('select MIN(p.OutputTime),MAX(p.OutputTime) from pagetable p (NOLOCK) ');
  Datam1.Query1.SQL.Add('where ' + wherestr +
    ' and p.status >= 45 and p.OutputTime  > ' + '''' + '2000-1-1' + '''');
  Datam1.Query1.SQL.Add(TimeWherestr);
  Datam1.Query1.SQL.Add('and deviceid IN ' + indevstr);
  Datam1.Query1.SQL.Add('And p.pagetype <> 3');

  if Prefs.Debug then
    Datam1.Query1.SQL.SaveToFile
      (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
      'startstoptid.SQL');

  Datam1.Query1.Open;
  if not Datam1.Query1.Eof then
  begin
    if Datam1.Query1.Fields[0].AsDateTime > EncodeDate(2000, 1, 1) then
      Starttid := Datam1.Query1.Fields[0].AsDateTime;
    if Datam1.Query1.Fields[1].AsDateTime > EncodeDate(2000, 1, 1) then
      endtid := Datam1.Query1.Fields[1].AsDateTime;

    Aintxt := '''' + FormaTDateTime('yyyy-mm-dd hh:nn', Starttid) + '''';
    aouttxt := '''' + FormaTDateTime('yyyy-mm-dd hh:nn', endtid) + '''';
    TimeWherestr := 'AND ((p.outputtime >=  ' + Aintxt + 'or p.outputtime >= ' +
      Aintxt + 'or p.outputtime >= ' + Aintxt + ' ) and ' + ' (p.outputtime <= '
      + aouttxt + 'or p.outputtime <= ' + aouttxt + 'or p.outputtime <= ' +
      aouttxt + ' )) ';

  end;
  Datam1.Query1.Close;

  if minuteof(Starttid) <> 0 then
  begin
    Starttid := EncodeDateTime(YearOf(Starttid), MonthOf(Starttid),
      DayOf(Starttid), hourof(Starttid), 0, 0, 0);
  end;

  if minuteof(endtid) <> 0 then
  begin
    endtid := inchour(endtid, 1);
    endtid := EncodeDateTime(YearOf(endtid), MonthOf(endtid), DayOf(endtid),
      hourof(endtid), 0, 0, 0);
  end;

  IncSize := 30;
  amax := 20;
  Chartdevusage.leftAxis.Maximum := 20;
  if NDevices > 0 then
  begin
    firstOut := 0;
    Lastout := 0;
    amax := 0;
    Chartdevusage.BottomAxis.minimum := 0;
    Chartdevusage.BottomAxis.Maximum := inchour(endtid, 1);
    Chartdevusage.BottomAxis.minimum := inchour(Starttid, -1);
    Chartdevusage.BottomAxis.minimum :=
      incminute(Chartdevusage.BottomAxis.minimum, -1);
    Chartdevusage.BottomAxis.Increment := DateTimeStep[dtThirtyMinutes];
    // DateTimeStep[ dtOneHour ] ;

    for i := 0 to NDevices - 1 do
    begin
      Chartdevusage.Series[i].XValues.DateTime := true;
      Chartdevusage.Series[i].Addxy(Chartdevusage.BottomAxis.minimum, 0);
      sumpages := 0;
      sumcount := 0;
      lastsumtid := Starttid;
      first := true;
      minb := minuteof(lastsumtid);
      Sumtid := incminute(lastsumtid, 30 - minb);
      Repeat
        Datam1.Query2.SQL.Clear;
        Datam1.Query2.SQL.Add
          ('select DISTINCT p.outputVersion ,COUNT (distinct p.flatseparation ) from PageTable p (NOLOCK) ');
        Datam1.Query2.SQL.Add('where ' + wherestr +
          ' and p.status >= 50 and p.Outputtime  > ' + '''' +
          '2000-1-1' + '''');
        Datam1.Query2.SQL.Add
          ('and Outputtime >= :fromtid and Outputtime < :totid');
        Datam1.Query2.SQL.Add('And p.pagetype <> 3 and p.Active = 1');
        Datam1.Query2.SQL.Add('And p.deviceid = ' + IntToStr(Devids[i]));
        Datam1.Query2.SQL.Add('group by p.outputVersion');
        Datam1.Query2.params[0].AsDateTime := lastsumtid;
        Datam1.Query2.params[1].AsDateTime := Sumtid;
        Datam1.Query2.Open;

        sumpages := 0;

        while not Datam1.Query2.Eof do
        begin
          if Datam1.Query2.Fields[0].AsInteger > 0 then
            sumpages := sumpages + (Datam1.Query2.Fields[0].AsInteger *
              Datam1.Query2.Fields[1].AsInteger)
          else
            sumpages := sumpages + Datam1.Query2.Fields[1].AsInteger;
          Datam1.Query2.Next;
        end;
        Datam1.Query2.Close;

        Chartdevusage.Series[i].Addxy(lastsumtid, sumpages);
        if amax < sumpages then
          amax := sumpages;

        Sumtid := incminute(Sumtid, 30);
        lastsumtid := incminute(lastsumtid, 30);
        first := false;
      Until lastsumtid > endtid;

      Chartdevusage.Series[i].Addxy(endtid, sumpages);
    end;

    if amax < 20 then
      amax := 20;

    Chartdevusage.leftAxis.Maximum := amax + 5;
    Chartdevusage.leftAxis.Increment :=
      round(Chartdevusage.leftAxis.Maximum) DIV 5;

  end;
end;

function TFormMain.StandardProduktionchk(Editmode: Integer;
  ProductionID: Integer; Publicationid: Integer; Pubdate: TDateTime;
  Fromproductionid: Integer; // from bruges kun ved kopiering
  FromPublicationid: Integer; FromPubdate: TDateTime): Integer;
Var
  CopySep_used_in_different_pressruns: Boolean;
  Masterset_used_in_different_publicationpubdate: Boolean;
  Illegal_masterset_number: Boolean;
  PressRunID_used_in_different_publicationpubdate: Boolean;
  wherestr: String;
  // L : tlistitem;
begin
  result := 0;
  try
    CopySep_used_in_different_pressruns := false;
    Masterset_used_in_different_publicationpubdate := false;
    Illegal_masterset_number := false;
    PressRunID_used_in_different_publicationpubdate := false;
    wherestr := ' (p1.productionid <> -999';
    if ProductionID <> -1 then
      wherestr := wherestr + ' and p1.productionid = ' + IntToStr(ProductionID);

    if Publicationid <> -1 then
      wherestr := wherestr + ' and p1.publicationid = ' +
        IntToStr(Publicationid);

    if Pubdate <> EncodeDate(2000, 1, 1) then
      wherestr := wherestr + ' and ' + Datam1.makedatastr('p1.', Pubdate);
    wherestr := wherestr + ' )';

    Formtoolchkdb.ListViewproderrors.Items.Clear;

    Datam1.Query2.SQL.Clear;
    // 0                 1        2             3               4         5           6
    Datam1.Query2.SQL.Add
      ('SELECT distinct p1.publicationid,p1.pubdate,p1.locationid,p1.pressid,p1.sectionid,p1.editionid,p1.PageName,');
    // 7              8           9             10          11          12          13            14
    Datam1.Query2.SQL.Add
      ('p2.publicationid,p2.pubdate,p2.locationid,p2.pressid,p2.sectionid,p2.editionid,p2.PageName,P1.CopySeparationSet FROM PageTable P1 (NOLOCK) , PageTable p2 (NOLOCK) ');
    Datam1.Query2.SQL.Add('Where ' + wherestr);
    Datam1.Query2.SQL.Add
      ('and (P1.CopySeparationSet=P2.CopySeparationSet and P1.PressRunID<>P2.PressRunID)');
    Datam1.Query2.SQL.Add
      ('order by p2.locationid,p2.pressid,p2.publicationid,p2.editionid,p2.sectionid,p2.PageName');
    if Prefs.Debug then
      Datam1.Query2.SQL.SaveToFile
        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
        'chkdb1.SQL');
    Datam1.Query2.Open;
    while not Datam1.Query2.Eof do
    begin
      (*
        CopySep_used_in_different_pressruns := true;
        l := Formtoolchkdb.ListViewproderrors.Items.Add;
        l.Caption := 'CopySep used in different pressruns';
        l.SubItems.Add(tnames1.editionIDtoname( Datam1.Query2.Fields[5].AsInteger) +' | '+
        tnames1.SectionIDtoname( Datam1.Query2.Fields[4].AsInteger) +' | '+
        Datam1.Query2.Fields[6].AsString);

        l.SubItems.Add(tnames1.locationIDtoname( Datam1.Query2.Fields[9].AsInteger) +' | '+
        tnames1.pressnameIDtoname( Datam1.Query2.Fields[10].AsInteger) +' | '+
        Datam1.Query2.Fields[8].AsString +' '+
        tnames1.publicationIDtoname( Datam1.Query2.Fields[7].AsInteger) +' | '+
        tnames1.editionIDtoname( Datam1.Query2.Fields[12].AsInteger) +' | '+
        tnames1.SectionIDtoname( Datam1.Query2.Fields[11].AsInteger) +' | '+
        Datam1.Query2.Fields[13].AsString);
      *)
      Datam1.Query2.Next;
    end;
    Datam1.Query2.Close;

    if CopySep_used_in_different_pressruns then
      result := result + 1;
  Except
  end;

  (*

    PRINT 'CopySep used in different pressruns?'
    SELECT P1.CopySeparationSet,PUB.Name,P1.PubDate,P1.PageName,P1.ProductionID,P1.PressRunID FROM PageTable P1
    INNER JOIN PublicationNames PUB ON PUB.PublicationID=P1.PublicationID
    WHERE EXISTS (SELECT P2.CopySeparationSet FROM PageTable P2 WHERE P1.CopySeparationSet=P2.CopySeparationSet AND P1.PressRunID<>P2.PressRunID)

    PRINT 'Masterset used in different publication/pubdate?'
    SELECT P1.MasterCopySeparationSet,PUB.Name,P1.PubDate,P1.PageName,P1.ProductionID,P1.PressRunID FROM PageTable P1
    INNER JOIN PublicationNames PUB ON PUB.PublicationID=P1.PublicationID
    WHERE EXISTS (SELECT P2.MasterCopySeparationSet FROM PageTable P2 WHERE P1.MasterCopySeparationSet=P2.MasterCopySeparationSet AND (P1.PublicationID<>P2.PublicationID OR P1.PubDate<>P2.PubDate))

    PRINT 'PressRunID used in different publication/pubdate?'
    SELECT P1.PressRunID,PUB.Name,P1.PubDate,P1.ProductionID FROM PageTable P1
    INNER JOIN PublicationNames PUB ON PUB.PublicationID=P1.PublicationID
    WHERE EXISTS (SELECT P2.PressRunID FROM PageTable P2 WHERE P1.PressRunID=P2.PressRunID AND (P1.PublicationID<>P2.PublicationID OR P1.PubDate<>P2.PubDate))




  *)

end;

procedure TFormMain.ActiontoolchkdatabaseExecute(Sender: TObject);
begin
  Formtoolchkdb.ShowModal;
end;

procedure TFormMain.ActionplatetreedevExecute(Sender: TObject);
Var
  tmpl: string;
  // flatseparationset : string;
  i: Integer;

  runnode: TTreeNode;
  pressid: Integer;
  tmpllistnum, LocationID, pressrunid: Integer;
  Fromtemplateid, Fromtemplatelistid: Integer;
  Pressrunselstr, T: string;
  anode, n1, n2, n3: TTreeNode;
  ProductionID: Integer;
  igr, i3, idr: Integer;
  found, settinggrp: Boolean;
begin
  try
    if TreeViewPlateview.Selected = nil then
      exit;
    runnode := TreeViewPlateview.Selected;
    if runnode = nil then
      exit;
    if runnode.Level < 2 then
      exit;
    if runnode.Level < 2 then
      exit;
    Pressrunselstr := '(-48';
    ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;
    n1 := runnode;
    try
      anode := n1;
      if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
      begin
        if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
          Pressrunselstr) = 0 then
          Pressrunselstr := Pressrunselstr + ',' +
            IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
      end;
      n2 := n1.GetFirstChild;
      while n2 <> nil do
      begin
        anode := n2;
        if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
        begin
          if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
            Pressrunselstr) = 0 then
            Pressrunselstr := Pressrunselstr + ',' +
              IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
        end;

        n3 := n2.GetFirstChild;
        while n3 <> nil do
        begin
          anode := n3;
          if TTreeViewpagestype(anode.Data^).pressrunid > 0 then
          begin
            if pos(',' + IntToStr(TTreeViewpagestype(anode.Data^).pressrunid),
              Pressrunselstr) = 0 then
              Pressrunselstr := Pressrunselstr + ',' +
                IntToStr(TTreeViewpagestype(anode.Data^).pressrunid);
          end;
          n3 := n3.getNextSibling;
        end;
        n2 := n2.getNextSibling;
      end;

    except
    end;

    Pressrunselstr := Pressrunselstr + ') ';

    while runnode.Level > 1 do
      runnode := runnode.Parent;

    pressid := tNames1.pressnametoid(runnode.Parent.text);

    pressrunid := runnode.StateIndex;

    // if (ComboBoxpalocationNY.Enabled) then
    // locationid := tnames1.locationnametoid(ComboBoxpalocationNY.Text)
    // else
    // locationID := -1;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Select TOP 1 templateid from pagetable (NOLOCK) ');
    Datam1.Query1.SQL.Add('Where active <> -999');
    // Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
    Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
    Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));

    FormMain.Tryopen(Datam1.Query1);
    tmpl := '';
    if not Datam1.Query1.Eof then
    begin
      Fromtemplateid := Datam1.Query1.Fields[0].AsInteger;
      tmpllistnum := inittypes.gettemplatenumberfromID(Fromtemplateid);
      // 20170613 NAN - wrong index used
      // tmpl := PlatetemplateArray[Fromtemplatelistid].TemplateName;
      tmpl := PlatetemplateArray[tmpllistnum].TemplateName;
    end;
    Datam1.Query1.Close;

    // inittypes.getdevicelistfromtemplate(tmpllistnum);
    inittypes.getdevicelistfromtemplateNogrp(tmpllistnum);

    Formselectfromlist.ListBox1.Items.Clear;
    Formselectfromlist.ListBox1.Items := Aktdevicelist;
    Formselectfromlist.CheckBox1.caption :=
      'Lock all copies to same device in settings';
    Formselectfromlist.PanelAllcopies.Visible := not Prefs.ForceSameDevice;
    FormSelplatecopies.autoall := Prefs.ForceSameDevice;
    // Formselectfromlist.CheckBox1.Visible := not FoxrmSettings.CheckBoxForcesamedev.Checked;

    // Fills  Aktdevicegrplist string list of device groups where member device is in template    (NaktdeviceGRPidlist)
    inittypes.getdeviceGrplistfromtemplate(tmpllistnum);

    if (NaktdeviceGRPidlist > 0) And (DeviceGroupNamesPossible) then
    begin
      for igr := 1 to NaktdeviceGRPidlist do
      begin
        found := false;
        i3 := aktdeviceGRPidlist[igr];
        for idr := 1 to DeviceGroupNames[i3].NDevices do
        begin
          T := tNames1.deviceIDtoname(DeviceGroupNames[i3].Devices[idr]);
          if Formselectfromlist.ListBox1.Items.IndexOf(T) < 0 then
            Formselectfromlist.ListBox1.Items.Add(T);
        end;
      end;

      for i := 0 to Aktdevicegrplist.Count - 1 do
      begin
        Formselectfromlist.ListBox1.Items.Add(Aktdevicegrplist[i]);
      end;
    end
    else
    begin
      inittypes.getdevicelistfromtemplateNogrp(tmpllistnum);
      Formselectfromlist.ListBox1.Items := Aktdevicelist;
    end;

    if not FormSelplatecopies.InitializeIt then
      exit;
    if (FormSelplatecopies.ListView1.Items.Count > 1) And
      (not Prefs.ForceSameDevice) then
    begin
      FormSelplatecopies.ShowModal;
    end
    else
      FormSelplatecopies.SetCopyselstr;

    Formselectfromlist.caption := 'Change device';
    Formselectfromlist.CheckBox1.Checked := Prefs.ForceSameDevice;
    if Formselectfromlist.ShowModal = mrOK then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      if Formselectfromlist.ListBox1.ItemIndex = Formselectfromlist.ListBox1.
        Items.Count - 1 then
        Datam1.Query1.SQL.Add('set deviceid = 0, miscint4=0')
      else
      begin

        settinggrp := false;
        if (NaktdeviceGRPidlist > 0) And (DeviceGroupNamesPossible) then
        begin
          if Formselectfromlist.ListBox1.ItemIndex >= Aktdevicelist.Count then
            settinggrp := true;
        end;

        if settinggrp then
        begin
          if DeviceGroupNamesPossible then
            Datam1.Query1.SQL.Add('set deviceid = 0,miscint4=0,DeviceGroupID=' +
              IntToStr(inittypes.DeviceGroupnametoID
              (Formselectfromlist.ListBox1.Items
              [Formselectfromlist.ListBox1.ItemIndex])))
          else
            Datam1.Query1.SQL.Add('set deviceid = 0,miscint4=0');
        end
        else
        begin
          Datam1.Query1.SQL.Add('set miscint4=0,deviceid = ' +
            IntToStr(tNames1.devicenametoid(Formselectfromlist.ListBox1.Items
            [Formselectfromlist.ListBox1.ItemIndex])));
          if DeviceGroupNamesPossible then
            Datam1.Query1.SQL.Add(',DeviceGroupID=0');
        end;
      end;

      Datam1.Query1.SQL.Add('Where active <> -999');
      // Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
      Datam1.Query1.SQL.Add('and pressrunid IN ' + Pressrunselstr);
      Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(ProductionID));
      // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(locationid));
      Datam1.Query1.SQL.Add(WeditionStr);
      trysql(Datam1.Query1);
    end;

  Finally
    plateviewrefresh(true, 'ActionplatetreedevExecute');
  end;
end;

procedure TFormMain.ActionunknownfileinfoExecute(Sender: TObject);
Var
  i: Integer;
  plres, Isel: Integer;
  filname: PChar; { komplet sti }
  Xres: Single;
  Yres: Single;
  width: Single;
  Height: Single;
  CompRatio: Single;
  szInfo: MemoTextType;
  TmpS: String;
begin
  try
    try
      Isel := -1;
      for i := 0 to ListViewunkowfiles.Items.Count - 1 do
      begin
        if ListViewunkowfiles.Items[i].Selected then
        begin
          Isel := i;
          break;
        end;
      end;

      if Isel > -1 then
      begin

        filname := PChar(ListViewunkowfiles.Items[Isel].SubItems[3]);
        if NyFileInfoOK then
        begin
          plres := IsPDFFile(filname);
          if plres <> 0 then
          begin
            TmpS := filname;
            plres := NyFileInfo(StringToPAnsiChar(TmpS), Xres, Yres, width,
              Height, CompRatio);
            if plres <> 0 then
            begin
              FormPDFfileInfo.FWidth := width;
              FormPDFfileInfo.FHeight := Height;
              FormPDFfileInfo.Orgfilename := strpas(filname);
              FormPDFfileInfo.filename := '';
              plres := FileInfoEx(filname, szInfo, 64000);
              FormPDFfileInfo.memo1.Lines.Clear;
              if plres <> 0 then
                FormPDFfileInfo.memo1.Lines.Add(szInfo);
              FormPDFfileInfo.ShowModal;
            end;
          end
          else
          begin
            plres := PlotInfo(StringToPAnsiChar(filname), Xres, Yres, width,
              Height, CompRatio);
            if plres <> 0 then
            begin

              FormFileinfo.Xres := Xres;
              FormFileinfo.Yres := Yres;
              FormFileinfo.FWidth := width;
              FormFileinfo.FHeight := Height;
              FormFileinfo.CompRatio := CompRatio;
              FormFileinfo.filename := '';
              FormFileinfo.Orgfilename := strpas(filname);
              plres := FileInfoEx(filname, szInfo, 64000);
              FormFileinfo.memo1.Lines.Clear;
              if plres <> 0 then
                FormFileinfo.memo1.Lines.Add(szInfo);
              FormFileinfo.ShowModal;
            end;
          end;
        End
        else
        begin
          plres := PlotInfo(StringToPAnsiChar(filname), Xres, Yres, width,
            Height, CompRatio);
          if plres <> 0 then
          begin
            FormFileinfo.Xres := Xres;
            FormFileinfo.Yres := Yres;
            FormFileinfo.FWidth := width;
            FormFileinfo.FHeight := Height;
            FormFileinfo.CompRatio := CompRatio;
            FormFileinfo.filename := '';
            FormFileinfo.Orgfilename := strpas(filname);
            FormFileinfo.ShowModal;
          end
        end;

      end;
    Except
      on E: Exception do
      begin
        MessageDlg(E.Message, mtInformation, [mbOk], 0);
      end;
    end;

  Finally
  end;
end;

procedure TFormMain.ActionUnknownViewPageExecute(Sender: TObject);
var
  i : Integer;
  t1,t2 : string;
begin
try
     for i:= 0 to  ListViewUnknownPage.Items.Count-1 do
     begin
       if ListViewUnknownPage.Items[i].Selected then
       begin
         t1 := ListViewUnknownPage.Items[i].Caption;
         t2 := IncludeTrailingBackSlash(ListViewUnknownPage.Items[i].SubItems[0]);
         if (FileExists(t2 + t1)) then
         begin
           ShellExecute(Handle, 'open',PChar(t2 + t1),nil,nil,SW_SHOW);
           exit;
         end;
       end;
     end;
   except
   end;
end;

(*
  try
  isel := -1;
  for i := 0 to ListViewunkowfiles.Items.Count-1 do
  begin
  if ListViewunkowfiles.Items[i].Selected then
  begin
  isel := i;
  Break;
  end;
  end;

  if isel > -1 then
  begin

  filname := Pchar(ListViewunkowfiles.Items[isel].SubItems[3]);
  plres := PlotInfo(filname,Xres,Yres,Width,Height,CompRatio);
  if plres <> 0 then
  begin
  FormFileinfo.Xres := Xres;
  FormFileinfo.Yres := Yres;
  FormFileinfo.FWidth := Width;
  FormFileinfo.FHeight := Height;
  FormFileinfo.CompRatio := CompRatio;
  FormFileinfo.filename := '';
  FormFileinfo.orgfilename := strpas(filname);
  FormFileinfo.showmodal;
  end
  else
  begin
  if NyFileInfoOK then
  begin
  plres := NyFileInfo(filname,Xres,Yres,Width,Height,CompRatio);
  if plres <> 0 then
  begin
  FormPDFfileInfo.FWidth := Width;
  FormPDFfileInfo.FHeight := Height;
  FormPDFfileInfo.orgfilename := strpas(filname);
  FormPDFfileInfo.filename := '';
  FormPDFfileInfo.showmodal;
  end;

  end;
  end;

  end;
  Except
  end;

  end;
*)

procedure TFormMain.ActionunknowcropfilesExecute(Sender: TObject);
Var
  i: Integer;
  Newfilename: String;
  xoffset: double;
  yoffset: double;
  newwidth: double;
  NewHeight: double;
  KeepWidth: Boolean;
  KeepHeight: Boolean;
  Offsetpoint: Integer;
  NewpathOK, anyerror: Boolean;
  Sendtopath: String;
  ifile: Integer;
begin
  xoffset := 0;
  yoffset := 0;
   newwidth := 0;
  NewHeight := 0;
  Offsetpoint := 0;
  KeepWidth := true;
  try
  Sendtopath := '';
    anyerror := false;
    ifile := -1;
    Formcroptif.CheckBoxchpath.Visible := true;
    for i := 0 to ListViewunkowfiles.Items.Count - 1 do
    begin
      if ListViewunkowfiles.Items[i].Selected then
      begin
        ifile := i;
        break;
      end;
    end;

    if ifile = -1 then
    begin
      MessageDlg('No file selected', mtInformation, [mbOk], 0);
      exit;
    end;

    Formtiffpreview.ImageEnView1.IO.LoadFromFileTIFF
      (ListViewunkowfiles.Items[ifile].SubItems[3]);

    if Formtiffpreview.ImageEnView1.IO.Aborting then
    begin
      MessageDlg('Cannot open file ' + #13 + ListViewunkowfiles.Items[ifile]
        .SubItems[3], mtError, [mbOk], 0);
      exit;
    end;

    Formtiffpreview.aktProofPDI := Formtiffpreview.ImageEnView1.IO.params.Dpi;
    Formcroptif.Editw.text := FormatFloat('0.0',
      (Formtiffpreview.ImageEnView1.Bitmap.width /
      Formtiffpreview.aktProofPDI) * 25.4);
    Formcroptif.EditH.text := FormatFloat('0.0',
      (Formtiffpreview.ImageEnView1.Bitmap.Height /
      Formtiffpreview.aktProofPDI) * 25.4);

    if Formcroptif.ShowModal = mrOK then
    begin
      xoffset := StrToFloat(Formcroptif.Editx.text);
      yoffset := StrToFloat(Formcroptif.Edity.text);
      newwidth := StrToFloat(Formcroptif.Editw.text);
      NewHeight := StrToFloat(Formcroptif.EditH.text);

      KeepWidth := Formcroptif.CheckBoxkeepW.Checked;
      KeepHeight := Formcroptif.CheckBoxkeepH.Checked;
      Offsetpoint := Formcroptif.RadioGroup1.ItemIndex;

      NewpathOK := true;
      if Formcroptif.CheckBoxchpath.Checked then
      begin
            with TFileOpenDialog.Create(nil) do
        try
          Options := [fdoPickFolders];
          if Execute then
            Sendtopath := FileName;
        finally
          Free;
        end;


      //  FormSelectfolder.ShellTreeView1.Path :=
     //     ExtractFilePath(ListViewunkowfiles.Items[i].SubItems[3]);
     //   if FormSelectfolder.ShowModal = mrOK then
      //  begin
      //    Sendtopath := FormSelectfolder.ShellTreeView1.Path;
      //  end
     //   else
       if (Sendtopath = '') then

          NewpathOK := false;
      end;
    end;
    if NewpathOK then
    begin

      for i := 0 to ListViewunkowfiles.Items.Count - 1 do
      begin
        if ListViewunkowfiles.Items[i].Selected then
        begin
          if Formcroptif.CheckBoxchpath.Checked then
            Newfilename := IncludeTrailingBackSlash(Sendtopath) +
              extractfilename(ListViewunkowfiles.Items[i].SubItems[3])
          else
            Newfilename := ListViewunkowfiles.Items[i].SubItems[3];

          if not Formtiffpreview.Doafile(ListViewunkowfiles.Items[i].SubItems
            [3], Newfilename, xoffset, yoffset, newwidth, NewHeight, KeepWidth,
            KeepHeight, Offsetpoint) then
          begin
            MessageDlg('Cannot crop file ' + #13 + ListViewunkowfiles.Items[i]
              .SubItems[3], mtError, [mbOk], 0);
            exit;
          End
          else
          begin

            Formtiffpreview.ImageEnView1.IO.SaveToFileTIFF(Newfilename);
          end;
        end;
      end;
    end;
  Except
  end;
end;

procedure TFormMain.ActionPagescropExecute(Sender: TObject);
Var
  i: Integer;
  filename: string;
  // Newfilename : String;
  xoffset: double;
  yoffset: double;
  newwidth: double;
  NewHeight: double;
  KeepWidth: Boolean;
  KeepHeight: Boolean;
  Offsetpoint: Integer;
  Ntocrop: Integer;
  DoCrop: Boolean;
  Orgfilename, T: String;
begin
  try
    DoCrop := false;
    for i := 1 to StringGridHS.RowCount do
    begin
      if SuperHSdata[i - 1].Selected then
      begin
        if SuperHSdata[i - 1].status >= 10 then
        begin
          Orgfilename := '';

          Datam1.Query2.SQL.Clear;
          Datam1.Query2.SQL.Add
            ('Select TOP 1 filename from pagetable (NOLOCK)');
          Datam1.Query2.SQL.Add('Where separation = ' +
            IntToStr(SuperHSdata[i - 1].Separation));

          Tryopen(Datam1.Query2);
          if not Datam1.Query2.Eof then
          begin
            T := Datam1.Query2.Fields[0].AsString;
            if T <> '' then
            begin
              Orgfilename := extractfilename(T);
            end;
          end;
          Datam1.Query2.Close;

          if (Orgfilename <> '') then
            filename := getfileserverFrommaster(PATHTYPE_CCFILES,
              SuperHSdata[i - 1].mastercopyseparationset) + Orgfilename + '===='
              + IntToStr(SuperHSdata[i - 1].mastercopyseparationset) + '.' +
              tNames1.ColornameIDtoname(SuperHSdata[i - 1].Colorid)
          else
            filename := getfileserverFrommaster(PATHTYPE_CCFILES,
              SuperHSdata[i - 1].mastercopyseparationset) +
              IntToStr(SuperHSdata[i - 1].mastercopyseparationset) + '.' +
              tNames1.ColornameIDtoname(SuperHSdata[i - 1].Colorid);

          Formcroptif.CheckBoxchpath.Visible := false;

          Formtiffpreview.ImageEnView1.IO.LoadFromFileTIFF(filename);

          if Formtiffpreview.ImageEnView1.IO.Aborting then
          begin
            MessageDlg('Cannot open file ' + #13 + filename, mtError,
              [mbOk], 0);
            exit;
          end;

          Formtiffpreview.aktProofPDI :=
            Formtiffpreview.ImageEnView1.IO.params.Dpi;
          Formcroptif.Editw.text :=
            FormatFloat('0.0', (Formtiffpreview.ImageEnView1.Bitmap.width /
            Formtiffpreview.aktProofPDI) * 25.4);
          Formcroptif.EditH.text :=
            FormatFloat('0.0', (Formtiffpreview.ImageEnView1.Bitmap.Height /
            Formtiffpreview.aktProofPDI) * 25.4);

          if Formcroptif.ShowModal = mrOK then
          begin
            DoCrop := true;

          end;
          break;
        end;
      end;
    end;

    if DoCrop then
    begin
      Ntocrop := 0;
      for i := 1 to StringGridHS.RowCount do
      begin

        if SuperHSdata[i - 1].Selected then
        begin
          if SuperHSdata[i - 1].status >= 10 then
          begin
            Inc(Ntocrop);

          end;
        end;
      end;
      GroupBoxworking.caption := 'Cropping selected tiff files ';

      ProgressBarmain.max := Ntocrop;
      ProgressBarmain.Position := 0;

      setGroupBoxworking;
      for i := 1 to StringGridHS.RowCount do
      begin

        if SuperHSdata[i - 1].Selected then
        begin
          if SuperHSdata[i - 1].status >= 10 then
          begin
            ProgressBarmain.Position := ProgressBarmain.Position + 1;
            ProgressBarmain.Repaint;
            filename := getfileserverFrommaster(PATHTYPE_CCFILES,
              SuperHSdata[i - 1].mastercopyseparationset) +
              IntToStr(SuperHSdata[i - 1].mastercopyseparationset) + '.' +
              tNames1.ColornameIDtoname(SuperHSdata[i - 1].Colorid);

            xoffset := StrToFloat(Formcroptif.Editx.text);
            yoffset := StrToFloat(Formcroptif.Edity.text);
            newwidth := StrToFloat(Formcroptif.Editw.text);
            NewHeight := StrToFloat(Formcroptif.EditH.text);

            KeepWidth := Formcroptif.CheckBoxkeepW.Checked;
            KeepHeight := Formcroptif.CheckBoxkeepH.Checked;
            Offsetpoint := Formcroptif.RadioGroup1.ItemIndex;

            if not Formtiffpreview.Doafile(filename, filename, xoffset, yoffset,
              newwidth, NewHeight, KeepWidth, KeepHeight, Offsetpoint) then
            begin
              MessageDlg('Cannot crop file ' + #13 +
                filename (* tnames1.sectionIDtoname(SuperHSdata[i-1].SectionID)+' '+IntToStr(SuperHSdata[i-1]. ) *) ,
                mtError, [mbOk], 0);
              exit;
            End
            else
            begin

              Formtiffpreview.ImageEnView1.IO.SaveToFileTIFF(filename);
            end;
          end;
        end;
      end;
    end;

  Except
  end;
  GroupBoxworking.Visible := false;
end;

procedure TFormMain.ActionLogrefreshExecute(Sender: TObject);
Var
  L: TListItem;
  Aview: TPBExListview;
  wherestr: String;
  fromlevel, fromnode, fromsel, N: TTreeNode;
  Aktprod, i: Integer;
  instr: String;
  LocationID: Integer;
begin
  try
    try
      screen.Cursor := crhourglass;

      case PageControlLog.ActivePageIndex of
        0:
          Aview := PBExListviewOKLog;
        1:
          Aview := PBExListviewErrorLog;
      end;
      Aview.Items.BeginUpdate;

      PBExListviewOKLog.Items.Clear;
      PBExListviewErrorLog.Items.Clear;

      if PageControlLog.ActivePageIndex = 0 then
      begin
        if TreeViewLogfilter.Selected <> nil then
        begin
          if (TreeViewLogfilter.Selected.Level < Prefs.MinTreeLevelLog) then
            exit;
        end
        else
          exit;
      end;

      if (ComboBoxpalocationNY.Enabled) then
        LocationID := tNames1.locationnametoid(ComboBoxpalocationNY.text)
      else
        LocationID := -1;

      case PageControlLog.ActivePageIndex of
        0:
          begin
            if (LocationID > 0) then
              wherestr := ' and p.locationid = ' + IntToStr(LocationID);
            fromnode := TreeViewLogfilter.Selected;
            fromsel := TreeViewLogfilter.Selected;
            fromlevel := fromsel;
            while fromlevel.Level > 5 do
              fromlevel := fromlevel.Parent;
            N := fromlevel;
            while N.Level > 0 do
            begin

              case TTreeViewpagestype(N.Data^).kind of
                // 0=all,1=location,2=publication,pubdate,3=issue,4=edition,5=section
                1:
                  wherestr := wherestr + ' and ' + Datam1.makedatastr('p.',
                    TTreeViewpagestype(N.Data^).Pubdate);
                2:
                  begin
                    Aktprod := TTreeViewpagestype(N.Data^).ProductionID;
                    wherestr := wherestr + ' and p.publicationid = ' +
                      IntToStr(TTreeViewpagestype(N.Data^).Publicationid);
                  end;
                3:
                  begin

                  end;
                4:
                  begin
                    wherestr := wherestr + ' and p.editionid = ' +
                      IntToStr(TTreeViewpagestype(N.Data^).editionid);
                  end;

                5:
                  begin
                    wherestr := wherestr + ' and p.sectionid = ' +
                      IntToStr(TTreeViewpagestype(N.Data^).Sectionid);
                  end;
              end;
              N := N.Parent;
            end;

            Datam1.Query1.SQL.Clear;
            // 0           1         2           3           4           5               6
            Datam1.Query1.SQL.Add
              ('Select l.EventTime,l.Event,l.ProcessID,l.ErrorMsg,e.EventName,l.separation,l.flatseparation');
            // 7         8        9     10      11        12       13             14
            Datam1.Query1.SQL.Add
              (',p.PubDate,p.PublicationID,p.EditionID,p.SectionID,p.PageName,p.ColorID,p.FileName,pr.ProcessTitle');

            if Nlogfields < 7 then
            begin

            end
            else
            begin
              if Nlogfields < 9 then // 15      16       17
                Datam1.Query1.SQL.Add(',l.Version,0,' + '''' + '' + '''')
              else // 15         16        17
                Datam1.Query1.SQL.Add(',l.Version,l.MiscInt,l.miscstring');
            end;
            Datam1.Query1.SQL.Add
              ('from Log l(NOLOCK), Eventcodes e (NOLOCK), pagetable p (NOLOCK),ProcessConfigurations pr (NOLOCK)');
            Datam1.Query1.SQL.Add('where e.EventNumber = l.event and');
            Datam1.Query1.SQL.Add
              ('(pr.ProcessID = l.ProcessID or l.ProcessID <= 0) and ');
            Datam1.Query1.SQL.Add
              ('(p.separation = l.separation or p.flatseparation = l.FlatSeparation)');
            Datam1.Query1.SQL.Add(wherestr);

            if ComboBoxlogevent.ItemIndex > 0 then
            begin
              Datam1.Query1.SQL.Add('and l.event = ' +
                IntToStr(tNames1.eventnumberfromname(ComboBoxlogevent.text)));
            end
            else
            begin
              instr := '(-99';
              for i := 0 to Length(Prefs.EventLogs) - 1 do
              begin
                if (Prefs.EventLogs[i].Enabled) then
                begin
                  instr := instr + ',' + Prefs.EventLogs[i].Name;
                end;
              end;
              instr := instr + ')';
              Datam1.Query1.SQL.Add('and l.event IN ' + instr);
            end;

            if CheckBoxlogfrom.Checked then
            begin
              Datam1.Query1.SQL.Add('and l.EventTime >= :datefrom');
              Datam1.Query1.parambyname('datefrom').AsDateTime :=
                dateplustime(DateTimePickerlogfromdate.Date,
                DateTimePickerlogfromtime.Time);
            end;

            if CheckBoxlogto.Checked then
            begin
              Datam1.Query1.SQL.Add('and l.EventTime <= :dateto');
              Datam1.Query1.parambyname('dateto').AsDateTime :=
                dateplustime(DateTimePickerlogtodate.Date,
                DateTimePickerlogtotime.Time);
            end;

            Datam1.Query1.SQL.Add
              ('order by l.EventTime,p.FlatSeparation,p.Separation');
            if Prefs.Debug then
              Datam1.Query1.SQL.SaveToFile
                (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
                'sqllogs\' + 'Getlog.SQL');
            Datam1.Query1.Open;
            while not Datam1.Query1.Eof do
            begin
              L := Aview.Items.Add;
              L.caption := Datam1.Query1.Fields[0].AsString;
              L.SubItems.Add(Datam1.Query1.Fields[4].AsString); // event
              L.SubItems.Add(Datam1.Query1.Fields[13].AsString); // filename
              L.SubItems.Add(Datam1.Query1.Fields[3].AsString); // message
              L.SubItems.Add(Datam1.Query1.Fields[14].AsString); // source

              L.SubItems.Add(Datam1.Query1.Fields[7].AsString); // pubdate
              L.SubItems.Add(tNames1.publicationIDtoname(Datam1.Query1.Fields[8]
                .AsInteger));
              // L.subitems.Add(Datam1.Query1.Fields[8].AsString);  //publ

              L.SubItems.Add(tNames1.editionIDtoname(Datam1.Query1.Fields[9]
                .AsInteger));
              // L.subitems.Add(Datam1.Query1.Fields[9].AsString);  //ed
              L.SubItems.Add(tNames1.sectionidtoname(Datam1.Query1.Fields[10]
                .AsInteger));
              // L.subitems.Add(Datam1.Query1.Fields[10].AsString); //sec
              L.SubItems.Add(Datam1.Query1.Fields[11].AsString); // pname
              L.SubItems.Add(tNames1.ColornameIDtoname(Datam1.Query1.Fields[12]
                .AsInteger)); // colorid
              if Nlogfields > 8 then
              begin
                L.SubItems.Add(Datam1.Query1.Fields[15].AsString); // version
              End
              else
                L.SubItems.Add('');
              L.SubItems.Add(Datam1.Query1.Fields[1].AsString);
              Datam1.Query1.Next;
            end;
            Datam1.Query1.Close;
          end;
        1:
          begin
            Datam1.Query1.SQL.Clear;
            // 0         1          2       3            4          5        6            7          8            9
            if Nlogfields > 8 then
              Datam1.Query1.SQL.Add
                ('Select l.EventTime,l.Event,l.ProcessID,l.ErrorMsg,l.FileName,l.Version,l.miscint,l.miscstring,e.EventName,pr.ProcessTitle ')
            else
              Datam1.Query1.SQL.Add
                ('Select l.EventTime,l.Event,l.ProcessID,l.ErrorMsg,l.FileName,l.version,l.Event,l.Event,e.EventName,pr.ProcessTitle ');
            Datam1.Query1.SQL.Add
              ('from Log l (NOLOCK) ,Eventcodes e (NOLOCK) , ProcessConfigurations pr (NOLOCK)');
            Datam1.Query1.SQL.Add('where e.EventNumber = l.event');
            Datam1.Query1.SQL.Add
              ('and (pr.ProcessID = l.ProcessID or l.ProcessID < 0)');
            Datam1.Query1.SQL.Add('and l.event = 6');

            if CheckBoxlogfrom.Checked then
            begin
              Datam1.Query1.SQL.Add('and l.EventTime >= :datefrom');
              Datam1.Query1.parambyname('datefrom').AsDateTime :=
                dateplustime(DateTimePickerlogfromdate.Date,
                DateTimePickerlogfromtime.Time);
            end;

            if CheckBoxlogto.Checked then
            begin
              Datam1.Query1.SQL.Add('and l.EventTime <= :dateto');
              Datam1.Query1.parambyname('dateto').AsDateTime :=
                dateplustime(DateTimePickerlogtodate.Date,
                DateTimePickerlogtotime.Time);
            end;
            Datam1.Query1.SQL.Add('order by EventTime');
            if Prefs.Debug then
              Datam1.Query1.SQL.SaveToFile
                (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
                'sqllogs\' + 'Getlog.SQL');
            Datam1.Query1.Open;
            while not Datam1.Query1.Eof do
            begin
              L := Aview.Items.Add;
              L.caption := Datam1.Query1.Fields[0].AsString;
              L.SubItems.Add(Datam1.Query1.Fields[8].AsString);
              L.SubItems.Add(Datam1.Query1.Fields[4].AsString);
              L.SubItems.Add(Datam1.Query1.Fields[3].AsString);
              L.SubItems.Add(Datam1.Query1.Fields[5].AsString);
              L.SubItems.Add(Datam1.Query1.Fields[9].AsString);
              L.SubItems.Add('');
              L.SubItems.Add('-1');
              Datam1.Query1.Next;
            end;
            Datam1.Query1.Close;

          end;
      end;

    except
    end;

  finally
    Aview.Items.EndUpdate;

    screen.Cursor := crdefault;
    ActionEnable('ActionLogrefreshExecute');
  end;

end;

procedure TFormMain.Setcreep(Publicationid: Integer; Pubdate: TDateTime);
var
  inserted: Integer;
begin

  inserted := 0;
  Datam1.Query2.SQL.Clear;
  Datam1.Query2.SQL.Add
    ('SELECT TOP 1 pressrunid.Inserted FROM pagetable WITH (NOLOCK) INNER JOIN PressRunID (NOLOCK) ON PageTable.PressRunID=PressRunID.PressRunID');
  Datam1.Query2.SQL.Add('WHERE pagetable.Publicationid = ' +
    IntToStr(Publicationid));
  Datam1.Query2.SQL.Add('AND ' + Datam1.makedatastr('', Pubdate));
  if Prefs.Debug then
    Datam1.Query2.SQL.SaveToFile(ExtractFilePath(Application.ExeName) +
      'sqllogs\' + 'creep1.SQL');
  Datam1.Query2.Open;
  if not Datam1.Query2.Eof then
    inserted := Datam1.Query2.Fields[0].AsInteger;
  Datam1.Query2.Close;

  FormCreep.RadioGroupCreepMode.ItemIndex := inserted;

  if FormCreep.ShowModal = mrOK then
  begin
    try
      Datam1.Query2.SQL.Clear;
      Datam1.Query2.SQL.Add
        ('SELECT DISTINCT Editionid FROM PageTable WITH (NOLOCK)');
      Datam1.Query2.SQL.Add('WHERE PublicationID = ' + IntToStr(Publicationid));
      Datam1.Query2.SQL.Add('AND ' + Datam1.makedatastr('', Pubdate));
      Datam1.Query2.Open;

      while not Datam1.Query2.Eof do
      begin
        Datam1.Query3.SQL.Clear;
        Datam1.Query3.SQL.Add('EXEC spPlanApplyCreep');
        Datam1.Query3.SQL.Add('@CreepPer100pages = :CreepPer100pages ,');
        Datam1.Query3.SQL.Add('@PublicationID = ' +
          IntToStr(Publicationid) + ' ,');
        Datam1.Query3.SQL.Add('@Pubdate = :Pubdate' + ' ,');
        Datam1.Query3.SQL.Add('@EditionID = ' +
          IntToStr(Datam1.Query2.Fields[0].AsInteger) + ',');
        Datam1.Query3.SQL.Add('@SectionID = 0,');
        Datam1.Query3.SQL.Add('@CreepOffset = :CreepOffset,');
        Datam1.Query3.SQL.Add('@OverruleCreepMethod = ' +
          IntToStr(FormCreep.RadioGroupCreepMode.ItemIndex + 1));

        Datam1.Query3.parambyname('Pubdate').AsDateTime := Pubdate;
        Datam1.Query3.parambyname('CreepPer100pages').AsFloat :=
          StrToFloat(FormCreep.Editcreep.text);
        Datam1.Query3.parambyname('CreepOffset').AsFloat :=
          StrToFloat(FormCreep.EditCreepOffset.text);
        if Prefs.Debug then
          Datam1.Query3.SQL.SaveToFile(ExtractFilePath(Application.ExeName) +
            'sqllogs\' + 'creep3.SQL');
        Datam1.Query3.ExecSQL(false);

        Datam1.Query2.Next;
      end;
      Datam1.Query2.Close;
    except
    end;
  end;
end;

procedure TFormMain.TactionthumbtreecreepExecute(Sender: TObject);
begin

  if TreeViewThumbs.Selected = nil then
    exit;
  if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Publicationid < 0 then
    exit;

  Setcreep(TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Publicationid,
    TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate);
end;

procedure TFormMain.ActionplatetreesetcreepExecute(Sender: TObject);
begin
  if TreeViewPlateview.Selected = nil then
    exit;
  if TreeViewPlateview.Selected.Level < 2 then
    exit;
  Setcreep(TTreeViewpagestype(TreeViewPlateview.Selected.Data^).Publicationid,
    TTreeViewpagestype(TreeViewPlateview.Selected.Data^).Pubdate);

end;

function TFormMain.getcreep(pressrunid: Longint): double;

Var
  Npages, minP: Integer;
  // l : tlistitem;
  // Wherestr : string;
  // loca,press : Integer;
  maxcreep, mincreep
  // ,p1creep
    : double;
  isinserted: Boolean;
  RunOK: Boolean;
begin
   result := 0;
   mincreep := 0;
   maxcreep := 0;
   minP := 0;
   isinserted := false;
  try

    Datam1.Query2.SQL.Clear;
    Datam1.Query2.SQL.Add('SELECT TOP 1 Inserted FROM PressRunID (NOLOCK)');
    Datam1.Query2.SQL.Add('Where pressrunid = ' + IntToStr(pressrunid));
    Datam1.Query2.Open;
    RunOK := false;
    if not Datam1.Query2.Eof then
    begin
      isinserted := Datam1.Query2.Fields[0].AsInteger = 1;
      RunOK := true;
    end;
    Datam1.Query2.Close;

    if not RunOK then
      exit;

    if isinserted then
    begin
      Datam1.Query2.SQL.Clear;
      Datam1.Query2.SQL.Add
        ('SELECT COUNT( DISTINCT PageIndex) ,MIN(pageindex) FROM PageTable WITH (NOLOCK)');
      Datam1.Query2.SQL.Add('WHERE Active>0 AND PageType<>3 ');
      Datam1.Query2.SQL.Add('and pressrunid = ' + IntToStr(pressrunid));
      Datam1.Query2.Open;
      Npages := -1;
      if not Datam1.Query2.Eof then
      begin
        Npages := Datam1.Query2.Fields[0].AsInteger;
        minP := Datam1.Query2.Fields[1].AsInteger;
      end;
      Datam1.Query2.Close;

      if Npages > 0 then
      begin
        Datam1.Query2.SQL.Clear;
        Datam1.Query2.SQL.Add('select max(creep) from PageTable (NOLOCK)');
        Datam1.Query2.SQL.Add('Where pressrunid = ' + IntToStr(pressrunid));
        Datam1.Query2.SQL.Add('and pageindex = ' + IntToStr(minP));
        Datam1.Query2.Open;
        if not Datam1.Query2.Eof then
          maxcreep := (Datam1.Query2.Fields[0].AsFloat) * -100;
        Datam1.Query2.Close;

        Datam1.Query2.SQL.Clear;
        Datam1.Query2.SQL.Add('select TOP 1 creep from PageTable (NOLOCK)');
        Datam1.Query2.SQL.Add('Where pressrunid = ' + IntToStr(pressrunid));
        Datam1.Query2.SQL.Add('and pageindex = ' + IntToStr(minP));

        Datam1.Query2.Open;
        if not Datam1.Query2.Eof then
          mincreep := Datam1.Query2.Fields[0].AsFloat;
        Datam1.Query2.Close;

        if mincreep = 0 then
          result := 0 - (maxcreep / ((Npages / 2) - 1))
        else
          result := maxcreep / ((Npages / 2) - 1);

      end;
    End
    else
    begin
      Datam1.Query2.SQL.Clear;
      Datam1.Query2.SQL.Add
        ('SELECT COUNT( DISTINCT Pagination) ,MIN(Pagination) FROM PageTable WITH (NOLOCK)');
      Datam1.Query2.SQL.Add('WHERE Active>0 AND PageType<>3 ');
      Datam1.Query2.SQL.Add('and pressrunid = ' + IntToStr(pressrunid));
      Datam1.Query2.Open;
      Npages := -1;
      if not Datam1.Query2.Eof then
      begin
        Npages := Datam1.Query2.Fields[0].AsInteger;
        minP := Datam1.Query2.Fields[1].AsInteger;
      end;
      Datam1.Query2.Close;

      if Npages > 0 then
      begin
        Datam1.Query2.SQL.Clear;
        Datam1.Query2.SQL.Add('select max(creep) from PageTable (NOLOCK)');
        Datam1.Query2.SQL.Add('Where pressrunid = ' + IntToStr(pressrunid));
        Datam1.Query2.Open;
        if not Datam1.Query2.Eof then
          maxcreep := (Datam1.Query2.Fields[0].AsFloat) * -100;
        Datam1.Query2.Close;

        Datam1.Query2.SQL.Clear;
        Datam1.Query2.SQL.Add('select TOP 1 creep from PageTable (NOLOCK)');
        Datam1.Query2.SQL.Add('Where pressrunid = ' + IntToStr(pressrunid));
        Datam1.Query2.SQL.Add('and Pagination = ' + IntToStr(minP));

        Datam1.Query2.Open;
        if not Datam1.Query2.Eof then
          mincreep := Datam1.Query2.Fields[0].AsFloat;
        Datam1.Query2.Close;

        if mincreep = 0 then
          result := (maxcreep / ((Npages / 2) - 1))
        else
          result := 0 - maxcreep / ((Npages / 2) - 1);

      end;
    end;

  except

  end;

end;

procedure TFormMain.ActionprodtreecreepExecute(Sender: TObject);
begin
  if TreeViewprodcontrol.Selected = nil then
    exit;
  if TreeViewprodcontrol.Selected.Level < 2 then
    exit;
  if TTreeViewpagestype(TreeViewprodcontrol.Selected.Data^).Publicationid < 0
  then
    exit;

  Setcreep(TTreeViewpagestype(TreeViewprodcontrol.Selected.Data^).Publicationid,
    TTreeViewpagestype(TreeViewprodcontrol.Selected.Data^).Pubdate);
  ActionProgressrefresh.Execute;

end;

procedure TFormMain.ActionPagesblackrelExecute(Sender: TObject);
begin
  DODoPagereleaseExecute(true);
end;

procedure TFormMain.ActionpagetreemonrelExecute(Sender: TObject);
begin
  Pagetreerelease(true);
end;

procedure TFormMain.ActionthumbrelmonoExecute(Sender: TObject);
begin
  if (Prefs.MustSetDeviceOnRelease) then
  begin
    Releaseproductionids.Clear;
    ReleasePressrunids.Clear;
    ReleasePlates.Clear;

    Releaseproductionids.Add
      (IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
      .ProductionID));
    if not checkdevbeforerelease then
      exit;

  end;

  DothumbnailReleaseExecute(true);

end;

procedure TFormMain.ActionthumbtreerelmonoExecute(Sender: TObject);
begin
  thumbtreerealse(true);
end;

procedure TFormMain.ActionplaterelmonoExecute(Sender: TObject);
begin
  Platerelease(true);
end;

procedure TFormMain.ActionplatetreerelmonoExecute(Sender: TObject);
begin
  platetreerelease(true);
end;

procedure TFormMain.ActionprodrelmonoExecute(Sender: TObject);
begin
  productionrelase(true);
end;

procedure TFormMain.ActionprodtreerelmonoExecute(Sender: TObject);
begin
  prodtreerelease(true);
end;

procedure TFormMain.ActioncalpartialExecute(Sender: TObject);
Var
  N: TTreeNode;
begin
  try
    Formprodplan.ItsArepair := false;
    Planloggingtype := 991;
    Planloggingmessage := 'Plan applied';

    N := TreeViewplan.Selected;

    plateframesApplyproductionid := Tplantreedata(N.Data^).ProductionID;
    plateframesPublicationid := Tplantreedata(N.Data^).Publicationid;
    plateframesPubdate := Tplantreedata(N.Data^).Pubdate;

    while N.Level > 1 do
      N := N.Parent;

    plateframespressid := Tplantreedata(N.Data^).pressid;
    plateframeslocationid := Tplantreedata(N.Data^).LocationID;
    FormCalcAutopart.initialilze(plateframesApplyproductionid);
    if FormCalcAutopart.ShowModal = mrOK then
    begin
      Planloggingtype := 991;
      Planloggingmessage := 'Plan Part. applied';

      Dopartappl(false);
      Actionnewplanrefresh.Execute;
    end;
  Except

  end;
end;

procedure TFormMain.ActiondelsectionExecute(Sender: TObject);
Var
  oktodel: Boolean;
begin
  try
    if TreeViewNeweddtree.Selected = nil then
      exit;
    if TreeViewNeweddtree.Selected.Level < 2 then
      exit;
    if ListViewEdto.Items.Count = 0 then
      exit;
    if ListViewEdto.Selected = nil then
      exit;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select TOP 1 p1.pagename,p1.editionid from pagetable p1 (NOLOCK)');
    Datam1.Query1.SQL.Add('where p1.uniquepage = 1');
    Datam1.Query1.SQL.Add('and p1.sectionid = ' +
      IntToStr(editiontype(ListViewEdto.Items[ListViewEdto.Selected.Index]
      .Data^).Sectionid));
    Datam1.Query1.SQL.Add('and p1.pressrunid = ' +
      IntToStr(editiontype(ListViewEdto.Items[0].Data^).pressrunid) +
      ' and exists(select p2.pagename from pagetable p2 (NOLOCK) where');
    Datam1.Query1.SQL.Add
      ('p1.mastercopyseparationset = p2.mastercopyseparationset');
    Datam1.Query1.SQL.Add('and p1.pressrunid <> p2.pressrunid )');
    Datam1.Query1.SQL.Add
      ('OR Exists (select p3.pagename from pagetable p3 (NOLOCK) where p1.copyflatseparationset = p3.copyflatseparationset)');
    Datam1.Query1.SQL.Add('and p1.copyseparationset <> p3.copyseparationset )');

    Datam1.Query1.Open;
    oktodel := Datam1.Query1.Eof;
    Datam1.Query1.Close;

    if oktodel then
    begin
      (*
        if MessageDlg(InfraLanguage1.Translate('Delete the selected sub edition ?'),mtConfirmation, [mbYes, mbNo], 0) = mrYes then
        begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('delete pagetable where pressrunid = '+IntToStr(editiontype(ListViewEdto.Items[0].Data^).pressrunid));
        Datam1.Query1.ExecSQL(false);

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('delete pressrunid where pressrunid = '+IntToStr(editiontype(ListViewEdto.Items[0].Data^).pressrunid));
        Datam1.Query1.ExecSQL(false);



        ListViewEdto.Items.Clear;
        ListViewEdtodink.Items.Clear;
        FormMain.cleanupproductionnames;
        FormMain.cleanupfilesonserver;

        end;
      *)
    end
    else
    begin
      MessageDlg(InfraLanguage1.Translate
        ('This edition cannot be deleted since certain pages are being used by others'),
        mtInformation, [mbOk], 0);
    end;
  Except

  end;
  Actionrefreshhedtree.Execute;
end;

procedure TFormMain.ActionChangeEdNameExecute(Sender: TObject);
begin
  try
    if TreeViewNeweddtree.Selected = nil then
      exit;
    if TreeViewNeweddtree.Selected.Level < 2 then
      exit;
    if ListViewEdto.Items.Count = 0 then
      exit;

    Formselectfromlist.PanelAllcopies.Visible := false;
    Formselectfromlist.caption := 'Change Edition name to';

    Formselectfromlist.ListBox1.Items := tNames1.editionnames;
    Formselectfromlist.ListBox1.Items.Delete
      (Formselectfromlist.ListBox1.Items.IndexOf
      (tNames1.editionIDtoname(editiontype(ListViewEdto.Items[0].Data^)
      .editionid)));

  Except

  end;
end;

procedure TFormMain.StringGridprodsKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
// Var
// Foundone,
// i2 : Integer;
// Rect : TRect;
begin
  (*
    if (Shift = [ssCtrl]) AND( (key = ord('a')) or (key = ord('A'))) then
    begin
    Foundone := -1;
    for i2 := 1 to StringGridprods.RowCount do
    begin
    if StringGridprodsdata[i2].Selected then
    begin
    Foundone := i2;
    break;
    end;
    end;
    if Foundone = -1 then
    begin
    Foundone := 1;
    end;
    for i2 := 1 to StringGridprods.RowCount do
    begin

    if StringGridprodsdata[i2].pressid = StringGridprodsdata[foundone].pressid then
    begin
    Rect := StringGridprods.CellRect(1,i2);
    StringGridprodsMouseDown(self,mbLeft,[ssCtrl], Rect.Left+3,Rect.top+3);
    end;
    end;
    end;
  *)
end;

procedure TFormMain.StringGridprodsKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
Var
  i2: Integer;
begin
  if (Shift = [ssCtrl]) AND ((Key = ord('a')) or (Key = ord('A'))) then
  begin
    for i2 := 1 to StringGridprods.RowCount do
    begin
      StringGridprodsdata[i2].Selected := true;
    end;
    StringGridprods.Repaint;
    ActionEnable('StringGridprodsKeyUp');
  end;
end;

procedure TFormMain.CheckBoxAllLocationsPaClick(Sender: TObject);
begin
  Setallpublsystem(ComboBoxpalocationNY.text = 'All');
  if (PageControlMain.ActivePageIndex = VIEW_SEPARATIONS) and
    (TreeViewpagelist.Visible) then
    Actionrefreshpagefilter.Execute;
end;

procedure TFormMain.CheckBoxThumballClick(Sender: TObject);
begin
  Setallpublsystem(ComboBoxpalocationNY.text = 'All');
  if (PageControlMain.ActivePageIndex = VIEW_THUMBNAILS) and
    (TreeViewThumbs.Visible) then
    ActionThumbnailFilterrefresh.Execute;
end;

procedure TFormMain.CheckBoxAllLocationsProdClick(Sender: TObject);
begin
  Setallpublsystem(ComboBoxpalocationNY.text = 'All');
  if (PageControlMain.ActivePageIndex = VIEW_PRODUCTIONS) and
    (TreeViewprodcontrol.Visible) then
    Actionprogressrefreshfilter.Execute;
end;

procedure TFormMain.Setallpublsystem(Ischecked: Boolean);
begin
  alllocationsset := Ischecked;

  (* ComboBoxpalocationNy.Enabled := not alllocationsset;
    ComboBoxpalocationNy.Refresh;
  *)
end;

(*
  Select distinct I1.InputPath,p1.filename from pagetable p1, InputConfigurations I1
  Where I1.inputid = p1.inputid and p1.locationid = 1
*)
procedure TFormMain.ActionDebugclearlogExecute(Sender: TObject);
begin
  plancentermainlog.Clear;
  plancentermainlog.Add('New log');

end;

procedure TFormMain.TreeViewpagelistChange(Sender: TObject; Node: TTreeNode);
Var
  N: TTreeNode;
begin
  if TreeViewpagelist.Visible then
  begin
    try
      try
        formprev2.Clearprev2;
        screen.Cursor := crhourglass;
        GSelpubdate := 0;
        GSelpubid := -1;
        N := TreeViewpagelist.Selected;
        while N.Level > 0 do
        begin
          case TTreeViewpagestype(N.Data^).kind of
            // 0=all,1=location,2=publication,pubdate,3=issue,4=edition,5=section
            1:
              GSelpubdate := TTreeViewpagestype(N.Data^).Pubdate;
            2:
              GSelpubid := TTreeViewpagestype(N.Data^).Publicationid;
          end;
          N := N.Parent;
        end;
        clearhs;
        if TreeViewpagelist.Selected <> nil then
        begin
          if (TreeViewpagelist.Selected.Level >= Prefs.SeparationMinTreeLevel)
          then
          begin
            loadSuperHSDB2(false);
          end;
        end;
        Savekeeptrees(ComboBoxpalocationNY.text, TreeViewpagelist);

        ActionEnable('TreeViewpagelistChange');
      except
      end;

    Finally
      screen.Cursor := crdefault;
    end;
  end;
end;

procedure TFormMain.AppException(Sender: TObject; E: Exception);
begin
  if Prefs.Debug then
    writeMainlogfile('Exception ' + E.Message);
  LogTestDebug(E.Message);
end;

procedure TFormMain.GetPosiblePubdates(SetToplus: Longint);
begin
  SetAdayselectcombo(ComboBoxGlobalPubDateFilter);
end;

procedure TFormMain.SetAdayselectcombo(Var Acombobox: TComboBox);
Var
  aktitemindex: Integer;
  SL: Tstringlist;
  i: Integer;
  CurrentLocationid: Integer;
  aktselection: string;
  idx: Integer;
begin
  // LabelAlldays
  aktselection := '';
  if (Acombobox.ItemIndex >= 0) then
    aktselection := Acombobox.text;

  aktitemindex := Acombobox.ItemIndex;
  if aktitemindex < 0 then
    aktitemindex := 0;

  Acombobox.Items.Clear;
  Acombobox.Items.Add(LabelAlldays.caption);
  Acombobox.Items.Add(LabelFromtoday.caption);
  idx := 1;
  CurrentLocationid := GetSelectedLocationID();

  try
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Select distinct pubdate from pagetable (NOLOCK)');
    Datam1.Query1.SQL.Add
      ('Where active > 0 and Dirty = 0 AND DATEPART(year,PubDate)<2100');

    if (ComboBoxpalocationNY.text <> 'All') AND (CurrentLocationid > 0) then
      Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(CurrentLocationid));

    if (Pressvisibilylimited) AND (PressvisibilyIN <> '') then
      Datam1.Query1.SQL.Add('and pressid IN ' + PressvisibilyIN);

    Datam1.Query1.SQL.Add(WeditionStr);
    Datam1.Query1.SQL.Add(WpublicationStr);

    Datam1.Query1.SQL.Add('order by pubdate');
    Datam1.Query1.Open;

    if (Prefs.ShowWeekNumberInTree) then // Skal der vises uge nr elle dato?
    begin // NÅ det er uge nr.
      SL := Tstringlist.Create;
      // Vi bruger en stringlist til at sortere og fjerne dubletter
      SL.Duplicates := dupIgnore;
      SL.Sorted := true;
      while not Datam1.Query1.Eof do
      begin
        SL.Append(TUtils.LeadingZeroes(WeekOf(Datam1.Query1.Fields[0]
          .AsDateTime), 2) + ' ' +
          IntToStr(YearOf(Datam1.Query1.Fields[0].AsDateTime)));
        Datam1.Query1.Next;
      end;
      For i := 0 to SL.Count - 1 Do
      begin
        Acombobox.AddItem(SL.strings[i], TObject(SL.strings[i]));
        Inc(idx);
        if (SL.strings[i] = aktselection) then
          aktitemindex := idx;

      end;
      SL.free
      // Acombobox.Items.Add(SL.strings[i]);
    end
    else
    Begin // Nej, så må det være dato
      while not Datam1.Query1.Eof do
      begin
        // Acombobox.Items.Add(datetostr(Datam1.Query1.Fields[0].AsDateTime));
        Acombobox.AddItem(datetostr(Datam1.Query1.Fields[0].AsDateTime),
          TObject(Trunc(Datam1.Query1.Fields[0].AsDateTime)));
        Inc(idx);
        if (datetostr(Datam1.Query1.Fields[0].AsDateTime) = aktselection) then
          aktitemindex := idx;
        Datam1.Query1.Next;
      end;
    End;
    Datam1.Query1.Close;

    if (aktselection <> '') AND (aktitemindex >= 0) then
      Acombobox.ItemIndex := aktitemindex
    else
      Acombobox.ItemIndex := 0;

  Except
  end;

end;

procedure TFormMain.TimerautorefreshFormMainTimer(Sender: TObject);
begin

  if not StartuPdone then
    exit;
  // memotestPrefs.Debug.Lines.Add('TimerautorefreshFormMainTimer');
  // memotestPrefs.Debug.refresh;
  { ### NAN 20151127

    if FormMain.active then
    FormMain.refresh;
    Application.ProcessMessages; }
end;

procedure TFormMain.ListViewunkowfilesColumnClick(Sender: TObject;
  Column: TListColumn);
Var
  { I, } x1, y1: Integer;

begin
  // edit1.Text := Column.Caption + ' ' + IntToStr(Column.Index);    DEBUG purpose
  case Column.Index of
    0:
      begin
        x1 := 0;
        y1 := 0;

        if Prefs.UnknownFilesFileNameLengthMatch > 0 then
        begin

          FormUknownfiles.GetAdropdownlist(Formlistselect.ComboBox1);
          Formlistselect.caption := 'Select a filter';
          if Formlistselect.ShowModal = mrOK then
          begin
            if (Formlistselect.ComboBox1.ItemIndex > 0) OR
              (Formlistselect.ComboBox1.text <> '*.*') then
              FormUknownfiles.Uknownfilter :=
                Formlistselect.ComboBox1.text + '*.*'
            else
              FormUknownfiles.Uknownfilter := '*.*';
            Actionmontorrefresh.Execute;
          end;
        end;
      end;
    1:
      begin
        // edit1.Text := Column.Caption;    DEBUG purpose
      end;
    2:
      begin
        // edit1.Text := Column.Caption;    DEBUG purpose
      end;
    3:
      begin
        // edit1.Text := Column.Caption;      DEBUG purpose
      end;
  end;
  (*
    if UnknownColumnToSort = Column.Index then
    UnknownSortup := not UnknownSortup
    else
    UnknownSortup := false;

    UnknownColumnToSort := Column.Index;
    (Sender as TCustomListView).AlphaSort;


  *)
end;

procedure TFormMain.ActionthumbmaskExecute(Sender: TObject);
begin
  if PBExListviewthumbnail.Selected <> nil then
  begin
    Formproofmask.SelectedMaster := Showthubms[PBExListviewthumbnail.Selected.
      Index].mastercopyseparationset;

    Formproofmask.ShowModal;

    ActionThumbnailrefresh.Execute;
  end;
end;

function TFormMain.GetTreePublInputalais(APublID: Longint): String;
Var
  i: Integer;
begin
  result := '';
  if NPublinalias > 0 then
  begin
    for i := 1 to NPublinalias do
    begin
      if Publinalias[i].Publid = APublID then
      begin
        result := Publinalias[i].Inalias;
        break;
      end;
    end;
  end;

end;

procedure TFormMain.LoadTreePublInputalais;
Var
  AkLnameT: String;
begin
  try
    NPublinalias := 0;
    Datam1.Querytree.SQL.Clear;
    Datam1.Querytree.SQL.Add('Select Count(Distinct longname) From InputAliases nolock');
    Datam1.Querytree.SQL.Add('Where Type = ' + '''' + 'Publication' + '''');
    Datam1.Querytree.Open;
    if not Datam1.Querytree.Eof then
    begin
      NPublinalias := Datam1.Querytree.Fields[0].AsInteger;
    end;
    Datam1.Querytree.Close;

    if NPublinalias > 0 then
    begin
      NPublinSize := NPublinalias + 10;
      AkLnameT := '';
      SetLength(Publinalias, NPublinalias + 20);
      Datam1.Querytree.SQL.Clear;
      Datam1.Querytree.SQL.Add('Select Distinct longname,ShortName From InputAliases (NOLOCK) ');
      Datam1.Querytree.SQL.Add('Where Type = ' + '''' + 'Publication' + '''');
      Datam1.Querytree.SQL.Add('Order by longname');
      Datam1.Querytree.Open;
      AkLnameT := '';
      NPublinalias := 0;
      while not Datam1.Querytree.Eof do
      begin
        if AkLnameT <> Datam1.Querytree.Fields[0].AsString then
        begin
          AkLnameT := Datam1.Querytree.Fields[0].AsString;
          if NPublinalias < NPublinSize then
          begin
            Inc(NPublinalias);
            Publinalias[NPublinalias].Publid :=
              tNames1.publicationNameToID(AkLnameT);
            Publinalias[NPublinalias].Inalias := Datam1.Querytree.Fields
              [1].AsString;
          end;
        end;
        Datam1.Querytree.Next;
      end;
      Datam1.Querytree.Close;
    end;
  Except
    NPublinalias := 0;
  end;
end;

procedure TFormMain.ActionthumbpageformatExecute(Sender: TObject);
begin
  try
    if TreeViewThumbs.Selected = nil then
      exit;
    if TreeViewThumbs.Selected.Level < 2 then
      exit;
    Formpageformats.Specifikruns := false;
    Formpageformats.ApplyOnPublication :=
      TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Publicationid;
    Formpageformats.ApplyOnPubdate :=
      TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate;
    Formpageformats.ShowModal;
    ActionThumbnailrefresh.Execute;
  Except
  end;
end;

procedure TFormMain.ActionconfigpageformatExecute(Sender: TObject);
begin
  dopageformatsetup;
end;

procedure TFormMain.ActionprodpageformatExecute(Sender: TObject);
begin
  try
    if TreeViewprodcontrol.Selected = nil then
      exit;
    if TreeViewprodcontrol.Selected.Level < 2 then
      exit;
    Formpageformats.Specifikruns := true;
    Formpageformats.wherestr := makeprogINrunStr('');

    Formpageformats.ApplyOnPublication :=
      TTreeViewpagestype(TreeViewprodcontrol.Selected.Data^).Publicationid;
    Formpageformats.ApplyOnPubdate :=
      TTreeViewpagestype(TreeViewprodcontrol.Selected.Data^).Pubdate;
    Formpageformats.ShowModal;
    ActionThumbnailrefresh.Execute;
  Except
  end;

end;

procedure TFormMain.Setthumbstatbar;
Var
  aktproofid, aktmiscint: Integer;
  Pageformats, Proofers: String;
  Alocationid, i, Paninuse: Integer;
  PublicationID : Integer;
  EditionID : Integer;
  SectionID : Integer;
  PubDate :   TDateTime;
  PagesTotal : Integer;
  PagesArrived : Integer;
begin
   PublicationID := 0;
   EditionID := 0;
   SectionID := 0;
   PubDate := 0;
   PagesTotal := 0;
   PagesArrived := 0;
  StatusBarthumbs.Visible := false;
  for i := 0 to StatusBarthumbs.Panels.Count - 1 do
    StatusBarthumbs.Panels[i].text := '';
  for i := 0 to Length(Prefs.ThumbnailStatusBar) - 1 do
  begin
    if (Prefs.ThumbnailStatusBar[i].Enabled) then
    begin
      StatusBarthumbs.Visible := true;
      break
    end;
  end;

  Alocationid := GetSelectedLocationID();

  if StatusBarthumbs.Visible then
  begin
    Paninuse := -1;
    if (PBExListviewthumbnail.Items.Count > 0) and (TreeViewThumbs.Selected <> nil) then
    begin

      if (TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Publicationid > -1) then
           PublicationID  := TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Publicationid;
       if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid > -1 then
          EditionID := TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid;
       if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Sectionid > -1  then
          SectionID := TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Sectionid;
       if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate > 0 then
          PubDate :=  TTreeViewpagestype(TreeViewThumbs.Selected.Data^).Pubdate;

      if Prefs.ThumbnailStatusBar[0].Enabled then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('Select distinct proofid from pagetable (NOLOCK)');
        Datam1.Query1.SQL.Add('Where active <> -999');
        if PublicationID > 0then
          Datam1.Query1.SQL.Add('and publicationid = ' + IntToStr(PublicationID));
        if EditionID > 0 then
          Datam1.Query1.SQL.Add('and Editionid = ' + IntToStr(EditionID));
        if SectionID > 0 then
          Datam1.Query1.SQL.Add('and Sectionid = ' + IntToStr(SectionID));
        if PubDate > 0 then
          Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('', Pubdate));
        if (Alocationid > 0) then
          Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Alocationid));

        aktproofid := -1;
        Proofers := '';
        Datam1.Query1.SQL.Add('order by proofid ');
        Datam1.Query1.Open;
        while not Datam1.Query1.Eof do
        begin
          if aktproofid <> Datam1.Query1.Fields[0].AsInteger then
          begin
            aktproofid := Datam1.Query1.Fields[0].AsInteger;
            if Proofers = '' then
              Proofers := tNames1.proofIDtoname(aktproofid)
            else
              Proofers := Proofers + ',' + tNames1.proofIDtoname(aktproofid);
          end;

          Datam1.Query1.Next;
        end;
        Datam1.Query1.Close;
        Inc(Paninuse);
        StatusBarthumbs.Panels[Paninuse].text := 'Proof : ' + Proofers;
      end;

      if (Prefs.ThumbnailStatusBar[1].Enabled) then
      begin

        Datam1.Query1.SQL.Clear;
        //
        if (Pageformatinpagetable) then
          Datam1.Query1.SQL.Add
            ('Select TOP 1  p1.PageFormatID,pf.PageFormatName from pagetable p1 (NOLOCK),PageFormatNames pf (NOLOCK) ')
        else
          Datam1.Query1.SQL.Add
            ('Select Distinct pr.miscint1,pf.PageFormatName from pagetable p1 (NOLOCK),pressrunid pr (NOLOCK),PageFormatNames pf (NOLOCK) ');

        Datam1.Query1.SQL.Add('Where active <> -999');
        if Publicationid > 0 then
          Datam1.Query1.SQL.Add('and p1.publicationid = ' + IntToStr(Publicationid));
        if Editionid > 0 then
          Datam1.Query1.SQL.Add('and p1.editionid = ' + IntToStr(Editionid));
        if Sectionid > 0 then
          Datam1.Query1.SQL.Add('and p1.sectionid = ' + IntToStr(Sectionid));
        if Pubdate <> 0 then
          Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('p1.',Pubdate));
        if (Alocationid > 0) then
          Datam1.Query1.SQL.Add('and p1.locationid = ' + IntToStr(Alocationid));
        if (Pageformatinpagetable) then
        begin
          Datam1.Query1.SQL.Add('and p1.PageFormatID = pf.PageFormatID');
        end
        else
        begin
          Datam1.Query1.SQL.Add
            ('and p1.pressrunid = pr.pressrunid and pr.miscint1 > 0');
          Datam1.Query1.SQL.Add('and pr.miscint1 = pf.PageFormatID ')
        end;

        ;
        if Prefs.Debug then
          Datam1.Query1.SQL.SaveToFile
            (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
            'sqllogs\' + 'Chkifflag.SQL');
        Datam1.Query1.Open;
        aktmiscint := -1;
        Pageformats := '';
        if not Datam1.Query1.Eof then
        begin
          aktmiscint := Datam1.Query1.Fields[0].AsInteger;
          Pageformats := Datam1.Query1.Fields[1].AsString
        end;
        Datam1.Query1.Close;

        if (Pageformats = '') and (not Pageformatinpagetable) then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('Select TOP 1 l.PageFormatID,pf.PageFormatName from PublicationNames l (NOLOCK),PageFormatNames pf (NOLOCK) ');
          if Publicationid >0 then
            Datam1.Query1.SQL.Add('Where l.publicationid = ' + IntToStr(Publicationid));
          Datam1.Query1.SQL.Add('and l.PageFormatID = pf.PageFormatID ');
          Datam1.Query1.Open;
          if not Datam1.Query1.Eof then
            Pageformats := Datam1.Query1.Fields[1].AsString;
          Datam1.Query1.Close;

        end;
        Inc(Paninuse);
        StatusBarthumbs.Panels[Paninuse].text := 'Pageformat : ' + Pageformats;
      end;

      if Prefs.ThumbnailStatusBar[2].Enabled then     // Page arrival information
      begin

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('Select COUNT(DISTINCT CopySeparationSet) FROM Pagetable (NOLOCK)');
        Datam1.Query1.SQL.Add('Where Active <> 0 AND Dirty=0 ');
         if Publicationid > 0 then
          Datam1.Query1.SQL.Add('and Publicationid = ' + IntToStr(Publicationid));
        if Editionid > 0 then
          Datam1.Query1.SQL.Add('and Editionid = ' + IntToStr(Editionid));
        if Sectionid > 0 then
          Datam1.Query1.SQL.Add('and Sectionid = ' + IntToStr(Sectionid));
        if Pubdate <> 0 then
          Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',Pubdate));
        if (Alocationid > 0) then
          Datam1.Query1.SQL.Add('and Locationid = ' + IntToStr(Alocationid));


        Datam1.Query1.Open;
        if not Datam1.Query1.Eof then
        begin
          PagesTotal := Datam1.Query1.Fields[0].AsInteger;
        end;
        Datam1.Query1.Close;
          Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('Select COUNT(DISTINCT CopySeparationSet) FROM Pagetable (NOLOCK)');
        Datam1.Query1.SQL.Add('Where Active <> 0 AND Dirty=0 AND Status>=30 ');
         if Publicationid > 0 then
          Datam1.Query1.SQL.Add('and Publicationid = ' + IntToStr(Publicationid));
        if Editionid > 0 then
          Datam1.Query1.SQL.Add('and Editionid = ' + IntToStr(Editionid));
        if Sectionid > 0 then
          Datam1.Query1.SQL.Add('and Sectionid = ' + IntToStr(Sectionid));
        if Pubdate <> 0 then
          Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',Pubdate));
        if (Alocationid > 0) then
          Datam1.Query1.SQL.Add('and Locationid = ' + IntToStr(Alocationid));


        Datam1.Query1.Open;
        if not Datam1.Query1.Eof then
        begin
          PagesArrived := Datam1.Query1.Fields[0].AsInteger;
        end;
        Datam1.Query1.Close;


        Inc(Paninuse);
        StatusBarthumbs.Panels[Paninuse].text := 'Pages arrived: ' + IntToStr(PagesArrived) + ' of ' + IntToStr(PagesTotal);
      end;

       if Prefs.ThumbnailStatusBar[3].Enabled then     // Page approval information
      begin

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('Select COUNT(DISTINCT CopySeparationSet) FROM Pagetable (NOLOCK)');
        Datam1.Query1.SQL.Add('Where Active <> 0 AND Dirty=0 ');
         if Publicationid > 0 then
          Datam1.Query1.SQL.Add('and Publicationid = ' + IntToStr(Publicationid));
        if Editionid > 0 then
          Datam1.Query1.SQL.Add('and Editionid = ' + IntToStr(Editionid));
        if Sectionid > 0 then
          Datam1.Query1.SQL.Add('and Sectionid = ' + IntToStr(Sectionid));
        if Pubdate <> 0 then
          Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',Pubdate));
        if (Alocationid > 0) then
          Datam1.Query1.SQL.Add('and Locationid = ' + IntToStr(Alocationid));


        Datam1.Query1.Open;
        if not Datam1.Query1.Eof then
        begin
          PagesTotal := Datam1.Query1.Fields[0].AsInteger;
        end;
        Datam1.Query1.Close;
          Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('Select COUNT(DISTINCT CopySeparationSet) FROM Pagetable (NOLOCK)');
        Datam1.Query1.SQL.Add('Where Active <> 0 AND Dirty=0 AND Status>=30 AND (Approved=1 OR Approved=-1)');
         if Publicationid > 0 then
          Datam1.Query1.SQL.Add('and Publicationid = ' + IntToStr(Publicationid));
        if Editionid > 0 then
          Datam1.Query1.SQL.Add('and Editionid = ' + IntToStr(Editionid));
        if Sectionid > 0 then
          Datam1.Query1.SQL.Add('and Sectionid = ' + IntToStr(Sectionid));
        if Pubdate <> 0 then
          Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',Pubdate));
        if (Alocationid > 0) then
          Datam1.Query1.SQL.Add('and Locationid = ' + IntToStr(Alocationid));


        Datam1.Query1.Open;
        if not Datam1.Query1.Eof then
        begin
          PagesArrived := Datam1.Query1.Fields[0].AsInteger;
        end;
        Datam1.Query1.Close;


        Inc(Paninuse);
        StatusBarthumbs.Panels[Paninuse].text := 'Pages approved: ' + IntToStr(PagesArrived) + ' of ' + IntToStr(PagesTotal);
      end;
    end;
  end;

end;

procedure TFormMain.ActionThumbTifeditExecute(Sender: TObject);
Var
  T, Path: String;
  i, ic, mastercopyseparationset: Integer;
  filename: String;
begin

  for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
  begin
    if (PBExListviewthumbnail.Items[i].Selected) then
    begin
      Formtiffpreview.ListBoxColors.Items.Clear;
      Formtiffpreview.ListBoxColorfilenames.Items.Clear;
      mastercopyseparationset := Showthubms[i].mastercopyseparationset;
      filename := Showthubms[i].filename;

      for ic := 1 to Showthubms[i].Ncolor do
      begin
        if (Showthubms[i].Colorstatarray[ic].status >= 30) and
          (Showthubms[i].Colorstatarray[ic].Active > 0) then
        begin
          T := '';
          Path := Uppercase(MainCCDATA);

          if pos('CCFILES', Path) > 0 then
          begin
            T := IncludeTrailingBackSlash(MainCCDATA) + filename + '====' +
              IntToStr(mastercopyseparationset) + '.' +
              tNames1.ColornameIDtoname(Showthubms[i].Colorstatarray
              [ic].Colorid);
            if (not FileExists(T)) then
              T := IncludeTrailingBackSlash(MainCCDATA) +
                IntToStr(mastercopyseparationset) + '.' +
                tNames1.ColornameIDtoname(Showthubms[i].Colorstatarray
                [ic].Colorid);
          end
          else
          begin

            T := IncludeTrailingBackSlash(MainCCDATA) + 'CCfiles\' + filename +
              '====' + IntToStr(mastercopyseparationset) + '.' +
              tNames1.ColornameIDtoname(Showthubms[i].Colorstatarray
              [ic].Colorid);
            if (not FileExists(T)) then
              T := IncludeTrailingBackSlash(MainCCDATA) + 'CCfiles\' +
                IntToStr(mastercopyseparationset) + '.' +
                tNames1.ColornameIDtoname(Showthubms[i].Colorstatarray
                [ic].Colorid);
          end;

          if FileExists(T) then
          begin

            Formtiffpreview.ListBoxColors.Items.Add
              (tNames1.ColornameIDtoname(Showthubms[i].Colorstatarray[ic]
              .Colorid));
            Formtiffpreview.ListBoxColorfilenames.Items.Add(T);
          end;
        end;
      end;

      if Formtiffpreview.ListBoxColors.Items.Count > 0 then
      begin
        Formtiffpreview.GroupBoxcolorlist.Visible := true;
        Formtiffpreview.ListBoxColors.ItemIndex := 0;
        Formtiffpreview.Tiff_filename :=
          Formtiffpreview.ListBoxColorfilenames.Items[0];
        Formtiffpreview.caption := Formtiffpreview.Tiff_filename;
        Formtiffpreview.ListBoxColorfilenames.Visible := false;
        Formtiffpreview.ImageEnView1.IO.LoadFromFileTIFF
          (Formtiffpreview.Tiff_filename);

        Formtiffpreview.ShowModal;
        Formtiffpreview.caption := 'Tiff preview';
        Formtiffpreview.GroupBoxcolorlist.Visible := false;
      end;
      break;
    end;
  end;
end;

procedure TFormMain.ActionplateretransExecute(Sender: TObject);
Var
  mkres, IP, ic, i, i2, nplfound { ,ncolors } : Integer;
  aktcolor, highpritext, reimexttext: string;
  foundl: TListItem;
  Whereandstr: String;
  AApressInstr: String;
  runnode: TTreeNode;
  ProductionID: Integer;
  aktpressid: Integer;
begin
  aktpressid := 0;
  if not AnyPlatesselected then
    exit;
  try
    highpritext := '';
    reimexttext := '';
    if (Prefs.ReimageWithHighPriority) then
      highpritext := ',priority = 100';

    if (Prefs.ReimageExternalStatus <> -1) then
      reimexttext := ',externalstatus = ' +
        IntToStr(Prefs.ReimageExternalStatus);

    Whereandstr := '';

    Formretransto.checklistbox1.Items.Clear;

    if TreeViewPlateview.Selected = nil then
      exit;
    runnode := TreeViewPlateview.Selected;
    if runnode = nil then
      exit;
    if runnode.Level < 2 then
      exit;
    ProductionID := TTreeViewpagestype(runnode.Data^).ProductionID;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Select TOP 1 pressid from pagetable (NOLOCK)');
    Datam1.Query1.SQL.Add('Where publicationid =  ' +
      IntToStr(TTreeViewpagestype(runnode.Data^).Publicationid));
    Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
      TTreeViewpagestype(runnode.Data^).Pubdate));
    Datam1.Query1.SQL.Add('and productionid =  ' +
      IntToStr(TTreeViewpagestype(runnode.Data^).ProductionID));
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
    begin
      aktpressid := Datam1.Query1.Fields[0].AsInteger;
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Select distinct pressid from pagetable (NOLOCK)');
    Datam1.Query1.SQL.Add('Where publicationid =  ' +
      IntToStr(TTreeViewpagestype(runnode.Data^).Publicationid));
    Datam1.Query1.SQL.Add(' and ' + Datam1.makedatastr('',
      TTreeViewpagestype(runnode.Data^).Pubdate));
    Datam1.Query1.Open;
    while not Datam1.Query1.Eof do
    begin
      Formretransto.checklistbox1.Items.Add
        (tNames1.pressnameIDtoname(Datam1.Query1.Fields[0].AsInteger));
      if aktpressid = Datam1.Query1.Fields[0].AsInteger then
        Formretransto.checklistbox1.Checked
          [Formretransto.checklistbox1.Items.Count - 1] := true;
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;

    if true then
    begin
      nplfound := 0;
      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin
          Inc(nplfound);
          Formplatereimage.CheckBox1.Checked := Prefs.ResetDeviceOnReimage;
          Formplatereimage.PBExListviewreimage.Items.Clear;
          for IP := 1 to PlatetemplateArray
            [Views[Viewselected].platesData
            [Views[Viewselected].LPV.Selected.ImageIndex].templatelistid]
            .NupOnplate do
          begin
            for ic := 1 to Views[Viewselected].platesData
              [Views[Viewselected].LPV.Selected.ImageIndex].pages[IP].Ncolors do
            begin
              aktcolor := Colorsnames
                [Views[Viewselected].platesData
                [Views[Viewselected].LPV.Selected.ImageIndex].pages[IP].Colors
                [ic].Colorid].Name;
              foundl := Formplatereimage.PBExListviewreimage.FindCaption(0,
                aktcolor, false, true, false);
              if foundl = nil then
              begin
                foundl := Formplatereimage.PBExListviewreimage.Items.Add;
                foundl.caption := aktcolor;
                foundl.StateIndex := 0;
                foundl.ImageIndex := Colorsnames
                  [Views[Viewselected].platesData
                  [Views[Viewselected].LPV.Selected.ImageIndex].pages[IP].Colors
                  [ic].Colorid].Colorimage;
              end;
            end;
          end;
        end;
      end;

      Whereandstr := ' And Miscstring2 IN (' + '''' + '-999' + '''';
      Formplatereimage.UpDown1.max := 1;
      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin
          Datam1.Query2.SQL.Clear;
          Datam1.Query2.SQL.Add
            ('select TOP 1 Miscstring2 from pagetable (NOLOCK)');
          Datam1.Query2.SQL.Add('where CopyFlatSeparationSet =  ' +
            IntToStr(Views[Viewselected].platesData[Views[Viewselected]
            .LPV.Items[i].ImageIndex].copyflatseparationset));
          Datam1.Query2.Open;
          if not Datam1.Query2.Eof then
          begin
            Whereandstr := Whereandstr + ',' + '''' + Datam1.Query2.Fields[0]
              .AsString + '''';
          end;
          Datam1.Query2.Close;
        end;
      end;
      Whereandstr := Whereandstr + ')';

      Formretransto.checklistbox1.Checked[0] := true;
      mkres := Formretransto.ShowModal;
      if (mkres = mrOK) or (mkres = mrall) then
      begin

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('update pagetable');
        Datam1.Query1.SQL.Add('set ImagingProcessID = 0,status = 49 ');

        // 47,48,49,50,55,56,60,99

        Datam1.Query1.SQL.Add('where status IN (47,48,49,50,55,56,60,99) ');

        if mkres = mrOK then
        begin
          AApressInstr := 'and pressid IN (-99';
          for i2 := 0 to Formretransto.checklistbox1.Items.Count - 1 do
          begin
            if Formretransto.checklistbox1.Checked[i2] then
              AApressInstr := AApressInstr + ',' +
                IntToStr(tNames1.pressnametoid
                (Formretransto.checklistbox1.Items[i2]));
          end;
          AApressInstr := AApressInstr + ')';
          Datam1.Query1.SQL.Add(AApressInstr);
        end;
        Datam1.Query1.SQL.Add(Whereandstr);
        if Prefs.Debug then
          Datam1.Query1.SQL.SaveToFile
            (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
            'sqllogs\' + 'Retransplate.SQL');
        trysql(Datam1.Query1);

      end
      else
      begin
      end;

    end;
    ActionplaterefreshExecute(FormMain);

  Except
  end;
end;

procedure TFormMain.Plateretrans;
begin
end;


procedure TFormMain.ActionnewprodsExecute(Sender: TObject);
begin
  sleep(5);
end;

procedure TFormMain.ActionUnapplyandsplitExecute(Sender: TObject);
Var
  // productionid,pressid      : Integer;

  anode: TTreeNode;

begin
  Formprodplan.ItsArepair := false;
  Formselectlocalprod.DefaultLocation := -1;
  Formselectlocalprod.Defaultproductionid := -1;
  Formselectlocalprod.Defaultpressid := -1;
  if TreeViewplan.Selected <> nil then
  begin
    anode := TreeViewplan.Selected;

    if anode.Level > 1 then
    begin
      Formselectlocalprod.Defaultproductionid := Tplantreedata(anode.Data^)
        .ProductionID;
      Formselectlocalprod.Defaultpressid := Tplantreedata(anode.Data^).pressid;
    end;
    while anode.Level > 0 do
      anode := anode.Parent;
    Formselectlocalprod.DefaultLocation := tNames1.locationnametoid(anode.text);
  end;

  if Formselectlocalprod.ShowModal = mrOK then
  begin
    DounapplyandSplit(Formselectlocalprod.Selectedproductionid,
      Formselectlocalprod.Selectedpressid);
  end;

end;

procedure TFormMain.DounapplyandSplit(ProductionID: Integer; pressid: Longint);

  function copyApressrun(Newsequence: Integer; frompressrunid: Longint)
    : Integer;
  Var
    Nfields: Integer;
  begin

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add
      ('Select TOP 1 * from pressrunid (NOLOCK) where pressrunid = ' +
      IntToStr(frompressrunid));
    Datam1.Query3.Open;
    Nfields := Datam1.Query3.FieldCount;
    Datam1.Query3.Close;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('Declare @NewSequenceNumber int');
    Datam1.Query3.SQL.Add('Declare @NewPressRunID int');
    Datam1.Query3.SQL.Add
      ('	if not EXISTS (SELECT PressRunID FROM PressRunID WHERE PressRunID = 1)');
    Datam1.Query3.SQL.Add('		SET @NewPressRunID = 1');
    Datam1.Query3.SQL.Add('	else');
    Datam1.Query3.SQL.Add('	begin');
    Datam1.Query3.SQL.Add
      ('		SET @NewPressRunID = (SELECT TOP 1 Number FROM AllNum AS A WITH (NOLOCK) WHERE not EXISTS (SELECT PressRunID FROM PressRunID AS P WHERE P.PressRunID=A.Number))');
    Datam1.Query3.SQL.Add('		if @NewPressRunID IS NULL');
    Datam1.Query3.SQL.Add('			SET @NewPressRunID=1');
    Datam1.Query3.SQL.Add('	END');

    Datam1.Query3.SQL.Add('Set @NewSequenceNumber = ' + IntToStr(Newsequence));
    Datam1.Query3.SQL.Add
      ('Insert INTO PressRunID (PressRunID,SequenceNumber,Deadline1,Deadline2,Deadline3,Deadline4,PriorityBeforeHottime,PriorityDuringHottime,PriorityAfterHottime,PriorityHottimebegin,');
    Datam1.Query3.SQL.Add
      ('PriorityHottimeEnd,Comment,UsePressTowerInfo,OrderNumber,InkComment,Backwards,PerfectBound,Inserted');
    if Nfields > 18 then
    begin
      Datam1.Query3.SQL.Add
        (',PlanName,PressSystem,PlanType,TimedEditionFrom,TimedEditionTo,TimedEditionState,');
      Datam1.Query3.SQL.Add
        ('FromZone,ToZone,Circulation,Circulation2,Comment2,MiscInt1,MiscInt2,MiscString1,MiscString2,MiscDate,PlanVersion,PlanSystem');
    end;
    Datam1.Query3.SQL.Add(')');

    Datam1.Query3.SQL.Add
      ('Select @NewPressRunID,@NewSequenceNumber,Deadline1,Deadline2,Deadline3,Deadline4,PriorityBeforeHottime,PriorityDuringHottime,PriorityAfterHottime,PriorityHottimebegin,');
    Datam1.Query3.SQL.Add
      ('PriorityHottimeEnd,Comment,UsePressTowerInfo,OrderNumber,InkComment,Backwards,PerfectBound,Inserted');
    if Nfields > 18 then
    begin
      Datam1.Query3.SQL.Add
        (',PlanName,PressSystem,PlanType,TimedEditionFrom,TimedEditionTo,TimedEditionState,');
      Datam1.Query3.SQL.Add
        ('FromZone,ToZone,Circulation,Circulation2,Comment2,MiscInt1,MiscInt2,MiscString1,MiscString2,MiscDate,PlanVersion,PlanSystem');
    end;
    Datam1.Query3.SQL.Add('from pressrunid (NOLOCK)');
    Datam1.Query3.SQL.Add('where PressRunID = ' + IntToStr(frompressrunid));

    Datam1.Query3.SQL.Add('Select @NewPressRunID');
    if Prefs.Debug then
      Datam1.Query3.SQL.SaveToFile
        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
        'copyapressrun.SQL');

    Datam1.Query3.Open;
    result := Datam1.Query3.Fields[0].AsInteger;
    Datam1.Query3.Close;

  end;

Var
  INpressruns
  // ,prodname
    : String;
  i, i2, oneuptmpl, np: Integer;
  // allhaveseq : Boolean;
  Apressrun, Navailpressruns, Neededpressruns
  // ,copypressrunidfrom
    : Integer;
  availpressruns: Array [1 .. 200] of record pressrunid: Integer;
  editionid: Integer;
  Sectionid: Integer;
  copyfrom: Integer;
  Npages: Integer;
  newseq: Integer;
end;

begin
  try
    try
      screen.Cursor := crhourglass;
      if DBVersion > 1 then
      begin
        oneuptmpl := -1;

        for i := 1 to NPlatetemplateArray do
        begin
          if (PlatetemplateArray[i].pressid = pressid) and
            (PlatetemplateArray[i].NupOnplate = 1) then
          begin
            oneuptmpl := i;
            break;
          end;
        end;
        if oneuptmpl = -1 then
        begin
          MessageDlg
            ('There are no 1up template available on the selected press the function cannot be performed',
            mtError, [mbOk], 0);
          exit;
        end;

        Navailpressruns := 0;
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('select distinct p.pressrunid,p.productionid,p.Sectionid,p.editionid from pagetable p (NOLOCK) ');
        Datam1.Query1.SQL.Add('where p.productionid = ' +
          IntToStr(ProductionID));
        Datam1.Query1.SQL.Add('and p.pressid = ' + IntToStr(pressid));
        Datam1.Query1.SQL.Add('order by p.editionid,p.Sectionid ');

        Datam1.Query1.Open;
        Apressrun := -1;
        Neededpressruns := 0;
        while not Datam1.Query1.Eof do
        begin
          Inc(Neededpressruns);
          availpressruns[Neededpressruns].pressrunid := Datam1.Query1.Fields[0]
            .AsInteger;
          availpressruns[Neededpressruns].copyfrom := Datam1.Query1.Fields[0]
            .AsInteger;
          availpressruns[Neededpressruns].editionid := Datam1.Query1.Fields[3]
            .AsInteger;
          availpressruns[Neededpressruns].Sectionid := Datam1.Query1.Fields[2]
            .AsInteger;
          availpressruns[Neededpressruns].newseq := -1;
          Datam1.Query1.Next;
        end;
        Datam1.Query1.Close;

        for i := Neededpressruns downto 2 do
        begin
          for i2 := 1 to i - 1 do
          begin
            if availpressruns[i].pressrunid = availpressruns[i2].pressrunid then
            begin
              availpressruns[i].copyfrom := availpressruns[i2].pressrunid;
              availpressruns[i].pressrunid := -1;
              break;
            end;
          end;
        end;

        if Setplanlock(true) then
        begin

          for i := 1 to Neededpressruns do
          begin
            if availpressruns[i].pressrunid = -1 then
            begin
              availpressruns[i].pressrunid := copyApressrun(i + Neededpressruns,
                availpressruns[i].copyfrom);
            end;

            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add
              ('Update pagetable set flatseparation = separation, flatseparationset = separationset, copyflatseparationset = copyseparationset');
            Datam1.Query1.SQL.Add
              (',Pagination = pageindex,PressSectionNumber = 1, pageposition = 1,pagepositions = '
              + '''' + '1' + '''');
            Datam1.Query1.SQL.Add(',pressrunid = ' +
              IntToStr(availpressruns[i].pressrunid));
            Datam1.Query1.SQL.Add(',TemplateID = ' +
              IntToStr(PlatetemplateArray[oneuptmpl].TemplateID));
            Datam1.Query1.SQL.Add
              (',Sheetnumber = 1+(pageindex-((pageindex+1)%2))/2');
            Datam1.Query1.SQL.Add(',SheetSide = (pageindex+1)%2');

            Datam1.Query1.SQL.Add('where productionid = ' +
              IntToStr(ProductionID));
            Datam1.Query1.SQL.Add('and pressid = ' + IntToStr(pressid));
            Datam1.Query1.SQL.Add('and Sectionid = ' +
              IntToStr(availpressruns[i].Sectionid));
            Datam1.Query1.SQL.Add('and Editionid = ' +
              IntToStr(availpressruns[i].editionid));
            if Prefs.Debug then
              Datam1.Query1.SQL.SaveToFile
                (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
                'sqllogs\' + 'PUnapplytosplit.SQL');
            trysql(Datam1.Query1);
          end;

          INpressruns := '(-99';
          for i := 1 to Neededpressruns do
          begin
            INpressruns := INpressruns + ',' +
              IntToStr(availpressruns[i].pressrunid);
          end;

          INpressruns := INpressruns + ')';

          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('update pressrunid set PlanType = 0,SequenceNumber = 1 where pressrunid IN '
            + INpressruns);
          trysql(Datam1.Query1);

          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('update ProductionNames set PlanType = 0 where productionid = ' +
            IntToStr(ProductionID));
          trysql(Datam1.Query1);

          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('Delete pagetable where pagetype = 3 and productionid = ' +
            IntToStr(ProductionID));
          trysql(Datam1.Query1);

          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('DELETE FROM PressRunID  WHERE not EXISTS (SELECT PressRunID FROM PageTable WHERE  PressRunID.PressRunID=PageTable.PressRunID)');
          trysql(Datam1.Query1);

        end;
        np := 0;

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('Select distinct PressRunID,COUNT(CopySeparationSet) as antal from PageTable (NOLOCK) ');
        Datam1.Query1.SQL.Add('where productionid = ' + IntToStr(ProductionID));
        Datam1.Query1.SQL.Add('group by PressRunID');
        Datam1.Query1.SQL.Add('order by antal desc');
        Tryopen(Datam1.Query1);
        while not Datam1.Query1.Eof do
        begin
          Inc(np);
          Datam1.Query2.SQL.Clear;
          Datam1.Query2.SQL.Add('update pagetable set PressSectionNumber = ' +
            IntToStr(np));
          Datam1.Query2.SQL.Add('where pressrunid = ' + Datam1.Query1.Fields[0]
            .AsString);
          trysql(Datam1.Query2);
          Datam1.Query2.SQL.Clear;
          Datam1.Query2.SQL.Add('update pressrunid set SequenceNumber = ' +
            IntToStr(np));
          Datam1.Query2.SQL.Add('where pressrunid = ' + Datam1.Query1.Fields[0]
            .AsString);
          trysql(Datam1.Query2);

          Datam1.Query1.Next;
        end;
        Datam1.Query1.Close;

        LoadIDs('Actionnewplanrefresh', false);
        Makeplantree(-1);
        findplantreenode;

      end;
    except

    end;
  finally
    Setplanlock(false);
    screen.Cursor := crdefault;
  end;

end;

procedure TFormMain.maketextreportVer3;

  function textdt(Fromatime: TDateTime; ToAtime: TDateTime): String;
  Var
    T: string;
  begin
    T := FormaTDateTime('dd-mm hh:MM ', Fromatime) + ' to ' +
      FormaTDateTime('dd-mm hh:MM ', ToAtime);

    result := T;

  end;

var
  i, i2: Integer;
  StarttidOK, endtidOK: Boolean;
  lastsumtid, Sumtid, Starttid, Endtid, tid: TDateTime;
  N: TTreeNode;
  wherestr: String;
  fromtidtype, totidtype: Integer;

  Nplates, tothours, totminutes, sumpages, sumcount, amax: Integer;

  avgsum, lastsum, Npages, Npageversions, minb, Npagesstat,
    Npagesstatver: Integer;
  lastset, first, notimes: Boolean;
  T1, T2, t3: String;

  lasttid, Deadline, Itid, firstarrived, Lastarrived, firstOut, Lastout,
    firstappr, lastappr, firstrelease: TDateTime;
  IncSize, anum: Integer;
  Prtext: String;
  ProductionID: Integer;
  totalPlatesUsed: Integer;
  updatedPlates: Integer;
  damagedPlates: Integer;
  outputversion: Integer;
begin
  Starttid := Now;
  Endtid := Now;
  IncSize := 30;
  ProductionID := 0;
  RichEditreport.Lines.Clear;
  RichEditreport.SelStart := GetTextLen;
  RichEditreport.ScrollBars := (ssNone);
  if TreeViewreportfilter.Selected <> nil then
  begin
    N := TreeViewreportfilter.Selected;

    wherestr := ' p.productionid > -99 ';
    while N.Level > 0 do
    begin
      case TTreeViewpagestype(N.Data^).kind of
        1:
          begin // date
            wherestr := wherestr + ' and ' + Datam1.makedatastr('p.',
              TTreeViewpagestype(N.Data^).Pubdate);
          end;
        2:
          begin // date + publ
            wherestr := wherestr + ' and p.publicationid = ' +
              IntToStr(TTreeViewpagestype(N.Data^).Publicationid);
            ProductionID := TTreeViewpagestype(N.Data^).ProductionID;
            if (ProductionID > 0) then
              wherestr := wherestr + ' and p.productionid = ' +
                IntToStr(ProductionID);
          end;
        4:
          begin // date + publ + ed
            wherestr := wherestr + ' and p.editionid = ' +
              IntToStr(TTreeViewpagestype(N.Data^).editionid);

          end;
        5:
          begin // date + publ + ed +sec
            wherestr := wherestr + ' and p.sectionid = ' +
              IntToStr(TTreeViewpagestype(N.Data^).Sectionid);
          end;
      end;
      N := N.Parent;
    end;

    fromtidtype := -1;
    totidtype := -1;

    StarttidOK := true;
    endtidOK := true;
    firstarrived := 0;
    Lastarrived := 0;
    firstOut := 0;
    Lastout := 0;
    firstappr := 0;
    lastappr := 0;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select distinct p.Version , count (distinct p.mastercopyseparationset) as page  from PageTable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr);
    Datam1.Query1.SQL.Add
      ('And p.pagetype <> 3 and p.CopyNumber = 1 and p.UniquePage <> 0 and p.Active = 1');
    Datam1.Query1.SQL.Add('group by p.Version');
    Datam1.Query1.Open;
    Npages := 0;
    Npageversions := 0;
    while not Datam1.Query1.Eof do
    begin
      Inc(Npages, Datam1.Query1.Fields[1].AsInteger);
      if Datam1.Query1.Fields[0].AsInteger > 0 then
        Inc(Npageversions, Datam1.Query1.Fields[1].AsInteger *
          Datam1.Query1.Fields[0].AsInteger)
      else
        Inc(Npageversions, Datam1.Query1.Fields[1].AsInteger);
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;

    Datam1.Query1.SQL.Clear; // ,MIN(p.ApproveTime),MAX(p.ApproveTime)
    Datam1.Query1.SQL.Add
      ('select MIN( p.InputTime),MAX(p.inputtime),MIN(p.OutputTime),MAX(p.OutputTime) from pagetable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr +
      ' and p.status > 0 and p.inputtime  > ' + '''' + '2000-1-1' + '''');
    Datam1.Query1.SQL.Add
      ('And p.pagetype <> 3 and p.UniquePage <> 0 and p.Active = 1');

    if Prefs.Debug then
      Datam1.Query1.SQL.SaveToFile
        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
        'startstoptid.SQL');

    notimes := false;

    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
    begin
      Starttid := EncodeDate(2200, 1, 1);
      endtid := EncodeDate(2000, 1, 1);
      for i := 0 to 3 do
      begin
        if Datam1.Query1.Fields[i].AsDateTime > EncodeDate(2000, 1, 1) then
        begin
          case i of
            0:
              firstarrived := Datam1.Query1.Fields[i].AsDateTime;
            1:
              Lastarrived := Datam1.Query1.Fields[i].AsDateTime;
            2:
              firstOut := Datam1.Query1.Fields[i].AsDateTime;
            3:
              Lastout := Datam1.Query1.Fields[i].AsDateTime;
          end;
          if Starttid > Datam1.Query1.Fields[i].AsDateTime then
          begin
            Starttid := Datam1.Query1.Fields[i].AsDateTime;
            fromtidtype := i;
          end;
          if endtid < Datam1.Query1.Fields[i].AsDateTime then
          begin
            endtid := Datam1.Query1.Fields[i].AsDateTime;
            totidtype := i;
          end;
        end;
      end;
    end
    else
      notimes := true;
    Datam1.Query1.Close;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('select Min(p.deadline) from pagetable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr + ' and p.deadline  > ' + '''' +
      '2000-1-1' + '''');
    Datam1.Query1.SQL.Add
      ('And p.pagetype <> 3 and p.UniquePage <> 0 and p.Active = 1');
    Deadline := 0;
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
    begin
      if Datam1.Query1.Fields[0].AsDateTime > EncodeDate(2000, 1, 1) then
        Deadline := Datam1.Query1.Fields[0].AsDateTime;
    end;
    Datam1.Query1.Close;

    firstrelease := 0;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select min(EventTime) from Log (NOLOCK) , PageTable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr);
    Datam1.Query1.SQL.Add
      ('and Log.Separation = p.Separation and Log.Event = 80');
    Datam1.Query1.SQL.Add
      ('And p.pagetype <> 3 and p.UniquePage <> 0 and p.Active = 1');
    if Prefs.Debug then
      Datam1.Query1.SQL.SaveToFile
        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
        'firstreal.SQL');
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
    begin
      if Datam1.Query1.Fields[0].AsDateTime > EncodeDate(2000, 1, 1) then
        firstrelease := Datam1.Query1.Fields[0].AsDateTime;
    end;
    Datam1.Query1.Close;

    if Deadline > 0 then
    begin
      if Deadline > endtid then
      begin
        if hoursbetween(Deadline, endtid) < 6 then
          endtid := Deadline;
      end;

      if Deadline < Starttid then
      begin
        if hoursbetween(Starttid, Deadline) < 6 then
          Starttid := Deadline;
      end;

    end;

    if minuteof(Starttid) <> 0 then
    begin
      Starttid := EncodeDateTime(YearOf(Starttid), MonthOf(Starttid),
        DayOf(Starttid), hourof(Starttid), 0, 0, 0);
    end;

    if minuteof(endtid) <> 0 then
    begin
      endtid := inchour(endtid, 1);
      endtid := EncodeDateTime(YearOf(endtid), MonthOf(endtid), DayOf(endtid),
        hourof(endtid), 0, 0, 0);
    end;

    // hhhhh

    RichEditreport.SelAttributes.Style := [fsBold];
    RichEditreport.SelText := 'ControlCenter Production Report';
    RichEditreport.SelText := #13#10;
    RichEditreport.SelAttributes.Style := [];
    RichEditreport.SelText := 'Made ' + datetostr(NOW) + ' ' +
      FormaTDateTime('t', NOW) + ' By ' + Prefs.Username;

    RichEditreport.SelAttributes.Style := [fsBold];
    RichEditreport.SelText := #13#10;
    RichEditreport.SelText := '';
    RichEditreport.SelText := #13#10;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select DISTINCT p.pubdate,p.publicationid,p.editionid,e.name  from PageTable p (NOLOCK) , editionnames e (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr);
    Datam1.Query1.SQL.Add('And e.editionid = p.editionid');
    Datam1.Query1.SQL.Add('Order by p.pubdate,p.publicationid,e.name');
    Datam1.Query1.Open;
    T1 := 'na';
    if not Datam1.Query1.Eof then
    begin
      RichEditreport.SelText := '';
      RichEditreport.SelAttributes.Style := [fsBold];

      RichEditreport.SelText := 'Production:';
      RichEditreport.SelText := #13#10;
      RichEditreport.SelAttributes.Style := [];
      RichEditreport.SelText := 'Pubdate       ' + #9 +
        datetostr(Datam1.Query1.Fields[0].AsDateTime);
      RichEditreport.SelText := #13#10;
      RichEditreport.SelAttributes.Style := [];
      RichEditreport.SelText := 'Publication    ' + #9 +
        tNames1.publicationIDtoname(Datam1.Query1.Fields[1].AsInteger);
      RichEditreport.SelText := #13#10;
      T2 := '';
      RichEditreport.SelText := '';
      RichEditreport.SelText := #13#10;
      RichEditreport.SelAttributes.Style := [fsBold];
      RichEditreport.SelText := 'Editions:';
      RichEditreport.SelText := #13#10;
      RichEditreport.SelAttributes.Style := [];

      while not Datam1.Query1.Eof do
      begin
        RichEditreport.SelText := Datam1.Query1.Fields[3].AsString;
        RichEditreport.SelText := #13#10;
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;

      RichEditreport.SelText := '';
      RichEditreport.SelText := #13#10;
      RichEditreport.SelAttributes.Style := [fsBold];
      RichEditreport.SelText := 'Sections:';
      RichEditreport.SelText := #13#10;
      RichEditreport.SelAttributes.Style := [];
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('select distinct p.Sectionid,s.name  from PageTable p (NOLOCK) , sectionnames s (NOLOCK) ');
      Datam1.Query1.SQL.Add('where ' + wherestr);
      Datam1.Query1.SQL.Add('And s.sectionid = p.sectionid');
      Datam1.Query1.SQL.Add('Order by s.name');
      Datam1.Query1.Open;
      while not Datam1.Query1.Eof do
      begin
        RichEditreport.SelText := Datam1.Query1.Fields[1].AsString;
        RichEditreport.SelText := #13#10;
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;
    end
    else
    begin
      RichEditreport.SelText := 'Production:';
      RichEditreport.SelText := #13#10;
      RichEditreport.SelAttributes.Style := [];
      RichEditreport.SelText := 'Pubdate  ' + #9 + 'na';
      RichEditreport.SelText := #13#10;
      RichEditreport.SelAttributes.Style := [];
      RichEditreport.SelText := 'Publication ' + #9 + 'na';
      RichEditreport.SelText := #13#10;

    end;

    RichEditreport.SelText := '';
    RichEditreport.SelText := #13#10;
    RichEditreport.SelAttributes.Style := [fsBold];
    RichEditreport.SelText := 'Total number of pages:';
    RichEditreport.SelText := #13#10;
    RichEditreport.SelAttributes.Style := [];

    RichEditreport.SelText := 'Pages           ' + #9 + IntToStr(Npages);
    RichEditreport.SelText := #13#10;
    RichEditreport.SelText := 'Plus versions ' + #9 + IntToStr(Npageversions);
    RichEditreport.SelText := #13#10;

    RichEditreport.SelText := '';
    RichEditreport.SelText := #13#10;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select distinct p.Version , count (distinct p.mastercopyseparationset) as page  from PageTable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr + ' and status > 0');
    Datam1.Query1.SQL.Add
      ('and p.PageType <> 3 and p.CopyNumber = 1 and p.UniquePage <> 0 and p.Active = 1');
    Datam1.Query1.SQL.Add('group by p.Version');
    Datam1.Query1.Open;

    Npagesstat := 0;
    Npagesstatver := 0;
    while not Datam1.Query1.Eof do
    begin
      Npagesstat := Npagesstat + Datam1.Query1.Fields[1].AsInteger;
      if Datam1.Query1.Fields[0].AsInteger > 0 then
        Npagesstatver := Npagesstatver +
          (Datam1.Query1.Fields[1].AsInteger * Datam1.Query1.Fields[0]
          .AsInteger)
      else
        Npagesstatver := Npagesstatver + Datam1.Query1.Fields[1].AsInteger;
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;

    Datam1.Query1.SQL.Clear; // ,MIN(p.ApproveTime),MAX(p.ApproveTime)
    Datam1.Query1.SQL.Add
      ('select MIN( p.ApproveTime),MAX(p.ApproveTime) from pagetable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr +
      ' and p.approved = 1 and p.ApproveTime  > ' + '''' + '2000-1-1' + '''');
    Datam1.Query1.SQL.Add
      ('And p.pagetype <> 3 and p.UniquePage <> 0 and p.Active = 1');
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
    begin
      if Datam1.Query1.Fields[0].AsDateTime > EncodeDate(2000, 1, 1) then
        firstappr := Datam1.Query1.Fields[0].AsDateTime;
      if Datam1.Query1.Fields[1].AsDateTime > EncodeDate(2000, 1, 1) then
        lastappr := Datam1.Query1.Fields[1].AsDateTime;
    end;
    Datam1.Query1.Close;

    RichEditreport.SelText := '';
    RichEditreport.SelAttributes.Style := [fsBold];
    RichEditreport.SelText := 'Page input:';
    RichEditreport.SelAttributes.Style := [];
    RichEditreport.SelText := '';
    RichEditreport.SelText := #13#10;
    RichEditreport.SelAttributes.Style := [];
    RichEditreport.SelText := 'Pages arrived ' + #9 + IntToStr(Npagesstat);

    RichEditreport.SelText := #13#10;
    RichEditreport.SelText := 'Plus versions ' + #9 + IntToStr(Npagesstatver);
    RichEditreport.SelText := #13#10;
    // RichEditreport.SelText := '';
    // RichEditreport.SelText := #13#10;
    if firstarrived > 0 then
      RichEditreport.SelText := 'First arrived  ' + #9 + datetostr(firstarrived)
        + ' ' + FormaTDateTime('t', firstarrived)
    else
      RichEditreport.SelText := 'First arrived  ' + #9 + 'na';
    RichEditreport.SelText := #13#10;
    if Lastarrived > 0 then
      RichEditreport.SelText := 'Last arrived  ' + #9 + datetostr(Lastarrived) +
        ' ' + FormaTDateTime('t', Lastarrived)
    else
      RichEditreport.SelText := 'Last arrived  ' + #9 + 'na';
    RichEditreport.SelText := #13#10;
    RichEditreport.SelText := '';
    RichEditreport.SelText := #13#10;

    RichEditreport.SelText := '';
    RichEditreport.SelAttributes.Style := [fsBold];
    RichEditreport.SelText := 'Deadline:';
    RichEditreport.SelAttributes.Style := [];
    RichEditreport.SelText := '';
    RichEditreport.SelText := #13#10;
    RichEditreport.SelAttributes.Style := [];

    if Deadline > 0 then
      RichEditreport.SelText := 'Deadline      ' + #9 + datetostr(Deadline) +
        ' ' + FormaTDateTime('t', Deadline)
    else
      RichEditreport.SelText := 'Deadline      ' + #9 + 'na';
    RichEditreport.SelText := #13#10;

    if Deadline > 0 then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('select COUNT (distinct p.mastercopyseparationset ) from PageTable p (NOLOCK) ');
      Datam1.Query1.SQL.Add('where ' + wherestr);
      Datam1.Query1.SQL.Add(' and p.inputTime  > :deadline ');
      Datam1.Query1.SQL.Add
        ('And p.pagetype <> 3 and p.UniquePage <> 0 and p.Active = 1');
      Datam1.Query1.params[0].AsDateTime := Deadline;
      Datam1.Query1.Open;
      i := 0;
      if not Datam1.Query1.Eof then
      begin
        i := Datam1.Query1.Fields[0].AsInteger;
      end;
      RichEditreport.SelText := 'Late pages    ' + #9 + IntToStr(i);
      RichEditreport.SelText := #13#10;

      Datam1.Query1.Close;
    End
    else
    begin
      RichEditreport.SelText := 'Late pages    ' + #9 + 'na';
      RichEditreport.SelText := #13#10;
    end;
    RichEditreport.SelText := '';
    RichEditreport.SelText := #13#10;

    RichEditreport.SelAttributes.Style := [fsBold];
    RichEditreport.SelText := 'Page approval:';
    RichEditreport.SelAttributes.Style := [];
    RichEditreport.SelText := #13#10;
    // RichEditreport.SelText := '';
    // RichEditreport.SelText := #13#10;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select COUNT (distinct p.mastercopyseparationset ) from PageTable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr + ' and p.Approved = -1');
    Datam1.Query1.SQL.Add
      ('And p.pagetype <> 3 and p.UniquePage <> 0 and p.Active = 1');
    Datam1.Query1.Open;
    i := 0;
    if not Datam1.Query1.Eof then
    begin
      i := Datam1.Query1.Fields[0].AsInteger;
    end;
    Datam1.Query1.Close;

    RichEditreport.SelText := 'Auto approved ' + #9 + IntToStr(i);
    RichEditreport.SelText := #13#10;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select COUNT (distinct p.mastercopyseparationset ) from PageTable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr + ' and p.Approved = 0');
    Datam1.Query1.SQL.Add
      ('And p.pagetype <> 3 and p.UniquePage <> 0 and p.Active = 1');
    Datam1.Query1.Open;
    i := 0;
    if not Datam1.Query1.Eof then
    begin
      i := Datam1.Query1.Fields[0].AsInteger;
    end;
    Datam1.Query1.Close;

    RichEditreport.SelText := 'Not approved ' + #9 + IntToStr(i);
    RichEditreport.SelText := #13#10;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select COUNT (distinct p.mastercopyseparationset ) from PageTable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr + ' and p.Approved = 1');
    Datam1.Query1.SQL.Add
      ('And p.pagetype <> 3 and p.UniquePage <> 0 and p.Active = 1');
    Datam1.Query1.Open;
    i := 0;
    if not Datam1.Query1.Eof then
    begin
      i := Datam1.Query1.Fields[0].AsInteger;
    end;
    Datam1.Query1.Close;
    RichEditreport.SelText := 'Approved      ' + #9 + IntToStr(i);
    RichEditreport.SelText := #13#10;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select COUNT (distinct p.mastercopyseparationset ) from PageTable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr + ' and  p.Approved = 2');
    Datam1.Query1.SQL.Add
      ('And p.pagetype <> 3 and p.UniquePage <> 0 and p.Active = 1');
    Datam1.Query1.Open;
    i := 0;
    if not Datam1.Query1.Eof then
    begin
      i := Datam1.Query1.Fields[0].AsInteger;
    end;
    Datam1.Query1.Close;

    RichEditreport.SelText := 'Disapproved ' + #9 + IntToStr(i);
    RichEditreport.SelText := #13#10;

    // RichEditreport.SelText := '';
    // RichEditreport.SelText := #13#10;
    if firstappr > 0 then
      RichEditreport.SelText := 'First approved ' + #9 + datetostr(firstappr) +
        ' ' + FormaTDateTime('t', firstappr)
    else
      RichEditreport.SelText := 'First approved ' + #9 + 'na';

    RichEditreport.SelText := #13#10;
    if lastappr > 0 then
      RichEditreport.SelText := 'Last approved ' + #9 + datetostr(lastappr) +
        ' ' + FormaTDateTime('t', lastappr)
    else
      RichEditreport.SelText := 'Last approved ' + #9 + 'na';
    RichEditreport.SelText := #13#10;
    RichEditreport.SelText := '';
    RichEditreport.SelText := #13#10;
    RichEditreport.SelAttributes.Style := [fsBold];
    RichEditreport.SelText := 'Page output:';
    RichEditreport.SelAttributes.Style := [];
    RichEditreport.SelText := #13#10;
    // RichEditreport.SelText := '';
    // RichEditreport.SelText := #13#10;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select COUNT (distinct p.mastercopyseparationset ) from PageTable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr +
      ' and  (p.status >= 49 or P.outputversion > 0)');
    Datam1.Query1.SQL.Add
      ('And p.pagetype < 3 AND p.Active>0 AND p.Dirty=0 AND P.UniquePage<>0');
    Datam1.Query1.Open;
    i := 0;
    if not Datam1.Query1.Eof then
    begin
      i := Datam1.Query1.Fields[0].AsInteger;
    end;
    Datam1.Query1.Close;

    RichEditreport.SelText := 'Pages out     ' + #9 + IntToStr(i);
    RichEditreport.SelText := #13#10;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select COUNT (distinct p.mastercopyseparationset ) from PageTable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr +
      ' and  (p.status < 50 and P.outputversion = 0)');
    Datam1.Query1.SQL.Add
      ('And p.pagetype < 3 AND p.Active>0 AND p.Dirty=0 AND P.UniquePage<>0');
    Datam1.Query1.Open;
    i := 0;
    if not Datam1.Query1.Eof then
    begin
      i := Datam1.Query1.Fields[0].AsInteger;
    end;
    Datam1.Query1.Close;

    RichEditreport.SelText := 'Pages not out ' + #9 + IntToStr(i);
    RichEditreport.SelText := #13#10;

    if firstrelease > 0 then
      RichEditreport.SelText := 'Release       ' + #9 + datetostr(firstrelease)
        + ' ' + FormaTDateTime('t', firstrelease)
    else
      RichEditreport.SelText := 'Release       ' + #9 + 'na';
    RichEditreport.SelText := #13#10;

    if firstOut > 0 then
      RichEditreport.SelText := 'First page out ' + #9 + datetostr(firstOut) +
        ' ' + FormaTDateTime('t', firstOut)
    else
      RichEditreport.SelText := 'First page out ' + #9 + 'na';
    RichEditreport.SelText := #13#10;
    if Lastout > 0 then
      RichEditreport.SelText := 'Last page out ' + #9 + datetostr(Lastout) + ' '
        + FormaTDateTime('t', Lastout)
    else
      RichEditreport.SelText := 'Last page out ' + #9 + 'na';
    RichEditreport.SelText := #13#10;

    RichEditreport.SelText := #13#10;
    RichEditreport.SelAttributes.Style := [fsBold];
    RichEditreport.SelText := 'Plates:';
    RichEditreport.SelAttributes.Style := [];
    RichEditreport.SelText := #13#10;
    // RichEditreport.SelText := '';
    // RichEditreport.SelText := #13#10;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select COUNT (distinct p.flatseparation ) from PageTable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr);
    Datam1.Query1.SQL.Add
      ('And p.pagetype < 3 AND p.Active>0 AND p.Dirty=0 AND P.UniquePage<>0');
    Datam1.Query1.Open;
    Nplates := 0;
    if not Datam1.Query1.Eof then
    begin
      Nplates := Datam1.Query1.Fields[0].AsInteger;
    end;
    Datam1.Query1.Close;

    RichEditreport.SelText := 'Number of plates ' + #9 + IntToStr(Nplates);

    RichEditreport.SelText := #13#10;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select COUNT (distinct p.flatseparation ) from PageTable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr +
      ' and (p.status >= 49 or P.outputversion > 0)');
    Datam1.Query1.SQL.Add
      ('And p.pagetype < 3 AND p.Active>0 AND p.Dirty=0 AND P.UniquePage<>0');
    Datam1.Query1.Open;

    if not Datam1.Query1.Eof then
    begin
      i := Datam1.Query1.Fields[0].AsInteger;
    end;
    Datam1.Query1.Close;

    RichEditreport.SelText := 'Plates done   ' + #9 + IntToStr(i);

    RichEditreport.SelText := #13#10;

    // Datam1.Query1.SQL.Clear;
    // Datam1.Query1.SQL.Add('select distinct p.FlatSeparation,  p.Outputversion from PageTable p (NOLOCK) ');
    // Datam1.Query1.SQL.Add('where ' + wherestr +' and status >= 50' );
    // Datam1.Query1.SQL.Add('And p.pagetype <> 3');
    // Datam1.Query1.Open;

    i := 0;
    Datam1.Query1.SQL.Clear;
    // Datam1.Query1.SQL.Add('select p.outputVersion ,COUNT (distinct p.flatseparation ) from PageTable p (NOLOCK) ');

    totalPlatesUsed := 0;
    updatedPlates := 0;
    damagedPlates := 0;
    outputversion := 0;
    Datam1.Query1.SQL.Add
      ('select DISTINCT p.flatseparation, MAX(p.outputVersion),Max(P.Version)  from PageTable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr +
      ' and (p.status >= 49 or P.outputversion > 0) and p.Outputtime  > ' + ''''
      + '2000-1-1' + '''');
    Datam1.Query1.SQL.Add
      ('And p.pagetype < 3 AND p.Active>0 AND p.Dirty=0 AND P.UniquePage<>0');
    Datam1.Query1.SQL.Add('group by p.flatseparation');
    if Prefs.Debug then
      Datam1.Query1.SQL.SaveToFile
        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
        'plused.SQL');
    Datam1.Query1.Open;
    while not Datam1.Query1.Eof do
    begin
      outputversion := Datam1.Query1.Fields[1].AsInteger;
      totalPlatesUsed := totalPlatesUsed + outputversion;

      if Datam1.Query1.Fields[2].AsInteger > 1 then // Input version > 1
        updatedPlates := updatedPlates + outputversion - 1;
      if Datam1.Query1.Fields[2].AsInteger = 1 then
        damagedPlates := damagedPlates + outputversion - 1;
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;

    RichEditreport.SelText := 'Plates used   ' + #9 + IntToStr(totalPlatesUsed);
    RichEditreport.SelText := #13#10;
    RichEditreport.SelText := 'Updated plates' + #9 + IntToStr(updatedPlates);
    RichEditreport.SelText := #13#10;
    RichEditreport.SelText := 'Damaged plates' + #9 + IntToStr(damagedPlates);
    Prtext := 'per hour ';
    IncSize := 30;
    if daysbetween(endtid, Starttid) > 7 then
    begin
      Prtext := 'per day:';
      IncSize := 30 * 24;
    end;

    if (not notimes) and (fromtidtype > -1) then
    begin

      tothours := hoursbetween(endtid, Starttid);
      totminutes := minutesbetween(endtid, Starttid);
      amax := 0;

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('select distinct DATEDIFF(MINUTE,:starttid, p.InputTime) as tid from pagetable p (NOLOCK) ');
      Datam1.Query1.SQL.Add('where ' + wherestr +
        ' and p.status > 0 and p.inputtime  > ' + '''' + '2000-1-1' + '''');
      Datam1.Query1.SQL.Add('And p.pagetype <> 3');
      Datam1.Query1.params[0].AsDateTime := Starttid;
      if Prefs.Debug then
        Datam1.Query1.SQL.SaveToFile
          (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'
          + 'datedifs.SQL');
      Datam1.Query1.Open;
      tid := Starttid;
      first := true;
      lasttid := Starttid;

      sumpages := 0;
      sumcount := 0;

      lastsumtid := Starttid;

      first := true;
      RichEditreport.SelText := '';
      RichEditreport.SelText := #13#10;

      RichEditreport.SelText := #13#10;
      RichEditreport.SelText := '';
      RichEditreport.SelAttributes.Style := [fsBold];
      RichEditreport.SelText := 'Page input ' + Prtext;
      RichEditreport.SelAttributes.Style := [];
      // RichEditreport.SelText := '';
      // RichEditreport.SelText := #13#10;

      Repeat
        if first then
        begin
          minb := minuteof(lastsumtid);
          Sumtid := incminute(lastsumtid, IncSize - minb);
        end
        else
        begin
          Sumtid := incminute(lastsumtid, IncSize);
        end;
        Datam1.Query2.SQL.Clear;
        Datam1.Query2.SQL.Add
          ('select distinct p.Version , count (distinct p.mastercopyseparationset) as page  from PageTable p (NOLOCK) ');
        Datam1.Query2.SQL.Add('where ' + wherestr +
          ' and p.status > 0 and p.inputtime  > ' + '''' + '2000-1-1' + '''');
        Datam1.Query2.SQL.Add
          ('and p.PageType <> 3 and p.CopyNumber = 1 and p.UniquePage <> 0 and p.Active = 1 ');
        Datam1.Query2.SQL.Add
          ('and InputTime >= :fromtid and inputtime <= :totid');
        Datam1.Query2.SQL.Add('group by p.Version');
        Datam1.Query2.params[0].AsDateTime := lastsumtid;
        Datam1.Query2.params[1].AsDateTime := Sumtid;
        Datam1.Query2.Open;
        sumpages := -1;
        if not Datam1.Query2.Eof then
        begin
          sumpages := 0;
          while not Datam1.Query2.Eof do
          begin
            sumpages := (Datam1.Query2.Fields[0].AsInteger *
              Datam1.Query2.Fields[1].AsInteger);
            Datam1.Query2.Next;
          end;
        end;
        Datam1.Query2.Close;
        T1 := DateTimeToStr(Sumtid);
        T2 := DateTimeToStr(lastsumtid);

        if sumpages > -1 then
        begin
          RichEditreport.SelText := #13#10;
          RichEditreport.SelAttributes.Style := [];
          RichEditreport.SelText := textdt(lastsumtid, Sumtid) + #9 +
            IntToStr(sumpages);

        end;
        if amax < sumpages then
          amax := sumpages;
        lastsumtid := Sumtid;
        first := false;
      Until lastsumtid > endtid;

      tid := Starttid;
      sumpages := 0;
      first := true;
      RichEditreport.SelText := '';
      RichEditreport.SelText := #13#10;

      RichEditreport.SelText := #13#10;
      RichEditreport.SelText := '';
      RichEditreport.SelAttributes.Style := [fsBold];
      RichEditreport.SelText := 'Page approval ' + Prtext;;
      RichEditreport.SelAttributes.Style := [];
      // RichEditreport.SelText := '';
      // RichEditreport.SelText := #13#10;

      sumpages := 0;
      sumcount := 0;
      lastsumtid := Starttid;
      first := true;
      Repeat
        if first then
        begin
          minb := minuteof(lastsumtid);
          Sumtid := incminute(lastsumtid, IncSize - minb);
        end
        else
        begin
          Sumtid := incminute(lastsumtid, IncSize);
        end;
        Datam1.Query2.SQL.Clear;
        Datam1.Query2.SQL.Add
          ('select COUNT(distinct p.mastercopyseparationset ) from PageTable p (NOLOCK) ');
        Datam1.Query2.SQL.Add('where ' + wherestr +
          ' and p.approved = 1 and p.status > 0 and p.approvetime  > ' + '''' +
          '2000-1-1' + '''');
        Datam1.Query2.SQL.Add
          ('and approveTime >= :fromtid and approveTime <= :totid');
        Datam1.Query2.SQL.Add
          ('And p.pagetype <> 3 and p.CopyNumber = 1 and p.UniquePage <> 1 and p.Active = 1 ');
        Datam1.Query2.params[0].AsDateTime := lastsumtid;
        Datam1.Query2.params[1].AsDateTime := Sumtid;
        Datam1.Query2.Open;
        sumpages := -1;
        if not Datam1.Query2.Eof then
        begin
          if Datam1.Query2.Fields[0].AsInteger > 0 then
            sumpages := Datam1.Query2.Fields[0].AsInteger;
        end;
        Datam1.Query2.Close;

        if sumpages > -1 then
        begin
          RichEditreport.SelText := #13#10;
          RichEditreport.SelAttributes.Style := [];
          RichEditreport.SelText := textdt(lastsumtid, Sumtid) + #9 +
            IntToStr(sumpages);

          if amax < sumpages then
            amax := sumpages;
        end;
        lastsumtid := Sumtid;
        first := false;
      Until lastsumtid > endtid;

      tid := Starttid;
      sumpages := 0;

      first := true;

      RichEditreport.SelText := #13#10;
      RichEditreport.SelText := '';
      RichEditreport.SelText := #13#10;

      // RichEditreport.SelText := #13#10;
      // RichEditreport.SelText := '';
      RichEditreport.SelAttributes.Style := [fsBold];
      RichEditreport.SelText := 'Plate output ' + Prtext;;
      RichEditreport.SelAttributes.Style := [];
      // RichEditreport.SelText := '';
      // RichEditreport.SelText := #13#10;

      sumpages := 0;
      sumcount := 0;
      lastsumtid := Starttid;
      first := true;
      Repeat

        if first then
        begin
          minb := minuteof(lastsumtid);
          Sumtid := incminute(lastsumtid, IncSize - minb);
        end
        else
        begin
          Sumtid := incminute(lastsumtid, IncSize);
        end;
        Datam1.Query2.SQL.Clear;
        Datam1.Query2.SQL.Add
          ('select DISTINCT p.outputVersion ,COUNT (distinct p.flatseparation ) from PageTable p (NOLOCK) ');
        Datam1.Query2.SQL.Add('where ' + wherestr +
          ' and p.status >= 50 and p.Outputtime  > ' + '''' +
          '2000-1-1' + '''');
        Datam1.Query2.SQL.Add
          ('and Outputtime >= :fromtid and Outputtime < :totid');
        Datam1.Query2.SQL.Add('And p.pagetype <> 3 and p.Active = 1');
        Datam1.Query2.SQL.Add('group by p.outputVersion');
        Datam1.Query2.params[0].AsDateTime := lastsumtid;
        Datam1.Query2.params[1].AsDateTime := Sumtid;
        Datam1.Query2.Open;
        sumpages := -1;
        if not Datam1.Query2.Eof then
        begin
          sumpages := 0;
          while not Datam1.Query2.Eof do
          begin
            if Datam1.Query2.Fields[0].AsInteger > 0 then
              sumpages := sumpages + (Datam1.Query2.Fields[0].AsInteger *
                Datam1.Query2.Fields[1].AsInteger)
            else
              sumpages := sumpages + Datam1.Query2.Fields[1].AsInteger;
            Datam1.Query2.Next;
          end;
        end;
        Datam1.Query2.Close;

        if sumpages > -1 then
        begin
          RichEditreport.SelText := #13#10;
          RichEditreport.SelAttributes.Style := [];
          RichEditreport.SelText := textdt(lastsumtid, Sumtid) + #9 +
            IntToStr(sumpages);

          if amax < sumpages then
            amax := sumpages;
        end;
        lastsumtid := Sumtid;
        first := false;
      Until lastsumtid > endtid;

      if amax < 20 then
        amax := 15;

    end;

    RichEditreport.SelText := '';
    RichEditreport.SelText := #13#10;
    RichEditreport.SelText := '';
    RichEditreport.SelText := #13#10;

  end;
  RichEditreport.ScrollBars := (ssVertical);

end;

procedure TFormMain.ActionrepairplanExecute(Sender: TObject);
Var
  // productionid,pressid      : Integer;

  anode: TTreeNode;
  N: TTreeNode;

begin
  Formprodplan.ItsArepair := true;
  Formselectlocalprod.DefaultLocation := -1;
  Formselectlocalprod.Defaultproductionid := -1;
  Formselectlocalprod.Defaultpressid := -1;
  if TreeViewplan.Selected <> nil then
  begin
    anode := TreeViewplan.Selected;

    if anode.Level > 1 then
    begin
      Formselectlocalprod.Defaultproductionid := Tplantreedata(anode.Data^)
        .ProductionID;
      Formselectlocalprod.Defaultpressid := Tplantreedata(anode.Data^).pressid;
    end;
    while anode.Level > 0 do
      anode := anode.Parent;
    Formselectlocalprod.DefaultLocation := tNames1.locationnametoid(anode.text);
  end;

  if Formselectlocalprod.ShowModal = mrOK then
  begin
    DounapplyandSplit(Formselectlocalprod.Selectedproductionid,
      Formselectlocalprod.Selectedpressid);
  end;

  try
    Planloggingtype := 991;
    Planloggingmessage := 'Plan applied';

    N := TreeViewplan.Selected;

    plateframesApplyproductionid := Tplantreedata(N.Data^).ProductionID;
    while N.Level > 1 do
      N := N.Parent;

    plateframespressid := Tplantreedata(N.Data^).pressid;
    plateframeslocationid := Tplantreedata(N.Data^).LocationID;

    plateframes[1].Selected := true;
    Dopartappl(true);

  finally
    Setplanlock(false);
  end;
  Formprodplan.ItsArepair := false;

end;

procedure TFormMain.ActionReporcessRotationExecute(Sender: TObject);
var
  i: Integer;
  MasterSelections: Tstrings;
begin
  MasterSelections := Tstringlist.Create;
  MasterSelections.Clear;

  for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
  begin
    if (PBExListviewthumbnail.Items[i].Selected) then
    begin
      MasterSelections.Add(IntToStr(Showthubms[PBExListviewthumbnail.Items[i].
        Index].mastercopyseparationset));
    end;
  end;

  if (MasterSelections.Count = 0) then
    exit;

  if PDFRotation.ShowModal = mrOK then
  begin
    for i := 0 to MasterSelections.Count - 1 do
    begin

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('UPDATE PageTable SET FanoutID = ' +
        IntToStr(PDFRotation.RadioGroupRotation.ItemIndex * 256));
      if (PDFRotation.CheckBoxDeleteExistingPage.Checked) then
        Datam1.Query1.SQL.Add
          (',Status = 0, InkStatus=0, ProofStatus=0, Version=0');
      Datam1.Query1.SQL.Add('WHERE MasterCopySeparationSet = ' +
        MasterSelections[i]);
      Datam1.Query1.ExecSQL;

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('INSERT FileCenterRetryQueue VALUES (' +
        MasterSelections[i] + ',GETDATE())');
      Datam1.Query1.ExecSQL;

    end;
  end;

  ActionThumbnailrefresh.Execute;

  MasterSelections.free;

end;

procedure TFormMain.ActionupdnewtreelistExecute(Sender: TObject);
begin
  screen.Cursor := crhourglass;
  Datam1.Query2.SQL.Clear;
  Datam1.Query2.SQL.Add
    ('exec spUpdateTreeState @SpecificProductionID = 0,@SpecificPressRunID  = 0');
  Datam1.Query2.ExecSQL;
  screen.Cursor := crdefault;
end;

procedure TFormMain.Standardplantonewpress();
  procedure dotheapply;
  Var
    n1: TTreeNode;
  begin
    try
      Planloggingtype := 991;
      Planloggingmessage := 'Plan applied';

      n1 := TreeViewplan.Selected;

      plateframesApplyproductionid := Tplantreedata(n1.Data^).ProductionID;
      while n1.Level > 1 do
        n1 := n1.Parent;

      plateframespressid := Tplantreedata(n1.Data^).pressid;
      plateframeslocationid := Tplantreedata(n1.Data^).LocationID;
      Formprodplan.PartialPlanning := false;
      Formprodplan.planningaction := PLANADDMODE_APPLY;
      // 0 load,1 edit,2 create,3 copy, 4 move, 5 apply

      Formapplytounplanned.RadioButtonwizard.Checked := true;
      Formprodplan.prodplanforceapply := false;
      ApplytoPlan(true);

    finally
      Setplanlock(false);
    end;
  end;

Var
  N: TTreeNode;
  INpressruns, inOrgpressruns: string;
  // i,
  IPLF, ipl,
  // ip,
  Newproductionid: Integer;
  orgplantype: Integer;
  Orgdeadline: TDateTime;
  mrres: Integer;
  newtemplateid, Sheet, side, aktpressRunid: Integer;
  Swappagepositions: Boolean;
  PreflightSetupID, InkSaveSetupID, ripsetupID: Integer;
  LocationID: Integer;
begin
  Newproductionid := 0;
  Orgdeadline := Today;
  try
    Formprodplan.PartialPlanning := false;
    Formprodplan.planningaction := PLANADDMODE_COPY;
    // 0 load,1 edit,2 create,3 copy, 4 move, 5 apply

    N := TreeViewplan.Selected;
    while N.Level > 1 do
      N := N.Parent;

    plateframespressid := Tplantreedata(N.Data^).pressid;
    plateframeslocationid := Tplantreedata(N.Data^).LocationID;

    Formprodplan.PartialPlanning := false;
    Formprodplan.planningaction := 3;
    // 0 load,1 edit,2 create,3 copy, 4 move, 5 apply
    Formprodplan.Editmode := PLANADDMODE_COPY;
    FormCopytopress.frompressid := plateframespressid;
    FormCopytopress.Topressid := -1;

    FormCopytopress.Fromproductionid := plateframesproductionid;
    FormCopytopress.Toproductionid := -1;
    FormCopytopress.Copypublicationid := plateframesPublicationid;
    FormCopytopress.Copypubdate := plateframesPubdate;
    Formprodplan.Runschanged := false;

    LocationID := tNames1.locationnametoid(ComboBoxplanlocation.text);
    FormCopytopress.fromlocationid := LocationID;
    FormCopytopress.tolocationid := LocationID;
    plateframespressid := FormCopytopress.Topressid;
    plateframesproductionid := -1;
    plateframeslocationid := FormCopytopress.tolocationid;

    FormCopytopress.initialize;
    mrres := FormCopytopress.ShowModal;

    if mrres = mryes then
    begin
      orgplantype := 0;
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select TOP 1 plantype from productionnames (NOLOCK) where productionid = '
        + IntToStr(FormCopytopress.Fromproductionid));
      Datam1.Query1.Open;
      if not Datam1.Query1.Eof then
        orgplantype := Datam1.Query1.Fields[0].AsInteger;
      Datam1.Query1.Close;

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select TOP 1 deadline from pagetable (NOLOCK) where productionid = ' +
        IntToStr(FormCopytopress.Fromproductionid));
      Datam1.Query1.Open;
      if not Datam1.Query1.Eof then
        Orgdeadline := Datam1.Query1.Fields[0].AsDateTime;
      Datam1.Query1.Close;

      GroupBoxworking.caption := 'Copying plan to ' + tNames1.pressnameIDtoname
        (FormCopytopress.Topressid);
      plateframespressid := FormCopytopress.Topressid;
      plateframeslocationid := FormCopytopress.tolocationid;

      FormCopytopress.Newplanname := Formprodplan.createproductionname
        (FormCopytopress.Copypublicationid, FormCopytopress.Topressid,
        FormCopytopress.Copypubdate);
      Formprodplan.EditProductionname.text := FormCopytopress.Newplanname;
      plateframesproductionname := FormCopytopress.Newplanname;

      newtemplateid := FormCopytopress.Totemplateid;

      for IPLF := 1 to Nplateframes do
      begin
        for ipl := 0 to plateframes[IPLF].Nprodplates do
        begin
          plateframesdata[IPLF].prodplates[ipl].pressid :=
            FormCopytopress.Topressid;
          plateframesdata[IPLF].prodplates[ipl].runid := -1;
          plateframesdata[IPLF].prodplates[ipl].ProductionID := -1;
          plateframesdata[IPLF].prodplates[ipl].templatelistid :=
            FormCopytopress.TotemplateListid;
        end;
      end;

      FormCopytopress.simplecopy := true;
      FormCopytopress.setnewtemplateidinplan;

      // ## NAN This does the actual inserts on new press...
      Formprodplan.Copytopressdontshowapply := true;
      Formprodplan.ActionRunExecute(Self);
      Formprodplan.Copytopressdontshowapply := false;

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select TOP 1 productionid, pressrunid from pagetable (NOLOCK) ');
      Datam1.Query1.SQL.Add('Where pressid = ' +
        IntToStr(FormCopytopress.Topressid));
      Datam1.Query1.SQL.Add('and publicationid = ' +
        IntToStr(FormCopytopress.Copypublicationid));
      Datam1.Query1.SQL.Add('and ' + Datam1.makedatastr('',
        FormCopytopress.Copypubdate));

      Datam1.Query1.Open;
      if not Datam1.Query1.Eof then
        Newproductionid := Datam1.Query1.Fields[0].AsInteger;
      Datam1.Query1.Close;

      INpressruns := '(-99';
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select distinct pressrunid from pagetable (NOLOCK)  ');
      Datam1.Query1.SQL.Add('Where productionid = ' +
        IntToStr(Newproductionid));
      Datam1.Query1.Open;
      while not Datam1.Query1.Eof do
      begin
        INpressruns := INpressruns + ',' + Datam1.Query1.Fields[0].AsString;
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;
      INpressruns := INpressruns + ')';
      Datam1.Query1.SQL.Clear;
      if tNames1.locationnames.Count > 1 then
      begin
        if differentremotefolder(FormCopytopress.fromlocationid,
          FormCopytopress.tolocationid) then
          Datam1.Query1.SQL.Add
            ('update pagetable set flatproofstatus = 0, status = 10, InkStatus = 0 where status > 10')
        else
          Datam1.Query1.SQL.Add
            ('update pagetable set flatproofstatus = 0,status = 30, InkStatus = 0 where status > 30');

        Datam1.Query1.SQL.Add('and productionid = ' +
          IntToStr(Newproductionid));
      End
      else
      begin
        Datam1.Query1.SQL.Add
          ('update pagetable set flatproofstatus = 0,status = 30, InkStatus = 0 where status > 30');
        Datam1.Query1.SQL.Add('and productionid = ' +
          IntToStr(Newproductionid));
      end;

      if Prefs.Debug then
        Datam1.Query1.SQL.SaveToFile
          (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'
          + 'Movestatprod.SQL');
      trysql(Datam1.Query1);

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable set templateid = ' +
        IntToStr(newtemplateid));
      Datam1.Query1.SQL.Add('Where productionid = ' +
        IntToStr(Newproductionid));
      Datam1.Query1.ExecSQL;

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable set FlatProofConfigurationID = ' +
        IntToStr(FormCopytopress.ToFlatproofConfig));
      if YearOf(Orgdeadline) > 1980 then
      begin
        Datam1.Query1.SQL.Add(', deadline = :deadline');
        Datam1.Query1.parambyname('deadline').AsDateTime := Orgdeadline;
      end;
      Datam1.Query1.SQL.Add('Where productionid = ' +
        IntToStr(Newproductionid));
      trysql(Datam1.Query1);

      PreflightSetupID := 0;
      InkSaveSetupID := 0;
      ripsetupID := 0;
      if (FormCopytopress.ComboBoxRIPsetup.text <> '') and
        (FormCopytopress.ComboBoxInksave.text <> '') and
        (FormCopytopress.ComboBoxPreflight.text <> '') then
      begin
        if (UTypes.PreflightSetupNamesPossible = true) then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('Select TOP 1 PreflightSetupID from PreflightSetupNames WHERE Name='''
            + FormCopytopress.ComboBoxPreflight.text + '''');
          Datam1.Query1.Open;
          if not Datam1.Query1.Eof then
            PreflightSetupID := Datam1.Query1.Fields[0].AsInteger;
          Datam1.Query1.Close;
        end;

        if (UTypes.InkSaveSetupNamesPossible = true) then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('Select TOP 1 InksaveSetupID from InkSaveSetupNames WHERE Name='''
            + FormCopytopress.ComboBoxInksave.text + '''');
          Datam1.Query1.Open;
          if not Datam1.Query1.Eof then
            InkSaveSetupID := Datam1.Query1.Fields[0].AsInteger;
          Datam1.Query1.Close;
        end;

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('Select TOP 1 RipSetupID from RipSetupNames WHERE Name=''' +
          FormCopytopress.ComboBoxRIPsetup.text + '''');
        Datam1.Query1.Open;
        if not Datam1.Query1.Eof then
          ripsetupID := Datam1.Query1.Fields[0].AsInteger;
        Datam1.Query1.Close;

        ripsetupID := ripsetupID + (PreflightSetupID * 256) +
          (InkSaveSetupID * 256 * 256);

        if (UTypes.RipSetupIDInPageTable) then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update PageTable set RipSetupID = ' +
            IntToStr(ripsetupID) + ' where productionid = ' +
            IntToStr(Newproductionid));
          Datam1.Query1.ExecSQL;
        end;

      end;

      // NAN 20151013 begin
      // Detect if page positions must be swapped after layout change (2-up function only)
      Swappagepositions := false;
      if (PlatetemplateArray[FormCopytopress.Fromtemplatelistid].NupOnplate = 2)
        AND (PlatetemplateArray[FormCopytopress.TotemplateListid].NupOnplate = 2)
      then
      begin
        if (PlatetemplateArray[FormCopytopress.TotemplateListid]
          .PageRotationList[1] <> PlatetemplateArray
          [FormCopytopress.Fromtemplatelistid].PageRotationList[1]) and
          (PlatetemplateArray[FormCopytopress.TotemplateListid].PageRotationList
          [2] <> PlatetemplateArray[FormCopytopress.Fromtemplatelistid]
          .PageRotationList[2]) then
          Swappagepositions := true;
      end;

      // NAN 20151013 begin
      if (Swappagepositions) then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('UPDATE PageTable');
        Datam1.Query1.SQL.Add('SET pagepositions=''0'',pageposition=0');
        Datam1.Query1.SQL.Add('WHERE pagepositions=''1''');
        Datam1.Query1.SQL.Add('AND productionid = ' +
          IntToStr(Newproductionid));
        FormMain.trysql(Datam1.Query1);

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('UPDATE pagetable');
        Datam1.Query1.SQL.Add('SET pagepositions=''1'',pageposition=1');
        Datam1.Query1.SQL.Add('WHERE pagepositions=''2''');
        Datam1.Query1.SQL.Add('AND productionid = ' +
          IntToStr(Newproductionid));
        FormMain.trysql(Datam1.Query1);

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('UPDATE pagetable');
        Datam1.Query1.SQL.Add('SET pagepositions=''2'',pageposition=2');
        Datam1.Query1.SQL.Add('WHERE pagepositions=''0''');
        Datam1.Query1.SQL.Add('AND productionid = ' +
          IntToStr(Newproductionid));
        FormMain.trysql(Datam1.Query1);
      end;
      // NAN 20151013 end

      if not compagerplatelayouts(FormCopytopress.TotemplateListid,
        FormCopytopress.Fromtemplatelistid) and not Swappagepositions then
      begin

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('update pressrunid set PlanType = 0 where pressrunid IN ' +
          INpressruns);
        trysql(Datam1.Query1);

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('update productionnames set PlanType = 0 where productionid = ' +
          IntToStr(Newproductionid));
        Datam1.Query1.ExecSQL;

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('update PageTable set FlatSeparation = Separation,FlatSeparationSet = SeparationSet,CopyFlatSeparationSet = CopySeparationSet,PagePosition = 1,PagePositions = '
          + '''' + '1' + '''');
        Datam1.Query1.SQL.Add('Where productionid = ' +
          IntToStr(Newproductionid));
        trysql(Datam1.Query1);

        LoadIDs('', false);
        Makeplantree(Newproductionid);

        if (PlatetemplateArray[FormCopytopress.TotemplateListid].NupOnplate = 1)
          and (false) then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('Select distinct Copyflatseparationset,pressrunid,pageindex from pagetable (NOLOCK) ');
          Datam1.Query1.SQL.Add('Where productionid = ' +
            IntToStr(Newproductionid));
          Datam1.Query1.SQL.Add('order by pressrunid,pageindex');
          Datam1.Query1.Open;
          Sheet := 1;
          side := 0;
          aktpressRunid := -1;
          while not Datam1.Query1.Eof do
          begin
            if aktpressRunid <> Datam1.Query1.Fields[1].AsInteger then
            begin
              Sheet := 1;
              side := 0;
              aktpressRunid := Datam1.Query1.Fields[1].AsInteger;
            end;
            Datam1.Query2.SQL.Clear;
            Datam1.Query2.SQL.Add('update pagetable');
            Datam1.Query2.SQL.Add('Set sheetnumber = ' + IntToStr(Sheet));
            Datam1.Query2.SQL.Add(',sheetside = ' + IntToStr(side));
            Datam1.Query2.SQL.Add('Where Copyflatseparationset = ' +
              IntToStr(Datam1.Query1.Fields[0].AsInteger));
            Datam1.Query2.ExecSQL;
            Inc(side);
            if side = 2 then
            begin
              side := 0;
              Inc(Sheet);
            end;

            Datam1.Query1.Next;
          end;
          Datam1.Query1.Close;

          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('update pressrunid set PlanType = 1 where pressrunid IN ' +
            INpressruns);
          trysql(Datam1.Query1);

          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('update productionnames set PlanType = 1 where productionid = ' +
            IntToStr(Newproductionid));
          Datam1.Query1.ExecSQL;

        end
        else
          dotheapply;
      End
      else
      begin
        if (Prefs.ForcePlanToApplied) then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('update productionnames set PlanType = 1 where productionid = ' +
            IntToStr(Newproductionid));
          Datam1.Query1.ExecSQL;

          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('update pressrunid set PlanType = 1 where pressrunid in ' +
            INpressruns);
          Datam1.Query1.ExecSQL;

          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('update productionnames set PlanType = 1 where productionid = ' +
            IntToStr(FormCopytopress.Fromproductionid));
          Datam1.Query1.ExecSQL;

          inOrgpressruns := '(-99';
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('Select distinct pressrunid from pagetable (NOLOCK) ');
          Datam1.Query1.SQL.Add('Where productionid = ' +
            IntToStr(FormCopytopress.Fromproductionid));
          Datam1.Query1.Open;
          while not Datam1.Query1.Eof do
          begin
            inOrgpressruns := inOrgpressruns + ',' + Datam1.Query1.Fields
              [0].AsString;
            Datam1.Query1.Next;
          end;
          Datam1.Query1.Close;
          inOrgpressruns := inOrgpressruns + ')';
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('update pressrunid set PlanType = 1 where pressrunid in ' +
            inOrgpressruns);
          Datam1.Query1.ExecSQL;

        end
        else
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update productionnames set PlanType = ' +
            IntToStr(orgplantype) + ' where productionid = ' +
            IntToStr(Newproductionid));
          Datam1.Query1.ExecSQL;

          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pressrunid set PlanType = ' +
            IntToStr(orgplantype) + ' where pressrunid in ' + INpressruns);
          Datam1.Query1.ExecSQL;
        end;

      end;

      if (FormCopytopress.CheckBoxReprocessPags.Checked) AND
        (UTypes.AutoRetryQueueFileCenterPossible) then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('INSERT INTO AutoRetryQueueFileCenter SELECT ' +
          IntToStr(Newproductionid) + ',0,'''',GETDATE()');
        Datam1.Query1.ExecSQL;
      end;

    end;
  finally
    Setplanlock(false);
    case PageControlMain.ActivePageIndex of
      VIEW_PLATES:
        ActionPlaterefreshtree.Execute;
      VIEW_PRODUCTIONS:
        Actionprogressrefreshfilter.Execute;
      VIEW_PLANS:
        Makeplantree(-1);
    end;
    ActionEnable('Standardplantonewpress');
    GroupBoxworking.caption := 'Applying changes';
  end;
end;

procedure TFormMain.ActionSetplatenumbersExecute(Sender: TObject);
Var
  T { ,platename } : string;
  // Goingup : Boolean;
  IPLF, ipl, IP { ,ic } : Integer;
  Akted, Icount { ,miscstringI } : Integer;
  // Cenpl,
  Nedpl
  // ,plup,pldown
    : Integer;
  L: TListItem;
begin
  Icount := 0;
  Akted := -1;
  Nedpl := 0;

  FormChplatenum.ListView1.Items.Clear;
  for IPLF := 1 to Nplateframes do
  begin
    T := '';

    for ipl := 0 to plateframes[IPLF].Nprodplates do
    begin
      for IP := 1 to PlatetemplateArray
        [plateframesdata[IPLF].prodplates[ipl].templatelistid].NupOnplate do
      begin
        if pos('(' + IntToStr(plateframesdata[IPLF].prodplates[ipl].pages[IP]
          .Sectionid) + ')', T) < 1 then
        begin
          T := T + '(' + IntToStr(plateframesdata[IPLF].prodplates[ipl].pages
            [IP].Sectionid) + ')';
          L := FormChplatenum.ListView1.Items.Add;
          L.Checked := false;
          L.caption := tNames1.editionIDtoname(plateframesdata[IPLF].prodplates
            [1].editionid);
          L.SubItems.Add(tNames1.sectionidtoname(plateframesdata[IPLF]
            .prodplates[ipl].pages[IP].Sectionid));
          L.SubItems.Add(IntToStr(plateframes[IPLF].SequenceNumber));
          L.SubItems.Add(IntToStr(plateframes[IPLF].pressrunid));
        end;
      end;
    end;

  end;
  FormChplatenum.ShowModal;

end;

{ procedure TFormMain.makeDeadgraphicreport;

  Var
  n : ttreenode;
  I : Integer;
  ncolors,nseps,npages : Integer;
  Wherestr : string;
  firstpagein,atime,lastpagein : TDateTime;
  firstpageapproved,lastpageapproved : TDateTime;
  firstplateimaged,lastplateimaged : TDateTime;

  T : string;
  akttime : TDateTime;
  Hour, Min, Sec, MSec: Word;
  aktfromhour,akttohour : TDateTime;
  lastfromhour,lasttohour : TDateTime;

  Totnpages : Integer;
  Totrippedpages : Integer;
  Totnplates : Integer;
  Totmadeplates : Integer;

  Nrecs : Integer;
  firstline : Boolean;
  Lhour : Integer;
  LMDYH : record
  Y : Integer;
  M : Integer;
  D : Integer;
  H : Integer;
  end;

  begin
  Totnpages := 0;
  Totrippedpages := 0;
  Totnplates := 0;
  Totmadeplates := 0;

  RichEditreport.lines.Clear;
  if TreeViewoldprod.Selected.Level < 1 then exit;

  if TreeViewoldprod.Selected.Level > 0 then
  begin
  n := TreeViewoldprod.Selected;
  Wherestr := 'where p.statid <> -999 ';

  if ComboBoxreportlocation.Text <> '*' then
  RichEditreport.lines.Add('Location : '+ComboBoxreportlocation.Items[ComboBoxreportlocation.ItemIndex]);

  if ComboBoxreportlocation.Text <> '*' then
  Wherestr := wherestr + ' and p.locationname = ' + ''''+ComboBoxreportlocation.Text+ '''';



  while n.Level > 0 do
  begin
  case TTreeViewpagestype(n.data^).Kind of
  1 : begin //date
  Wherestr := wherestr + ' and '+  Datam1.makedatastr('p.',TTreeViewpagestype(n.data^).pubdate);
  RichEditreport.lines.Add('Publication date : '+n.Text);
  end;
  2 : begin //date + publ
  Wherestr := wherestr + 'and p.publicationname = ' + ''''+n.Text+'''';
  RichEditreport.lines.Add('Publication : '+n.Text);
  end;
  4 : begin //date + publ + ed
  Wherestr := wherestr + 'and p.editionname = ' + ''''+n.Text+'''';
  RichEditreport.lines.Add('Edition : '+n.Text);
  end;
  5 : begin //date + publ + ed +sec
  Wherestr := wherestr + 'and p.sectionname = ' + ''''+n.Text+'''';
  RichEditreport.lines.Add('Section : '+n.Text);
  end;

  end;
  n := n.Parent;
  end;
  end;
  if I = RichEditreport.lines.Count then
  RichEditreport.lines.Add('All');


  RichEditreport.lines.Add('');

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('Select distinct p.publicationname,p.pubdate,p.editionname,p.sectionname,p.statid from statistic p');
  Datam1.Query1.SQL.Add(wherestr);
  Datam1.Query1.SQL.Add('order by p.pubdate,p.publicationname,p.editionname,p.sectionname');

  if Prefs.Debug then Datam1.Query1.SQL.SaveToFile(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'+'deadstat.SQL');

  tryopen(Datam1.Query1);
  while not Datam1.Query1.Eof do
  begin

  Datam1.Query2.SQL.Clear;
  Datam1.Query2.SQL.Add('SELECT DISTINCT  p.PressRunID, p.Pubdate,p.publicationname, p.editionname, p.sectionname, p.pressname, MAX(P.Hold) AS Hold, p.statid, MIN(P.Status) AS Status,');
  Datam1.Query2.SQL.Add('COUNT (DISTINCT P.CopyNumber) AS Copies,');
  Datam1.Query2.SQL.Add('COUNT(DISTINCT P.FlatSeparation) AS Plates,');
  Datam1.Query2.SQL.Add('ISNULL((SELECT COUNT(DISTINCT P2.FlatSeparation) FROM statistic AS P2 WHERE P2.Status>=50 AND P.PressRunID=P2.PressRunID AND P.pressname=P2.pressname GROUP BY P2.PressRunID,P2.pressname),0) AS PlatesDone ,');

  Datam1.Query2.SQL.Add('COUNT(DISTINCT P.MasterCopySeparationSet) AS Pages,');
  Datam1.Query2.SQL.Add('ISNULL((SELECT COUNT(DISTINCT P2.MasterCopySeparationSet) FROM statistic AS P2 WHERE P2.Status>=10 AND P.PressRunID=P2.PressRunID AND P.pressname=P2.pressname GROUP BY P2.PressRunID,P2.pressname),0) AS PagesArrived ,');

  Datam1.Query2.SQL.Add('ISNULL((SELECT COUNT(DISTINCT P2.MasterCopySeparationSet) FROM ');
  Datam1.Query2.SQL.Add('statistic AS P2 WHERE P2.Status>=10 AND (P2.Approved=-1 OR P2.Approved=1) AND P.PressRunID=P2.PressRunID AND P.pressname=P2.pressname GROUP BY P2.PressRunID,P2.pressname),0) AS PagesApproved');
  Datam1.Query2.SQL.Add('FROM statistic AS P');

  Datam1.Query2.SQL.Add('WHERE p.statid = ' + ''''+Datam1.Query1.Fields[4].AsString+'''');
  Datam1.Query2.SQL.Add('GROUP BY P.Pubdate, P.PressRunID, P.publicationname,P.editionname,P.sectionname,P.pressname, p.statid');
  Datam1.Query2.SQL.Add('ORDER BY P.Pubdate, P.PressRunID, P.publicationname,P.editionname,P.sectionname,P.pressname, p.statid');


  if Prefs.Debug then Datam1.Query2.SQL.SaveToFile(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'+'deadstat.SQL');
  tryopen(Datam1.Query2);
  while not Datam1.Query2.Eof do
  begin

  RichEditreport.lines.Add('General information:');
  RichEditreport.lines.Add(#9+'Press name :'+#9+#9+ Datam1.Query2.Fields[5].AsString);
  RichEditreport.lines.Add(#9+'Number of pages:'+#9+#9+ Datam1.Query2.Fields[12].AsString);
  RichEditreport.lines.Add(#9+'Number of pages arrived:'+#9+ Datam1.Query2.Fields[13].AsString);
  RichEditreport.lines.Add(#9+'Number of pages approved:'+#9+ Datam1.Query2.Fields[14].AsString);
  //      RichEditreport.lines.Add(#9+'Lowest priority:'+#9+#9+ Datam1.Query2.Fields[7].AsString);
  RichEditreport.lines.Add(#9+'Lowest status:'+#9+#9+ statusarray[Datam1.Query2.Fields[8].AsInteger].name);

  Inc(Totnpages,Datam1.Query2.Fields[12].AsInteger);
  Inc(Totrippedpages,Datam1.Query2.Fields[13].AsInteger);

  Inc(Totnplates,Datam1.Query2.Fields[10].AsInteger);
  Inc(Totmadeplates,Datam1.Query2.Fields[11].AsInteger);


  Datam1.Query3.SQL.Clear;
  Datam1.Query3.SQL.Add('Select top 1 p.inputtime,p.separation from statistic p');
  Datam1.Query3.SQL.Add(wherestr);
  Datam1.Query3.SQL.Add('and datepart(year,p.inputtime) > 1950');
  Datam1.Query3.SQL.Add('and p.publicationname = ' + ''''+Datam1.Query2.Fields[2].AsString+'''');
  Datam1.Query3.SQL.Add('and ' + Datam1.makedatastr('p.',Datam1.Query2.Fields[1].AsDateTime));
  Datam1.Query3.SQL.Add('and p.editionname = ' + ''''+Datam1.Query2.Fields[3].AsString+'''');
  Datam1.Query3.SQL.Add('and p.sectionname = ' + ''''+Datam1.Query2.Fields[4].AsString+'''');
  Datam1.Query3.SQL.Add('and p.pressname = '  + ''''+Datam1.Query2.Fields[5].AsString+'''');
  Datam1.Query3.SQL.Add('and p.status >=10');
  Datam1.Query3.SQL.Add('order by p.inputtime');
  tryopen(Datam1.Query3);

  if not Datam1.Query3.Eof then
  firstpagein := Datam1.Query3.Fields[0].AsDateTime
  else
  firstpagein := -1;
  Datam1.Query3.Close;

  if YearOf(firstpagein) > 1950 then
  RichEditreport.lines.Add(#9+'First page arrived :' +#9+#9+datetimetostr(firstpagein));

  Datam1.Query3.SQL.Clear;
  Datam1.Query3.SQL.Add('Select top 1 p.inputtime,p.separation from statistic p');
  Datam1.Query3.SQL.Add(wherestr);
  Datam1.Query3.SQL.Add('and datepart(year,p.inputtime) > 1950');
  Datam1.Query3.SQL.Add('and p.publicationname = ' + ''''+Datam1.Query2.Fields[2].AsString+'''');
  Datam1.Query3.SQL.Add('and ' + Datam1.makedatastr('p.',Datam1.Query2.Fields[1].AsDateTime));
  Datam1.Query3.SQL.Add('and p.editionname = ' + ''''+Datam1.Query2.Fields[3].AsString+'''');
  Datam1.Query3.SQL.Add('and p.sectionname = ' + ''''+Datam1.Query2.Fields[4].AsString+'''');
  Datam1.Query3.SQL.Add('and p.pressname = '  + ''''+Datam1.Query2.Fields[5].AsString+'''');
  Datam1.Query3.SQL.Add('and p.status >=10');
  Datam1.Query3.SQL.Add('order by p.inputtime desc');
  tryopen(Datam1.Query3);
  if not Datam1.Query3.Eof then
  lastpagein := Datam1.Query3.Fields[0].AsDateTime
  else
  lastpagein := 0;
  Datam1.Query3.Close;

  Datam1.Query3.SQL.Clear;
  Datam1.Query3.SQL.Add('Select top 1 p.approvetime,p.separation from statistic p');
  Datam1.Query3.SQL.Add(wherestr);
  Datam1.Query3.SQL.Add('and datepart(year,p.approvetime) > 1950');
  Datam1.Query3.SQL.Add('and p.publicationname = ' + ''''+Datam1.Query2.Fields[2].AsString+'''');
  Datam1.Query3.SQL.Add('and ' + Datam1.makedatastr('p.',Datam1.Query2.Fields[1].AsDateTime));
  Datam1.Query3.SQL.Add('and p.editionname = ' + ''''+Datam1.Query2.Fields[3].AsString+'''');
  Datam1.Query3.SQL.Add('and p.sectionname = ' + ''''+Datam1.Query2.Fields[4].AsString+'''');
  Datam1.Query3.SQL.Add('and p.pressname = '  + ''''+Datam1.Query2.Fields[5].AsString+'''');
  Datam1.Query3.SQL.Add('and p.status >=10');
  Datam1.Query3.SQL.Add('and p.approved = 1');
  Datam1.Query3.SQL.Add('order by p.approvetime');
  tryopen(Datam1.Query3);
  if not Datam1.Query3.Eof then
  firstpageapproved := Datam1.Query3.Fields[0].AsDateTime
  else
  firstpageapproved := -1;
  Datam1.Query3.Close;

  Datam1.Query3.SQL.Clear;
  Datam1.Query3.SQL.Add('Select top 1 p.approvetime,p.separation from statistic p');
  Datam1.Query3.SQL.Add(wherestr);
  Datam1.Query3.SQL.Add('and datepart(year,p.approvetime) > 1950');
  Datam1.Query3.SQL.Add('and p.publicationname = ' + ''''+Datam1.Query2.Fields[2].AsString+'''');
  Datam1.Query3.SQL.Add('and ' + Datam1.makedatastr('p.',Datam1.Query2.Fields[1].AsDateTime));
  Datam1.Query3.SQL.Add('and p.editionname = ' + ''''+Datam1.Query2.Fields[3].AsString+'''');
  Datam1.Query3.SQL.Add('and p.sectionname = ' + ''''+Datam1.Query2.Fields[4].AsString+'''');
  Datam1.Query3.SQL.Add('and p.pressname = '  + ''''+Datam1.Query2.Fields[5].AsString+'''');
  Datam1.Query3.SQL.Add('and p.status >=10');
  Datam1.Query3.SQL.Add('and p.approved = 1');
  Datam1.Query3.SQL.Add('order by p.approvetime desc');
  tryopen(Datam1.Query3);
  if not Datam1.Query3.Eof then
  lastpageapproved := Datam1.Query3.Fields[0].AsDateTime
  else
  lastpageapproved := 0;
  Datam1.Query3.Close;

  Datam1.Query3.SQL.Clear;
  Datam1.Query3.SQL.Add('Select top 1 p.outputtime,p.separation from statistic p');
  Datam1.Query3.SQL.Add(wherestr);
  Datam1.Query3.SQL.Add('and datepart(year,p.outputtime) > 1950');
  Datam1.Query3.SQL.Add('and p.publicationname = ' + ''''+Datam1.Query2.Fields[2].AsString+'''');
  Datam1.Query3.SQL.Add('and ' + Datam1.makedatastr('p.',Datam1.Query2.Fields[1].AsDateTime));
  Datam1.Query3.SQL.Add('and p.editionname = ' + ''''+Datam1.Query2.Fields[3].AsString+'''');
  Datam1.Query3.SQL.Add('and p.sectionname = ' + ''''+Datam1.Query2.Fields[4].AsString+'''');
  Datam1.Query3.SQL.Add('and p.pressname = '  + ''''+Datam1.Query2.Fields[5].AsString+'''');
  Datam1.Query3.SQL.Add('and p.status >=50');
  Datam1.Query3.SQL.Add('order by p.outputtime');
  tryopen(Datam1.Query3);
  if not Datam1.Query3.Eof then
  firstplateimaged := Datam1.Query3.Fields[0].AsDateTime
  else
  firstplateimaged := -1;
  Datam1.Query3.Close;

  Datam1.Query3.SQL.Clear;
  Datam1.Query3.SQL.Add('Select top 1 p.outputtime,p.separation from statistic p');
  Datam1.Query3.SQL.Add(wherestr);
  Datam1.Query3.SQL.Add('and datepart(year,p.outputtime) > 1950');
  Datam1.Query3.SQL.Add('and p.publicationname = ' + ''''+Datam1.Query2.Fields[2].AsString+'''');
  Datam1.Query3.SQL.Add('and ' + Datam1.makedatastr('p.',Datam1.Query2.Fields[1].AsDateTime));
  Datam1.Query3.SQL.Add('and p.editionname = ' + ''''+Datam1.Query2.Fields[3].AsString+'''');
  Datam1.Query3.SQL.Add('and p.sectionname = ' + ''''+Datam1.Query2.Fields[4].AsString+'''');
  Datam1.Query3.SQL.Add('and p.pressname = '  + ''''+Datam1.Query2.Fields[5].AsString+'''');
  Datam1.Query3.SQL.Add('and p.status >=50');
  Datam1.Query3.SQL.Add('order by outputtime desc');
  tryopen(Datam1.Query3);
  if not Datam1.Query3.Eof then
  lastplateimaged := Datam1.Query3.Fields[0].AsDateTime
  else
  lastplateimaged := -1;
  Datam1.Query3.Close;


  if YearOf(firstpagein) > 1950 then
  begin
  DecodeTime(firstpagein,Hour, Min, Sec, MSec);
  aktfromhour := RecodeTime(firstpagein,Hour,0,0,0);
  akttohour   := IncHour(aktfromhour,1);
  RichEditreport.lines.Add('Pages arrived pr hour:');
  RichEditreport.lines.Add('Day'+#9+#9+'Hour'+#9+#9+'Number of pages');

  Datam1.Query3.SQL.Clear;
  Datam1.Query3.SQL.Add('Select distinct (datepart(year,p.inputtime)) as y,');
  Datam1.Query3.SQL.Add('(datepart(month,p.inputtime)) as m,');
  Datam1.Query3.SQL.Add('(datepart(day,p.inputtime)) as d,');
  Datam1.Query3.SQL.Add('(datepart(hour,p.inputtime)) as t,');
  Datam1.Query3.SQL.Add('p.mastercopyseparationset');
  Datam1.Query3.SQL.Add('from statistic p');
  Datam1.Query3.SQL.Add('where p.publicationname = ' + ''''+Datam1.Query2.Fields[2].AsString+'''');
  Datam1.Query3.SQL.Add('and ' + Datam1.makedatastr('p.',Datam1.Query2.Fields[1].AsDateTime));
  Datam1.Query3.SQL.Add('and p.editionname = ' + ''''+Datam1.Query2.Fields[3].AsString+'''');
  Datam1.Query3.SQL.Add('and p.sectionname = ' + ''''+Datam1.Query2.Fields[4].AsString+'''');
  Datam1.Query3.SQL.Add('and p.pressname = '  + ''''+Datam1.Query2.Fields[5].AsString+'''');
  Datam1.Query3.SQL.Add('and p.status >= 10 ');
  Datam1.Query3.SQL.Add('and not exists(select p.inputtime from statistic pe2');
  Datam1.Query3.SQL.Add('where pe2.separation / 10000 = p.separation / 10000 and pe2.statid = p.statid');
  Datam1.Query3.SQL.Add('and datediff(hour,pe2.inputtime,p.inputtime) > 0)');
  Datam1.Query3.SQL.Add('GROUP BY p.inputtime,p.mastercopyseparationset');
  Datam1.Query3.SQL.Add('order by y,m,d,t');

  tryopen(Datam1.Query3);
  Lhour := -1;
  LMDYH.y := -1;
  LMDYH.M := -1;
  LMDYH.D := -1;
  LMDYH.H := -1;
  firstline := true;
  if not Datam1.Query3.Eof then
  begin
  Nrecs := 0;
  LMDYH.y := Datam1.Query3.Fields[0].AsInteger;
  LMDYH.m := Datam1.Query3.Fields[1].AsInteger;
  LMDYH.d := Datam1.Query3.Fields[2].AsInteger;
  LMDYH.h := Datam1.Query3.Fields[3].AsInteger;
  Lhour := LMDYH.h;
  lastfromhour := encodedatetime(LMDYH.y, LMDYH.m, LMDYH.d, LMDYH.h, 1,1,1);

  while not Datam1.Query3.Eof do
  begin
  if (LMDYH.y <> Datam1.Query3.Fields[0].AsInteger) or
  (LMDYH.m <> Datam1.Query3.Fields[1].AsInteger) or
  (LMDYH.d <> Datam1.Query3.Fields[2].AsInteger) or
  (LMDYH.h <> Datam1.Query3.Fields[3].AsInteger) then
  begin
  aktfromhour := encodedatetime(LMDYH.y, LMDYH.m, LMDYH.d, LMDYH.h, 1,1,1);
  if hoursbetween(aktfromhour,lastfromhour) > 1 then
  RichEditreport.lines.Add('-');
  RichEditreport.lines.Add(FormaTDateTime('YYYY.MM.DD'+#9+'HH:00',aktfromhour)+#9+#9+ IntToStr(nrecs));
  lastfromhour := aktfromhour;
  Nrecs := 1;
  LMDYH.y := Datam1.Query3.Fields[0].AsInteger;
  LMDYH.m := Datam1.Query3.Fields[1].AsInteger;
  LMDYH.d := Datam1.Query3.Fields[2].AsInteger;
  LMDYH.h := Datam1.Query3.Fields[3].AsInteger;
  end
  else
  begin
  Inc(Nrecs);
  end;

  Datam1.Query3.Next;
  end;
  aktfromhour := encodedatetime(LMDYH.y, LMDYH.m, LMDYH.d, LMDYH.h, 1,1,1);
  if hoursbetween(aktfromhour,lastfromhour) > 1 then
  RichEditreport.lines.Add('-');

  RichEditreport.lines.Add(FormaTDateTime('YYYY.MM.DD'+#9+'HH:00',aktfromhour)+#9+#9+ IntToStr(nrecs));
  end;
  Datam1.Query3.Close;
  end;

  if YearOf(firstpageapproved) > 1950 then
  begin
  DecodeTime(firstpageapproved,Hour, Min, Sec, MSec);
  aktfromhour := RecodeTime(firstpageapproved,Hour,0,0,0);
  akttohour   := IncHour(aktfromhour,1);

  RichEditreport.lines.Add('');
  RichEditreport.lines.Add('Pages approved pr hour:');
  RichEditreport.lines.Add('Day'+#9+#9+'Hour'+#9+#9+'Number of pages');

  Datam1.Query3.SQL.Clear;
  Datam1.Query3.SQL.Add('Select distinct (datepart(year,p.approvetime)) as y,');
  Datam1.Query3.SQL.Add('(datepart(month,p.approvetime)) as m,');
  Datam1.Query3.SQL.Add('(datepart(day,p.approvetime)) as d,');
  Datam1.Query3.SQL.Add('(datepart(hour,p.approvetime)) as t,');
  Datam1.Query3.SQL.Add('p.mastercopyseparationset');
  Datam1.Query3.SQL.Add('from statistic p');
  Datam1.Query3.SQL.Add('where p.publicationname = ' + ''''+Datam1.Query2.Fields[2].AsString+'''');
  Datam1.Query3.SQL.Add('and ' + Datam1.makedatastr('p.',Datam1.Query2.Fields[1].AsDateTime));
  Datam1.Query3.SQL.Add('and p.editionname = ' + ''''+Datam1.Query2.Fields[3].AsString+'''');
  Datam1.Query3.SQL.Add('and p.sectionname = ' + ''''+Datam1.Query2.Fields[4].AsString+'''');
  Datam1.Query3.SQL.Add('and p.pressname = '  + ''''+Datam1.Query2.Fields[5].AsString+'''');
  Datam1.Query3.SQL.Add('and p.approved = 1');
  Datam1.Query3.SQL.Add('and not exists(select pe2.approvetime from statistic pe2');
  Datam1.Query3.SQL.Add('where pe2.separation / 10000 = p.separation / 10000 and pe2.statid = p.statid');
  Datam1.Query3.SQL.Add('and datediff(hour,pe2.approvetime,p.approvetime) > 0)');
  Datam1.Query3.SQL.Add('GROUP BY p.approvetime,p.mastercopyseparationset');
  Datam1.Query3.SQL.Add('order by y,m,d,t');

  tryopen(Datam1.Query3);
  Lhour := -1;
  LMDYH.y := -1;
  LMDYH.M := -1;
  LMDYH.D := -1;
  LMDYH.H := -1;
  firstline := true;
  if not Datam1.Query3.Eof then
  begin
  Nrecs := 0;
  LMDYH.y := Datam1.Query3.Fields[0].AsInteger;
  LMDYH.m := Datam1.Query3.Fields[1].AsInteger;
  LMDYH.d := Datam1.Query3.Fields[2].AsInteger;
  LMDYH.h := Datam1.Query3.Fields[3].AsInteger;
  Lhour := LMDYH.h;
  lastfromhour := encodedatetime(LMDYH.y, LMDYH.m, LMDYH.d, LMDYH.h, 1,1,1);

  while not Datam1.Query3.Eof do
  begin
  if (LMDYH.y <> Datam1.Query3.Fields[0].AsInteger) or
  (LMDYH.m <> Datam1.Query3.Fields[1].AsInteger) or
  (LMDYH.d <> Datam1.Query3.Fields[2].AsInteger) or
  (LMDYH.h <> Datam1.Query3.Fields[3].AsInteger) then
  begin
  aktfromhour := encodedatetime(LMDYH.y, LMDYH.m, LMDYH.d, LMDYH.h, 1,1,1);
  if hoursbetween(aktfromhour,lastfromhour) > 1 then
  RichEditreport.lines.Add('-');
  RichEditreport.lines.Add(FormaTDateTime('YYYY.MM.DD'+#9+'HH:00',aktfromhour)+#9+#9+ IntToStr(nrecs));
  lastfromhour := aktfromhour;
  Nrecs := 1;
  LMDYH.y := Datam1.Query3.Fields[0].AsInteger;
  LMDYH.m := Datam1.Query3.Fields[1].AsInteger;
  LMDYH.d := Datam1.Query3.Fields[2].AsInteger;
  LMDYH.h := Datam1.Query3.Fields[3].AsInteger;
  end
  else
  begin
  Inc(Nrecs);
  end;

  Datam1.Query3.Next;
  end;
  aktfromhour := encodedatetime(LMDYH.y, LMDYH.m, LMDYH.d, LMDYH.h, 1,1,1);
  if hoursbetween(aktfromhour,lastfromhour) > 1 then
  RichEditreport.lines.Add('-');

  RichEditreport.lines.Add(FormaTDateTime('YYYY.MM.DD'+#9+'HH:00',aktfromhour)+#9+#9+ IntToStr(nrecs));
  end;
  Datam1.Query3.Close;


  end;

  if YearOf(firstplateimaged) > 1950 then
  begin
  DecodeTime(firstplateimaged,Hour, Min, Sec, MSec);
  aktfromhour := RecodeTime(firstplateimaged,Hour,0,0,0);
  akttohour   := IncHour(aktfromhour,1);

  RichEditreport.lines.Add('');
  RichEditreport.lines.Add('Plates imaged pr hour:');
  RichEditreport.lines.Add('Day'+#9+#9+'Hour'+#9+#9+'Number of plates');

  Datam1.Query3.SQL.Clear;
  Datam1.Query3.SQL.Add('Select distinct (datepart(year,p.outputtime)) as y,');
  Datam1.Query3.SQL.Add('(datepart(month,p.outputtime)) as m,');
  Datam1.Query3.SQL.Add('(datepart(day,p.outputtime)) as d,');
  Datam1.Query3.SQL.Add('(datepart(hour,p.outputtime)) as t,');
  Datam1.Query3.SQL.Add('p.flatseparation');
  Datam1.Query3.SQL.Add('from statistic p');
  Datam1.Query3.SQL.Add('where p.publicationname = ' + ''''+Datam1.Query2.Fields[2].AsString+'''');
  Datam1.Query3.SQL.Add('and ' + Datam1.makedatastr('p.',Datam1.Query2.Fields[1].AsDateTime));
  Datam1.Query3.SQL.Add('and p.editionname = ' + ''''+Datam1.Query2.Fields[3].AsString+'''');
  Datam1.Query3.SQL.Add('and p.sectionname = ' + ''''+Datam1.Query2.Fields[4].AsString+'''');
  Datam1.Query3.SQL.Add('and p.pressname = '  + ''''+Datam1.Query2.Fields[5].AsString+'''');
  Datam1.Query3.SQL.Add('and p.status >= 50');
  Datam1.Query3.SQL.Add('order by y,m,d,t');


  tryopen(Datam1.Query3);
  Lhour := -1;
  LMDYH.y := -1;
  LMDYH.M := -1;
  LMDYH.D := -1;
  LMDYH.H := -1;
  firstline := true;
  if not Datam1.Query3.Eof then
  begin
  Nrecs := 0;
  LMDYH.y := Datam1.Query3.Fields[0].AsInteger;
  LMDYH.m := Datam1.Query3.Fields[1].AsInteger;
  LMDYH.d := Datam1.Query3.Fields[2].AsInteger;
  LMDYH.h := Datam1.Query3.Fields[3].AsInteger;
  Lhour := LMDYH.h;
  lastfromhour := encodedatetime(LMDYH.y, LMDYH.m, LMDYH.d, LMDYH.h, 1,1,1);

  while not Datam1.Query3.Eof do
  begin
  if (LMDYH.y <> Datam1.Query3.Fields[0].AsInteger) or
  (LMDYH.m <> Datam1.Query3.Fields[1].AsInteger) or
  (LMDYH.d <> Datam1.Query3.Fields[2].AsInteger) or
  (LMDYH.h <> Datam1.Query3.Fields[3].AsInteger) then
  begin
  aktfromhour := encodedatetime(LMDYH.y, LMDYH.m, LMDYH.d, LMDYH.h, 1,1,1);
  if hoursbetween(aktfromhour,lastfromhour) > 1 then
  RichEditreport.lines.Add('-');
  RichEditreport.lines.Add(FormaTDateTime('YYYY.MM.DD'+#9+'HH:00',aktfromhour)+#9+#9+ IntToStr(nrecs));
  lastfromhour := aktfromhour;
  Nrecs := 1;
  LMDYH.y := Datam1.Query3.Fields[0].AsInteger;
  LMDYH.m := Datam1.Query3.Fields[1].AsInteger;
  LMDYH.d := Datam1.Query3.Fields[2].AsInteger;
  LMDYH.h := Datam1.Query3.Fields[3].AsInteger;
  end
  else
  begin
  Inc(Nrecs);
  end;

  Datam1.Query3.Next;
  end;
  aktfromhour := encodedatetime(LMDYH.y, LMDYH.m, LMDYH.d, LMDYH.h, 1,1,1);
  if hoursbetween(aktfromhour,lastfromhour) > 1 then
  RichEditreport.lines.Add('-');

  RichEditreport.lines.Add(FormaTDateTime('YYYY.MM.DD'+#9+'HH:00',aktfromhour)+#9+#9+ IntToStr(nrecs));
  end;
  Datam1.Query3.Close;



  end;



  RichEditreport.lines.Add('');
  RichEditreport.lines.Add('---------------------------');
  RichEditreport.lines.Add('');
  Datam1.Query2.Next;
  end;
  Datam1.Query2.Close;

  Datam1.Query1.Next;
  end;
  Datam1.Query1.Close;

  if Totnpages > 0 then
  begin
  RichEditreport.lines.Add('');
  RichEditreport.lines.Add('');
  RichEditreport.lines.Add('Sum');
  RichEditreport.lines.Add(#9+'Number of pages:'+#9+#9+ IntToStr(Totnpages));
  RichEditreport.lines.Add(#9+'Number of pages arrived:'+#9+ IntToStr(Totrippedpages));

  RichEditreport.lines.Add(#9+'Number of plates : '+#9+#9+ IntToStr(Totnplates));
  RichEditreport.lines.Add(#9+'Number of plates done : '+#9+ IntToStr(Totmadeplates));

  RichEditreport.lines.Add('---------------------------');


  end;
  end;
}

procedure TFormMain.makegraphicreport;

Var
  i, i2: Integer;
  StarttidOK, endtidOK: Boolean;
  lastsumtid, Sumtid, Starttid, endtid, tid: TDateTime;
  N: TTreeNode;
  wherestr: String;
  fromtidtype, totidtype: Integer;

  Nplates, tothours, totminutes, sumpages, sumcount, amax: Integer;

  avgsum, lastsum, Npages, Npageversions, minb, Npagesstat,
    Npagesstatver: Integer;
  lastset, first, notimes: Boolean;
  T1, T2, t3: String;
  alldone: Boolean;
  lasttid, Deadline, Itid, firstarrived, Lastarrived, firstOut, Lastout,
    firstappr, lastappr, firstrelease: TDateTime;
  anum: Integer;
  antalplader, antalpladerikkelavet: Integer;
begin
  Starttid := Today;
  endtid := Today;
  RichEditcharts.Lines.Clear;
  RichEditcharts.SelStart := GetTextLen;
  Chartpage.Series[0].Clear;
  Chartpage.Series[1].Clear;
  Chartpage.Series[2].Clear;
  Chartpage.Series[3].Clear;
  Chartpage.Series[4].Clear;

  Chartsum.Series[0].Clear;
  Chartsum.Series[1].Clear;
  Chartsum.Series[2].Clear;
  Chartsum.Series[3].Clear;
  // Chartsum.Series[4].Clear;

  if TreeViewreportfilter.Selected <> nil then
  begin
    N := TreeViewreportfilter.Selected;

    wherestr := ' p.productionid > -99 ';
    while N.Level > 0 do
    begin
      case TTreeViewpagestype(N.Data^).kind of
        1:
          begin // date
            wherestr := wherestr + ' and ' + Datam1.makedatastr('p.',
              TTreeViewpagestype(N.Data^).Pubdate);
          end;
        2:
          begin // date + publ
            wherestr := wherestr + ' and p.publicationid = ' +
              IntToStr(TTreeViewpagestype(N.Data^).Publicationid);
          end;
        4:
          begin // date + publ + ed
            wherestr := wherestr + ' and p.editionid = ' +
              IntToStr(TTreeViewpagestype(N.Data^).editionid);
          end;
        5:
          begin // date + publ + ed +sec
            wherestr := wherestr + ' and p.sectionid = ' +
              IntToStr(TTreeViewpagestype(N.Data^).Sectionid);
          end;
      end;
      N := N.Parent;
    end;

    fromtidtype := -1;
    totidtype := -1;

    StarttidOK := true;
    endtidOK := true;
    firstarrived := 0;
    Lastarrived := 0;
    firstOut := 0;
    Lastout := 0;
    firstappr := 0;
    lastappr := 0;

    alldone := true;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select Count(distinct  p.FlatSeparation) from PageTable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr);
    Datam1.Query1.SQL.Add
      ('And p.pagetype <> 3 and p.UniquePage <> 0 and p.Active = 1');
    Datam1.Query1.Open;
    if Prefs.Debug then
      Datam1.Query1.SQL.SaveToFile
        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
        'nplate.SQL');
    if not Datam1.Query1.Eof then
    begin
      antalplader := Datam1.Query1.Fields[0].AsInteger;
    end;
    Datam1.Query1.Close;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select Count(distinct  p.FlatSeparation) from PageTable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr);
    Datam1.Query1.SQL.Add
      ('And p.pagetype <> 3 and p.UniquePage <> 0 and p.Active = 1 and p.status < 50 ');
    Datam1.Query1.Open;
    if Prefs.Debug then
      Datam1.Query1.SQL.SaveToFile
        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
        'nplate.SQL');
    if not Datam1.Query1.Eof then
    begin
      antalpladerikkelavet := Datam1.Query1.Fields[0].AsInteger;
      alldone := false;
    end;
    Datam1.Query1.Close;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select distinct p.Version , count (distinct p.mastercopyseparationset) as page  from PageTable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr);
    Datam1.Query1.SQL.Add
      ('And p.pagetype <> 3 and p.CopyNumber = 1 and p.UniquePage = 1 and p.Active = 1');
    Datam1.Query1.SQL.Add('group by p.Version');
    Datam1.Query1.Open;
    Npages := 0;
    Npageversions := 0;
    while not Datam1.Query1.Eof do
    begin
      Inc(Npages, Datam1.Query1.Fields[1].AsInteger);
      if Datam1.Query1.Fields[0].AsInteger > 0 then
        Inc(Npageversions, Datam1.Query1.Fields[1].AsInteger *
          Datam1.Query1.Fields[0].AsInteger)
      else
        Inc(Npageversions, Datam1.Query1.Fields[1].AsInteger);
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;

    Datam1.Query1.SQL.Clear; // ,MIN(p.ApproveTime),MAX(p.ApproveTime)
    Datam1.Query1.SQL.Add
      ('select MIN( p.InputTime),MAX(p.inputtime),MIN(p.OutputTime),MAX(p.OutputTime) from pagetable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr +
      ' and p.status > 0 and p.inputtime  > ' + '''' + '2000-1-1' + '''');
    Datam1.Query1.SQL.Add('And p.pagetype <> 3');

    if Prefs.Debug then
      Datam1.Query1.SQL.SaveToFile
        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
        'startstoptid.SQL');

    notimes := false;

    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
    begin
      Starttid := EncodeDate(2200, 1, 1);
      endtid := EncodeDate(2000, 1, 1);
      for i := 0 to 3 do
      begin
        if Datam1.Query1.Fields[i].AsDateTime > EncodeDate(2000, 1, 1) then
        begin
          case i of
            0:
              firstarrived := Datam1.Query1.Fields[i].AsDateTime;
            1:
              Lastarrived := Datam1.Query1.Fields[i].AsDateTime;
            2:
              firstOut := Datam1.Query1.Fields[i].AsDateTime;
            3:
              Lastout := Datam1.Query1.Fields[i].AsDateTime;
          end;
          if Starttid > Datam1.Query1.Fields[i].AsDateTime then
          begin
            Starttid := Datam1.Query1.Fields[i].AsDateTime;
            fromtidtype := i;
          end;
          if endtid < Datam1.Query1.Fields[i].AsDateTime then
          begin
            endtid := Datam1.Query1.Fields[i].AsDateTime;
            totidtype := i;
          end;
        end;
      end;
    end
    else
      notimes := true;
    Datam1.Query1.Close;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('select Min(p.deadline) from pagetable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr + ' and p.deadline  > ' + '''' +
      '2000-1-1' + '''');
    Datam1.Query1.SQL.Add('And p.pagetype <> 3');
    Deadline := 0;
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
    begin
      if Datam1.Query1.Fields[0].AsDateTime > EncodeDate(2000, 1, 1) then
        Deadline := Datam1.Query1.Fields[0].AsDateTime;
    end;
    Datam1.Query1.Close;

    firstrelease := 0;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select min(EventTime) from Log (NOLOCK) , PageTable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr);
    Datam1.Query1.SQL.Add
      ('and Log.Separation = p.Separation and Log.Event = 80');
    Datam1.Query1.SQL.Add('And p.pagetype <> 3');
    if Prefs.Debug then
      Datam1.Query1.SQL.SaveToFile
        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
        'firstreal.SQL');
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
    begin
      if Datam1.Query1.Fields[0].AsDateTime > EncodeDate(2000, 1, 1) then
        firstrelease := Datam1.Query1.Fields[0].AsDateTime;
    end;
    Datam1.Query1.Close;

    if Deadline > 0 then
    begin
      if Deadline > endtid then
      begin
        if hoursbetween(Deadline, endtid) < 6 then
        begin
          endtid := Deadline;
          endtid := incminute(endtid, 60);

        end;
      end;

      if Deadline < Starttid then
      begin
        if hoursbetween(Starttid, Deadline) < 6 then
          Starttid := Deadline;
      end;

    end;

    if (not notimes) and (fromtidtype > -1) then
    begin
      tothours := hoursbetween(endtid, Starttid);
      totminutes := minutesbetween(endtid, Starttid);
      Chartpage.leftAxis.Maximum := Npageversions;
      Chartpage.leftAxis.Increment := Npageversions / 5;

      Chartpage.Series[0].XValues.DateTime := true;
      Chartpage.Series[1].XValues.DateTime := true;
      Chartpage.Series[2].XValues.DateTime := true;
      Chartpage.Series[3].XValues.DateTime := true;
      Chartpage.Series[4].XValues.DateTime := true;

      Chartpage.BottomAxis.minimum := 0;
      Chartpage.BottomAxis.Maximum := endtid;
      Chartpage.BottomAxis.minimum := Starttid;

      Chartpage.BottomAxis.minimum :=
        incminute(Chartpage.BottomAxis.minimum, -1);

      Chartpage.BottomAxis.Increment := DateTimeStep[dtThirtyMinutes];

      amax := 0;
      Chartsum.leftAxis.Maximum := Npageversions;
      Chartsum.leftAxis.Increment := Npageversions / 5;

      if (Deadline > Starttid) and (Deadline < endtid) then
      begin
        Chartpage.Series[3].Addxy(Deadline, 0);
        Chartpage.Series[3].Addxy(Deadline, Npages);
      end;

      if (firstrelease > Starttid) and (firstrelease < endtid) then
      begin
        Chartpage.Series[4].Active := true;
        Chartpage.Series[4].Addxy(firstrelease, 0);
        Chartpage.Series[4].Addxy(firstrelease, Npages);
      end
      else
        Chartpage.Series[4].Active := false;

      Chartsum.Series[0].XValues.DateTime := true;
      Chartsum.Series[1].XValues.DateTime := true;
      Chartsum.Series[2].XValues.DateTime := true;
      Chartsum.Series[3].XValues.DateTime := true;

      Chartsum.BottomAxis.minimum := 0;
      Chartsum.BottomAxis.Maximum := endtid;
      Chartsum.BottomAxis.minimum := Starttid;

      Chartsum.BottomAxis.minimum := incminute(Chartsum.BottomAxis.minimum, -1);

      Chartsum.BottomAxis.Increment := DateTimeStep[dtOneHour];

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('select distinct DATEDIFF(MINUTE,:starttid, p.InputTime) as tid from pagetable p (NOLOCK) ');
      Datam1.Query1.SQL.Add('where ' + wherestr +
        ' and p.status > 0 and p.inputtime  > ' + '''' + '2000-1-1' + '''');
      Datam1.Query1.SQL.Add('And p.pagetype <> 3');
      Datam1.Query1.params[0].AsDateTime := Starttid;
      if Prefs.Debug then
        Datam1.Query1.SQL.SaveToFile
          (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'
          + 'datedifs.SQL');
      Datam1.Query1.Open;
      tid := Starttid;

      Chartpage.Series[0].Addxy(Chartpage.BottomAxis.minimum, 0);
      first := true;
      lasttid := Starttid;
      while not Datam1.Query1.Eof do
      begin

        Datam1.Query2.SQL.Clear;
        Datam1.Query2.SQL.Add
          ('select distinct p.Version , count (distinct p.mastercopyseparationset) as page  from PageTable p (NOLOCK) ');
        Datam1.Query2.SQL.Add('where ' + wherestr +
          ' and p.status > 0 and p.inputtime  > ' + '''' + '2000-1-1' + '''');
        Datam1.Query2.SQL.Add
          ('and p.PageType <> 3 and p.CopyNumber = 1 and p.UniquePage = 1 and p.Active = 1');
        Datam1.Query2.SQL.Add('and DATEDIFF(MINUTE,:starttid, InputTime) <= ' +
          IntToStr(Datam1.Query1.Fields[0].AsInteger));
        Datam1.Query2.SQL.Add('group by p.Version');
        Datam1.Query2.params[0].AsDateTime := Starttid;
        Datam1.Query2.Open;
        sumpages := 0;
        while not Datam1.Query2.Eof do
        begin
          sumpages := sumpages + (Datam1.Query2.Fields[0].AsInteger *
            Datam1.Query2.Fields[1].AsInteger);
          Datam1.Query2.Next;
        end;
        Datam1.Query2.Close;

        tid := incminute(Starttid, Datam1.Query1.Fields[0].AsInteger);
        lastset := false;
        if (true) or (minutesbetween(tid, lasttid) > 10) then
        begin
          lastset := true;
          lasttid := tid;
          if first then
          begin
            Chartpage.Series[0].Addxy(tid, 0);
            first := false;
          end;
          Chartpage.Series[0].Addxy(tid, sumpages);
        end;
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;

      sumpages := 0;
      sumcount := 0;

      lastsumtid := Starttid;

      first := true;
      Repeat
        if first then
        begin
          minb := minuteof(lastsumtid);
          Sumtid := incminute(lastsumtid, 30 - minb);
        end
        else
        begin
          Sumtid := incminute(lastsumtid, 30);
        end;
        Datam1.Query2.SQL.Clear;
        Datam1.Query2.SQL.Add
          ('select distinct p.Version , count (distinct p.mastercopyseparationset) as page  from PageTable p (NOLOCK) ');
        Datam1.Query2.SQL.Add('where ' + wherestr +
          ' and p.status > 0 and p.inputtime  > ' + '''' + '2000-1-1' + '''');
        Datam1.Query2.SQL.Add
          ('and p.PageType <> 3 and p.CopyNumber = 1 and p.UniquePage = 1 and p.Active = 1 ');
        Datam1.Query2.SQL.Add
          ('and InputTime >= :fromtid and inputtime <= :totid');
        Datam1.Query2.SQL.Add('group by p.Version');
        Datam1.Query2.params[0].AsDateTime := lastsumtid;
        Datam1.Query2.params[1].AsDateTime := Sumtid;
        Datam1.Query2.Open;
        sumpages := -1;
        if not Datam1.Query2.Eof then
        begin
          sumpages := 0;
          while not Datam1.Query2.Eof do
          begin
            sumpages := (Datam1.Query2.Fields[0].AsInteger *
              Datam1.Query2.Fields[1].AsInteger);
            Datam1.Query2.Next;
          end;
        end;
        Datam1.Query2.Close;
        T1 := DateTimeToStr(Sumtid);
        T2 := DateTimeToStr(lastsumtid);

        if sumpages > -1 then
        begin
          if first then
          begin
            Chartsum.Series[0].Addxy(Starttid, sumpages);
            first := false;
          end
          else
            Chartsum.Series[0].Addxy(lastsumtid, sumpages);
        end;
        if amax < sumpages then
          amax := sumpages;
        first := false;
        lastsumtid := Sumtid;
      Until lastsumtid > endtid;
      Chartsum.Series[0].Addxy(endtid, sumpages);

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('select distinct DATEDIFF(MINUTE,:starttid, p.ApproveTime) as tid from pagetable p (NOLOCK) ');
      Datam1.Query1.SQL.Add('where ' + wherestr +
        ' and p.approved = 1 and p.ApproveTime  >= :starttid');
      Datam1.Query1.SQL.Add('And p.pagetype <> 3');
      Datam1.Query1.params[0].AsDateTime := Starttid;
      if Prefs.Debug then
        Datam1.Query1.SQL.SaveToFile
          (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'
          + 'datedifs.SQL');
      Datam1.Query1.Open;
      tid := Starttid;
      sumpages := 0;
      Chartpage.Series[1].Addxy(Chartpage.BottomAxis.minimum, 0);
      first := true;
      while not Datam1.Query1.Eof do
      begin
        tid := incminute(Starttid, Datam1.Query1.Fields[0].AsInteger);

        Datam1.Query2.SQL.Clear;
        Datam1.Query2.SQL.Add
          ('select COUNT (distinct p.mastercopyseparationset ) from PageTable p (NOLOCK) ');
        Datam1.Query2.SQL.Add('where ' + wherestr +
          ' and p.approved = 1 and p.ApproveTime  >= :starttid');
        Datam1.Query2.SQL.Add('and DATEDIFF(MINUTE,:starttid, ApproveTime) <= '
          + IntToStr(Datam1.Query1.Fields[0].AsInteger));
        Datam1.Query2.SQL.Add('And p.pagetype <> 3');
        Datam1.Query2.params[0].AsDateTime := Starttid;
        Datam1.Query2.Open;
        if not Datam1.Query2.Eof then
          sumpages := Datam1.Query2.Fields[0].AsInteger;
        Datam1.Query2.Close;

        if first then
        begin
          Chartpage.Series[1].Addxy(tid, 0);
          first := false;
        end;
        Chartpage.Series[1].Addxy(tid, sumpages);
        first := false;
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;

      sumpages := 0;
      sumcount := 0;
      lastsumtid := Starttid;
      first := true;
      Repeat
        if first then
        begin
          minb := minuteof(lastsumtid);
          Sumtid := incminute(lastsumtid, 30 - minb);
        end
        else
        begin
          Sumtid := incminute(lastsumtid, 30);
        end;
        Datam1.Query2.SQL.Clear;
        Datam1.Query2.SQL.Add
          ('select COUNT (distinct p.mastercopyseparationset ) from PageTable p (NOLOCK) ');
        Datam1.Query2.SQL.Add('where ' + wherestr +
          ' and p.status > 0 and p.approvetime  > ' + '''' + '2000-1-1' + '''');
        Datam1.Query2.SQL.Add
          ('and approveTime >= :fromtid and approveTime <= :totid');
        Datam1.Query2.SQL.Add('And p.pagetype <> 3');
        Datam1.Query2.params[0].AsDateTime := lastsumtid;
        Datam1.Query2.params[1].AsDateTime := Sumtid;
        Datam1.Query2.Open;
        sumpages := -1;
        if not Datam1.Query2.Eof then
        begin
          sumpages := Datam1.Query2.Fields[0].AsInteger;
        end;
        Datam1.Query2.Close;
        T1 := DateTimeToStr(Sumtid);
        T2 := DateTimeToStr(lastsumtid);

        if sumpages > -1 then
        begin
          if first then
          begin
            Chartsum.Series[1].Addxy(Starttid, sumpages + 0.1);
            first := false;
          end
          else
            Chartsum.Series[1].Addxy(lastsumtid, sumpages + 0.1);
          first := false;
          if amax < sumpages then
            amax := sumpages;
        end;
        lastsumtid := Sumtid;
      Until lastsumtid > endtid;
      Chartsum.Series[1].Addxy(endtid, sumpages);

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('select distinct DATEDIFF(MINUTE,:starttid, p.outputTime) as tid from pagetable p (NOLOCK) ');
      Datam1.Query1.SQL.Add('where ' + wherestr +
        ' and p.status > 30 and p.outputTime  > ' + '''' + '2000-1-1' + '''');
      Datam1.Query1.SQL.Add('And p.pagetype <> 3');
      Datam1.Query1.params[0].AsDateTime := Starttid;
      if Prefs.Debug then
        Datam1.Query1.SQL.SaveToFile
          (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'
          + 'datedifsout.SQL');
      Datam1.Query1.Open;
      tid := Starttid;
      sumpages := 0;
      // Chartpage.Series[2].Addxy(Chartpage.BottomAxis.minimum,0);
      first := true;
      while not Datam1.Query1.Eof do
      begin
        tid := incminute(Starttid, Datam1.Query1.Fields[0].AsInteger);

        Datam1.Query2.SQL.Clear;
        Datam1.Query2.SQL.Add
          ('select p.outputVersion ,COUNT (distinct p.mastercopyseparationset ) from PageTable p (NOLOCK) ');
        Datam1.Query2.SQL.Add('where ' + wherestr +
          ' and p.status > 30 and p.outputTime  > ' + '''' + '2000-1-1' + '''');
        Datam1.Query2.SQL.Add('and DATEDIFF(MINUTE,:starttid, outputTime) <= ' +
          IntToStr(Datam1.Query1.Fields[0].AsInteger));
        Datam1.Query2.SQL.Add('And p.pagetype <> 3 and p.Active = 1');
        Datam1.Query2.SQL.Add('group by p.outputVersion');
        Datam1.Query2.params[0].AsDateTime := Starttid;
        Datam1.Query2.Open;
        sumpages := 0;
        while not Datam1.Query2.Eof do
        begin
          sumpages := sumpages + (Datam1.Query2.Fields[0].AsInteger *
            Datam1.Query2.Fields[1].AsInteger);
          Datam1.Query2.Next;
        end;
        Datam1.Query2.Close;
        if first then
        begin
          Chartpage.Series[2].Addxy(tid, 0);
          first := false;
        end;
        first := false;
        Chartpage.Series[2].Addxy(tid, sumpages);
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;

      sumpages := 0;
      sumcount := 0;
      lastsumtid := Starttid;
      first := true;
      Repeat

        if first then
        begin
          minb := minuteof(lastsumtid);
          Sumtid := incminute(lastsumtid, 30 - minb);
        end
        else
        begin
          Sumtid := incminute(lastsumtid, 30);
        end;
        Datam1.Query2.SQL.Clear;
        Datam1.Query2.SQL.Add
          ('select p.outputVersion ,COUNT (distinct p.mastercopyseparationset ) from PageTable p (NOLOCK) ');
        Datam1.Query2.SQL.Add('where ' + wherestr +
          ' and p.status > 30 and p.Outputtime  > ' + '''' + '2000-1-1' + '''');
        Datam1.Query2.SQL.Add
          ('and Outputtime >= :fromtid and Outputtime <= :totid');
        Datam1.Query2.SQL.Add('And p.pagetype <> 3 and p.Active = 1');
        Datam1.Query2.SQL.Add('group by p.outputVersion');
        Datam1.Query2.params[0].AsDateTime := lastsumtid;
        Datam1.Query2.params[1].AsDateTime := Sumtid;
        Datam1.Query2.Open;
        sumpages := -1;
        if not Datam1.Query2.Eof then
        begin
          sumpages := 0;
          while not Datam1.Query2.Eof do
          begin
            if Datam1.Query2.Fields[0].AsInteger > 0 then
              sumpages := sumpages + (Datam1.Query2.Fields[0].AsInteger *
                Datam1.Query2.Fields[1].AsInteger)
            else
              sumpages := sumpages + Datam1.Query2.Fields[1].AsInteger;
            Datam1.Query2.Next;
          end;
        end;
        Datam1.Query2.Close;
        T1 := DateTimeToStr(Sumtid);
        T2 := DateTimeToStr(lastsumtid);

        if sumpages > -1 then
        begin
          if first then
          begin
            Chartsum.Series[2].Addxy(Starttid, sumpages - 0.1);
            first := false;
          end
          else
            Chartsum.Series[2].Addxy(lastsumtid, sumpages - 0.1);
          if amax < sumpages then
            amax := sumpages;
        end;
        first := false;
        lastsumtid := Sumtid;
      Until lastsumtid > endtid;
      Chartsum.Series[2].Addxy(endtid, sumpages);

      if amax < 20 then
        amax := 15;

      Chartsum.leftAxis.Maximum := amax + 5;
      Chartsum.leftAxis.Increment := round(Chartsum.leftAxis.Maximum) DIV 5;
    end;

    RichEditcharts.SelAttributes.Style := [fsBold];

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select distinct p.pubdate,p.publicationid,p.editionid,e.name  from PageTable p (NOLOCK) , editionnames e (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr);
    Datam1.Query1.SQL.Add('And e.editionid = p.editionid');
    Datam1.Query1.SQL.Add('Order by p.pubdate,p.publicationid,e.name');
    Datam1.Query1.Open;
    T1 := 'na';
    if not Datam1.Query1.Eof then
    begin
      RichEditcharts.SelText := '';
      RichEditcharts.SelAttributes.Style := [fsBold];

      RichEditcharts.SelText := 'Production :';
      RichEditcharts.SelText := #13#10;
      RichEditcharts.SelAttributes.Style := [];
      RichEditcharts.SelText := 'Pubdate  ' + #9 +
        datetostr(Datam1.Query1.Fields[0].AsDateTime);
      RichEditcharts.SelText := #13#10;
      RichEditcharts.SelAttributes.Style := [];
      RichEditcharts.SelText := 'Publication ' + #9 +
        tNames1.publicationIDtoname(Datam1.Query1.Fields[1].AsInteger);
      RichEditcharts.SelText := #13#10;
      T2 := '';
      RichEditcharts.SelAttributes.Style := [fsBold];
      RichEditcharts.SelText := 'Editions :';
      RichEditcharts.SelText := #13#10;
      RichEditcharts.SelAttributes.Style := [];

      while not Datam1.Query1.Eof do
      begin
        RichEditcharts.SelText := Datam1.Query1.Fields[3].AsString;
        RichEditcharts.SelText := #13#10;
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;

      RichEditcharts.SelAttributes.Style := [fsBold];
      RichEditcharts.SelText := 'Sections :';
      RichEditcharts.SelText := #13#10;
      RichEditcharts.SelAttributes.Style := [];
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('select distinct p.Sectionid,s.name  from PageTable p (NOLOCK) , sectionnames s (NOLOCK) ');
      Datam1.Query1.SQL.Add('where ' + wherestr);
      Datam1.Query1.SQL.Add('And s.sectionid = p.sectionid');
      Datam1.Query1.SQL.Add('Order by s.name');
      Datam1.Query1.Open;
      while not Datam1.Query1.Eof do
      begin
        RichEditcharts.SelText := Datam1.Query1.Fields[1].AsString;
        RichEditcharts.SelText := #13#10;
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;
    end
    else
    begin
      RichEditcharts.SelText := 'Production :';
      RichEditcharts.SelText := #13#10;
      RichEditcharts.SelAttributes.Style := [];
      RichEditcharts.SelText := 'Pubdate  ' + #9 + 'na';
      RichEditcharts.SelText := #13#10;
      RichEditcharts.SelAttributes.Style := [];
      RichEditcharts.SelText := 'Publication ' + #9 + 'na';
      RichEditcharts.SelText := #13#10;

    end;

    RichEditcharts.SelText := '';
    RichEditcharts.SelText := #13#10;
    RichEditcharts.SelAttributes.Style := [fsBold];
    RichEditcharts.SelText := 'Total number of pages :';
    RichEditcharts.SelText := #13#10;
    RichEditcharts.SelAttributes.Style := [];

    RichEditcharts.SelText := 'Pages       ' + #9 + IntToStr(Npages);
    RichEditcharts.SelText := #13#10;
    RichEditcharts.SelText := 'Plus versions ' + #9 + IntToStr(Npageversions);
    RichEditcharts.SelText := #13#10;

    RichEditcharts.SelText := '';
    RichEditcharts.SelText := #13#10;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select distinct p.Version , count (distinct p.mastercopyseparationset) as page  from PageTable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr + ' and status > 0');
    Datam1.Query1.SQL.Add
      ('and p.PageType <> 3 and p.CopyNumber = 1 and p.UniquePage = 1 and p.Active = 1');
    Datam1.Query1.SQL.Add('group by p.Version');
    Datam1.Query1.Open;

    Npagesstat := 0;
    Npagesstatver := 0;
    while not Datam1.Query1.Eof do
    begin
      Npagesstat := Npagesstat + Datam1.Query1.Fields[1].AsInteger;
      if Datam1.Query1.Fields[0].AsInteger > 0 then
        Npagesstatver := Npagesstatver +
          (Datam1.Query1.Fields[1].AsInteger * Datam1.Query1.Fields[0]
          .AsInteger)
      else
        Npagesstatver := Npagesstatver + Datam1.Query1.Fields[1].AsInteger;
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;

    Datam1.Query1.SQL.Clear; // ,MIN(p.ApproveTime),MAX(p.ApproveTime)
    Datam1.Query1.SQL.Add
      ('select MIN( p.ApproveTime),MAX(p.ApproveTime) from pagetable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr +
      ' and p.approved = 1 and p.ApproveTime  > ' + '''' + '2000-1-1' + '''');
    Datam1.Query1.SQL.Add('And p.pagetype <> 3');
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
    begin
      if Datam1.Query1.Fields[0].AsDateTime > EncodeDate(2000, 1, 1) then
        firstappr := Datam1.Query1.Fields[0].AsDateTime;
      if Datam1.Query1.Fields[1].AsDateTime > EncodeDate(2000, 1, 1) then
        lastappr := Datam1.Query1.Fields[1].AsDateTime;
    end;
    Datam1.Query1.Close;

    RichEditcharts.SelText := '';
    RichEditcharts.SelAttributes.Style := [fsBold];
    RichEditcharts.SelText := 'Page input';
    RichEditcharts.SelAttributes.Style := [];
    RichEditcharts.SelText := '';
    RichEditcharts.SelText := #13#10;
    RichEditcharts.SelAttributes.Style := [];
    RichEditcharts.SelText := 'Pages arrived ' + #9 + IntToStr(Npagesstat);
    RichEditcharts.SelText := #13#10;
    RichEditcharts.SelText := 'Plus versions ' + #9 + IntToStr(Npagesstatver);
    RichEditcharts.SelText := #13#10;
    RichEditcharts.SelText := '';
    RichEditcharts.SelText := #13#10;
    if firstarrived > 0 then
      RichEditcharts.SelText := 'First arrived ' + #9 + datetostr(firstarrived)
        + ' ' + FormaTDateTime('t', firstarrived)
    else
      RichEditcharts.SelText := 'First arrived ' + #9 + 'na';
    RichEditcharts.SelText := #13#10;
    if Lastarrived > 0 then
      RichEditcharts.SelText := 'Last arrived ' + #9 + datetostr(Lastarrived) +
        ' ' + FormaTDateTime('t', Lastarrived)
    else
      RichEditcharts.SelText := 'Last arrived ' + #9 + 'na';
    RichEditcharts.SelText := #13#10;
    RichEditcharts.SelText := '';
    RichEditcharts.SelText := #13#10;

    RichEditcharts.SelText := '';
    RichEditcharts.SelAttributes.Style := [fsBold];
    RichEditcharts.SelText := 'Deadline';
    RichEditcharts.SelAttributes.Style := [];
    RichEditcharts.SelText := '';
    RichEditcharts.SelText := #13#10;
    RichEditcharts.SelAttributes.Style := [];

    if Deadline > 0 then
      RichEditcharts.SelText := 'Deadline    ' + #9 + datetostr(Deadline) + ' '
        + FormaTDateTime('t', Deadline)
    else
      RichEditcharts.SelText := 'Deadline    ' + #9 + 'na';
    RichEditcharts.SelText := #13#10;

    if Deadline > 0 then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('select COUNT (distinct p.mastercopyseparationset ) from PageTable p (NOLOCK) ');
      Datam1.Query1.SQL.Add('where ' + wherestr);
      Datam1.Query1.SQL.Add(' and p.inputTime  > :deadline ');
      Datam1.Query1.SQL.Add('And p.pagetype <> 3');
      Datam1.Query1.params[0].AsDateTime := Deadline;
      Datam1.Query1.Open;
      i := 0;
      if not Datam1.Query1.Eof then
      begin
        i := Datam1.Query1.Fields[0].AsInteger;
      end;
      Datam1.Query1.Close;

      RichEditcharts.SelText := 'Late pages ' + #9 + IntToStr(i);
      RichEditcharts.SelText := #13#10;

    End
    else
    begin
      RichEditcharts.SelText := 'Late pages ' + #9 + 'na';
      RichEditcharts.SelText := #13#10;
    end;
    RichEditcharts.SelText := '';
    RichEditcharts.SelText := #13#10;

    RichEditcharts.SelAttributes.Style := [fsBold];
    RichEditcharts.SelText := 'Page approval';
    RichEditcharts.SelAttributes.Style := [];
    RichEditcharts.SelText := #13#10;
    RichEditcharts.SelText := '';
    RichEditcharts.SelText := #13#10;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select COUNT (distinct p.mastercopyseparationset ) from PageTable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr + ' and p.Approved = -1');
    Datam1.Query1.SQL.Add('And p.pagetype <> 3');
    Datam1.Query1.Open;
    i := 0;
    if not Datam1.Query1.Eof then
    begin
      i := Datam1.Query1.Fields[0].AsInteger;
    end;
    Datam1.Query1.Close;

    RichEditcharts.SelText := 'Auto approved ' + #9 + IntToStr(i);
    RichEditcharts.SelText := #13#10;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select COUNT (distinct p.mastercopyseparationset ) from PageTable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr + ' and p.Approved = 0');
    Datam1.Query1.SQL.Add('And p.pagetype <> 3');
    Datam1.Query1.Open;
    i := 0;
    if not Datam1.Query1.Eof then
    begin
      i := Datam1.Query1.Fields[0].AsInteger;
    end;
    Datam1.Query1.Close;

    RichEditcharts.SelText := 'not approved ' + #9 + IntToStr(i);
    RichEditcharts.SelText := #13#10;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select COUNT (distinct p.mastercopyseparationset ) from PageTable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr + ' and p.Approved = 1');
    Datam1.Query1.SQL.Add('And p.pagetype <> 3');
    Datam1.Query1.Open;
    i := 0;
    if not Datam1.Query1.Eof then
    begin
      i := Datam1.Query1.Fields[0].AsInteger;
    end;
    Datam1.Query1.Close;

    RichEditcharts.SelText := 'Approved ' + #9 + IntToStr(i);
    RichEditcharts.SelText := #13#10;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select COUNT (distinct p.mastercopyseparationset ) from PageTable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr + ' and  p.Approved = 2');
    Datam1.Query1.SQL.Add('And p.pagetype <> 3');
    Datam1.Query1.Open;
    i := 0;
    if not Datam1.Query1.Eof then
    begin
      i := Datam1.Query1.Fields[0].AsInteger;
    end;
    Datam1.Query1.Close;

    RichEditcharts.SelText := 'Disapproved ' + #9 + IntToStr(i);
    RichEditcharts.SelText := #13#10;

    RichEditcharts.SelText := '';
    RichEditcharts.SelText := #13#10;
    if firstappr > 0 then
      RichEditcharts.SelText := 'First approved ' + #9 + datetostr(firstappr) +
        ' ' + FormaTDateTime('t', firstappr)
    else
      RichEditcharts.SelText := 'First approved ' + #9 + 'na';

    RichEditcharts.SelText := #13#10;
    if lastappr > 0 then
      RichEditcharts.SelText := 'Last approved ' + #9 + datetostr(lastappr) +
        ' ' + FormaTDateTime('t', lastappr)
    else
      RichEditcharts.SelText := 'Last approved ' + #9 + 'na';
    RichEditcharts.SelText := #13#10;
    RichEditcharts.SelText := '';
    RichEditcharts.SelText := #13#10;
    RichEditcharts.SelAttributes.Style := [fsBold];
    RichEditcharts.SelText := 'Page output';
    RichEditcharts.SelAttributes.Style := [];
    RichEditcharts.SelText := #13#10;
    RichEditcharts.SelText := '';
    RichEditcharts.SelText := #13#10;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select COUNT (distinct p.mastercopyseparationset ) from PageTable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr + ' and  p.status >= 50');
    Datam1.Query1.SQL.Add('And p.pagetype <> 3');
    Datam1.Query1.Open;
    i := 0;
    if not Datam1.Query1.Eof then
    begin
      i := Datam1.Query1.Fields[0].AsInteger;
    end;
    Datam1.Query1.Close;

    RichEditcharts.SelText := 'Pages out ' + #9 + IntToStr(i);
    RichEditcharts.SelText := #13#10;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select COUNT (distinct p.mastercopyseparationset ) from PageTable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr + ' and  p.status < 50');
    Datam1.Query1.SQL.Add('And p.pagetype <> 3');
    Datam1.Query1.Open;
    i := 0;
    if not Datam1.Query1.Eof then
    begin
      i := Datam1.Query1.Fields[0].AsInteger;
    end;
    Datam1.Query1.Close;

    RichEditcharts.SelText := 'Pages not out ' + #9 + IntToStr(i);
    RichEditcharts.SelText := #13#10;

    if firstrelease > 0 then
      RichEditcharts.SelText := 'Release      ' + #9 + datetostr(firstrelease) +
        ' ' + FormaTDateTime('t', firstrelease)
    else
      RichEditcharts.SelText := 'Release      ' + #9 + 'na';
    RichEditcharts.SelText := #13#10;

    if firstOut > 0 then
      RichEditcharts.SelText := 'First page out ' + #9 + datetostr(firstOut) +
        ' ' + FormaTDateTime('t', firstOut)
    else
      RichEditcharts.SelText := 'First page out ' + #9 + 'na';
    RichEditcharts.SelText := #13#10;
    if Lastout > 0 then
      RichEditcharts.SelText := 'Last page out ' + #9 + datetostr(Lastout) + ' '
        + FormaTDateTime('t', Lastout)
    else
      RichEditcharts.SelText := 'Last page out ' + #9 + 'na';
    RichEditcharts.SelText := #13#10;

    RichEditcharts.SelText := #13#10;
    RichEditcharts.SelAttributes.Style := [fsBold];
    RichEditcharts.SelText := 'Plates';
    RichEditcharts.SelAttributes.Style := [];
    RichEditcharts.SelText := #13#10;
    RichEditcharts.SelText := '';
    RichEditcharts.SelText := #13#10;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select COUNT (distinct p.flatseparation ) from PageTable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr);
    Datam1.Query1.SQL.Add('And p.pagetype <> 3');
    Datam1.Query1.Open;
    Nplates := 0;
    if not Datam1.Query1.Eof then
    begin
      Nplates := Datam1.Query1.Fields[0].AsInteger;
    end;
    Datam1.Query1.Close;

    RichEditcharts.SelText := 'Number of plates ' + #9 + IntToStr(Nplates);

    RichEditcharts.SelText := #13#10;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select COUNT (distinct p.flatseparation ) from PageTable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr + ' and status >= 50');
    Datam1.Query1.SQL.Add('And p.pagetype <> 3');
    Datam1.Query1.Open;

    if not Datam1.Query1.Eof then
    begin
      i := Datam1.Query1.Fields[0].AsInteger;
    end;
    Datam1.Query1.Close;

    RichEditcharts.SelText := 'Plates done' + #9 + IntToStr(i);

    RichEditcharts.SelText := #13#10;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select distinct p.FlatSeparation,  p.Outputversion from PageTable p (NOLOCK) ');
    Datam1.Query1.SQL.Add('where ' + wherestr + ' and status >= 50');
    Datam1.Query1.SQL.Add('And p.pagetype <> 3');
    Datam1.Query1.Open;

    i := 0;
    while not Datam1.Query1.Eof do
    begin
      Inc(i, Datam1.Query1.Fields[1].AsInteger);
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;

    RichEditcharts.SelText := 'Plates used' + #9 + IntToStr(i);

    RichEditcharts.SelText := '';
    RichEditcharts.SelText := #13#10;
    RichEditcharts.SelText := '';
    RichEditcharts.SelText := #13#10;

    RichEditcharts.SelAttributes.Style := [fsBold];
    RichEditcharts.SelText := 'ControlCenter production report';
    RichEditcharts.SelText := #13#10;
    RichEditcharts.SelAttributes.Style := [];
    RichEditcharts.SelText := 'Made ' + datetostr(NOW) + ' ' +
      FormaTDateTime('t', NOW);
    RichEditcharts.SelText := #13#10;
    RichEditcharts.SelText := 'By ' + Prefs.Username;

  end;

end;

procedure TFormMain.ActionplatetocommonExecute(Sender: TObject);
Var
  i: Integer;
begin
  if not AnyPlatesselected then
    exit;

  for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
  begin
    if Views[Viewselected].LPV.Items[i].Selected then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      Datam1.Query1.SQL.Add('set Uniquepage = 0');
      Datam1.Query1.SQL.Add('where pagetype <> 999');
      Datam1.Query1.SQL.Add('and locationid = ' +
        IntToStr(Views[Viewselected].platesData[i].LocationID));
      Datam1.Query1.SQL.Add('and productionid = ' +
        IntToStr(Views[Viewselected].platesData[i].ProductionID));
      Datam1.Query1.SQL.Add('and Copyflatseparationset = ' +
        IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
      Datam1.Query1.SQL.Add('and Uniquepage = 2');
      trysql(Datam1.Query1);
      Datam1.SetNewtreeprodid;
    end;
  end;
  Datam1.UpdateTreeStateOnProduction(false);
  ActionplaterefreshExecute(FormMain);

end;

procedure TFormMain.ActionplatetreemultrelExecute(Sender: TObject);
Var
  runnode: TTreeNode;

begin
  try
    if TreeViewPlateview.Selected = nil then
      exit;
    runnode := TreeViewPlateview.Selected;
    if runnode = nil then
      exit;
    if runnode.Level < 2 then
      exit;
    if runnode.Level > 2 then
      Formmultipressrelease.Specifikeditionid :=
        TTreeViewpagestype(runnode.Data^).editionid
    else
      Formmultipressrelease.Specifikeditionid := -1;

    Formmultipressrelease.LocationID := tNames1.locationnametoid
      (ComboBoxpalocationNY.text);
    Formmultipressrelease.Publicationid := TTreeViewpagestype(runnode.Data^)
      .Publicationid;
    Formmultipressrelease.Pubdate := TTreeViewpagestype(runnode.Data^).Pubdate;

    if Formmultipressrelease.initialize then
    begin
      Formmultipressrelease.ShowModal;
    end;

    Actionplaterefresh.Execute;

  Except
  end;

end;

procedure TFormMain.ActionplatepecomExecute(Sender: TObject);
Var
  aktpressid: Integer;
  runnode: TTreeNode;

begin
  try
    if TreeViewPlateview.Selected = nil then
      exit;
    runnode := TreeViewPlateview.Selected;
    if runnode = nil then
      exit;
    if runnode.Level < 2 then
      exit;
    FormPecomrequest.ProductionID := TTreeViewpagestype(runnode.Data^)
      .ProductionID;
    FormPecomrequest.Pubdate := TTreeViewpagestype(runnode.Data^).Pubdate;
    FormPecomrequest.Publicationid := TTreeViewpagestype(runnode.Data^)
      .Publicationid;

    if FormPecomrequest.initialize then
      FormPecomrequest.ShowModal;
  Except
  end;
end;

function TFormMain.Getnewsystemtype: Integer;
Var
  // ,sys,flag
  T: string;
  ini: TIniFile;

begin
  (* globalvar i plancentersetup
    tom eller 1 = normal
    2 prepare trans
    3 channeltrans
  *)

  try

    Actionchanelle.Visible := false;
    Globalsystemtype := 1;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Select TOP 1 Globalsettings,GlobalVars From PlanCenterSetup');
    Datam1.Query1.Open;
    // NAN 20151024
    if not Datam1.Query1.Eof then
    begin
      globaldbsettings := Datam1.Query1.Fields[0].AsString;
      globaldbvars := Datam1.Query1.Fields[1].AsString;
    end;
    Datam1.Query1.Close;

    T := globaldbsettings;
    if Length(T) > 0 then
    begin
      if pos(',', T) > 0 then
      begin
        Delete(T, 1, pos(',', T));
      end;

      try
        Globalsystemtype := StrToInt(T);
      Except
      end;

      case Globalsystemtype of
        1:
          begin
          end;
        2:
          begin
            Prefs.PlateTransmissionSystem := true;
          end;
        3:
          begin
            Actionchanelle.Visible := true;
          end
      else
        begin

        end;
      end;

      // CheckBoxpressspecifik.Checked := Boolean(StrToInt(t[1]));
    end;

    if (Prefs.Proversion = 2) then
    begin
      FormMain.TabSheetEdition.TabVisible := false;
      FormMain.TabSheetNewplanner.TabVisible := true;
      FormMain.TabSheetprogress.TabVisible := true;
      FormMain.TabSheetplates.TabVisible := true;
      FormMain.TabSheetErrorLog.TabVisible := false;
      FormMain.TabSheetPages.TabVisible := true;
      FormMain.TabSheetThumbnails.TabVisible := true;
      FormMain.TabSheetReportmain.TabVisible := false;
      FormMain.TabSheetUnknownpages.TabVisible := true;
      FormMain.TabSheetactiivequeue.TabVisible := false;
    end
    else
    begin
      FormMain.TabSheetEdition.TabVisible := Formtabs.CheckBoxEdtab.Checked or
        (Prefs.ISadministrator and Prefs.AdminTab);
      FormMain.TabSheetNewplanner.TabVisible :=
        Formtabs.CheckBoxplantab.Checked or
        (Prefs.ISadministrator and Prefs.AdminTab);
      FormMain.TabSheetprogress.TabVisible :=
        Formtabs.CheckBoxprodtab.Checked or
        (Prefs.ISadministrator and Prefs.AdminTab);
      FormMain.TabSheetplates.TabVisible := Formtabs.CheckBoxplatetab.Checked or
        (Prefs.ISadministrator and Prefs.AdminTab);
      FormMain.TabSheetErrorLog.TabVisible := Formtabs.CheckBoxlogtab.Checked or
        (Prefs.ISadministrator and Prefs.AdminTab);
      FormMain.TabSheetPages.TabVisible := Formtabs.CheckBoxpagelist.Checked or
        (Prefs.ISadministrator and Prefs.AdminTab);
      FormMain.TabSheetThumbnails.TabVisible :=
        Formtabs.CheckBoxThumbnailtab.Checked or
        (Prefs.ISadministrator and Prefs.AdminTab);
      FormMain.TabSheetReportmain.TabVisible :=
        Formtabs.CheckBoxreporttab.Checked or
        (Prefs.ISadministrator and Prefs.AdminTab);
      FormMain.TabSheetUnknownpages.TabVisible :=
        Formtabs.CheckBoxunkowntab.Checked or
        (Prefs.ISadministrator and Prefs.AdminTab);
      FormMain.TabSheetactiivequeue.TabVisible :=
        Formtabs.CheckBoxactQtab.Checked or
        (Prefs.ISadministrator and Prefs.AdminTab);

      if Globalsystemtype = 3 then
        Setglobalsys3view
      else
      begin
        FormMain.TabSheetEdition.TabVisible := Formtabs.CheckBoxEdtab.Checked or
          (Prefs.ISadministrator and Prefs.AdminTab);
        FormMain.TabSheetNewplanner.TabVisible :=
          Formtabs.CheckBoxplantab.Checked or
          (Prefs.ISadministrator and Prefs.AdminTab);
        FormMain.TabSheetprogress.TabVisible :=
          Formtabs.CheckBoxprodtab.Checked or
          (Prefs.ISadministrator and Prefs.AdminTab);
        FormMain.TabSheetplates.TabVisible :=
          Formtabs.CheckBoxplatetab.Checked or
          (Prefs.ISadministrator and Prefs.AdminTab);
        FormMain.TabSheetErrorLog.TabVisible :=
          Formtabs.CheckBoxlogtab.Checked or
          (Prefs.ISadministrator and Prefs.AdminTab);
        FormMain.TabSheetPages.TabVisible :=
          Formtabs.CheckBoxpagelist.Checked or
          (Prefs.ISadministrator and Prefs.AdminTab);
        FormMain.TabSheetThumbnails.TabVisible :=
          Formtabs.CheckBoxThumbnailtab.Checked or
          (Prefs.ISadministrator and Prefs.AdminTab);
        FormMain.TabSheetReportmain.TabVisible :=
          Formtabs.CheckBoxreporttab.Checked or
          (Prefs.ISadministrator and Prefs.AdminTab);
        FormMain.TabSheetUnknownpages.TabVisible :=
          Formtabs.CheckBoxunkowntab.Checked or
          (Prefs.ISadministrator and Prefs.AdminTab);
        FormMain.TabSheetactiivequeue.TabVisible :=
          Formtabs.CheckBoxactQtab.Checked or
          (Prefs.ISadministrator and Prefs.AdminTab);
      end;
    end;

  Except
  end;

  result := Globalsystemtype;

end;

procedure TFormMain.ActionchanelleExecute(Sender: TObject);
Var
  // skaldeklarerespgadll : Integer;
  resulttat: Integer;
begin
  if Configallowed then
  begin

    writeMainlogfile('Start call ChannelNamesSetup');
    MainUpdateing := true;
    writeMainlogfile('Mainupdating true');
    TreeStopit := true;
    writeMainlogfile('treestate stoped');
    Runningdll := true;
    writeMainlogfile('Runningdll');

    try
      writeMainlogfile('Call reconnect');
      resulttat := ReConnectDB(DLLErrormessage);
      writeMainlogfile('call jobnamesetup');
      resulttat := ChannelNamesSetup(DLLErrormessage);
      writeMainlogfile('return from jobnamesetup');
    Except
      on E: Exception do
      begin
        writeMainlogfile('except1 ' + E.Message);
        TreeStopit := false;
      end;

    end;
    TreeStopit := false;
  end;
end;

procedure TFormMain.Setglobalsys3view;
begin
  if (not Prefs.ShowAllActionsOverrule) then
  begin
    RemoveNon3systemactions;
    if (Prefs.Proversion = 2) then
    begin
      FormMain.TabSheetEdition.TabVisible := false;
      FormMain.TabSheetNewplanner.TabVisible := true;
      FormMain.TabSheetprogress.TabVisible := true;
      FormMain.TabSheetplates.TabVisible := true;
      FormMain.TabSheetErrorLog.TabVisible := false;
      FormMain.TabSheetPages.TabVisible := true;
      FormMain.TabSheetThumbnails.TabVisible := true;
      FormMain.TabSheetReportmain.TabVisible := false;
      FormMain.TabSheetUnknownpages.TabVisible := true;
      FormMain.TabSheetactiivequeue.TabVisible := false;
    End
    else
    begin
      FormMain.TabSheetEdition.TabVisible := true;
      FormMain.TabSheetNewplanner.TabVisible := true;
      FormMain.TabSheetprogress.TabVisible :=
        Formtabs.CheckBoxprodtab.Checked or
        (Prefs.ISadministrator and Prefs.AdminTab);
      FormMain.TabSheetplates.TabVisible := Formtabs.CheckBoxplatetab.Checked or
        (Prefs.ISadministrator and Prefs.AdminTab);
      FormMain.TabSheetErrorLog.TabVisible := Formtabs.CheckBoxlogtab.Checked or
        (Prefs.ISadministrator and Prefs.AdminTab);
      FormMain.TabSheetPages.TabVisible := Formtabs.CheckBoxpagelist.Checked or
        (Prefs.ISadministrator and Prefs.AdminTab);
      FormMain.TabSheetThumbnails.TabVisible :=
        Formtabs.CheckBoxThumbnailtab.Checked or
        (Prefs.ISadministrator and Prefs.AdminTab);
      FormMain.TabSheetReportmain.TabVisible :=
        Formtabs.CheckBoxreporttab.Checked or
        (Prefs.ISadministrator and Prefs.AdminTab);
      FormMain.TabSheetUnknownpages.TabVisible :=
        Formtabs.CheckBoxunkowntab.Checked or
        (Prefs.ISadministrator and Prefs.AdminTab);
      FormMain.TabSheetactiivequeue.TabVisible :=
        Formtabs.CheckBoxactQtab.Checked or
        (Prefs.ISadministrator and Prefs.AdminTab);
    end;

    with FormAddpressrun do
    begin
      Panel1.Align := albottom;
      PBExListviewSections.Align := alclient;
      RadioGroupdoctype.ItemIndex := 1;
      CheckBoxManual.Checked := false;
      EditCopies.text := '1';
      RadioGroupcollection.ItemIndex := 0;
      CheckBoxbindingstyle.Checked := false;
      CheckBoxbackward.Checked := false;
      CheckBoxprepaired.Checked := false;
      CheckBoxApplyonlyplannedcolors.Checked := false;
      CheckBoxsplitall1up.Checked := false;
      Panel3.Visible := false;
    end;

    with Formselecttemplate do
    begin
      Formselecttemplate.caption := 'Proof setup';
      Panel2.Visible := false;
      Panelmovepress.Visible := false;
      Panel3.Visible := false;
      Panel4.Visible := false;
      GroupBox1.Visible := false;
      Panelproof.Visible := false;
      Panelwizard.Align := altop;
      Formselecttemplate.AutoSize := true;
    end;
  end;
end;

procedure TFormMain.RemoveNon3systemactions;
Var
  i { ,i2 } : Integer;
begin
  for i := FormMain.ActionManager1.ActionCount - 1 downto 0 do
  begin
    if ListBox3.Items.IndexOf(TAction(FormMain.ActionManager1.Actions[i])
      .Name) < 0 then
    begin
      TAction(FormMain.ActionManager1.Actions[i]).Visible := false;
    end;
  end;

  for i := Formprodplan.ActionManagerPlanning.ActionCount - 1 downto 0 do
  begin
    if ListBox3.Items.IndexOf(TAction(Formprodplan.ActionManagerPlanning.Actions
      [i]).Name) < 0 then
    begin
      TAction(Formprodplan.ActionManagerPlanning.Actions[i]).Visible := false;
    end;

  end;
  FormApplyproduction.Panelstandard.Align := alnone;
  FormApplyproduction.Panelstandard.Visible := false;
  FormApplyproduction.Panelchannel.Visible := true;
  FormApplyproduction.Panelchannel.left := 10;
  FormApplyproduction.Panelchannel.Top := 10;
  FormApplyproduction.Panelchannel.Align := alclient;

  (*

    ActionRun
    Actionpagepagenamenameedit
    ActionSetuniquepages
    Actionexit
    ActionSetuniquepage
    Actionplanproofing
  *)

end;

procedure TFormMain.RenumberplatesClick(Sender: TObject);
Var
  i: Integer;
  T: string;
  LI: TListItem;
  APageOnFlat, p, StartPos: Integer;
  SPageOnFlatName, copyflatseparationset, MiscString1: String;
begin
  FormReNumberPlate.Edit2.text := '1';
  FormReNumberPlate.Edit2.text := IntToStr(Views[Viewselected].LPV.Items.Count);
  FormReNumberPlate.AFlat := Views[Viewselected].LPV.Items.Count;

  FormReNumberPlate.ListView1.Items.Clear;

  For i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
  // Høvler alle igennem
  begin
    APageOnFlat := Views[Viewselected].platesData[i].Npages;
    SPageOnFlatName := '';
    for p := 1 to APageOnFlat do
    Begin
      If pos('Dinkey', Views[Viewselected].platesData[i].pages[p].pagename) = 0
      then
        SPageOnFlatName := SPageOnFlatName + ' ' + Views[Viewselected]
          .platesData[i].pages[p].pagename;
    End;

    LI := FormReNumberPlate.ListView1.Items.Add;
    LI.caption := Views[Viewselected].platesData[i].MiscString1;
    LI.SubItems.Add(SPageOnFlatName);
    LI.SubItems.Add(IntToStr(Views[Viewselected].platesData[i]
      .copyflatseparationset));
  end;

  If FormReNumberPlate.ShowModal = mrOK then
  Begin
    For i := 0 to FormReNumberPlate.ListView1.Items.Count - 1 do
    // Høvler alle igennem
    begin
      StartPos := StrToInt(FormReNumberPlate.edit1.text);
      copyflatseparationset := FormReNumberPlate.ListView1.Items[i].SubItems[1];
      if FormReNumberPlate.CheckBox1.Checked then
        MiscString1 := FormReNumberPlate.ListView1.Items[i].caption
      else
        MiscString1 := IntToStr(i + StartPos);
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Update pagetable');
      Datam1.Query1.SQL.Add('Set Miscstring1 = ''' + MiscString1 + '''');
      Datam1.Query1.SQL.Add('where CopyFlatSeparationSet = ''' +
        copyflatseparationset + '''');
      trysql(Datam1.Query1);
    end;
  End;
end;

(*
  ONOFknapper
  Configuration
  Prefs.Debug tools
  Edition popup
  Editions
  File
  Filemanage
  Log
  Pages
  Pagetree
  Planning
  Production
  Productiontree
  Proof
  Report
  System
  Thumbnails
  Thumbnails Tree
  Tools
  Unkownfiles
  View
*)

procedure TFormMain.ActionPressInfoImportExecute(Sender: TObject);
begin
  Formpressinforequest.initialize;
  Formpressinforequest.ShowModal;
end;

procedure TFormMain.Actionmiscstr2Execute(Sender: TObject);
begin
  PageSetAmiscstring(2);
end;

procedure TFormMain.Actionmiscstr3Execute(Sender: TObject);
begin
  PageSetAmiscstring(3);
end;

procedure TFormMain.ActionMiscint2Execute(Sender: TObject);
begin
  beep;
end;

procedure TFormMain.ActionMiscint3Execute(Sender: TObject);
begin
  beep;
end;

procedure TFormMain.PageSetAmiscstring(Number: Longint);

Var
  T: string;
  i: Integer;
begin

  getpreselHS;

  Formeditatext.caption := InfraLanguage1.Translate
    ('Edit Miscstr' + IntToStr(Number));
  Formeditatext.Label1.caption := 'Miscstr' + IntToStr(Number);

  Formeditatext.ComboBox1.text := '';
  Formeditatext.ComboBox1.Items.Clear;

  for i := 0 to Length(Prefs.PressTowers) - 1 do
  begin
    Formeditatext.ComboBox1.Items.Add(Prefs.PressTowers[i].Tower);
  end;

  if Formeditatext.ShowModal = mrOK then
  begin
    T := Formeditatext.ComboBox1.text;

    setpagetablestddata('set miscstring' + IntToStr(Number) + ' = ' + '''' + T +
      '''', '');

    loadSuperHSDB2(false);
    resetpreselHS;
  end;

end;

procedure TFormMain.RegenInkOnThumbthumbdata;

Var
  i: Integer;
begin
  try
    Nselectedmasters := 0;
    Regeninkflats.Clear;
    for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
    begin
      if (PBExListviewthumbnail.Items[i].Selected) then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('Select distinct CopyFlatSeparationSet from pagetable (NOLOCK) ');
        Datam1.Query1.SQL.Add('where mastercopyseparationset = ' +
          IntToStr(Showthubms[i].mastercopyseparationset));
        Datam1.Query1.Open;
        while not Datam1.Query1.Eof do
        begin
          Regeninkflats.Add(Datam1.Query1.Fields[0].AsString);
          Datam1.Query1.Next;
        end;
        Datam1.Query1.Close;
      end;
    end;
    Regencopyflatinkfiles;
  Except
  end;
end;

procedure TFormMain.ActionThumbregenInkExecute(Sender: TObject);
begin
  RegenInkOnThumbthumbdata;
end;

procedure TFormMain.TimershowprevTimer(Sender: TObject);
begin
  if not StartuPdone then
    exit;
  // memotestPrefs.Debug.Lines.Add('TimershowprevTimer');
  // memotestPrefs.Debug.refresh;
  Timershowprev.Enabled := false;

  // if (ComboBoxPressGrp.ItemIndex > 0) and (PDFMasterOK) then
  if (ComboBoxPressGrp.text <> 'All') and (PDFMasterOK) then

    formprev2.UsePDFMaster := true
  else
    formprev2.UsePDFMaster := false;

  if (formprev2.Showing) or (formprev2.Active) then
  begin
    if formprev2.Showasreadorder then
      formprev2.readpageorderspecific(formprev2.SpecificMaster)
    else
      formprev2.gotospecific(formprev2.SpecificMaster);
    formprev2.BringToFront;
  End
  else
    DothumbnailpreviewExecute(true, formprev2.SpecificMaster);
end;

procedure TFormMain.ActionthumbdeleteExecute(Sender: TObject);
Var
  i: Integer;
  anydel: Boolean;
  ProductionID: Integer;
  pressrunid: Integer;
  HasUniquePage: Boolean;
begin
  Nselectedmasters := 0;
  anydel := false;
  ProductionID := -1;

  pressrunid := 0;

  // SJO check this page is in flat
  for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
  begin
    if (PBExListviewthumbnail.Items[i].Selected) then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('SELECT TOP 1 PlanType FROM ProductionNames WHERE ProductionID= ' +
        IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^).ProductionID));
      Tryopen(Datam1.Query1);

      if not Datam1.Query1.Eof then
      begin
        if Datam1.Query1.Fields[0].AsInteger <> 0 then
          if MessageDlg
            ('Warning - This page is part of a plate production. Do you really want to delete it (not recommended)?',
            mtwarning, [mbYes, mbNo], 0) = mrNo then
            exit;
      end;
      Datam1.Query1.Close;

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('SELECT TOP 1 UniquePage FROM pagetable (NOLOCK) ');
      Datam1.Query1.SQL.Add('WHERE Dirty=0 AND  MasterCopySeparationSet = ' +
        IntToStr(Showthubms[i].mastercopyseparationset));
      Datam1.Query1.SQL.Add('AND EditionID = ' +
        IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid) +
        ' and ProductionID = ' +
        IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^).ProductionID));
      Tryopen(Datam1.Query1);
      HasUniquePage := false;
      if not Datam1.Query1.Eof then
      begin
        if Datam1.Query1.Fields[0].AsInteger = 1 then
          HasUniquePage := true;
      end;
      Datam1.Query1.Close;

      if (HasUniquePage) then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('SELECT TOP 1 UniquePage FROM PageTable (NOLOCK) ');
        Datam1.Query1.SQL.Add
          ('WHERE UniquePage <> 1 AND Dirty=0 AND MasterCopySeparationSet = ' +
          IntToStr(Showthubms[i].mastercopyseparationset));
        Tryopen(Datam1.Query1);
        if not Eof then
        begin
          MessageDlg
            ('Aborting page delete - This page is used in another production.',
            mtwarning, [mbOk], 0);
          // If MessageDlg('Warning - This page is part of a production. Do you want to delete? (not recommended).', mtwarning, [mbYes,mbNo], 0) = mrNo then
          // exit;
        end;
        Datam1.Query1.Close;
      End;

      { ORG      if productionid < 0 then
        begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('Select distinct productionid from pagetable (NOLOCK) ');
        Datam1.Query1.SQL.Add('where mastercopyseparationset = ' +IntToStr(Showthubms[i].Mastercopyseparationset));
        tryopen(Datam1.Query1);

        if not Datam1.Query1.Eof then
        begin
        productionid := Datam1.Query1.Fields[0].AsInteger;
        end;
        Datam1.Query1.Close;

        end; ORG }

      //

      if (Global_spImportCenterPageOutOfRangeCheckPossible) then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('SELECT TOP 1 PressRunID FROM pagetable (NOLOCK) ');
        Datam1.Query1.SQL.Add('WHERE Dirty=0 AND  MasterCopySeparationSet = ' +
          IntToStr(Showthubms[i].mastercopyseparationset));
        Datam1.Query1.SQL.Add('AND EditionID = ' +
          IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid)
          + ' and ProductionID = ' +
          IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
          .ProductionID));
        Tryopen(Datam1.Query1);
        if not Datam1.Query1.Eof then
          pressrunid := Datam1.Query1.Fields[0].AsInteger;
        Datam1.Query1.Close;
      end;

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('DELETE PrePollPageTable ');
      Datam1.Query1.SQL.Add('WHERE MasterCopySeparationSet = ' +
        IntToStr(Showthubms[i].mastercopyseparationset));
      trysql(Datam1.Query1);

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('DELETE PageTable ');
      Datam1.Query1.SQL.Add('WHERE MasterCopySeparationSet = ' +
        IntToStr(Showthubms[i].mastercopyseparationset));
      trysql(Datam1.Query1);

      if (Global_spImportCenterPageOutOfRangeCheckPossible) AND (pressrunid > 0)
      then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('exec  spImportCenterPageOutOfRangeCheck ' +
          IntToStr(pressrunid));
        trysql(Datam1.Query1);
      end;

      anydel := true;
    End;
  end;

  (* if anydel then
    begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('update pagetable set proofstatus = 0');
    Datam1.Query1.SQL.Add('where productionid = ' +IntToStr(productionid));
    trysql(Datam1.Query1);
    end; *)
  ActionThumbnailrefresh.Execute;
end;

procedure TFormMain.ActionplanreadyExecute(Sender: TObject);
var
  N, IPLF: Integer;
  INpressruns: String;
begin
  INpressruns := '(-99';
  try
    N := 0;
    for IPLF := 1 to Nplateframes do
    begin
      if plateframes[IPLF].Selected then
      begin
        Inc(N);
        INpressruns := INpressruns + ',' +
          IntToStr(plateframes[IPLF].pressrunid)
      end;
    end;

    INpressruns := INpressruns + ')';
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('update pressrunid set PlanType = 1 where pressrunid IN ' + INpressruns);
    trysql(Datam1.Query1);

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('update ProductionNames set PlanType = 1 where productionid = ' +
      IntToStr(Tplantreedata(TreeViewplan.Selected.Data^).ProductionID));
    trysql(Datam1.Query1);
    (*

      /*
      DECLARE @pagelist table (MasterCopySeparationSet int, PageIndex int, SectionID int, Idx int)
      INSERT INTO @pagelist SELECT DISTINCT MasterCopySeparationSet,PageIndex,SectionID,SectionID*1000+PageIndex FROM Pagetable WITH (NOLOCK) WHERE dirty = 0 and ProductionID=@ProductionID AND EditionID=@EditionID ORDER BY SectionID,PageIndex
      DECLARE @Counter int
      DECLARE @ThisMaster int
      SET @Counter = (SELECT MIN(PageIndex) FROM PageTable WITH (NOLOCK) WHERE Dirty = 0 and ProductionID=@ProductionID AND EditionID=@EditionID)
      if @Counter IS NULL
      SET @Counter = 1
      --if (@Counter % 2) = 0
      --	SET @Counter = @Counter + 1
      --SET @Counter = 0
      DECLARE @Idx int
      SET @Idx = (SELECT MIN(Idx) FROM @pagelist)
      while @Idx IS not NULL
      begin

      SET @ThisMaster = (SELECT top 1 MasterCopySeparationSet FROM @pagelist WHERE Idx=@Idx)

      UPDATE PageTable SET Pagination=@Counter WHERE MasterCopySeparationSet=@ThisMaster
      SET @Counter = @Counter + 1
      SET @Idx = (SELECT MIN(Idx) FROM @pagelist WHERE Idx>@Idx)
      END
      */
    *)

  Except
  end;
end;

procedure TFormMain.ActionthumbRecalcExecute(Sender: TObject);
var
  pagnum: Integer;
begin
  try

    if TreeViewThumbs.Selected = nil then
      exit;
    if TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid < 1 then
      exit;

    pagnum := 0;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select distinct mastercopyseparationset,pageindex from pagetable (NOLOCK) ');
    Datam1.Query1.SQL.Add('Where EditionID = ' +
      IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid) +
      ' and ProductionID = ' +
      IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^).ProductionID));
    Datam1.Query1.SQL.Add('order by pageindex ');
    Tryopen(Datam1.Query1);
    while not Datam1.Query1.Eof do
    begin
      Inc(pagnum);
      Datam1.Query2.SQL.Clear;
      Datam1.Query2.SQL.Add('update pagetable ');
      Datam1.Query2.SQL.Add('Set pagination = ' + IntToStr(pagnum) +
        ' , proofstatus = 0 ');
      Datam1.Query2.SQL.Add('where mastercopyseparationset =  ' +
        Datam1.Query1.Fields[0].AsString);
      Datam1.Query2.SQL.Add('and EditionID = ' +
        IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^).editionid) +
        ' and ProductionID = ' +
        IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.Data^)
        .ProductionID));
      Datam1.Query2.ExecSQL;

      Datam1.Query1.Next;

    end;
    Datam1.Query1.Close;
    (*
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('exec spRecalcPagina @EditionID = ' + IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.data^).editionid) + ', @ProductionID = ' + IntToStr(TTreeViewpagestype(TreeViewThumbs.Selected.data^).productionid));
      if Prefs.Debug then Datam1.Query1.SQL.SaveToFile(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'+'recalcpagina.SQL');
      Datam1.Query1.ExecSQL;
    *)
  except
  end;
end;

procedure TFormMain.ActionplateCenterSpreadExecute(Sender: TObject);
begin
  try
    if Viewselected >= 0 then
      Views[Viewselected].setcenterspread;

    ActionplaterefreshExecute(FormMain);
  except
  end;
end;

procedure TFormMain.ActionplateSinglepageExecute(Sender: TObject);
begin
  try
    if Viewselected >= 0 then
      Views[Viewselected].setSinglepage;

    ActionplaterefreshExecute(FormMain);

  except
  end;
end;

procedure TFormMain.PlateEditcolors;

  procedure enablecolors(mastercopyseparationset: Longint);
  var
    i: Integer;
    Incopysets, Enabledcolors: string;
  begin
    Nselectedmasters := 0;
    for i := 0 to Formeditcolors.CheckListBoxColors.Items.Count - 1 do
    begin
      Datam1.Query1.SQL.Clear;
      if Formeditcolors.CheckListBoxColors.Checked[i] then
        Datam1.Query1.SQL.Add('update pagetable set active = 1,proofstatus=0')
      else
        Datam1.Query1.SQL.Add('update pagetable set active = 0,proofstatus=0');
      Datam1.Query1.SQL.Add('where  Mastercopyseparationset = ' +
        IntToStr(mastercopyseparationset));
      Datam1.Query1.SQL.Add(' and colorid = ' +
        IntToStr(tNames1.Colornametoid(Formeditcolors.CheckListBoxColors.
        Items[i])));
      if Prefs.Debug then
        Datam1.Query1.SQL.SaveToFile
          (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'
          + 'Setaddcolors.SQL');
      Datam1.Query1.ExecSQL;
    end;
  end;

Var
  i, i2, i3: Integer;
  T: String;
begin
  if not AnyPlatesselected then
    exit;

  Formeditcolors.CheckListBoxColors.Items.Clear;

  for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
  begin
    if Views[Viewselected].LPV.Items[i].Selected then
    begin
      for i2 := 1 to Views[Viewselected].platesData[i].Npages do
      begin

        for i3 := 1 to Views[Viewselected].platesData[i].pages[i2].Ncolors do
        begin
          T := tNames1.ColornameIDtoname(Views[Viewselected].platesData[i].pages
            [i2].Colors[i3].Colorid);
          if (Formeditcolors.CheckListBoxColors.Items.IndexOf(T) < 0) And
            (T <> 'DINKY') then
            Formeditcolors.CheckListBoxColors.Items.Add(T);
        end;
      end;

    end;
  end;

  for i := 0 to Formeditcolors.CheckListBoxColors.Items.Count - 1 do
  begin
    Formeditcolors.CheckListBoxColors.Checked[i] := true;
  end;

  if Formeditcolors.ShowModal = mrOK then
  begin
    for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
    begin
      if Views[Viewselected].LPV.Items[i].Selected then
      begin
        for i2 := 1 to Views[Viewselected].platesData[i].Npages do
        begin
          enablecolors(Views[Viewselected].platesData[i].pages[i2]
            .mastercopyseparationset);
        end;
      end;
    end;
  end;
  ActionplaterefreshExecute(FormMain);
end;

procedure TFormMain.ActionplateeditcolorsExecute(Sender: TObject);
begin
  PlateEditcolors;
end;

procedure TFormMain.ActionprodlayoutExecute(Sender: TObject);
var
  i: Integer;
  wherestr: string;
  tmplnum: Integer;
  multiblpressruns: Boolean;
  aktpressrun: Integer;
  multiblcopies: Boolean;
  aktcopy: Integer;
begin
  if TreeViewprodcontrol.Selected = nil then
    exit;

  multiblpressruns := false;
  multiblcopies := false;
  aktpressrun := -1;
  aktcopy := -1;
  for i := 1 to StringGridprods.RowCount do
  begin
    if StringGridprodsdata[i].Selected then
    begin
      if aktpressrun = -1 then
        aktpressrun := StringGridprodsdata[i].pressrunid;

      if (aktpressrun <> StringGridprodsdata[i].pressrunid) then
      begin
        multiblpressruns := true;
        break;
      end;

      if aktcopy = -1 then
        aktcopy := StringGridprodsdata[i].copynumber;

      if (aktcopy <> StringGridprodsdata[i].copynumber) then
      begin
        multiblcopies := true;
      end;
    end;
  end;

  if multiblpressruns then
  begin
    MessageDlg('A new layout cannot be applied to multiple pressruns',
      mtInformation, [mbOk], 0);
    exit;
  end;

  wherestr := '(Copynumber IN (-99';
  for i := 1 to StringGridprods.RowCount do
  begin
    if StringGridprodsdata[i].Selected then
    begin
      wherestr := wherestr + ',' + IntToStr(StringGridprodsdata[i].copynumber);

    end;
  end;

  wherestr := wherestr + ') and pressrunid = ' + IntToStr(aktpressrun) + '  )';

  try
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select TOP 1 pressid,templateid from pagetable (NOLOCK)');
    Datam1.Query1.SQL.Add('where active <> -98 and ' + wherestr);
    Datam1.Query1.SQL.Add(WeditionStr);
    if Prefs.Debug then
      Datam1.Query1.SQL.SaveToFile
        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
        'layoutonprod.SQL');
    Datam1.Query1.Open;
    FormChlayout.Aktpressname := '';
    if not Datam1.Query1.Eof then
    begin
      FormChlayout.Aktpressname := tNames1.pressnameIDtoname
        (Datam1.Query1.Fields[0].AsInteger);
      tmplnum := inittypes.gettemplatelistnumberfromdbID
        (Datam1.Query1.Fields[1].AsInteger);
      FormChlayout.Curtemplate := PlatetemplateArray[tmplnum].TemplateName;
    end;
    Datam1.Query1.Close;

    if FormChlayout.Aktpressname <> '' then
    begin
      FormChlayout.GroupBoxspecifikcopy.Visible := false;

      if FormChlayout.ShowModal = mrOK then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('update pagetable');
        Datam1.Query1.SQL.Add('set deviceid = 0');
        Datam1.Query1.SQL.Add(', templateid = ' +
          IntToStr(PlatetemplateArray[FormChlayout.Newtemplatelistid]
          .TemplateID));
        Datam1.Query1.SQL.Add('where active <> -98 and ' + wherestr);
        Datam1.Query1.SQL.Add(WeditionStr);
        trysql(Datam1.Query1);
        Newrefreshprogress;
      end;
    end;
  Except
  end;
end;

procedure TFormMain.ActionchkCCfilesExecute(Sender: TObject);
begin
  Formchkccfiles.ShowModal;
end;

procedure TFormMain.ActionthumbfalseExecute(Sender: TObject);
Var
  // TrimOffsetXEven,TrimOffsetXodd : real;
  // templid,
  i: Integer;
  // trimto : Real;
  // itsodd : Boolean;
begin
  if Formfalsespread.ShowModal = mrOK then
  begin
    for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
    begin
      if PBExListviewthumbnail.Items[i].Selected then
      begin
        Formfalsespread.setcreeptofalsespread
          (Showthubms[i].mastercopyseparationset);

        (*
          if Showthubms[i].Pageindex mod 2 = 0 then
          begin
          itsodd := false;
          end
          else
          begin
          itsodd := true;
          end;

          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('Select distinct templateid from pagetable');
          Datam1.Query1.SQL.Add('Where mastercopyseparationset = ' + IntToStr(Showthubms[i].Mastercopyseparationset));
          Datam1.Query1.Open;
          if not Datam1.Query1.Eof then
          begin
          templid := Datam1.Query1.Fields[0].AsInteger;
          end
          else
          exit;
          Datam1.Query1.Close;

          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('Select distinct TrimOffsetXEven,TrimOffsetXOdd from TemplateConfigurations');
          Datam1.Query1.SQL.Add('Where templateid = ' + IntToStr(templid));
          Datam1.Query1.Open;

          TrimOffsetXEven := Datam1.Query1.Fields[0].asfloat ;
          TrimOffsetXOdd  := Datam1.Query1.Fields[1].asfloat ;

          Datam1.Query1.Close;


          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('Select distinct flatseparation from pagetable');
          Datam1.Query1.SQL.Add('Where mastercopyseparationset = ' + IntToStr(Showthubms[i].Mastercopyseparationset));
          Datam1.Query1.Open;
          while not Datam1.Query1.Eof do
          begin
          Datam1.Query2.SQL.Clear;
          Datam1.Query2.SQL.Add('update pagetable');
          Datam1.Query2.SQL.Add('set markgroups = '+''''+inittypes.marksIDstr(Formfalsespread.ANmarks,Formfalsespread.Amarks)+'''');
          Datam1.Query2.SQL.Add('where flatseparation = ' + Datam1.Query1.Fields[0].AsString);
          Datam1.Query2.execsql;

          Datam1.Query1.Next
          end;
          Datam1.Query1.Close;

          if Formfalsespread.RadioGrouponoff.ItemIndex = 0 then
          begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set flatproofstatus=0, creep = :creep');
          Datam1.Query1.SQL.Add('Where mastercopyseparationset = ' + IntToStr(Showthubms[i].Mastercopyseparationset));

          if itsodd then
          trimto := TrimOffsetXOdd * TrimOdd
          else
          trimto := TrimOffsetXeven * Trimeven;

          Datam1.Query1.ParamByName('creep').AsFloat := trimto;
          Datam1.Query1.ExecSQL;
          End
          else
          begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set flatproofstatus=0, creep = :creep');
          Datam1.Query1.SQL.Add('Where mastercopyseparationset = ' + IntToStr(Showthubms[i].Mastercopyseparationset));

          if itsodd then
          trimto := TrimOffsetXOdd * TrimOdd
          else
          trimto := TrimOffsetXeven * Trimeven;

          Datam1.Query1.ParamByName('creep').AsFloat := 0;
          Datam1.Query1.ExecSQL;
          end;
        *)
      end;
    end;
  end;
  loadthumbnails(true);
end;

procedure TFormMain.ActionCustomdbsettingsExecute(Sender: TObject);
begin
  beep;
end;

procedure TFormMain.ActionproductionerrorExecute(Sender: TObject);
begin
  Formprodwarn.ShowModal;
end;

procedure TFormMain.TimerblinkTimer(Sender: TObject);
begin
  if StartuPdone then
  begin
    // memotestPrefs.Debug.Lines.Add('TimerblinkTimer');
    // memotestPrefs.Debug.refresh;
    try
      if (FormMain.Actionproductionerror.Visible) then
      begin
        if FormMain.Actionproductionerror.ImageIndex = 274 then
          FormMain.Actionproductionerror.ImageIndex := 275
        else
          FormMain.Actionproductionerror.ImageIndex := 274;
      end;
    except
    end;
  end;
end;

procedure TFormMain.ActionPlateSortbyExecute(Sender: TObject);
begin
  sleep(10);
end;

procedure TFormMain.ActionPlateSortbySideExecute(Sender: TObject);
begin
  ActionPlateSortby.caption := ActionPlateSortbySide.caption;
  ActionPlateSortby.Checked := true;
  PlatesortType := 1; // 0 Sheet, 1 Side, 2 Tower
  if not loadplateview(false, false) then
    plateviewtreedeselect;

end;

procedure TFormMain.ActionPlateSortbySheetExecute(Sender: TObject);
begin
  ActionPlateSortby.caption := ActionPlateSortbySheet.caption;
  ActionPlateSortby.Checked := false;
  PlatesortType := 0; // 0 Sheet, 1 Side, 2 Tower
  if not loadplateview(false, false) then
    plateviewtreedeselect;

end;

procedure TFormMain.ActionPlateSortbyTowerExecute(Sender: TObject);
begin
  ActionPlateSortby.caption := ActionPlateSortbyTower.caption;
  ActionPlateSortby.Checked := true;
  PlatesortType := 2; // 0 Sheet, 1 Side, 2 Tower
  if not loadplateview(false, false) then
    plateviewtreedeselect;

end;

Function TFormMain.FindStringGridProdBiggestFont: Integer;
Var
  // B,
  h, i: Integer;
Begin
  h := -1;
  For i := 0 to 15 do
  begin
    FormImage.ImageDummy.Canvas.Font.Name := Prefs.ProductionGridFonts[i].Name;
    FormImage.ImageDummy.Canvas.Font.Style := Prefs.ProductionGridFonts
      [i].Style;
    FormImage.ImageDummy.Canvas.Font.Size := Prefs.ProductionGridFonts[i].Size;
    if h < FormImage.ImageDummy.Canvas.TextHeight('ZXYÅ') then
    Begin
      h := FormImage.ImageDummy.Canvas.TextHeight('ZXYÅ');
      // B := I;
    End;
  end;
  // FoxrmSettings.StringGridprods.DefaultRowHeight := H+4;
  result := StringGridprods.DefaultRowHeight;
end;

procedure TFormMain.Newrefreshprogress;

  function WeekToDate(Uge, Ar: Word): Tdate;
  var
    temp1: Tdate;
    temp2: Word;
  begin
    result := 1;
    if (Uge <= 0) or (Uge > WeeksInYear(Ar)) then
      exit;
    temp1 := StrToDate('01-01-' + IntToStr(Ar));
    temp2 := WeekOfTheYear(temp1);
    if temp2 = 1 then
      result := 7 * (Uge - 1) + temp1
    else
      result := 7 * Uge + temp1;
  end;

Var

  pressrunids: Array of record PRmiscint1: Integer;
  ProductionID: Integer;
  Publicationid: Integer;
  LocationID: Integer;
  Pubdate: TDateTime;
  pressid: Integer;
  editionid: Integer;
  sections: String;
  NSecids: Integer;
  pageFormatID: Integer;
  Secids: Array [1 .. 50] of Integer;

  presssectionnumber: Integer;
  copynumber: Integer;
  pressrunid: Integer;
  Comment: String;
  inkcomment: String;
  OrderNumber: String;
  hold: Integer;
  Npages: Integer;
  Nnorm: Integer;
  NPano: Integer;
  Nmissing: Integer;
  NImaged: Integer;
  NReceived: Integer;
  NApproved: Integer;
  NNotApproved: Integer;
  Nunique: Integer;

  Devices: String;
  Ndeviceids: Integer;
  Deviceids: Array [1 .. 50] of Integer;

  devicegrpid: Integer;
  priority: Integer;

  towers: String;
  Ntowerids: Integer;
  towerids: Array [1 .. 50] of String;

  Nplates: Integer;
  Start: Integer;
  Stop: Integer;
  Lstat: Integer;
  presstime: TDateTime;
  Ripsetup: string;
  Creep: double;
  OutputOrder: string[50];
  FTPCount: Integer;
  PRECount: Integer;
  INKCount: Integer;
  RIPCount: Integer;
end;
NDyndata:
Integer;
Dyndata:
Array of record PRmiscint1: Integer;
LocationID:
Integer;
pressid:
Integer;
Pubdate:
TDateTime;
ProductionID:
Integer;
Publicationid:
Integer;
editionid:
Integer;
Sectionid:
Integer;
separationset:
Integer;
FlatSeparation:
Int64;
uniquepage:
Integer;
copynumber:
Integer;
pressrunid:
Integer;
Comment:
String;
inkcomment:
String;
OrderNumber:
String;
hold:
Integer;
status:
Integer;
presssectionnumber:
Integer;
deviceid:
Integer;
devicegrpid:
Integer;
TowerID:
String;
Nplates:
Integer;
mastercopyseparationset:
Integer;
Mastfound:
Boolean;
approved:
Integer;
priority:
Integer;
pageFormatID:
Integer;
pagetype:
Integer;
presstime:
TDateTime;
Ripsetup:
string;
Ignoreplate:
Boolean;
OutputOrder:
string[50];
end;
Npressrunids, i, Ipre, i2, aktcopynumber: Integer;
aktflatsep:
Int64;
Aktsepset, aktpressrun, aktmast, iflstart: Integer;

AMissing:
Boolean;
AImaged:
Boolean;
AReceived:
Boolean;
AApproved:
Boolean;
ANotApproved:
Boolean;
Aunique, difrows: Boolean;
Aktignoreplate:
Boolean;
T, T1: String;
wherestr:
String;
N, fromnode, fromsel, fromlevel: TTreeNode;
Fheihgt, IPR2: Integer;
somenoshowpubls:
Boolean;
Notinshowpubls:
String;
Totdevstr, Devnavnstr, Devgrpstr: String;

Pubdatefilter:
string; // Tdate
SuperPubdatefilter:
TDateTime;
TmpS:
String;

CurrentSelectedPressRunID:
Integer;
LocationID:
Integer;
       WeekNumber : Integer;
          YearOfWeekNumber : Integer;
begin
  try
    Pubdatefilter := '';
    CurrentSelectedPressRunID := 0;

    for i := 0 to StringGridprods.RowCount - 1 do
    begin
      if (StringGridprodsdata[i].Selected) then
      begin
        CurrentSelectedPressRunID := StringGridprodsdata[i].pressrunid;
        break;
      end;
    end;

    StringGridprods.DefaultRowHeight := FindStringGridProdBiggestFont;

    if (TreeViewprodcontrol.Selected = nil) then
    begin
      StringGridprods.RowCount := 2;
      for i := 0 to StringGridprods.ColCount - 1 do
        StringGridprods.cells[i, 1] := '';
      exit;
    end;
    if (TreeViewprodcontrol.Selected.Level < Prefs.ProductionMinTreeLevel) then
    begin
      StringGridprods.RowCount := 2;
      for i := 0 to StringGridprods.ColCount - 1 do
        StringGridprods.cells[i, 1] := '';
      exit;
    end
    else
    begin
      if ComboBoxGlobalPubDateFilter.text = LabelAlldays.caption then
      begin
      end
      else
      begin
        if ComboBoxGlobalPubDateFilter.text = LabelFromtoday.caption then
        begin
          // Pubdatefilter := ' and p1.pubdate >= CONVERT (date, GETDATE())' ;
          // Pubdatefilter := ' and p1.pubdate >= CAST(DATEPART(month,GETDATE()) as varchar(4)) + ''/'' + CAST(DATEPART(day,GETDATE()) as varchar(4)) + ''/'' + CAST(DATEPART(year,GETDATE()) as varchar(4))';
          Pubdatefilter := ' and (DATEDIFF(day,GETDATE(),p1.pubdate) >= 0)';
        end
        else
        begin
          If (not Prefs.ShowWeekNumberInTree) then
          Begin
            SuperPubdatefilter := StrToDate(ComboBoxGlobalPubDateFilter.text);
            Pubdatefilter := ' and ' + Datam1.makedatastr('p1.',
              SuperPubdatefilter);
          End
          else
          Begin
            WeekNumber :=   StrToInt(Copy(ComboBoxGlobalPubDateFilter.text, 1, 2));
            YearOfWeekNumber := StrToInt(Copy(ComboBoxGlobalPubDateFilter.text, 4, 8));
             if (WeekNumber = 53) AND ((YearOfWeekNumber = 2020) OR (YearOfWeekNumber = 2021)) then
            begin
                 Datam1.Querytree.SQL.Add(' and (p1.pubdate >= ''2020-12-28'')' );
                 Datam1.Querytree.SQL.Add(' and (p1.pubdate <= ''2021-01-03'')' );
            end
            else
            begin
              SuperPubdatefilter :=    StartOfAWeek(YearOfWeekNumber, WeekNumber);

              Datam1.Querytree.SQL.Add(' and (p1.pubdate >= ''' +
                FormaTDateTime('YYYY-MM-DD', SuperPubdatefilter) + ''')');
              SuperPubdatefilter :=EndOfAWeek(YearOfWeekNumber, WeekNumber);
              Datam1.Querytree.SQL.Add(' and (p1.pubdate <= ''' +
                FormaTDateTime('YYYY-MM-DD', SuperPubdatefilter) + ''')');
            end;
          End;
        end;
      end;
    end;

    if TreeViewprodcontrol.Items.Count = 1 then
    begin
      StringGridprods.RowCount := 2;
      for i := 0 to StringGridprods.ColCount - 1 do
        StringGridprods.cells[i, 1] := '';
      exit;
    end;

    Notinshowpubls := '';
    if (TreeViewprodcontrol.Selected.Level = 1) AND (GroupBoxProdpupl.Visible)
    then
    begin
      somenoshowpubls := false;
      Notinshowpubls := '(-99';
      for i := 0 to CheckListBoxprodpubl.Items.Count - 1 do
      begin
        if not CheckListBoxprodpubl.Checked[i] then
        begin
          somenoshowpubls := true;
          break;
        end;
      end;

      if somenoshowpubls then
      begin
        for i := 0 to CheckListBoxprodpubl.Items.Count - 1 do
        begin
          TmpS := CheckListBoxprodpubl.Items[i];
          if not CheckListBoxprodpubl.Checked[i] then
          begin
            // Notinshowpubls := Notinshowpubls +','+ IntToStr(tnames1.publicationnametoid(CheckListBoxprodpubl.Items[i]));
            Notinshowpubls := Notinshowpubls + ',' +
              IntToStr(Integer(CheckListBoxprodpubl.Items.Objects[i]));
          end;
        end;
        Notinshowpubls := 'And not p1.publicationID IN ' + Notinshowpubls + ')';

      end
      else
        Notinshowpubls := '';
    end;

    wherestr := 'where p1.dirty=0 and p1.active = 1 and p1.pagetype < 3 ';
    if Pressvisibilylimited then
      wherestr := wherestr + ' and p1.pressid IN ' + PressvisibilyIN;

    LocationID := GetSelectedLocationID();
    if (LocationID > 0) then
      wherestr := wherestr + ' and p1.locationid = ' + IntToStr(LocationID);

    if (TreeViewprodcontrol.Items.Count > 0) then
    begin
      fromnode := TreeViewprodcontrol.Selected;
      fromsel := TreeViewprodcontrol.Selected;
      fromlevel := fromsel;
      while fromlevel.Level > 5 do
        fromlevel := fromlevel.Parent;
      N := fromlevel;
      while N.Level > 0 do
      begin
        case TTreeViewpagestype(N.Data^).kind of
          // 0=all,1=location,2=publication,pubdate,3=issue,4=edition,5=section
          1:
            begin
              wherestr := wherestr + ' and ' + Datam1.makedatastr('p1.',
                TTreeViewpagestype(N.Data^).Pubdate);
            end;
          2:
            begin
              wherestr := wherestr + ' and p1.publicationid = ' +
                IntToStr(TTreeViewpagestype(N.Data^).Publicationid);
            end;
          3:
            begin
              wherestr := wherestr + ' and p1.issueid = ' +
                IntToStr(TTreeViewpagestype(N.Data^).issueid);
            end;
          4:
            begin
              wherestr := wherestr + ' and p1.editionid = ' +
                IntToStr(TTreeViewpagestype(N.Data^).editionid);
            end;
        end;
        N := N.Parent;
      end;
    end;

    Datam1.Query1.SQL.Clear;
    // 0               1           2            3             4
    Datam1.Query1.SQL.Add
      ('select p1.locationid,p1.pressid,p1.pubdate,p1.productionid,p1.publicationid,');
    // 5              6               7                8               9
    Datam1.Query1.SQL.Add
      ('p1.editionid,p1.sectionid,p1.separationset,p1.flatseparation,p1.uniquepage,');
    // 10              11          12            13           14            15       16
    Datam1.Query1.SQL.Add
      ('p1.copynumber,p1.pressrunid,pr.comment,pr.inkcomment,pr.ordernumber,p1.hold,p1.status,');
    // 17                   18            19                           20         21          22          23           24

    Datam1.Query1.SQL.Add
      ('p1.PressSectionNumber,p1.deviceid,p1.mastercopyseparationset,p1.approved,p1.priority,p1.pagetype,p1.presstime,p1.presstower');

    if (DBVersion > 1) AND (Comment2INPressrunid) then // 25           26
      Datam1.Query1.SQL.Add(',pr.comment2,pr.miscint1');

    if DeviceGroupNamesPossible then
      Datam1.Query1.SQL.Add(',p1.DeviceGroupID');
    if Pageformatinpagetable then
      Datam1.Query1.SQL.Add(',p1.pageformatid');

    // Vi vil gerne sortere alfabetisk på pubname.
    Datam1.Query1.SQL.Add(',PublicationNames.Name');
    Datam1.Query1.SQL.Add('from pagetable p1 (NOLOCK)');
    Datam1.Query1.SQL.Add
      ('Inner join PublicationNames ON p1.PublicationID = PublicationNames.PublicationID');
    Datam1.Query1.SQL.Add(',pressrunid pr (NOLOCK)');

    Datam1.Query1.SQL.Add(wherestr);
    (*
      Datam1.Query1.SQL.Add('where p1.active = 1  and p1.locationid = 1 and p1.pagetype < 3');
      Datam1.Query1.SQL.Add('and (datepart(day,p1.pubdate) = 13 and datepart(month,p1.pubdate) = 10 and datepart(year,p1.pubdate) = 2008)');
    *)
    Datam1.Query1.SQL.Add(Pubdatefilter);
    Datam1.Query1.SQL.Add('and p1.pressrunid = pr.pressrunid');

    if Actionprodhidefinprod.Checked then
    begin
      Datam1.Query1.SQL.Add
        ('and exists( Select p2.pressrunid from pagetable p2 (NOLOCK) ');
      Datam1.Query1.SQL.Add('Where p2.pressrunid = p1.pressrunid ');
      Datam1.Query1.SQL.Add
        ('and p2.active = 1  and p2.pagetype < 3  and p2.status < 50 ');
      Datam1.Query1.SQL.Add(' ) ');

    end;

    Datam1.Query1.SQL.Add(Notinshowpubls);

    if (Prefs.ProductionShowPressTime) then
      Datam1.Query1.SQL.Add
        ('order by p1.locationid,p1.pressid,p1.presstime,p1.pubdate, Name, p1.publicationid,p1.PressSectionNumber,p1.pressrunid,p1.copynumber,p1.flatseparation,p1.separationset')
    else
      Datam1.Query1.SQL.Add
        ('order by p1.locationid,p1.pressid,p1.pubdate, Name, p1.publicationid,p1.PressSectionNumber,p1.pressrunid,p1.copynumber,p1.flatseparation,p1.separationset');
    if Prefs.Debug then
      Datam1.Query1.SQL.SaveToFile
        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' +
        'GetNewprod.SQL');

    Tryopen(Datam1.Query1);
    i := Datam1.Query1.recordcount;
    if i > 0 then
    begin
      SetLength(Dyndata, i + 200);

    end;
    Npressrunids := 0;
    aktcopynumber := -1;
    aktpressrun := -1;
    NDyndata := 0;
    while not Datam1.Query1.Eof do
    begin
      Inc(NDyndata);
      With Dyndata[NDyndata - 1] DO
      begin
        LocationID := Datam1.Query1.Fields[0].AsInteger;
        pressid := Datam1.Query1.Fields[1].AsInteger;
        Pubdate := Datam1.Query1.Fields[2].AsDateTime;
        ProductionID := Datam1.Query1.Fields[3].AsInteger;
        Publicationid := Datam1.Query1.Fields[4].AsInteger;
        editionid := Datam1.Query1.Fields[5].AsInteger;
        Sectionid := Datam1.Query1.Fields[6].AsInteger;
        separationset := Datam1.Query1.Fields[7].AsInteger;
        FlatSeparation := Datam1.Query1.Fields[8].AsInteger;
        uniquepage := Datam1.Query1.Fields[9].AsInteger;
        copynumber := Datam1.Query1.Fields[10].AsInteger;
        pressrunid := Datam1.Query1.Fields[11].AsInteger;
        Comment := Datam1.Query1.Fields[12].AsString;
        inkcomment := Datam1.Query1.Fields[13].AsString;
        OrderNumber := Datam1.Query1.Fields[14].AsString;
        hold := Datam1.Query1.Fields[15].AsInteger;
        status := Datam1.Query1.Fields[16].AsInteger;
        presssectionnumber := Datam1.Query1.Fields[17].AsInteger;
        deviceid := Datam1.Query1.Fields[18].AsInteger;
        if DeviceGroupNamesPossible then
          devicegrpid := Datam1.Query1.FieldByName('DeviceGroupID').AsInteger
        else
          devicegrpid := 0;

        mastercopyseparationset := Datam1.Query1.Fields[19].AsInteger;
        approved := Datam1.Query1.Fields[20].AsInteger;
        priority := Datam1.Query1.Fields[21].AsInteger;
        pagetype := Datam1.Query1.Fields[22].AsInteger;
        presstime := Datam1.Query1.Fields[23].AsDateTime;

        TowerID := Datam1.Query1.Fields[24].AsString;
        Ignoreplate := true;
        PRmiscint1 := -1;
        if Pageformatinpagetable then
          pageFormatID := Datam1.Query1.FieldByName('pageformatid').AsInteger
        else
          pageFormatID := 0;
        if (DBVersion > 1) AND (Comment2INPressrunid) then
        begin
          Ripsetup := Datam1.Query1.Fields[25].AsString;
          PRmiscint1 := Datam1.Query1.Fields[26].AsInteger;
        end;
        Mastfound := false;
      end;

      if (aktpressrun <> Dyndata[NDyndata - 1].pressrunid) or
        (aktcopynumber <> Dyndata[NDyndata - 1].copynumber) then
      begin
        aktpressrun := Dyndata[NDyndata - 1].pressrunid;
        aktcopynumber := Dyndata[NDyndata - 1].copynumber;
        Inc(Npressrunids);
      end;
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;

    SetLength(pressrunids, Npressrunids + 100);

    Aktsepset := -1;
    aktpressrun := -1;
    Ipre := 0;

    Aktsepset := -1;
    for i := 0 to NDyndata - 1 do
    begin
      if Dyndata[i].uniquepage > 0 then
      begin
        Dyndata[i].Ignoreplate := false;

        for i2 := i - 1 Downto i - 16 do
        begin
          if i2 > 0 then
          begin
            if Dyndata[i].FlatSeparation = Dyndata[i2].FlatSeparation then
              Dyndata[i2].Ignoreplate := false;
          end;
        end;
        for i2 := i + 1 to i + 16 do
        begin
          if i2 < NDyndata then
          begin
            if Dyndata[i].FlatSeparation = Dyndata[i2].FlatSeparation then
              Dyndata[i2].Ignoreplate := false;
          end;
        end;
      end;
    end;

    Aktsepset := -1;
    Ipre := 0;
    for i := 0 to NDyndata - 1 do
    begin
      if ((aktpressrun <> Dyndata[i].pressrunid) OR
        (aktcopynumber <> Dyndata[i].copynumber)) then
      begin
        Inc(Ipre);
        aktpressrun := Dyndata[i].pressrunid;
        aktcopynumber := Dyndata[i].copynumber;
        pressrunids[Ipre - 1].pressrunid := aktpressrun;
        pressrunids[Ipre - 1].ProductionID := Dyndata[i].ProductionID;
        pressrunids[Ipre - 1].LocationID := Dyndata[i].LocationID;
        pressrunids[Ipre - 1].pageFormatID := Dyndata[i].pageFormatID;

        pressrunids[Ipre - 1].pressid := Dyndata[i].pressid;
        pressrunids[Ipre - 1].PRmiscint1 := Dyndata[i].PRmiscint1;
        pressrunids[Ipre - 1].Pubdate := Dyndata[i].Pubdate;
        pressrunids[Ipre - 1].presstime := Dyndata[i].presstime;
        pressrunids[Ipre - 1].Publicationid := Dyndata[i].Publicationid;
        pressrunids[Ipre - 1].sections := ';' + IntToStr(Dyndata[i].Sectionid);
        pressrunids[Ipre - 1].NSecids := 1;
        pressrunids[Ipre - 1].Secids[1] := Dyndata[i].Sectionid;
        pressrunids[Ipre - 1].editionid := Dyndata[i].editionid;
        pressrunids[Ipre - 1].inkcomment := Dyndata[i].inkcomment;
        pressrunids[Ipre - 1].OrderNumber := Dyndata[i].OrderNumber;
        pressrunids[Ipre - 1].Comment := Dyndata[i].Comment;
        pressrunids[Ipre - 1].presssectionnumber :=
          Dyndata[i].presssectionnumber;
        pressrunids[Ipre - 1].copynumber := Dyndata[i].copynumber;
        pressrunids[Ipre - 1].priority := Dyndata[i].priority;
        pressrunids[Ipre - 1].Nplates := 0;
        pressrunids[Ipre - 1].Nmissing := 0;
        pressrunids[Ipre - 1].NImaged := 0;
        pressrunids[Ipre - 1].NReceived := 0;
        pressrunids[Ipre - 1].NApproved := 0;
        pressrunids[Ipre - 1].NNotApproved := 0;
        pressrunids[Ipre - 1].Lstat := 1000;
        pressrunids[Ipre - 1].Start := i;
        pressrunids[Ipre - 1].Stop := i;
        pressrunids[Ipre - 1].hold := Dyndata[i].hold;
        pressrunids[Ipre - 1].Ndeviceids := 1;
        pressrunids[Ipre - 1].Deviceids[1] := Dyndata[i].deviceid;
        pressrunids[Ipre - 1].Devices := ';' + IntToStr(Dyndata[i].deviceid);

        if DeviceGroupNamesPossible then
          pressrunids[Ipre - 1].devicegrpid := Dyndata[i].devicegrpid
        else
          pressrunids[Ipre - 1].devicegrpid := 0;
        pressrunids[Ipre - 1].towerids[1] := Dyndata[i].TowerID;
        pressrunids[Ipre - 1].towers := ';' + Dyndata[i].TowerID;
        pressrunids[Ipre - 1].Ntowerids := 1;

        pressrunids[Ipre - 1].Ripsetup := Dyndata[i].Ripsetup;
        pressrunids[Ipre - 1].Creep :=
          getcreep(pressrunids[Ipre - 1].pressrunid);

        // Find output metode
        pressrunids[Ipre - 1].OutputOrder := '';
        if (UTypes.PressRunOutputMethodTablePossible) then
        begin
          Datam1.SQLQuerySJO1.SQL.Clear;
          Datam1.SQLQuerySJO1.SQL.Add
            ('Select TOP 1 OutputMethodName from PressRunOutputMethod ');
          Datam1.SQLQuerySJO1.SQL.Add('Where PressRunID = ''' +
            IntToStr(aktpressrun) + '''');
          Datam1.SQLQuerySJO1.Open;
          If NOT Datam1.SQLQuerySJO1.Eof then
            pressrunids[Ipre - 1].OutputOrder := Datam1.SQLQuerySJO1.Fields[0].AsString;
          Datam1.SQLQuerySJO1.Close;
        end;

        pressrunids[Ipre - 1].FTPCount := 0;
        pressrunids[Ipre - 1].PRECount := 0;
        pressrunids[Ipre - 1].INKCount := 0;
        pressrunids[Ipre - 1].RIPCount := 0;

        // Find FTP count

        if (StringGridprods.ColWidths[9] > 0) then
        begin
          Datam1.SQLQuerySJO1.SQL.Clear;
          Datam1.SQLQuerySJO1.SQL.Add('SELECT COUNT(DISTINCT PRE.MasterCopySeparationSet) FROM PrePollPageTable PRE WITH (NOLOCK) INNER JOIN PageTable P WITH (NOLOCK) ON P.MasterCopySeparationSet=PRE.MasterCopySeparationSet');
          Datam1.SQLQuerySJO1.SQL.Add('Where PRE.Event IN (130,136,137) AND P.UniquePage<>0 AND P.Dirty=0 AND P.PressRunID = '''
            + IntToStr(aktpressrun) + '''');
          Datam1.SQLQuerySJO1.Open;
          If NOT Datam1.SQLQuerySJO1.Eof then
            pressrunids[Ipre - 1].FTPCount := Datam1.SQLQuerySJO1.Fields[0]
              .AsInteger;
          Datam1.SQLQuerySJO1.Close;
        end;

        // Find PRE count
        if (StringGridprods.ColWidths[10] > 0) then
        begin
          Datam1.SQLQuerySJO1.SQL.Clear;
          Datam1.SQLQuerySJO1.SQL.Add('SELECT COUNT(DISTINCT PRE.MasterCopySeparationSet) FROM PrePollPageTable PRE WITH (NOLOCK) INNER JOIN PageTable P WITH (NOLOCK) ON P.MasterCopySeparationSet=PRE.MasterCopySeparationSet');
          Datam1.SQLQuerySJO1.SQL.Add('Where PRE.Event IN (110,116,117) AND P.UniquePage<>0 AND P.Dirty=0 AND P.PressRunID = '''
            + IntToStr(aktpressrun) + '''');
          Datam1.SQLQuerySJO1.Open;
          If NOT Datam1.SQLQuerySJO1.Eof then
            pressrunids[Ipre - 1].PRECount := Datam1.SQLQuerySJO1.Fields[0]
              .AsInteger;
          Datam1.SQLQuerySJO1.Close;
        end;

        // Find INK count
        if (StringGridprods.ColWidths[11] > 0) then
        begin
          Datam1.SQLQuerySJO1.SQL.Clear;
          Datam1.SQLQuerySJO1.SQL.Add('SELECT COUNT(DISTINCT PRE.MasterCopySeparationSet) FROM PrePollPageTable PRE WITH (NOLOCK) INNER JOIN PageTable P WITH (NOLOCK) ON P.MasterCopySeparationSet=PRE.MasterCopySeparationSet');
          Datam1.SQLQuerySJO1.SQL.Add('Where PRE.Event IN (210,216,217) AND P.UniquePage<>0 AND P.Dirty=0 AND P.PressRunID = '''
            + IntToStr(aktpressrun) + '''');
          Datam1.SQLQuerySJO1.Open;
          If NOT Datam1.SQLQuerySJO1.Eof then
            pressrunids[Ipre - 1].INKCount := Datam1.SQLQuerySJO1.Fields[0]
              .AsInteger;
          Datam1.SQLQuerySJO1.Close;
        end;

        // Find RIP count
        if (StringGridprods.ColWidths[12] > 0) then
        begin
          Datam1.SQLQuerySJO1.SQL.Clear;
          Datam1.SQLQuerySJO1.SQL.Add('SELECT COUNT(DISTINCT PRE.MasterCopySeparationSet) FROM PrePollPageTable PRE WITH (NOLOCK) INNER JOIN PageTable P WITH (NOLOCK) ON P.MasterCopySeparationSet=PRE.MasterCopySeparationSet');
          Datam1.SQLQuerySJO1.SQL.Add('Where PRE.Event IN (120,126,127) AND P.UniquePage<>0 AND P.Dirty=0 AND P.PressRunID = '''
            + IntToStr(aktpressrun) + '''');
          Datam1.SQLQuerySJO1.Open;
          If NOT Datam1.SQLQuerySJO1.Eof then
            pressrunids[Ipre - 1].RIPCount := Datam1.SQLQuerySJO1.Fields[0]
              .AsInteger;
          Datam1.SQLQuerySJO1.Close;
        end;
        Aktsepset := -1;

      End
      else
      begin

        pressrunids[Ipre - 1].Stop := i;
        if pressrunids[Ipre - 1].Lstat > Dyndata[i].status then
          pressrunids[Ipre - 1].Lstat := Dyndata[i].status;
        if pressrunids[Ipre - 1].hold < Dyndata[i].hold then
          pressrunids[Ipre - 1].hold := Dyndata[i].hold;
        if Dyndata[i].priority > pressrunids[Ipre - 1].priority then
          pressrunids[Ipre - 1].priority := Dyndata[i].priority;
        if pressrunids[Ipre - 1].NSecids < 50 then
        begin
          T := ';' + IntToStr(Dyndata[i].Sectionid);
          if pos(T, pressrunids[Ipre - 1].sections) = 0 then
          begin
            Inc(pressrunids[Ipre - 1].NSecids);
            pressrunids[Ipre - 1].Secids[pressrunids[Ipre - 1].NSecids] :=
              Dyndata[i].Sectionid;
            pressrunids[Ipre - 1].sections := pressrunids[Ipre - 1]
              .sections + T;
          end;
        end;

        if pressrunids[Ipre - 1].Ndeviceids < 50 then
        begin
          T := ';' + IntToStr(Dyndata[i].deviceid);
          if pos(T, pressrunids[Ipre - 1].Devices) = 0 then
          begin
            Inc(pressrunids[Ipre - 1].Ndeviceids);
            pressrunids[Ipre - 1].Deviceids[pressrunids[Ipre - 1].Ndeviceids] :=
              Dyndata[i].deviceid;
            pressrunids[Ipre - 1].Devices := pressrunids[Ipre - 1].Devices + T;
          end;
        end;

        if pressrunids[Ipre - 1].Ntowerids < 50 then
        begin
          T := ';' + Dyndata[i].TowerID;
          if pos(T, pressrunids[Ipre - 1].towers) = 0 then
          begin
            Inc(pressrunids[Ipre - 1].Ntowerids);
            pressrunids[Ipre - 1].towerids[pressrunids[Ipre - 1].Ntowerids] :=
              Dyndata[i].TowerID;
            pressrunids[Ipre - 1].towers := pressrunids[Ipre - 1].towers + T;
          end;
        end;

      end;

      if Aktsepset <> Dyndata[i].FlatSeparation then
      begin
        Aktsepset := Dyndata[i].FlatSeparation;
        if not Dyndata[i].Ignoreplate then
        begin
          Inc(pressrunids[Ipre - 1].Nplates);
          if Dyndata[i].status >= 50 then
            Inc(pressrunids[Ipre - 1].NImaged);
        end;
      end;
    end;

    for Ipre := 0 to Npressrunids - 1 do
    begin
      pressrunids[Ipre].Npages := 0;
      pressrunids[Ipre].Nnorm := 0;
      pressrunids[Ipre].NPano := 0;
      pressrunids[Ipre].Nmissing := 0;
      pressrunids[Ipre].NReceived := 0;
      pressrunids[Ipre].NApproved := 0;
      pressrunids[Ipre].NNotApproved := 0;
      pressrunids[Ipre].Nunique := 0;

      for i := pressrunids[Ipre].Start to pressrunids[Ipre].Stop do
      begin
        if not Dyndata[i].Mastfound then
        begin
          Inc(pressrunids[Ipre].Npages);
          if Dyndata[i].pagetype = 0 then
            Inc(pressrunids[Ipre].Nnorm);
          if Dyndata[i].pagetype = 1 then
            Inc(pressrunids[Ipre].NPano);
          aktmast := Dyndata[i].mastercopyseparationset;
          Dyndata[i].Mastfound := true;

          if Dyndata[i].uniquepage = 2 then
            Inc(pressrunids[Ipre].Nunique);

          AMissing := false;
          AApproved := false;

          for i2 := i to pressrunids[Ipre].Stop do
          begin
            if aktmast = Dyndata[i2].mastercopyseparationset then
            begin
              if Dyndata[i2].status = 0 then
                AMissing := true;
              if (Dyndata[i2].approved = 1) or (Dyndata[i2].approved = -1) then
                AApproved := true;
              Dyndata[i2].Mastfound := true;
            end;
          end;
          if AMissing Then
            Inc(pressrunids[Ipre].Nmissing)
          else
            Inc(pressrunids[Ipre].NReceived);

          if AApproved Then
            Inc(pressrunids[Ipre].NApproved)
          else
            Inc(pressrunids[Ipre].NNotApproved);
        end;
      end;

    end;
    for Ipre := 0 to Npressrunids - 1 do
    begin
      pressrunids[Ipre].Devices := '';
      for i := 1 to pressrunids[Ipre].Ndeviceids do
      begin
        if pressrunids[Ipre].Deviceids[i] > 0 then
        begin
          if pressrunids[Ipre].Devices <> '' then
            pressrunids[Ipre].Devices := pressrunids[Ipre].Devices + ',';
          pressrunids[Ipre].Devices := pressrunids[Ipre].Devices +
            tNames1.deviceIDtoname(pressrunids[Ipre].Deviceids[i]);
        end;
      end;

      pressrunids[Ipre].towers := '';
      for i := 1 to pressrunids[Ipre].Ntowerids do
      begin
        if pressrunids[Ipre].towerids[i] <> '' then
        begin
          if pressrunids[Ipre].towers <> '' then
            pressrunids[Ipre].towers := pressrunids[Ipre].towers + ',';
          pressrunids[Ipre].towers := pressrunids[Ipre].towers + pressrunids[Ipre].towerids[i];
        end;
      end;

      pressrunids[Ipre].sections := '';
      for i := 1 to pressrunids[Ipre].NSecids do
      begin
        if i > 1 then
          pressrunids[Ipre].sections := pressrunids[Ipre].sections + ',';
        pressrunids[Ipre].sections := pressrunids[Ipre].sections +
          tNames1.sectionidtoname(pressrunids[Ipre].Secids[i]);
      end;

      if (pressrunids[Ipre].FTPCount > pressrunids[Ipre].Npages) then
        pressrunids[Ipre].FTPCount := pressrunids[Ipre].Npages;
      if (pressrunids[Ipre].PRECount > pressrunids[Ipre].Npages) then
        pressrunids[Ipre].PRECount := pressrunids[Ipre].Npages;
      if (pressrunids[Ipre].INKCount > pressrunids[Ipre].Npages) then
        pressrunids[Ipre].INKCount := pressrunids[Ipre].Npages;
      if (pressrunids[Ipre].RIPCount > pressrunids[Ipre].Npages) then
        pressrunids[Ipre].RIPCount := pressrunids[Ipre].Npages;

    end;
    if Npressrunids > 2998 then
      Npressrunids := 2998;

    difrows := StringGridprods.RowCount <> Npressrunids + 1;

    if difrows then
    begin
      StringGridprods.Visible := false;
    end;
    StringGridprods.RowCount := Npressrunids + 1;
    IPR2 := -1;
    for Ipre := 0 to Npressrunids - 1 do
    begin
      Inc(IPR2);

      StringGridprodsdata[Ipre + 1].Selected := false;

      StringGridprodsdata[Ipre + 1].Ncopies := pressrunids[Ipre].copynumber;
      StringGridprodsdata[Ipre + 1].copynumber := pressrunids[Ipre].copynumber;
      if pressrunids[Ipre].copynumber > 1 then
      begin
        for i := 0 to pressrunids[Ipre].copynumber - 1 do
        begin
          if Ipre + 1 - i > 0 then
          begin
            StringGridprodsdata[Ipre + 1 - i].Ncopies :=
              pressrunids[Ipre].copynumber;
            StringGridprods.cells[6, Ipre + 1 - i] :=
              IntToStr(StringGridprodsdata[Ipre + 1 - i].copynumber) + ' of ' +
              IntToStr(StringGridprodsdata[Ipre + 1 - i].Ncopies);
          end;
        end;
      end;

      StringGridprodsdata[Ipre + 1].Lstat := pressrunids[Ipre].Lstat;
      StringGridprodsdata[Ipre + 1].hold := pressrunids[Ipre].hold;
      StringGridprodsdata[Ipre + 1].priority := pressrunids[Ipre].priority;
      StringGridprodsdata[Ipre + 1].pages := pressrunids[Ipre].Npages;
      StringGridprodsdata[Ipre + 1].pagesArrived := pressrunids[Ipre].NReceived;
      StringGridprodsdata[Ipre + 1].pagesApproved := pressrunids[Ipre].NApproved;
      StringGridprodsdata[Ipre + 1].plates := pressrunids[Ipre].Nplates;
      StringGridprodsdata[Ipre + 1].platesimaged := pressrunids[Ipre].NImaged;
      StringGridprodsdata[Ipre + 1].LocationID := pressrunids[Ipre].LocationID;
      StringGridprodsdata[Ipre + 1].pressid := pressrunids[Ipre].pressid;
      StringGridprodsdata[Ipre + 1].pressrunid := pressrunids[Ipre].pressrunid;
      StringGridprodsdata[Ipre + 1].ProductionID := pressrunids[Ipre].ProductionID;
      StringGridprodsdata[Ipre + 1].Publicationid := pressrunids[Ipre].Publicationid;
      StringGridprodsdata[Ipre + 1].OrderNumber := pressrunids[Ipre].OrderNumber;
      StringGridprodsdata[Ipre + 1].NSectionids := pressrunids[Ipre].NSecids;
      for i := 1 to pressrunids[Ipre].NSecids do
        StringGridprodsdata[Ipre + 1].Sectionids[i] := pressrunids[Ipre].Secids[i];
      StringGridprodsdata[Ipre + 1].NDevices := pressrunids[Ipre].Ndeviceids;
      for i := 1 to pressrunids[Ipre].Ndeviceids do
        StringGridprodsdata[Ipre + 1].Devices[i] := pressrunids[Ipre].Deviceids[i];
      StringGridprodsdata[Ipre + 1].editionid := pressrunids[Ipre].editionid;
      StringGridprodsdata[Ipre + 1].copynumber := pressrunids[Ipre].copynumber;
      StringGridprodsdata[Ipre + 1].Pubdate := pressrunids[Ipre].Pubdate;
      StringGridprodsdata[Ipre + 1].presstime := pressrunids[Ipre].presstime;
      // StringGridprodsdata[ipre+1].Presstimelength := ;
      StringGridprodsdata[Ipre + 1].ripsetupID := -1;
      if DBVersion > 1 then
        StringGridprodsdata[Ipre + 1].ripsetupID := tNames1.ripsetupnametoid(pressrunids[Ipre].Ripsetup);

      StringGridprodsdata[Ipre + 1].presssectionnumber :=pressrunids[Ipre].presssectionnumber;

      StringGridprodsdata[Ipre + 1].FTPCount := pressrunids[Ipre].FTPCount;
      StringGridprodsdata[Ipre + 1].PRECount := pressrunids[Ipre].PRECount;
      StringGridprodsdata[Ipre + 1].INKCount := pressrunids[Ipre].INKCount;
      StringGridprodsdata[Ipre + 1].RIPCount := pressrunids[Ipre].RIPCount;

      StringGridprods.cells[0, Ipre + 1] := tNames1.pressnameIDtoname
        (pressrunids[Ipre].pressid);
      StringGridprods.cells[1, Ipre + 1] := Holdrealesarray
        [pressrunids[Ipre].hold];

      if (Prefs.ProductionShowPressTime) then
      begin
        if YearOf(pressrunids[Ipre].presstime) > 2000 then
          StringGridprods.cells[2, Ipre + 1] := FormaTDateTime('dd-MM hh:mm',
            pressrunids[Ipre].presstime)
        else
          StringGridprods.cells[2, Ipre + 1] := '';
      end
      else
        StringGridprods.cells[2, Ipre + 1] :=
          IntToStr(pressrunids[Ipre].priority);

      if TreeViewprodcontrol.Selected.Level < 1 then
        StringGridprods.cells[3, Ipre + 1] :=
          datetostr(pressrunids[Ipre].Pubdate) + ' ' +
          tNames1.publicationIDtoname(pressrunids[Ipre].Publicationid)
      else
        StringGridprods.cells[3, Ipre + 1] := tNames1.publicationIDtoname
          (pressrunids[Ipre].Publicationid);
      StringGridprods.cells[4, Ipre + 1] :=
        tNames1.editionIDtoname(pressrunids[Ipre].editionid);
      StringGridprods.cells[5, Ipre + 1] := '';
      for i := 1 to pressrunids[Ipre].NSecids do
      begin
        if StringGridprods.cells[5, Ipre + 1] <> '' then
          StringGridprods.cells[5, Ipre + 1] := StringGridprods.cells[5, Ipre + 1] + ',';
        if (pressrunids[Ipre].presssectionnumber > 1) then
          StringGridprods.cells[5, Ipre + 1] := StringGridprods.cells[5, Ipre + 1] + tNames1.sectionidtoname(pressrunids[Ipre].Secids[i])
            + ' (' + IntToStr(pressrunids[Ipre].presssectionnumber) + ')'
        else
          StringGridprods.cells[5, Ipre + 1] := StringGridprods.cells[5, Ipre + 1] + tNames1.sectionidtoname(pressrunids[Ipre].Secids[i]);
      end;

      StringGridprods.cells[6, Ipre + 1] :=
        IntToStr(StringGridprodsdata[Ipre + 1].copynumber) + ' of ' +
        IntToStr(StringGridprodsdata[Ipre + 1].Ncopies);

      StringGridprods.cells[7, Ipre + 1] := '';
      Devnavnstr := '';
      Devgrpstr := '';

      for i := 1 to pressrunids[Ipre].Ndeviceids do
      begin
        if Devnavnstr <> '' then
          Devnavnstr := Devnavnstr + ',';
        Devnavnstr := Devnavnstr + tNames1.deviceIDtoname
          (pressrunids[Ipre].Deviceids[i]);
      end;

      StringGridprods.cells[7, Ipre + 1] := Devnavnstr;
      // device sættes her, se også i collonne 24
      StringGridprods.cells[8, Ipre + 1] := '';
      StringGridprods.cells[9, Ipre + 1] := IntToStr(pressrunids[Ipre].FTPCount)
        + ' of ' + IntToStr(pressrunids[Ipre].Npages);
      StringGridprods.cells[10, Ipre + 1] :=
        IntToStr(pressrunids[Ipre].PRECount) + ' of ' +
        IntToStr(pressrunids[Ipre].Npages);
      StringGridprods.cells[11, Ipre + 1] :=
        IntToStr(pressrunids[Ipre].INKCount) + ' of ' +
        IntToStr(pressrunids[Ipre].Npages);
      StringGridprods.cells[12, Ipre + 1] :=
        IntToStr(pressrunids[Ipre].RIPCount) + ' of ' +
        IntToStr(pressrunids[Ipre].Npages);

      StringGridprods.cells[13, Ipre + 1] :=
        IntToStr(pressrunids[Ipre].NReceived) + ' of ' +
        IntToStr(pressrunids[Ipre].Npages);
      StringGridprods.cells[14, Ipre + 1] :=
        IntToStr(pressrunids[Ipre].NApproved) + ' of ' +
        IntToStr(pressrunids[Ipre].Npages);
      StringGridprods.cells[15, Ipre + 1] := IntToStr(pressrunids[Ipre].NImaged)
        + ' of ' + IntToStr(pressrunids[Ipre].Nplates);
      StringGridprods.cells[16, Ipre + 1] := IntToStr(pressrunids[Ipre].Nnorm) +
        ' / ' + IntToStr(pressrunids[Ipre].NPano);
      StringGridprods.cells[17, Ipre + 1] := pressrunids[Ipre].Comment;
      StringGridprods.cells[18, Ipre + 1] := pressrunids[Ipre].inkcomment;
      StringGridprods.cells[19, Ipre + 1] := pressrunids[Ipre].OrderNumber;
      StringGridprods.cells[20, Ipre + 1] := pressrunids[Ipre].Ripsetup;
      StringGridprods.cells[21, Ipre + 1] :=
        FormatFloat('0.00', pressrunids[Ipre].Creep);
      StringGridprods.cells[22, Ipre + 1] := '';
      if pressrunids[Ipre].pageFormatID > 0 then
        StringGridprods.cells[22, Ipre + 1] :=
          tNames1.pageformatIDtoname(pressrunids[Ipre].pageFormatID);

      if (pressrunids[Ipre].PRmiscint1 > 0) AND
        (pressrunids[Ipre].pageFormatID = 0) then
      begin
        StringGridprods.cells[22, Ipre + 1] :=
          tNames1.pageformatIDtoname(pressrunids[Ipre].PRmiscint1);
      end;

      StringGridprods.cells[23, Ipre + 1] := '';
      for i := 1 to pressrunids[Ipre].Ntowerids do
      begin
        if StringGridprods.cells[23, Ipre + 1] <> '' then
          StringGridprods.cells[23, Ipre + 1] := StringGridprods.cells
            [23, Ipre + 1] + ',';
        StringGridprods.cells[23, Ipre + 1] := StringGridprods.cells
          [23, Ipre + 1] + pressrunids[Ipre].towerids[i];
      end;
      StringGridprods.cells[24, Ipre + 1] := '';
      if DeviceGroupNamesPossible then
      begin
        // Hvis der er en device group så knalder vi den sku ind i device collonen
        if (Length(inittypes.DeviceGroupIDtoName(pressrunids[Ipre].devicegrpid)) > 0) then
          StringGridprods.cells[7, Ipre + 1] := StringGridprods.cells[7, Ipre + 1] + ' (--' + inittypes.DeviceGroupIDtoName(pressrunids[Ipre].devicegrpid) + '--)';
        StringGridprods.cells[24, Ipre + 1] := inittypes.DeviceGroupIDtoName
          (pressrunids[Ipre].devicegrpid);
      end;

      StringGridprods.cells[25, Ipre + 1] :=
        IntToStr(pressrunids[Ipre].presssectionnumber);
      StringGridprods.cells[26, Ipre + 1] := pressrunids[Ipre].OutputOrder;

      if (CurrentSelectedPressRunID <> 0) AND
        (StringGridprodsdata[Ipre + 1].pressrunid = CurrentSelectedPressRunID)
      then
        StringGridprodsdata[Ipre + 1].Selected := true;

    end;

  Finally
    if not StringGridprods.Visible then
      StringGridprods.Visible := true;
    // StringGridprods.Refresh;
  end;
end;

procedure TFormMain.ActionPlatelayoutExecute(Sender: TObject);
Var
  tmpl: string;
  copyflatseparationset: string;
  tmpllistnum, i, ipage: Integer;
  Nplatesel, OddSel, Evensel, OddSelI, EvenselI, lpage: Integer;
  mergesplitdone: Boolean;
  CurrentTemplateID, newtemplateid: Integer;
  Swappagepositions: Boolean;
  AskedSwap: Boolean;
  buttonSelected: Integer;
  thisCopyFlatSeparationSet: Integer;
  thisPressRunID: Integer;
  NumberOfCopiesToChange: Integer;
begin
  mergesplitdone := false;
  Swappagepositions := false;
  AskedSwap := false;
  if not AnyPlatesselected then
    exit;

  tmpl := '';

  FormChlayout.allowMerge := false;

  tmpl := PlatetemplateArray[Views[Viewselected].platesData
    [Views[Viewselected].LPV.Selected.Index].templatelistid].TemplateName;
  tmpllistnum := Views[Viewselected].platesData
    [Views[Viewselected].LPV.Selected.Index].templatelistid;
  inittypes.getdevicelistfromtemplate(tmpllistnum);

  copyflatseparationset :=
    IntToStr(Views[Viewselected].platesData[Views[Viewselected].LPV.Selected.Index].copyflatseparationset);

  FormChlayout.Aktpressname :=
      tNames1.pressnameIDtoname(Views[Viewselected].platesData[Views[Viewselected].LPV.Selected.Index].pressid);
  FormChlayout.Curtemplate := PlatetemplateArray[tmpllistnum].TemplateName;
  FormChlayout.Allowtoshowdiv2 := -1;

  if (Prefs.AllowSelectionOfAnyLayout) then
    FormChlayout.Allowtoshowdiv2 := PlatetemplateArray[tmpllistnum]
      .NupOnplate div 2;

  FormChlayout.GroupBoxspecifikcopy.Visible := true;

  Nplatesel := 0;
  OddSel := 0;
  Evensel := 0;
  OddSelI := -1;
  EvenselI := -1;

  for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
  begin
    if Views[Viewselected].LPV.Items[i].Selected then
    begin
      Inc(Nplatesel);
      lpage := 9999;
      for ipage := 1 to Views[Viewselected].platesData[i].Npages do
      begin
        if lpage > Views[Viewselected].platesData[i].pages[ipage].pageindex then
        begin
          lpage := Views[Viewselected].platesData[i].pages[ipage].pageindex;
        end;
      end;
      if lpage mod 2 = 0 then
      begin
        Evensel := lpage;
        EvenselI := i;
      end
      else
      begin
        OddSel := lpage;
        OddSelI := i;
      end;
    end;
  end;

  FormChlayout.allowMerge := Nplatesel = 2;

  // FormChlayout.Edit1.Text := IntToStr(Nplatesel)+','+IntToStr(Evensel)+','+IntToStr(OddSel);

  if FormChlayout.ShowModal = mrOK then
  begin
    NumberOfCopiesToChange := FormChlayout.ComboBoxcopynumber.ItemIndex;
    if PlatetemplateArray[FormChlayout.Newtemplatelistid].NupOnplate = PlatetemplateArray[FormChlayout.akttmpl].NupOnplate then
    begin
      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin

          thisCopyFlatSeparationSet := Views[Viewselected].platesData[i]
            .copyflatseparationset;
          CurrentTemplateID := PlatetemplateArray[Views[Viewselected].platesData[i].templatelistid].TemplateID;
          newtemplateid := PlatetemplateArray[FormChlayout.Newtemplatelistid]
            .TemplateID;
          thisPressRunID := Views[Viewselected].platesData[i].runid;

          if newtemplateid <> CurrentTemplateID then
          begin

            // NAN 20150415 begin

            if (PlatetemplateArray[FormChlayout.Newtemplatelistid]
              .NupOnplate = 2) then
            begin
              if (PlatetemplateArray[Views[Viewselected].platesData[i]
                .templatelistid].PageRotationList[1] <> PlatetemplateArray
                [FormChlayout.Newtemplatelistid].PageRotationList[1]) AND
                (PlatetemplateArray[Views[Viewselected].platesData[i]
                .templatelistid].PageRotationList[2] <> PlatetemplateArray
                [FormChlayout.Newtemplatelistid].PageRotationList[2]) then
              begin
                if (AskedSwap = false) then
                begin
                  buttonSelected :=
                    MessageDlg
                    ('New layout has different page orientation - swap page positions?',
                    mtwarning, [mbYes, mbNo], 0);
                  if buttonSelected = mryes then
                    Swappagepositions := true;
                  AskedSwap := true;
                end;
              end;
            end;

            // NAN 20150415 END

            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add('update pagetable');
            Datam1.Query1.SQL.Add('set templateid = ' +
              IntToStr(newtemplateid));
            if (Prefs.ClearDeviceOnLayoutChange) then
              Datam1.Query1.SQL.Add(', deviceid = 0');
            Datam1.Query1.SQL.Add('where pressrunid = ' +
              IntToStr(thisPressRunID));
            // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Views[Viewselected].platesData[i].locationID));
            // Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(Views[Viewselected].platesData[i].productionID));
            if NumberOfCopiesToChange > 0 then
              Datam1.Query1.SQL.Add('and copynumber = ' +
                IntToStr(NumberOfCopiesToChange));

            Datam1.Query1.SQL.Add('and copyflatseparationset = ' +
              IntToStr(thisCopyFlatSeparationSet));

            // Datam1.Query1.SQL.Add(WeditionStr);
            trysql(Datam1.Query1);

            // NAN 20150415 begin

            if (Swappagepositions) then
            begin

              Datam1.Query1.SQL.Clear;
              Datam1.Query1.SQL.Add('update pagetable');
              Datam1.Query1.SQL.Add('set pagepositions=''0'',pageposition=0');
              Datam1.Query1.SQL.Add('where pagepositions=''1''');
              // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Views[Viewselected].platesData[i].locationID));
              // Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(Views[Viewselected].platesData[i].productionID));
              Datam1.Query1.SQL.Add('and pressrunid = ' +
                IntToStr(thisPressRunID));
              if NumberOfCopiesToChange > 0 then
                Datam1.Query1.SQL.Add('and copynumber = ' +
                  IntToStr(NumberOfCopiesToChange));
              Datam1.Query1.SQL.Add('and copyflatseparationset = ' +
                IntToStr(thisCopyFlatSeparationSet));
              // Datam1.Query1.SQL.Add(WeditionStr);
              trysql(Datam1.Query1);

              Datam1.Query1.SQL.Clear;
              Datam1.Query1.SQL.Add('update pagetable');
              Datam1.Query1.SQL.Add('set pagepositions=''1'',pageposition=1');
              Datam1.Query1.SQL.Add('where pagepositions=''2''');
              // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Views[Viewselected].platesData[i].locationID));
              // Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(Views[Viewselected].platesData[i].productionID));
              Datam1.Query1.SQL.Add('and pressrunid = ' +
                IntToStr(thisPressRunID));
              if NumberOfCopiesToChange > 0 then
                Datam1.Query1.SQL.Add('and copynumber = ' +
                  IntToStr(NumberOfCopiesToChange));
              Datam1.Query1.SQL.Add('and copyflatseparationset = ' +
                IntToStr(thisCopyFlatSeparationSet));
              // Datam1.Query1.SQL.Add(WeditionStr);
              trysql(Datam1.Query1);

              Datam1.Query1.SQL.Clear;
              Datam1.Query1.SQL.Add('update pagetable');
              Datam1.Query1.SQL.Add('set pagepositions=''2'',pageposition=2');
              Datam1.Query1.SQL.Add('where  pagepositions=''0''');
              // Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Views[Viewselected].platesData[i].locationID));
              // Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(Views[Viewselected].platesData[i].productionID));
              Datam1.Query1.SQL.Add('and pressrunid = ' +
                IntToStr(thisPressRunID));
              if NumberOfCopiesToChange > 0 then
                Datam1.Query1.SQL.Add('and copynumber = ' +
                  IntToStr(NumberOfCopiesToChange));
              Datam1.Query1.SQL.Add('and copyflatseparationset = ' +
                IntToStr(thisCopyFlatSeparationSet));
              // Datam1.Query1.SQL.Add(WeditionStr);
              trysql(Datam1.Query1);
            end;

            // NAN 20150415 END

          end;
        end;
      end;
    end
    else
    begin
      if PlatetemplateArray[FormChlayout.Newtemplatelistid].NupOnplate = PlatetemplateArray[FormChlayout.akttmpl].NupOnplate * 2
      then
      begin
        if MessageDlg(InfraLanguage1.Translate('Merge the selected plates ?'), mtConfirmation, [mbYes, mbNo], 0) = mryes then
        begin
          // Platemerger
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('exec spOutputMergeFlatsCustom ');
          Datam1.Query1.SQL.Add(' @CopyFlatSeparationSet1 = ' + IntToStr(Views[Viewselected].platesData[EvenselI].copyflatseparationset) + ',');
          Datam1.Query1.SQL.Add(' @CopyFlatSeparationSet2 = ' + IntToStr(Views[Viewselected].platesData[OddSelI].copyflatseparationset) + ',');

          Datam1.Query1.SQL.Add(' @FinalTemplateID = ' + IntToStr(PlatetemplateArray[FormChlayout.Newtemplatelistid].TemplateID));
          Datam1.Query1.ExecSQL;

          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set deviceid = 0');
          Datam1.Query1.SQL.Add(', templateid = ' + IntToStr(PlatetemplateArray[FormChlayout.Newtemplatelistid].TemplateID));
          Datam1.Query1.SQL.Add('where pagetype <> 999');
          Datam1.Query1.SQL.Add('and locationid = ' +IntToStr(Views[Viewselected].platesData[EvenselI].LocationID));
          Datam1.Query1.SQL.Add('and productionid = ' +IntToStr(Views[Viewselected].platesData[EvenselI].ProductionID));
          (* if FormChlayout.ComboBoxcopynumber.ItemIndex > 0 then
            Datam1.Query1.SQL.Add('and copynumber = ' + IntToStr(FormChlayout.ComboBoxcopynumber.ItemIndex));
          *)
          Datam1.Query1.SQL.Add('and copyflatseparationset = ' + IntToStr(Views[Viewselected].platesData[EvenselI].copyflatseparationset));

          Datam1.Query1.SQL.Add(WeditionStr);
          trysql(Datam1.Query1);



          mergesplitdone := true;

        end;
      end;

      if PlatetemplateArray[FormChlayout.Newtemplatelistid].NupOnplate = PlatetemplateArray[FormChlayout.akttmpl].NupOnplate DIV 2
      then
      begin

        // Split plates
        if MessageDlg(InfraLanguage1.Translate
          ('Split all the selected plates ?'), mtConfirmation, [mbYes, mbNo], 0)
          = mryes then
        begin
          for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
          begin
            if Views[Viewselected].LPV.Items[i].Selected then
            begin
              if FormChlayout.Newtemplatelistid <> Views[Viewselected]
                .platesData[i].templatelistid then
              begin
                Datam1.Query1.SQL.Clear;
                Datam1.Query1.SQL.Add('update pagetable');
                Datam1.Query1.SQL.Add('set deviceid = 0');
                Datam1.Query1.SQL.Add('where pagetype <> 999');
                Datam1.Query1.SQL.Add('and locationid = ' + IntToStr(Views[Viewselected].platesData[i].LocationID));
                Datam1.Query1.SQL.Add('and productionid = ' + IntToStr(Views[Viewselected].platesData[i].ProductionID));
                Datam1.Query1.SQL.Add('and copyflatseparationset = ' + IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));

                Datam1.Query1.SQL.Add(WeditionStr);
                trysql(Datam1.Query1);

                Datam1.Query1.SQL.Clear;
                Datam1.Query1.SQL.Add('exec spOutputSplitFlatsCustom ');
                Datam1.Query1.SQL.Add(' @CopyFlatSeparationSet = ' +
                  IntToStr(Views[Viewselected].platesData[i]
                  .copyflatseparationset) + ',');
                Datam1.Query1.SQL.Add(' @FinalTemplateID = ' +
                  IntToStr(PlatetemplateArray[FormChlayout.Newtemplatelistid]
                  .TemplateID));
                Datam1.Query1.ExecSQL;

                mergesplitdone := true;
              end;
            end;
          end;

        end;

      end;

    end;
  end;

  if mergesplitdone then
  begin
    ActionPlaterefreshtree.Execute;
  end
  else
    ActionplaterefreshExecute(FormMain);
end;

procedure TFormMain.ActionSplitProductExecute(Sender: TObject);
Var
  res: Integer;
  ProductionID, i: Integer;
  // anode : ttreenode;
begin
  ProductionID := 0;

  case PageControlMain.ActivePageIndex of
    VIEW_PLATES:
      begin // Plates
        if TreeViewPlateview.Selected = nil then
          exit;
        if TreeViewPlateview.Selected.Level < 2 then
          exit;
        ProductionID := TTreeViewpagestype(TreeViewPlateview.Selected.Data^)
          .ProductionID;
      end;
    VIEW_PRODUCTIONS:
      begin // Production
        if TreeViewprodcontrol.Selected = nil then
          exit;
        if TreeViewprodcontrol.Selected.Level < 0 then
          exit;
        for i := 1 to StringGridprods.RowCount do
        begin
          if StringGridprodsdata[i].Selected then
          begin
            ProductionID := StringGridprodsdata[i].ProductionID;
            break;
          end;
        end;
      end;
    VIEW_PLANS:
      begin // Planning
        if TreeViewplan.Selected = nil then
          exit;
        if TreeViewplan.Selected.Level < 2 then
          exit;
        ProductionID := Tplantreedata(TreeViewplan.Selected.Data^).ProductionID;
      end;

  end;

  if (ProductionID = 0) OR (addr(SplitProduct) = nil) then
    exit;

  Runningdll := true;
  res := ReConnectDB(DLLErrormessage);

  if (res = 1) then
    res := SplitProduct(ProductionID, DLLErrormessage);

  Runningdll := false;
  ActionPlaterefreshtreeExecute(FormMain);
  ActionplaterefreshExecute(FormMain);

end;

procedure TFormMain.ActionPlateMergeExecute(Sender: TObject);
Var
  // skaldeklarerespgadll : Integer;
  resulttat: Integer;
  // hasPressInfo : Boolean;
begin
  if (Prefs.AllowApplyPlateMerge) then
  begin
    Runningdll := true;
    resulttat := ReConnectDB(DLLErrormessage);
    if resulttat = 1 then
      ApplyPlateMerge(DLLErrormessage);
    Runningdll := false;

    ActionPlaterefreshtreeExecute(FormMain);

  end;
end;

procedure TFormMain.ActionadvancedsettingsExecute(Sender: TObject);
var
  i: Integer;
 FormSettings : TFormSettings;
begin
  if Configallowed then
  begin
    try
      FormSettings :=   TFormSettings.Create(nil);
      MainUpdateing := true;
      TreeStopit := true;

      FormSettings.Labeldialogcaption1.caption := 'Advanced settings';
      FormSettings.Labeldialogcaption2.caption :=
        'Advanced application settings for default behavior and appearance in different PlanCenter views';

      FormSettings.Advancedsettings := true;
      FormSettings.PageControl1.Align := alnone;
      FormSettings.PageControl1.Visible := false;

      FormSettings.PageControl2.Visible := true;
      FormSettings.PageControl2.Align := alclient;

      FormSettings.LoadSettingsFromPrefs; // FormSettings.readsettings(-1);

      FormSettings.ColorBoxMenuToolbar.ItemIndex :=
         FormSettings.ColorBoxMenuToolbar.Items.IndexOf(Prefs.MenuToolbarColor);
      FormSettings.ColorBoxToolbar.ItemIndex :=
          FormSettings.ColorBoxToolbar.Items.IndexOf(Prefs.ToolbarColor);
      FormSettings.ColorBoxToolbarSel.ItemIndex :=
          FormSettings.ColorBoxToolbarSel.Items.IndexOf(Prefs.ToolbarSelectedColor);

      if FormSettings.ShowModal = mrOK then
      begin


        FormSettings.SaveSettingsToPrefs();
        Prefs.SaveWarningSystem();
        Prefs.SaveIniFile();

        // InitProdCols;
        GroupBoxProdpupl.Visible := Prefs.TreeFilterOnProductionDate;

        RefresshAllpressgrpnames;
        for i := 0 to MAXTHUMBNAILS do
        begin
          CurThumbs[i].filetime := 0;
          CurThumbs[i].Lock := 0;
        end;
        Formtabs.settabvisible;
        if FormSettings.restart then
        begin
          if MessageDlg(InfraLanguage1.Translate('Restart application to apply changes.  Retart now?'),
            mtConfirmation, [mbYes, mbNo], 0) = mryes then
          begin
            FormSettings.restart := false;
            FormMain.Close;
          end;
        end;
      end;

      try
        for i := 0 to PageControlMain.PageCount - 1 do
        begin
          if PageControlMain.pages[i].Visible then
          begin
            PageControlMain.ActivePageIndex := i;
          end;
        end;

        PageControlMainChange(Self);
        (*
          PageControlMain.ActivePageIndex := VIEW_SEPARATIONS;

          Actionrefreshpagefilter.Execute;
          if TreeViewpagelist.Items.Count > 0 then
          TreeViewpagelist.Select(TreeViewpagelist.Items[0]);
        *)
      except

      end;


    finally
      FormSettings.Free;
      MainUpdateing := false;
      TreeStopit := false;
    end;
  end;

end;

// General settings dialog
procedure TFormMain.ActionprogramExecute(Sender: TObject);
var
  i: Integer;

  FormSettings : TFormSettings;
begin
  if Configallowed then
  begin
    try

      MainUpdateing := true;
      TreeStopit := true;

      FormSettings := TFormSettings.Create(nil );

      FormSettings.Labeldialogcaption1.caption := 'General settings';
      FormSettings.Labeldialogcaption2.caption :=
        'General application settings for default behavior and appearance in different PlanCenter views ';

      FormSettings.Advancedsettings := false;
      FormSettings.PageControl2.Align := alnone;
      FormSettings.PageControl2.Visible := false;

      FormSettings.PageControl1.Visible := true;
      FormSettings.PageControl1.Align := alclient;
      FormSettings.LoadSettingsFromPrefs; // FormSettings.readsettings(-1);

      FormSettings.ColorBoxMenuToolbar.ItemIndex :=
         FormSettings.ColorBoxMenuToolbar.Items.IndexOf(Prefs.MenuToolbarColor);
      FormSettings.ColorBoxToolbar.ItemIndex :=
          FormSettings.ColorBoxToolbar.Items.IndexOf(Prefs.ToolbarColor);
      FormSettings.ColorBoxToolbarSel.ItemIndex :=
          FormSettings.ColorBoxToolbarSel.Items.IndexOf(Prefs.ToolbarSelectedColor);

      if (spPlanCenterGeneratePlanPageNamesPossible = false) then
      begin
        FormSettings.CheckboxGeneratePlanPageNames.Enabled := spPlanCenterGeneratePlanPageNamesPossible;
        FormSettings.CheckboxGeneratePlanPageNames.Checked := false;
      end;

      if FormSettings.ShowModal = mrOK then
      begin

        FormSettings.SaveSettingsToPrefs; // FoxrmSettings.savesettings(-1);
        Prefs.SaveWarningSystem;
        Prefs.SaveIniFile;

        InitProdCols;
        GroupBoxProdpupl.Visible := Prefs.TreeFilterOnProductionDate;

        for i := 0 to MAXTHUMBNAILS do
        begin
          CurThumbs[i].filetime := 0;
        end;
        Formtabs.settabvisible;
        if FormSettings.restart then
        begin
          if MessageDlg(InfraLanguage1.Translate
            ('Restart application to apply changes.  Retart now?'),
            mtConfirmation, [mbYes, mbNo], 0) = mryes then
          begin
            FormSettings.restart := false;
            FormMain.Close;
          end;
        end;


        //ColorMapMenuToolbar.Color := FormSettings.ColorBoxMenuToolbar.Selected;
        //ColorMapToolBar.Color := FormSettings.ColorBoxToolbar.Selected;
        //ColorMapToolBar.SelectedColor := FormSettings.ColorBoxToolbarSel.Selected;
         ColorMapMenuToolbar.Color := Prefs.ColorBoxMenuToolbarSelected;
         ColorMapToolBar.Color := Prefs.ColorBoxToolbarSelected;
         ColorMapToolBar.SelectedColor := Prefs.ColorMapToolBarSelectedColor;


        GroupBox3.Visible := Prefs.ShowPanelUnknownFiles;
        if (GroupBox3.Visible) then
        begin
          Panel4.width := GroupBoxdevicelist.width +
            Prefs.ShowPanelUnknownFilesWidth;
          ListViewUnknownPage.width := Prefs.ShowPanelUnknownFilesWidth;
          GroupBox3.width := Prefs.ShowPanelUnknownFilesWidth;
        end;

        Panel4.Realign;
        // TimerUnplanPage.Enabled          := Prefs.ShowPanelUnknownFiles;
        // TimerUnplanPage.Interval         := Prefs.ShowPanelUnknownFilesRefreshTime * 60000;

      end;

      try
        for i := 0 to PageControlMain.PageCount - 1 do
        begin
          if PageControlMain.pages[i].Visible then
          begin
            PageControlMain.ActivePageIndex := i;
          end;
        end;

        PageControlMainChange(Self);

        (*
          PageControlMain.ActivePageIndex := VIEW_SEPARATIONS;

          Actionrefreshpagefilter.Execute;
          if TreeViewpagelist.Items.Count > 0 then
          TreeViewpagelist.Select(TreeViewpagelist.Items[0]);
        *)
      except
      end;

    finally
      TreeStopit := false;
      MainUpdateing := false;
      FormSettings.Free();
    end;
  end;
end;

procedure TFormMain.ActiondongAinkExecute(Sender: TObject);
Var
  // found : Boolean;
  // minpageindex
  // ,minmiscint
  // ,i
  // : Integer;
  wherestr: String;
begin
  if TreeViewprodcontrol.Selected = nil then
    exit;

  wherestr := makeprogwherestr('');
  // found := false;
  try
    FormdongAink.Publicationid := -1;
    FormdongAink.Pubdate := -1;
    FormdongAink.ProductionID := -1;
    FormdongAink.editionid := -1;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('Select TOP 1 publicationid,pubdate,productionid,editionid from pagetable (NOLOCK) ');
    Datam1.Query1.SQL.Add('where pressrunid = ' +
      IntToStr(StringGridprodsdata[1].pressrunid));
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
    begin
      FormdongAink.Publicationid := Datam1.Query1.Fields[0].AsInteger;
      FormdongAink.Pubdate := Datam1.Query1.Fields[1].AsDateTime;
      FormdongAink.ProductionID := Datam1.Query1.Fields[2].AsInteger;
      FormdongAink.editionid := Datam1.Query1.Fields[3].AsInteger;
    end;
    Datam1.Query1.Close;

    FormdongAink.init;
    if FormdongAink.ShowModal = mrOK then
    begin

    end;

    Newrefreshprogress;
  Except
  end;

end;

procedure TFormMain.Actiontow1Execute(Sender: TObject);
begin
  beep;
end;

procedure TFormMain.Actiontowsel1Execute(Sender: TObject);
begin
  beep;
end;

procedure TFormMain.ComboBoxplatetowersfilterChange(Sender: TObject);
begin
  ActionplaterefreshExecute(Self);
end;

procedure TFormMain.Actionprintinkreport1Execute(Sender: TObject);
begin
  Doinkplatereport(1);
end;

procedure TFormMain.Actionprintinkreport2Execute(Sender: TObject);
begin
  Doinkplatereport(2);
end;

procedure TFormMain.Doinkplatereport(Line: Longint);
Var
  i, Nplates, platenumber: Integer;
  Tstamp: TDateTime;

begin
  try
    if InkReportPlateQueuePossible then
    begin
      Nplates := 0;
      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin
          Inc(Nplates);
        end;
      end;

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('DECLARE @TimeStamp datetime');
      Datam1.Query1.SQL.Add('SET @TimeStamp=GETDATE()');
      Datam1.Query1.SQL.Add('Select @TimeStamp');
      Datam1.Query1.Open;
      Tstamp := Datam1.Query1.Fields[0].AsDateTime;
      Datam1.Query1.Close;

      platenumber := 0;
      for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
      begin
        if Views[Viewselected].LPV.Items[i].Selected then
        begin

          Inc(platenumber);
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('');
          Datam1.Query1.SQL.Add
            ('INSERT INTO  InkReportPlateQueue (CopyFlatSeparationSet,PlateNumber,NumberOfPlates,EventTime,ClientName,MiscInt)');
          Datam1.Query1.SQL.Add
            (' values(' + IntToStr(Views[Viewselected].platesData[i]
            .copyflatseparationset) + ',' + IntToStr(platenumber) + ',' +
            IntToStr(Nplates) + ',' + ':Eventparam' + ',' + '''' +
            Thisdevicename + '''' + ',' + IntToStr(Line) + ')');
          Datam1.Query1.params[0].AsDateTime := Tstamp;
          if Prefs.Debug then
            Datam1.Query1.SQL.SaveToFile
              (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
              'sqllogs\' + 'InsertInk.SQL');
          Datam1.Query1.ExecSQL;

        end;
      end;
    end;

    ActionplaterefreshExecute(FormMain);

  except
  end;
end;

procedure TFormMain.ReimagesingleColor(Color: String);
Var
  i { ,i2,productionid,aktpressid,mkres } , Colorid: Integer;
  // eventtime : TDateTime;
  // runnode : Ttreenode;
  // miscstr2,AApressInstr : String;

begin
  if PBExListviewplateinfo.Focused then
  begin
    Actionplatereimage.Execute;
  end
  else
  begin
    Colorid := tNames1.Colornametoid(Color);
    for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
    begin
      if Views[Viewselected].LPV.Items[i].Selected then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('update pagetable');
        Datam1.Query1.SQL.Add('set status = ' + Reimagetostat);

        if (Prefs.KeepOutputVersionOnReimage) then
          Datam1.Query1.SQL.Add
            (', OutputVersion = (case WHEN (OutputVersion <=0) THEN OutputVersion  else (OutputVersion -1) END)');

        Datam1.Query1.SQL.Add('where pagetype <> 999');
        Datam1.Query1.SQL.Add('and locationid = ' +
          IntToStr(Views[Viewselected].platesData[i].LocationID));
        Datam1.Query1.SQL.Add('and productionid = ' +
          IntToStr(Views[Viewselected].platesData[i].ProductionID));
        Datam1.Query1.SQL.Add('and CopyFlatSeparationSet = ' +
          IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
        Datam1.Query1.SQL.Add('And status > ' + Reimagetostat);
        Datam1.Query1.SQL.Add('and colorid = ' + IntToStr(Colorid));
        Datam1.Query1.SQL.Add('and CopyNumber = 1');
        trysql(Datam1.Query1);

      end;
    end;
    ActionplaterefreshExecute(FormMain);
  end;
end;

procedure TFormMain.ActionreimageCExecute(Sender: TObject);
begin
  ReimagesingleColor('C');
end;

procedure TFormMain.ActionreimageMExecute(Sender: TObject);
begin
  ReimagesingleColor('M');
end;

procedure TFormMain.ActionreimageYExecute(Sender: TObject);
begin
  ReimagesingleColor('Y');
end;

procedure TFormMain.ActionreimageKExecute(Sender: TObject);
begin
  ReimagesingleColor('K');
end;

procedure TFormMain.ActionplateresendInkFilesExecute(Sender: TObject);
Var
  i: Integer;

begin
  Regeninkflats.Clear;
  if not AnyPlatesselected then
    exit;
  for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
  begin
    if Views[Viewselected].LPV.Items[i].Selected then
    begin

      Regeninkflats.Add(IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
    end;
  end;
  Resendinkfiles();
end;

procedure TFormMain.ActionprintinkreportExecute(Sender: TObject);
begin
  Doinkplatereport(0);
end;

(*
  function TFormMain.GetApressactionNumber(Action : Taction): Integer;
  Var
  t : String;
  begin

  T := Taction(Action).name;
  Delete(t,1,9);
  result := StrToInt(T);

  end;
*)

procedure TFormMain.ActionsysnocaptionExecute(Sender: TObject);
begin
  beep;
end;

procedure TFormMain.Movepressgrpfilter;
begin

  SetLocationPressModeGUIVisibility();

  // Swap in 'master' filter in tree view
  if (Prefs.LocationPressFilterMode <> LOCATIONPRESSSFILTERMODE_NONE) then
  begin
    case PageControlMain.ActivePageIndex of
      VIEW_SEPARATIONS:
        begin

          GroupBoxprgp.Parent := Panel7; // GroupBoxsepgrp;
          GroupBoxprgp.Top := 10;
          ActionToolBarpagefilter.Top := 0;

          GroupBoxpageslocation.Parent := Panel7;
          GroupBoxpageslocation.Top := 10;
        end;
      VIEW_THUMBNAILS:
        begin
          GroupBoxprgp.Parent := Panel9; // GroupBoxthumbtree;
          GroupBoxprgp.Top := 10;
          GroupBoxpageslocation.Parent := Panel9;
          GroupBoxpageslocation.Top := 10;
        end;
      VIEW_PLATES:
        begin
          GroupBoxprgp.Parent := Panel12; // GroupBoxPlatefilter;
          GroupBoxprgp.Top := 10;
          GroupBoxpageslocation.Parent := Panel12;
          GroupBoxpageslocation.Top := 10;
        end;
      VIEW_PRODUCTIONS:
        begin
          GroupBoxprgp.Parent := Panel13; // GroupBoxProdfilter;
          GroupBoxprgp.Top := 10;
          GroupBoxpageslocation.Parent := Panel13;
          GroupBoxpageslocation.Top := 10;
        end;
      VIEW_EDITIONS:
        begin
          GroupBoxprgp.Parent := Panel15; // GroupBoxEDFilter;
          GroupBoxprgp.Top := 10;
          GroupBoxpageslocation.Parent := Panel15;
          GroupBoxpageslocation.Top := 10;
        end;
      VIEW_PLANS:
        begin
          GroupBoxprgp.Parent := GroupBoxPlanfilt;
          GroupBoxprgp.Top := 10;
        end;
      VIEW_LOGS:
        begin
          GroupBoxprgp.Parent := Panel24; // GroupBoxlogfilt;
          GroupBoxprgp.Top := 10;
          GroupBoxpageslocation.Parent := Panel24;
          GroupBoxpageslocation.Top := 10;
        end;
      VIEW_REPORTS:
        begin
          GroupBoxprgp.Parent := Panel28; // GroupBoxreportfilt;
          GroupBoxprgp.Top := 10;
          GroupBoxpageslocation.Parent := Panel28;
          GroupBoxpageslocation.Top := 10;
        end;

    end;

  end;

end;

procedure TFormMain.ComboBoxPressGrpChange(Sender: TObject);
var
 i: Integer;
begin
  if not activated then
    exit;

  CreatePressvisibilyINstring();

  if ((Prefs.LocationPressFilterMode = LOCATIONPRESSSFILTERMODE_PRESS) OR (Prefs.LocationPressFilterMode = LOCATIONPRESSSFILTERMODE_PRESSGROUP)) then
  begin

    if (GroupBoxdevicelist.Visible) and (ComboBoxPressGrp.Text <> 'All') then
    begin

      if FrameDeviceplacer1.ComboBoxlocationManage.Items.Count > 0 then
      begin

        for i := 0 to FrameDeviceplacer1.ComboBoxlocationManage.Items.Count - 1 do
        begin
          if Uppercase(FrameDeviceplacer1.ComboBoxlocationManage.Items[i])  = Uppercase(ComboBoxPressGrp.Text) then
          begin
            FrameDeviceplacer1.ComboBoxlocationManage.ItemIndex := i;
            FrameDeviceplacer1.ComboBoxlocationManageChange(Sender);
            break;
          end;
        end;

      end;

    end;
  end;


  case PageControlMain.ActivePageIndex of
    VIEW_SEPARATIONS:
      begin
        Actionrefreshpagefilter.Execute;
      end;
    VIEW_THUMBNAILS:
      begin
        ActionThumbnailFilterrefresh.Execute;
      end;
    VIEW_PLATES:
      begin
        ActionPlaterefreshtree.Execute;
      end;
    VIEW_PRODUCTIONS:
      begin
        Actionprogressrefreshfilter.Execute;
      end;
    VIEW_EDITIONS:
      begin
        Actionrefreshhedtree.Execute;
      end;
    VIEW_PLANS:
      begin
        Actionnewplanrefresh.Execute;
      end;
    VIEW_LOGS:
      begin
        ActionLogrefreshfilter.Execute;
      end;
    VIEW_REPORTS:
      begin
        Actionreportfilter.Execute;
      end;

  end;
end;

procedure TFormMain.SetLocationPressModeGUIVisibility();
begin

  if (Prefs.LocationPressFilterMode = LOCATIONPRESSSFILTERMODE_LOCATION) then
  begin
    ComboBoxpalocationNY.Enabled := true;
    ComboBoxpalocationNY.Visible := true;
    GroupBoxpageslocation.Visible := true;
    GroupBoxPlanlocation.Visible := true;
    GroupBoxActiveQueueLocation.Visible := true;

    ComboBoxPressGrp.Enabled := false;
    ComboBoxPressGrp.Visible := false;
    GroupBoxprgp.Visible := false;
  end
  else if (Prefs.LocationPressFilterMode = LOCATIONPRESSSFILTERMODE_NONE) then
  begin
    ComboBoxpalocationNY.Enabled := false;
    ComboBoxpalocationNY.Visible := false;
    GroupBoxPlanlocation.Visible := false;
    GroupBoxpageslocation.Visible := false;
    GroupBoxActiveQueueLocation.Visible := false;

    ComboBoxPressGrp.Enabled := false;
    ComboBoxPressGrp.Visible := false;
    GroupBoxprgp.Visible := false;
  end
  else
  begin
    ComboBoxpalocationNY.Enabled := false;
    ComboBoxpalocationNY.Visible := false;
    GroupBoxpageslocation.Visible := false;
    GroupBoxActiveQueueLocation.Visible := false;
    GroupBoxPlanlocation.Visible := false;

    ComboBoxPressGrp.Enabled := true;
    ComboBoxPressGrp.Visible := true;
    GroupBoxprgp.Visible := true;
  end;

  if (tNames1.locationnames.Count < 2) then
  begin
    ComboBoxpalocationNY.Enabled := false;
    ComboBoxpalocationNY.Visible := false;
    GroupBoxpageslocation.Visible := false;
    GroupBoxPlanlocation.Visible := false;
    GroupBoxActiveQueueLocation.Visible := false;

    Formdelpublication.ComboBoxDelLocation.Enabled := false;
    Formdelpublication2.ComboBoxDelLocation.Enabled := false;
  end;

  if (tNames1.pressnames.Count < 2) then
  begin
    ComboBoxPressGrp.Enabled := false;
    ComboBoxPressGrp.Visible := false;
    GroupBoxprgp.Visible := false;
  end;

end;

procedure TFormMain.MovePubdateFilter;
Var
  intL: Integer;
begin
  try
    intL := 94;//102;
    case PageControlMain.ActivePageIndex of
      VIEW_SEPARATIONS:
        begin
          ComboBoxGlobalPubDateFilter.Parent := Panelseptree;
          ComboBoxGlobalPubDateFilter.Top := 4;
          ComboBoxGlobalPubDateFilter.left := intL;
          // ComboBoxGlobalPubDateFilter.Width := Panelseptree.Width - intL - 2;
        end;
      VIEW_THUMBNAILS:
        begin
          ComboBoxGlobalPubDateFilter.Parent := PanelThumbTree;
          ComboBoxGlobalPubDateFilter.Top := 4;
          ComboBoxGlobalPubDateFilter.left := intL;
          // ComboBoxGlobalPubDateFilter.Width := PanelThumbTree.Width - intL - 2;
        end;
      VIEW_PLATES:
        begin
          ComboBoxGlobalPubDateFilter.Parent := PanelPlatetree;
          ComboBoxGlobalPubDateFilter.Top := 4;
          ComboBoxGlobalPubDateFilter.left := intL;
          // ComboBoxGlobalPubDateFilter.Width := PanelPlatetree.Width - intL - 2;
        end;
      VIEW_PRODUCTIONS:
        begin
          ComboBoxGlobalPubDateFilter.Parent := Panelprodtree;
          ComboBoxGlobalPubDateFilter.Top := 4;
          ComboBoxGlobalPubDateFilter.left := intL;
          // ComboBoxGlobalPubDateFilter.Width := Panelprodtree.Width - intL - 2;
        end;
      VIEW_EDITIONS:
        begin
          ComboBoxGlobalPubDateFilter.Parent := Paneledtree;
          ComboBoxGlobalPubDateFilter.Top := 4;
          ComboBoxGlobalPubDateFilter.left := intL;
          // ComboBoxGlobalPubDateFilter.Width := Paneledtree.Width - intL - 2;
        end;
      VIEW_PLANS:
        begin
        end;
      VIEW_LOGS:
        begin
          ComboBoxGlobalPubDateFilter.Parent := Panellogtree;
          ComboBoxGlobalPubDateFilter.Top := 4;
          ComboBoxGlobalPubDateFilter.left := intL;
          // ComboBoxGlobalPubDateFilter.Width := Panellogtree.Width - intL - 2;
        end;
      VIEW_REPORTS:
        begin
          ComboBoxGlobalPubDateFilter.Parent := Panelreporttree;
          ComboBoxGlobalPubDateFilter.Top := 4;
          ComboBoxGlobalPubDateFilter.left := intL;
          // ComboBoxGlobalPubDateFilter.Width := Panelreporttree.Width - intL - 2;
        end;

    end;
    // ComboBoxGlobalPubDateFilter.Width := 105;
  Except
  end;

end;

procedure TFormMain.ComboBoxGlobalPubDateFilterDropDown(Sender: TObject);
begin
  GetPosiblePubdates(-1);
end;

procedure TFormMain.ComboBoxGlobalPubDateFilterChange(Sender: TObject);
begin
  if activated then
  begin
    if ComboBoxGlobalPubDateFilter.Visible then
    begin
      if ComboBoxGlobalPubDateFilter.ItemIndex < 0 then
        ComboBoxGlobalPubDateFilter.ItemIndex := 0;
    end;

    CreatePressvisibilyINstring();

    case PageControlMain.ActivePageIndex of
      VIEW_SEPARATIONS:
        begin
          Actionrefreshpagefilter.Execute;
        end;
      VIEW_THUMBNAILS:
        begin
          ActionThumbnailFilterrefresh.Execute;
        end;
      VIEW_PLATES:
        begin
          ActionPlaterefreshtree.Execute;
        end;
      VIEW_PRODUCTIONS:
        begin
          Actionprogressrefreshfilter.Execute;
        end;
      VIEW_EDITIONS:
        begin
          Actionrefreshhedtree.Execute;
        end;
      VIEW_PLANS:
        begin
          Actionnewplanrefresh.Execute;
        end;
      VIEW_LOGS:
        begin
          ActionLogrefreshfilter.Execute;
        end;
      VIEW_REPORTS:
        begin
          Actionreportfilter.Execute;
        end;

    end;

  end;
end;

procedure TFormMain.PBExListviewthumbnailMouseUp(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
  i: Integer;
  // T : string;
begin
  StatusBar1.Panels[4].text := '';
  if (ActionCHKthumbreadorder.Checked) And (ActionCHKthumbreadorder.Enabled)
  then
  begin
    for i := 1 to PBExListviewthumbnail.Items.Count - 1 do
    begin
      case Showthubms[i].pagetype of
        2:
          begin
            if (PBExListviewthumbnail.Items[i - 1].Focused) or
              (PBExListviewthumbnail.Items[i].Focused) then
            begin
              if Showthubms[i - 1].mastercopyseparationset = Showthubms[i].mastercopyseparationset
              then
              begin
                PBExListviewthumbnail.Items[i - 1].Focused := true;
                PBExListviewthumbnail.Items[i].Focused := true;
                PBExListviewthumbnail.Items[i - 1].Selected := true;
                PBExListviewthumbnail.Items[i].Selected := true;
              end;
            end;
          end;
      end;
    end;
  end;
  StatusBar1.Panels[4].text := IntToStr(PBExListviewthumbnail.SelCount);
  ActionEnable('PBExListviewthumbnailClick');

  if ((formprev2.Active) or (formprev2.Showing)) And (Prefs.AllowParalelView)
  then
  begin
    Actionthumbnailpreview.Execute;
  end;

end;

procedure TFormMain.PBExListviewthumbnailSelectItem(Sender: TObject;
  Item: TListItem; Selected: Boolean);
var
  i: Integer;
begin
  i := 0; // debug
end;

procedure TFormMain.ComboBoxGlobalPubDateFilterCloseUp(Sender: TObject);
begin
  if ComboBoxGlobalPubDateFilter.Visible then
  begin
    if ComboBoxGlobalPubDateFilter.ItemIndex < 0 then
      ComboBoxGlobalPubDateFilter.ItemIndex := 0;
  end;
end;

procedure TFormMain.ActionThumbFileCenterRetryExecute(Sender: TObject);
Var
  i: Integer;
  // eventtime : TDateTime;
begin
  try
    if (ComboBoxPressGrp.Visible) and (ComboBoxPressGrp.ItemIndex = 0) then
    begin
      for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
      begin
        if PBExListviewthumbnail.Items[i].Selected then
        begin
          Datam1.Query2.SQL.Clear;
          Datam1.Query2.SQL.Add
            ('Select distinct mastercopyseparationset from pagetable (NOLOCK) ');
          Datam1.Query2.SQL.Add('Where PDFMaster = ' +
            IntToStr(Showthubms[PBExListviewthumbnail.Items[i].Index]
            .pdfmaster));
          Datam1.Query2.Open;
          while not Datam1.Query2.Eof do
          begin
            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add('Insert FileCenterRetryQueue values(' +
              Datam1.Query2.Fields[0].AsString + ',GETDATE())');
            Datam1.Query1.ExecSQL;
            Datam1.Query2.Next;
          end;
          Datam1.Query2.Close;
        end;
      end;
    end
    else
    begin
      for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
      begin
        if PBExListviewthumbnail.Items[i].Selected then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('Insert FileCenterRetryQueue values(' +
            IntToStr(Showthubms[PBExListviewthumbnail.Items[i].Index]
            .mastercopyseparationset) + ',GETDATE()) ');
          Datam1.Query1.ExecSQL;
        end;
      end;
    end;

    ActionThumbnailrefresh.Execute;
  except
  end;
end;

procedure TFormMain.ActionDebugsqlExecute(Sender: TObject);
begin
  // FormDebugsql.showmodal;
end;

procedure TFormMain.ActionSepReprocessExecute(Sender: TObject);
begin
  FormReprocesspages.init(false);
  FormReprocesspages.ShowModal;
end;

/// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TREE LOAD - THUMBNAILS
/// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////

procedure TFormMain.loadAPagetree(Ltree: TTreeView; frontorderstr: string;
  press: string; Location: string; Pubdatetext: String);

// Proc i loadAPagetree
  procedure setlamps(LocationID: Integer; UsePubdatefilter: Boolean;
    Pubdatefilter: TDateTime);

    procedure setparentstate(anode: TTreeNode);
    Var
      Childnode: TTreeNode;
      Statesum: Integer;
      // pnode : ttreenode;
      // aktsum : Integer;
      akthigh, nonecommon, aktnonecommon: Integer;
      sumorder: array [0 .. 10] of Integer;
    begin
      (*
        1    0      blank
        2    2      missing
        3    1      All imaged
        4    6      some missing some imaged
        5    4      All common
        6    3      received
        7    8      Imaging
        8    9      Some not approved



        sumorder[0] := 0;  //
        sumorder[2] := 1;  //
        sumorder[1] := 2;  //
        sumorder[6] := 3;  //
        sumorder[4] := 4;  //
        sumorder[3] := 5;  //
        sumorder[8] := 6;  //
        sumorder[7] := 7;  //
        sumorder[5] := 8;  // *)

      sumorder[0] := 0; // blank
      sumorder[2] := 1; // missing
      sumorder[1] := 2; // All imaged
      sumorder[3] := 3; // Some imaged
      sumorder[6] := 4; // All common
      sumorder[4] := 5; // Some received
      sumorder[9] := 6; // All imaged once
      sumorder[8] := 7; // Imaging
      sumorder[7] := 8; // Error
      sumorder[5] := 9; // Some not approved   !

      akthigh := 0;
      aktnonecommon := 0;
      Childnode := anode.GetFirstChild;
      Statesum := 0;
      nonecommon := 0;

      while Childnode <> nil do
      begin
        // aktsum := sumorder[Childnode.StateIndex];
        if (anode.Level = 2) and (Childnode.StateIndex = 6) then
        begin
        end
        else
        begin

          if Statesum < sumorder[Childnode.StateIndex] then
          begin
            Statesum := sumorder[Childnode.StateIndex];
            akthigh := Childnode.StateIndex;
          end;
        end;

        if (Childnode.StateIndex <> 6) then
        begin

          if (nonecommon < sumorder[Childnode.StateIndex]) then
          begin
            nonecommon := sumorder[Childnode.StateIndex];
            aktnonecommon := Childnode.StateIndex;
          end;
        end;

        Childnode := Childnode.getNextSibling;
      end;
      anode.StateIndex := akthigh;

      if (anode.StateIndex = 6) and (aktnonecommon > 0) then
      begin
        anode.StateIndex := aktnonecommon;
      end;
    end;

  // Body for setlamps?
  Var
    NSQLData, di: Integer;
    SQLData: Array of record pressrunid: Integer;
    status: Integer;
    uniquepage: Integer;
    approved: Integer;
    prepollstatus: Integer;
    SomeNotapproved: Boolean;
    outputversion: Integer;
  end;
Npressruns, ipr: Integer;
pressruns:
Array of record pressrunid: Integer;
State:
Integer;
OrgState:
Integer;
Anymissing:
Boolean;
Anyreceived:
Boolean;
SomeImaged:
Boolean;
AnyImaged:
Boolean;
Anyimaging:
Boolean;
anyerror:
Boolean;
AllImaged:
Boolean;
Allcommon:
Boolean;
Extstat:
Integer;
SomeNotapproved:
Boolean;
AllImagedOnce:
Boolean;
end;
aktpressRunid { ,aktlocation,Aktmaster,aktstate,aktCHKpressrunid } :
Integer;
// aktflat : int64;
ISTD, i: Integer;
DebugstatTiming:
TDateTime;

p1Whereprrunid, Whereprrunid: String;
 WeekNumber : Integer;
YearOfWeekNumber : Integer;
begin

  if (not Prefs.NoTreeLamps) then
  begin
    try
      checkfiltercount := -1;
      p1Whereprrunid := ' p1.pressrunid IN(-99';
      Whereprrunid := ' pressrunid IN(-99';

      Datam1.Querytree.SQL.Clear;
      Datam1.Querytree.SQL.Add
        ('Select distinct p1.pressrunid,p1.status,p1.uniquepage,p1.approved,max(ISNULL(PRE.Event,0)),p1.pressid,p1.outputversion from pagetable p1 (NOLOCK)');

      if (CheckBoxthumbappliedfilter.Checked) then
      begin
        Datam1.Querytree.SQL.Add
          ('INNER JOIN ProductionNames PROD WITH (NOLOCK) ON P1.ProductionID=PROD.ProductionID');
        // Datam1.Querytree.SQL.Add('INNER JOIN PressRunID PRES WITH (NOLOCK) ON P1.PressRunID=PRES.PressRunID');
      end;
      Datam1.Querytree.SQL.Add
        ('LEFT OUTER JOIN PrepollPageTable PRE WITH (NOLOCK) ON');
      Datam1.Querytree.SQL.Add
        ('P1.MasterCopySeparationSet=PRE.MasterCopySeparationSet AND PRE.Event IN (116,126,136,216)');
      Datam1.Querytree.SQL.Add
        ('Where p1.active = 1 and p1.pagetype < 3 and p1.dirty = 0 and DATEPART(year,p1.PubDate) < 2100');
      Datam1.Querytree.SQL.Add(WP1editionStr);
      Datam1.Querytree.SQL.Add(WP1publicationStr);
      if Pressvisibilylimited then
        Datam1.Querytree.SQL.Add('and (p1.pressid IN ' + PressvisibilyIN + ')');

      if LocationID <> -99 then
        Datam1.Querytree.SQL.Add('and (p1.locationid = ' +
          IntToStr(LocationID) + ')');

      if (CheckBoxthumbappliedfilter.Checked) then
        // Datam1.Querytree.SQL.Add('and (PROD.PlanType=0 OR PRES.PlanType=0)');
        Datam1.Querytree.SQL.Add('and (PROD.PlanType=0)');

      if (ComboBoxGlobalPubDateFilter.ItemIndex > 1) AND
        (ComboBoxGlobalPubDateFilter.text <> '') then
      begin
        If (not Prefs.ShowWeekNumberInTree) then
        Begin // Dato

          Pubdatefilter := StrToDate(ComboBoxGlobalPubDateFilter.text);
          Datam1.Querytree.SQL.Add(' and (' + Datam1.makedatastr('',
            Pubdatefilter) + ')');
        End
        else
        Begin // Uge nr
          WeekNumber :=   StrToInt(Copy(ComboBoxGlobalPubDateFilter.text, 1, 2));
          YearOfWeekNumber := StrToInt(Copy(ComboBoxGlobalPubDateFilter.text, 4, 8));
           if (WeekNumber = 53) AND ((YearOfWeekNumber = 2020) OR (YearOfWeekNumber = 2021)) then
            begin
                 Datam1.Querytree.SQL.Add(' and (p1.pubdate >= ''2020-12-28'')' );
                 Datam1.Querytree.SQL.Add(' and (p1.pubdate <= ''2021-01-03'')' );
            end
            else
            begin
              Pubdatefilter := StartOfAWeek(YearOfWeekNumber,   WeekNumber);
              Datam1.Querytree.SQL.Add(' and (p1.pubdate >= ''' +
                    FormaTDateTime('YYYY-MM-DD', Pubdatefilter) + ''')');
              Pubdatefilter := EndOfAWeek(YearOfWeekNumber, WeekNumber);
              Datam1.Querytree.SQL.Add(' and (p1.pubdate <= ''' +
                    FormaTDateTime('YYYY-MM-DD', Pubdatefilter) + ''')');
            end;
        End;
      end
      else
      begin
        if ComboBoxGlobalPubDateFilter.text = LabelFromtoday.caption then
        begin
          // Datam1.Querytree.SQL.Add(' and (p1.pubdate >= CONVERT (date, GETDATE()))');
          // Datam1.Querytree.SQL.Add(' and (p1.pubdate >= CAST(DATEPART(month,GETDATE()) as varchar(4)) + ''/'' + CAST(DATEPART(day,GETDATE()) as varchar(4)) + ''/'' + CAST(DATEPART(year,GETDATE()) as varchar(4)))');
          Datam1.Querytree.SQL.Add(' and (DATEDIFF(day,GETDATE(),p1.pubdate) >= 0)');
        end;
      end;

      Datam1.Querytree.SQL.Add
        ('GROUP BY p1.pressrunid,p1.status,p1.uniquepage,p1.approved,p1.pressid,p1.outputversion');
      Datam1.Querytree.SQL.Add('ORDER BY P1.pressrunid');
      if (Prefs.Debug) then
        Datam1.Querytree.SQL.SaveToFile
          (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'
          + 'alltreestat.SQL');
      Datam1.Querytree.Open;

      NSQLData := 0;
      aktpressRunid := -1;
      Npressruns := 0;
      di := 0;
      while not Datam1.Querytree.Eof do
      begin
        Inc(NSQLData);
        Inc(di);
        SetLength(SQLData, NSQLData + 100);

        SQLData[di - 1].pressrunid := Datam1.Querytree.Fields[0].AsInteger;
        SQLData[di - 1].status := Datam1.Querytree.Fields[1].AsInteger;
        SQLData[di - 1].uniquepage := Datam1.Querytree.Fields[2].AsInteger;
        SQLData[di - 1].approved := Datam1.Querytree.Fields[3].AsInteger;
        SQLData[di - 1].prepollstatus := Datam1.Querytree.Fields[4].AsInteger;
        SQLData[di - 1].outputversion := Datam1.Querytree.Fields[6].AsInteger;
        SQLData[di - 1].SomeNotapproved := (SQLData[di - 1].status > 0) AND
          (SQLData[di - 1].approved IN [0, 2]) AND
          (SQLData[di - 1].uniquepage <> 0);
        if aktpressRunid <> SQLData[di - 1].pressrunid then
        begin
          aktpressRunid := SQLData[di - 1].pressrunid;
          Inc(Npressruns);
        end;
        Datam1.Querytree.Next;
      end;
      Datam1.Querytree.Close;

      if (Prefs.ShowNewProductSign) then
      begin
        Datam1.Querytree.SQL.Clear;
        Datam1.Querytree.SQL.Add
          ('Select Count (Distinct Pressrunid) from pressrunid (NOLOCK)');
        Datam1.Querytree.Open;
        checkfiltercount := Datam1.Querytree.Fields[0].AsInteger;
        Datam1.Querytree.Close;
        Actionnewprods.Visible := false;
        Resetfilterrefreshsign;
      end;

      SetLength(pressruns, Npressruns + 100);
      for ipr := 0 to Npressruns - 1 do
      begin
        With pressruns[ipr] do
        begin
          State := -1;
          Anymissing := false;
          Anyreceived := false;
          AnyImaged := false;
          Anyimaging := false;
          anyerror := false;
          AllImaged := true;
          Allcommon := true;
          SomeNotapproved := false;
          AllImagedOnce := true;
        end;
      end;
      ipr := -1;
      aktpressRunid := -1;
      for di := 0 to NSQLData - 1 do
      begin
        if aktpressRunid <> SQLData[di].pressrunid then
        begin
          aktpressRunid := SQLData[di].pressrunid;
          Inc(ipr);
          pressruns[ipr].pressrunid := SQLData[di].pressrunid;
        end;

        With pressruns[ipr] do
        begin
          if (SQLData[di].outputversion = 0) And (SQLData[di].uniquepage > 0)
          then
            AllImagedOnce := false;
          if (SQLData[di].status = 0) And (SQLData[di].uniquepage > 0) then
            Anymissing := true;
          if (SQLData[di].status > 0) and (SQLData[di].uniquepage <> 0) then
            Anyreceived := true;
          if (SQLData[di].status IN [6, 16, 26, 36, 46, 56]) OR
            (SQLData[di].prepollstatus > 0) then
            anyerror := true
          else
          begin
            if SQLData[di].status >= 50 then
              AnyImaged := true;

            if (SQLData[di].status > 30) and (SQLData[di].status < 50) then
              Anyimaging := true;
          end;

          if (SQLData[di].status < 50) then
            AllImaged := false;
          if SQLData[di].uniquepage > 0 then
            Allcommon := false;

          if (not SomeNotapproved) and (Anyreceived) AND
            (SQLData[di].SomeNotapproved) and (not AllImaged) and
            (SQLData[di].approved in [0, 2]) then
          begin
            SomeNotapproved := true;
          end;

        end;
      end;

      for ipr := 0 to Npressruns - 1 do
      begin
        With pressruns[ipr] do
        begin
          Extstat := 0;
          State := 0;

          if Anyreceived then
            State := 1;

          if (AllImagedOnce) and (Allcommon = false) and
            (Prefs.IncludeImageOnceState) then
            State := 8;

          if SomeNotapproved then
            State := 7;

          if (AnyImaged) and (Anymissing) then
            State := 2;

          if AllImaged then
            State := 3;

          if Anyimaging then
            State := 4;

          if (Allcommon) And (State <= 1) then
            State := 5;

          if anyerror then
            State := 6;

        end;
      end;

      DebugstatTiming := NOW;

      i := MilliSecondsBetween(NOW, DebugstatTiming);

      DebugstatTiming := NOW;

      Datam1.Querytree.SQL.Clear;
      Datam1.Querytree.SQL.Add
        ('Select distinct pr.Event,pr.MasterCopySeparationSet,p1.MasterCopySeparationSet,p1.status,p1.PressRunID,pr.EventTime,p1.pressid from PrepollPageTable pr WITH (NOLOCK), pagetable p1 WITH (NOLOCK) WHERE');
      Datam1.Querytree.SQL.Add
        ('p1.MasterCopySeparationSet = pr.MasterCopySeparationSet AND DATEPART(year,p1.PubDate) < 2100');
      // Datam1.Querytree.SQL.Add(' '); //pr.Event in (130,136,116,126,146,216)
      if Pressvisibilylimited (* and Prefs.LimitPresses *) then
        Datam1.Querytree.SQL.Add('and (p1.pressid IN ' + PressvisibilyIN + ')');

      if ComboBoxGlobalPubDateFilter.ItemIndex > 1 then
      begin
        If (not Prefs.ShowWeekNumberInTree) then
        Begin // Dato
          Pubdatefilter := StrToDate(ComboBoxGlobalPubDateFilter.text);
          Datam1.Querytree.SQL.Add(' and (' + Datam1.makedatastr('',
            Pubdatefilter) + ')');
        End
        else
        Begin // Uge nr
           WeekNumber :=   StrToInt(Copy(ComboBoxGlobalPubDateFilter.text, 1, 2));
           YearOfWeekNumber := StrToInt(Copy(ComboBoxGlobalPubDateFilter.text, 4, 8));
            if (WeekNumber = 53) AND ((YearOfWeekNumber = 2020) OR (YearOfWeekNumber = 2021)) then
            begin
                 Datam1.Querytree.SQL.Add(' and (p1.pubdate >= ''2020-12-28'')' );
                 Datam1.Querytree.SQL.Add(' and (p1.pubdate <= ''2021-01-03'')' );
            end
            else
            begin
              Pubdatefilter := StartOfAWeek(YearOfWeekNumber,  WeekNumber);
              Datam1.Querytree.SQL.Add(' and (p1.pubdate >= ''' +
                FormaTDateTime('YYYY-MM-DD', Pubdatefilter) + ''')');
              Pubdatefilter := EndOfAWeek(YearOfWeekNumber, WeekNumber);
              Datam1.Querytree.SQL.Add(' and (p1.pubdate <= ''' +
                FormaTDateTime('YYYY-MM-DD', Pubdatefilter) + ''')');
            end;
        End;
      end
      else
      begin
        if ComboBoxGlobalPubDateFilter.text = LabelFromtoday.caption then
        begin
          // Datam1.Querytree.SQL.Add(' and (p1.pubdate >= CONVERT (date, GETDATE()))');
          // Datam1.Querytree.SQL.Add(' and (p1.pubdate >= CAST(DATEPART(month,GETDATE()) as varchar(4)) + ''/'' + CAST(DATEPART(day,GETDATE()) as varchar(4)) + ''/'' + CAST(DATEPART(year,GETDATE()) as varchar(4)))');
          Datam1.Querytree.SQL.Add
            (' and (DATEDIFF(day,GETDATE(),p1.pubdate) >= 0)');
        end;
      end;

      Datam1.Querytree.SQL.Add
        ('order by p1.pressrunid,p1.MasterCopySeparationSet,pr.EventTime,pr.event,p1.pressid');
      if (Prefs.Debug) then
        Datam1.Querytree.SQL.SaveToFile
          (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'
          + 'alltreestatstep2.SQL');

      i := MilliSecondsBetween(NOW, DebugstatTiming);

      for ipr := 0 to Npressruns - 1 do
      begin
        With pressruns[ipr] do
        begin
          case State of
            0:
              begin
                ISTD := 2; // 0    =  2      missing
              end;
            1:
              ISTD := 4; // 1    =  4      received
            2:
              ISTD := 3; // 2    =  3      some missing some imaged
            3:
              ISTD := 1; // 3    =  1      All imaged
            4:
              ISTD := 8; // 4    =  8      Imaging
            5:
              ISTD := 6; // 5    =  6      All common
            6:
              ISTD := 7; // 6    =  7      ERROR
            7:
              ISTD := 5; // 7    =  5      Some not approved
            8:
              ISTD := 9; // 8    =  9      All imaged once (outputversion>=1)
          else
            ISTD := 0; // blank
          end;
          State := ISTD;
        end;
      end;

      for i := 0 to Ltree.Items.Count - 1 do
      begin
        if Ltree.Items[i].Level = 4 then
        begin
          for ipr := 0 to Npressruns - 1 do
          begin
            if TTreeViewpagestype(Ltree.Items[i].Data^).pressrunid = pressruns
              [ipr].pressrunid then
            begin
              TTreeViewpagestype(Ltree.Items[i].Data^).StateIndex := pressruns[ipr].State;
              Ltree.Items[i].StateIndex :=  TTreeViewpagestype(Ltree.Items[i].Data^).StateIndex;
              break;
            end;
          end;
        end;
      end;

      // Sleep(5);

      for i := 0 to Ltree.Items.Count - 1 do
      begin
        if Ltree.Items[i].Level = 3 then
        begin
          setparentstate(Ltree.Items[i]);
        end;
      end;

      // Sleep(5);

      for i := 0 to Ltree.Items.Count - 1 do
      begin
        if Ltree.Items[i].Level = 2 then
        begin
          setparentstate(Ltree.Items[i]);
        end;
      end;

      // Sleep(5);
    Except
      writeMainlogfile('Exception in SetLamps');
    end;
  end;

end;

procedure fastsetlamps;
Var
  i: Integer;
begin
  for i := 0 to Ltree.Items.Count - 1 do
  begin
    if Ltree.Items[i].Level > 1 then
    begin
      Ltree.Items[i].StateIndex := 9;
    end;
  end;
end;

Var
  N, locationnode, productionnode, datenode, publicationnode, issuenode,
    editionnode, sectionnode, fnode: TTreeNode;
  LocationID, Publicationid, issueid, editionid, Sectionid, curlev, locationcur,
    productioncur, publicationcur, issuecur, editioncur, sectioncur, hfound,
    Publid, edid, secid: Integer;
  found: Boolean;
  pressidstr, groupstr, orderstr, selectstr, pressid: string;
  aktpubdate: TDateTime;
  i, starti: Integer;
  curnodes: Array [0 .. 7] of TTreeNode;
  trdat: PTTreeViewpagestype;

  Pdate: TDateTime;

  aktselected: TTreeNode;
  Naktseltext: Integer;
  aktseltext: array [0 .. 4] of string;
  aktproductionid, astaste, Minstate, Maxstate: Integer;
  AllImaged, allmissing, Anyimaging, anyready, anyerror, allunique,
    someimsommis: Boolean;
  Level: Integer;
  anode, Dnode, Pnode, enode, snode: TTreeNode;
  Pstate: Array [1 .. 9] of Boolean;
  Estate: Array [1 .. 9] of Boolean;
  AnySnotcommon: Boolean;
  SuperPubdatefilter: TDateTime;
  SuperPubdatefilterTo: TDateTime;
  dontaddthenode: Boolean;
  EdImidx: Integer;
  Secnodename, AkLnameT: string;
  Aktcursor: TCursor;
  DebugTiming: TDateTime;
  Fields: Integer;

  WeekNumber : Integer;
  YearOfWeekNumber : Integer;
  thisPlanType, thisProductionID,thisPlanVersion : Integer;
  dayName : string;
begin
  Aktcursor := screen.Cursor;
  if Prefs.LoggedIN then
  begin
    try
      DebugTiming := NOW;
      MainUpdateing := true;
      checkfiltercount := -1;
      starti := 1;

      Aktcursor := screen.Cursor;
      screen.Cursor := crhourglass;

      // WHY THIS!!!??
      // tnames1.Loadnames;
      writeMainlogfile('start make a pagetree ' + Ltree.Name);

      Ltree.Visible := false;

      Ltree.Items.BeginUpdate;
      keeptreesLoading := true;
      mainrefreshing := true;

      // Pause backgroup tree update thread..
      TreeStopit := true;

      LocationID := -99;
      pressid := '(-99)';

      if (ComboBoxpalocationNY.Enabled = false) or (Location = 'All') then
        Location := '*';

      if ((Location <> '*') and (Location <> '')) and (tNames1.locationnames.Count > 1) then
      begin
        LocationID := tNames1.locationnametoid(Location);
      end;

      Sellevelkinds[0] := 0;

      NSellevels := 1;

      NPublinalias := 0;
      if (Prefs.TreeExtraPublicationText[4]) then
      begin
        LoadTreePublInputalais;
      end;

      CreatePressvisibilyINstring();

      Inc(NSellevels);
      Sellevelkinds[NSellevels - 1] := 1;
      Inc(NSellevels);
      Sellevelkinds[NSellevels - 1] := 2;
      Inc(NSellevels);
      Sellevelkinds[NSellevels - 1] := 4;
      Inc(NSellevels);
      Sellevelkinds[NSellevels - 1] := 5;

      Datam1.Querytree.SQL.Clear;
      // 0              1              2            3               4          5            6              7
      if (Prefs.TreeExtraPublicationText[3]) then
        Datam1.Querytree.SQL.Add('Select distinct p1.pubdate,p1.publicationid,p1.editionid,p1.sectionid,pr.productionid,pr.plantype,c.customername,p1.miscint2')
      else
        Datam1.Querytree.SQL.Add('Select distinct p1.pubdate,p1.publicationid,p1.editionid,p1.sectionid,pr.productionid,pr.plantype,'''',p1.miscint2');
      // 8                                9   10       11       12           13           14
      Datam1.Querytree.SQL.Add(', p2.ordernumber as pressrunordernumber,1,e1.name,pl.name,p2.pressrunid,p2.InkComment,p2.comment');

      if (TimedEdPossible) then
        Datam1.Querytree.SQL.Add(', p2.TimedEditionTo,p2.TimedEditionFrom,p2.TimedEditionState');

      if (Prefs.TreeExtraEditionText[3]) OR (Prefs.TreeExtraPublicationText[8])
      then
        Datam1.Querytree.SQL.Add(',Max(p1.Presstime) as Prtid')
      else
        Datam1.Querytree.SQL.Add(',0 as Prtid');

      if (Prefs.TreeOrder = 2) then
        Datam1.Querytree.SQL.Add(',p1.PressSectionNumber ');

      if (Pressvisibilylimited) and (Prefs.TreeExtraPublicationText[6]) then
      begin
        Datam1.Querytree.SQL.Add(',IA.shortname');
      end;
      if (Prefs.SectionText[4]) then
        Datam1.Querytree.SQL.Add(',P1.Comment as Pcomment');

      if (Prefs.TreeExtraPublicationText[9]) then
        Datam1.Querytree.SQL.Add(',Pr.OrderNumber as ProrderNumber');

      if (PressRunIDPlanVersionPossible) then
        Datam1.Querytree.SQL.Add(',P2.PlanVersion as PRplanversion');

      Datam1.Querytree.SQL.Add('from pagetable p1 (NOLOCK)');
      if (Prefs.TreeExtraPublicationText[3]) then
        Datam1.Querytree.SQL.Add
          ('left outer join customernames c (NOLOCK) on p1.customerid=c.customerid');
      Datam1.Querytree.SQL.Add
        ('inner join productionnames pr (NOLOCK) on pr.productionid=p1.productionid');
      Datam1.Querytree.SQL.Add
        ('left outer join pressrunid p2 (NOLOCK) on p1.pressrunid=p2.pressrunid');
      Datam1.Querytree.SQL.Add
        ('inner join editionnames e1 (NOLOCK) on e1.editionid=p1.editionid');
      Datam1.Querytree.SQL.Add
        ('inner join PublicationNames PL (NOLOCK) on PL.publicationid=p1.publicationid');

      if Pressvisibilylimited then
      begin
        if (Prefs.TreeExtraPublicationText[6]) then
          Datam1.Querytree.SQL.Add('inner join InkAliases IA (NOLOCK) on IA.Longname=PL.name');
      end;

      Datam1.Querytree.SQL.Add('Where p1.pagetype < 3 and p1.active = 1 and p1.dirty = 0 AND DATEPART(year,p1.PubDate) < 2100');

      Datam1.Querytree.SQL.Add(WP1editionStr);
      Datam1.Querytree.SQL.Add(WP1publicationStr);

      if ((LocationID <> -99) And (GroupBoxpageslocation.Visible)) And (tNames1.locationnames.Count > 1) then
      begin
        Datam1.Querytree.SQL.Add('and p1.locationid = ' + IntToStr(LocationID));
      end;

      if (Pressvisibilylimited) (* AND (Prefs.LimitPresses) *) then
      begin
        Datam1.Querytree.SQL.Add('and p1.pressid IN ' + PressvisibilyIN);
        if (Prefs.TreeExtraPublicationText[6]) then
        begin
          Datam1.Querytree.SQL.Add('and IA.pressid IN ' + PressvisibilyIN);
        end;
      end;

      if (CheckBoxthumbappliedfilter.Checked) then
        // Datam1.Querytree.SQL.Add('and (pr.PlanType=0 OR p2.PlanType=0)');
        Datam1.Querytree.SQL.Add('and (pr.PlanType=0)');

      if (ComboBoxGlobalPubDateFilter.text = LabelAlldays.caption) OR
        (ComboBoxGlobalPubDateFilter.text = '') then
      begin
      end
      else
      begin
        if ComboBoxGlobalPubDateFilter.text = LabelFromtoday.caption then
        begin
          // Datam1.Querytree.SQL.Add(' and p1.pubdate >= CONVERT (date, GETDATE())' );
          // Datam1.Querytree.SQL.Add(' and (p1.pubdate >= CAST(DATEPART(month,GETDATE()) as varchar(4)) + ''/'' + CAST(DATEPART(day,GETDATE()) as varchar(4)) + ''/'' + CAST(DATEPART(year,GETDATE()) as varchar(4)))');
          Datam1.Querytree.SQL.Add
            (' and (DATEDIFF(day,GETDATE(),p1.pubdate) >= 0)');

        end
        else
        begin
          If (not Prefs.ShowWeekNumberInTree) then
          Begin
            SuperPubdatefilter := StrToDate(ComboBoxGlobalPubDateFilter.text);
            Datam1.Querytree.SQL.Add(' and ' + Datam1.makedatastr('p1.',
              SuperPubdatefilter));
          End
          else
          Begin

           WeekNumber :=   StrToInt(Copy(ComboBoxGlobalPubDateFilter.text, 1, 2));
           YearOfWeekNumber := StrToInt(Copy(ComboBoxGlobalPubDateFilter.text, 4, 8));
           if (WeekNumber = 53) AND ((YearOfWeekNumber = 2020) OR (YearOfWeekNumber = 2021)) then
            begin
                 Datam1.Querytree.SQL.Add(' and (p1.pubdate >= ''2020-12-28'')' );
                 Datam1.Querytree.SQL.Add(' and (p1.pubdate <= ''2021-01-03'')' );
            end
            else
            begin
              SuperPubdatefilter := StartOfAWeek(YearOfWeekNumber, WeekNumber);
              SuperPubdatefilterTo := EndOfAWeek(YearOfWeekNumber, WeekNumber);

              Datam1.Querytree.SQL.Add(' and (p1.pubdate >= ''' +
                  FormaTDateTime('YYYY-MM-DD', SuperPubdatefilter) + ''')');

              Datam1.Querytree.SQL.Add(' and (p1.pubdate <= ''' +
                  FormaTDateTime('YYYY-MM-DD', SuperPubdatefilterTo) + ''')');
              end;
          End;
        end;
      end;

      orderstr := ' p1.pubdate,pl.name,p1.publicationid';

      if (Prefs.TreeOrder = 2) then
        orderstr := orderstr + ',p1.PressSectionNumber ';

      if (Prefs.TreeOrderByEditionID) then
      begin
        if (Prefs.TreeExtraPublicationText[3]) then
          orderstr := orderstr +
            ',p1.editionid,e1.Name,p1.sectionid,pr.productionid,pr.plantype,c.customername,p1.miscint2 '
        else
          orderstr := orderstr +
            ',p1.editionid,e1.Name,p1.sectionid,pr.productionid,pr.plantype,p1.miscint2 ';

      end
      else
      begin
        if (Prefs.TreeExtraPublicationText[3]) then
          orderstr := orderstr +
            ',e1.Name,p1.editionid,p1.sectionid,pr.productionid,pr.plantype,c.customername,p1.miscint2 '
        else
          orderstr := orderstr +
            ',e1.Name,p1.editionid,p1.sectionid,pr.productionid,pr.plantype,p1.miscint2 ';
      end;
      orderstr := orderstr +
        ',p2.ordernumber,p2.pressrunid,p2.InkComment,p2.comment ';
      if (TimedEdPossible) then
        orderstr := orderstr +
          ', p2.TimedEditionTo,p2.TimedEditionFrom,p2.TimedEditionState';

      if (Pressvisibilylimited) and (Prefs.TreeExtraPublicationText[6]) then
        orderstr := orderstr + ',IA.shortname';

      if (PressRunIDPlanVersionPossible) then
        orderstr := orderstr + ',P2.PlanVersion';
      if (Prefs.SectionText[4]) then
        orderstr := orderstr + ',P1.Comment';
      if (Prefs.TreeExtraPublicationText[9]) then
        orderstr := orderstr + ',Pr.OrderNumber';

      if (Prefs.TreeExtraEditionText[3]) OR (Prefs.TreeExtraPublicationText[8])
      then
        Datam1.Querytree.SQL.Add('group by ' + orderstr);
      Datam1.Querytree.SQL.Add('order by ' + orderstr);

      if Prefs.Debug then
        Datam1.Querytree.SQL.SaveToFile
          (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'
          + 'pagetree.SQL');
      Tryopen(Datam1.Querytree);
      aktproductionid := -99;

      Ltree.Items.Clear;
      aktpubdate := NOW;

      Publicationid := -99;
      issueid := -99;
      editionid := -99;
      Sectionid := -99;

      new(trdat);
      TTreeViewpagestype(trdat^).Publicationid := -1;
      TTreeViewpagestype(trdat^).issueid := -1;
      TTreeViewpagestype(trdat^).editionid := -1;
      TTreeViewpagestype(trdat^).Sectionid := -1;
      TTreeViewpagestype(trdat^).ProductionID := -1;
      TTreeViewpagestype(trdat^).Pubdate := 0;
      TTreeViewpagestype(trdat^).kind := 0;
      TTreeViewpagestype(trdat^).weeknumber := 0;
      TTreeViewpagestype(trdat^).PagesReady := false;
      TTreeViewpagestype(trdat^).PagesIllegal := false;

      curnodes[0] := Ltree.Items.AddChildObject(nil, 'All', trdat);
      curnodes[0].ImageIndex := 64;
      curnodes[0].selectedIndex := 64;
      curnodes[0].StateIndex := -1;
      i := MilliSecondsBetween(NOW, DebugTiming);
      DebugTiming := NOW;

      while not Datam1.Querytree.Eof do
      begin
        dontaddthenode := false;

        thisPlanType := Datam1.Querytree.FieldByName('plantype').AsInteger;
        thisProductionID := Datam1.Querytree.FieldByName('productionid').AsInteger;
        if (PressRunIDPlanVersionPossible) then
          thisPlanVersion := Datam1.Querytree.FieldByName('PRplanversion').AsInteger
        else
          thisPlanVersion := 0;


        for i := 1 to NSellevels - 1 do
        begin
          case Sellevelkinds[i] of
            1:
              begin
                if (aktpubdate <> Datam1.Querytree.FieldByName('pubdate').AsDateTime) then
                begin
                  starti := i;
                  break;
                end;
              end;
            2:
              begin
                if (Publicationid <> Datam1.Querytree.FieldByName('publicationid').AsInteger) then
                begin
                  starti := i;
                  break;
                end;
              end;
            3:
              begin
                if issueid <> Datam1.Querytree.FieldByName('issueid').AsInteger
                then
                begin

                  starti := i;
                  break;
                end;
              end;
            4:
              begin
                if editionid <> Datam1.Querytree.FieldByName('editionid').AsInteger
                then
                begin
                  starti := i;
                  break;
                end;

              end;
            5:
              begin
                if (Sectionid = Datam1.Querytree.FieldByName('sectionid').AsInteger) then
                begin
                  dontaddthenode := true;
                end;
                if (Sectionid <> Datam1.Querytree.FieldByName('sectionid').AsInteger) then
                begin
                  starti := i;
                  break;
                end;
              end;
          end;
        end;

        if not dontaddthenode then
        begin
          for i := starti to NSellevels - 1 do
          begin
            new(trdat);
            TTreeViewpagestype(trdat^).Publicationid := -1;
            TTreeViewpagestype(trdat^).issueid := -1;
            TTreeViewpagestype(trdat^).editionid := -1;
            TTreeViewpagestype(trdat^).Sectionid := -1;
            TTreeViewpagestype(trdat^).Pubdate := 0;
            TTreeViewpagestype(trdat^).kind := Sellevelkinds[i];
            TTreeViewpagestype(trdat^).PagesReady := false;
            TTreeViewpagestype(trdat^).PagesIllegal := false;
            astaste := 0;

            case Sellevelkinds[i] of
              1:
                begin
                  aktpubdate := Datam1.Querytree.FieldByName('pubdate').AsDateTime;
                  curnodes[i] := Ltree.Items.AddChildObject(curnodes[i - 1],
                    datetostr(aktpubdate), trdat);
                  if (Prefs.TreeShowDayName) then
                  begin
                    dayName :=   FormaTDateTime('dddd', aktpubdate);
                    if (Length(dayName) > 0) then
                      dayName :=  UpperCase(Copy(dayName,1,1)) + Copy(dayName,2, Length(dayName)-1);
                    curnodes[i].text := curnodes[i].text + ' ' +   dayName;

                  end;
                  if (Prefs.TreeShowWeekNumberInfo) then
                  begin
                     curnodes[i].text := curnodes[i].text + ' week ' +  IntToStr(WeekOf(aktpubdate));
                  end;

                  // SJO add week nr in date
                  if (not Prefs.ShowWeekNumberInTree) then
                    curnodes[i].text := curnodes[i].text
                  else
                    curnodes[i].text := 'Week ' + IntToStr(WeekOf(aktpubdate));

                  curnodes[i].ImageIndex := 40;
                  curnodes[i].selectedIndex := 40;
                  curnodes[i].StateIndex := 0;
                  TTreeViewpagestype(curnodes[i].Data^) :=
                    TTreeViewpagestype(curnodes[i - 1].Data^);
                  TTreeViewpagestype(curnodes[i].Data^).Pubdate := aktpubdate;
                  TTreeViewpagestype(curnodes[i].Data^).kind :=
                    Sellevelkinds[i];
                  TTreeViewpagestype(curnodes[i].Data^).StateIndex := -1;
                end;
              2:
                begin
                  Publicationid := Datam1.Querytree.FieldByName('publicationid').AsInteger;
                  curnodes[i] := Ltree.Items.AddChildObject(curnodes[i - 1],
                    tNames1.publicationIDtonameReload(Publicationid), trdat);

                  if thisPlanType = 2 then
                  begin
                    curnodes[i].ImageIndex := 293;
                    curnodes[i].selectedIndex := 293;
                    curnodes[i].StateIndex := astaste;
                  end
                  else if thisPlanType = 1 then
                  begin
                    curnodes[i].ImageIndex := 185;
                    curnodes[i].selectedIndex := 185;
                    curnodes[i].StateIndex := astaste;
                  end
                  else
                  begin
                    curnodes[i].ImageIndex := 16;
                    curnodes[i].selectedIndex := 16;
                    curnodes[i].StateIndex := astaste;
                  end;
                  TTreeViewpagestype(curnodes[i].Data^) := TTreeViewpagestype(curnodes[i - 1].Data^);
                  TTreeViewpagestype(curnodes[i].Data^).Publicationid :=Publicationid;
                  TTreeViewpagestype(curnodes[i].Data^).kind :=  Sellevelkinds[i];
                  TTreeViewpagestype(curnodes[i].Data^).weeknumber := Datam1.Querytree.FieldByName('miscint2').AsInteger;
                  TTreeViewpagestype(curnodes[i].Data^).ProductionID := thisProductionID;

                  TTreeViewpagestype(curnodes[i].Data^).StateIndex := -1;
                  TTreeViewpagestype(curnodes[i].Data^).PagesReady := false;
                  TTreeViewpagestype(curnodes[i].Data^).PagesIllegal := false;
                  if (PressRunIDPlanVersionPossible) then
                  begin
                    if (thisPlanVersion > 1) and (thisPlanVersion < 8) then
                      TTreeViewpagestype(curnodes[i].Data^).PagesReady := true;
                    if (thisPlanVersion >= 8) then
                      TTreeViewpagestype(curnodes[i].Data^).PagesIllegal := true;
                  end;

                  // Ink alias
                  if ((Prefs.TreeExtraPublicationText[6]) and
                    (Pressvisibilylimited)) then
                  begin
                    if (Datam1.Querytree.FieldByName('shortname').AsString <> '')
                    then
                      curnodes[i].text := Datam1.Querytree.FieldByName
                        ('shortname').AsString + ' / ' +
                        tNames1.publicationIDtonameReload(Publicationid)
                  end;

                  // InkComment
                  if (Prefs.TreeExtraPublicationText[5]) and
                    (Datam1.Querytree.FieldByName('InkComment').AsString <> '')
                  then
                    curnodes[i].text := curnodes[i].text + ' / ' +
                      Datam1.Querytree.FieldByName('InkComment').AsString;
                  // Weeknumber
                  if (Prefs.TreeExtraPublicationText[0]) and
                    (Datam1.Querytree.FieldByName('miscint2').AsInteger > 0)
                  then
                    curnodes[i].text := curnodes[i].text + ' / ' +
                      Datam1.Querytree.FieldByName('miscint2').AsString;

                  // Pressrun order number
                  if (Prefs.TreeExtraPublicationText[1]) and
                    (Datam1.Querytree.Fields[8].AsString <> '') then
                    curnodes[i].text := curnodes[i].text + ' / ' +
                      Datam1.Querytree.Fields[8].AsString;
                  // Pressrun comment
                  if (Prefs.TreeExtraPublicationText[2]) and
                    (Datam1.Querytree.Fields[14].AsString <> '') then
                    curnodes[i].text := curnodes[i].text + ' / ' +
                      Datam1.Querytree.Fields[14].AsString;
                  // Customer
                  if (Prefs.TreeExtraPublicationText[3]) and
                    (Datam1.Querytree.Fields[6].AsString <> '') then
                    curnodes[i].text := curnodes[i].text + ' / ' +
                      Datam1.Querytree.Fields[6].AsString;
                  // Input alias
                  if (Prefs.TreeExtraPublicationText[4]) then
                  begin
                    AkLnameT := getTreePublInputalais
                      (TTreeViewpagestype(curnodes[i].Data^).Publicationid);
                    if AkLnameT <> '' then
                    begin
                      if (Prefs.TreeShowAliasFirst) then
                        curnodes[i].text := AkLnameT + ' / ' + curnodes[i].text
                      else
                        curnodes[i].text := curnodes[i].text + ' / ' + AkLnameT;
                    end;
                  end;
                  // Press time
                  if (Prefs.TreeExtraPublicationText[8]) and
                    (YearOf(Datam1.Querytree.FieldByName('Prtid').AsDateTime) >
                    2000) then
                    curnodes[i].text := curnodes[i].text + ' / ' +
                      FormaTDateTime('dd-hh:mm',
                      Datam1.Querytree.FieldByName('Prtid').AsDateTime);
                  // Production ordernumber
                  if (Prefs.TreeExtraPublicationText[9]) AND
                    (Datam1.Querytree.FieldByName('ProrderNumber').AsString
                    <> '') then
                    curnodes[i].text := curnodes[i].text + ' / ' +
                      Datam1.Querytree.FieldByName('ProrderNumber').AsString;

                end;
              3:
                begin
                  issueid := Datam1.Querytree.FieldByName('issueid').AsInteger;
                  curnodes[i] := Ltree.Items.AddChildObject(curnodes[i - 1],
                    tNames1.issueIDtoname(issueid), trdat);
                  curnodes[i].ImageIndex := 23;
                  curnodes[i].selectedIndex := 23;
                  curnodes[i].StateIndex := astaste;
                  TTreeViewpagestype(curnodes[i].Data^) :=
                    TTreeViewpagestype(curnodes[i - 1].Data^);
                  TTreeViewpagestype(curnodes[i].Data^).issueid := issueid;
                  TTreeViewpagestype(curnodes[i].Data^).kind :=
                    Sellevelkinds[i];
                  TTreeViewpagestype(curnodes[i].Data^).ProductionID :=  thisProductionID;

                  TTreeViewpagestype(curnodes[i].Data^).StateIndex := -1;


                  TTreeViewpagestype(curnodes[i].Data^).PagesReady := false;
                  TTreeViewpagestype(curnodes[i].Data^).PagesIllegal := false;
                  if (PressRunIDPlanVersionPossible) then
                  begin
                    if (thisPlanVersion > 1) and (thisPlanVersion < 8) then
                      TTreeViewpagestype(curnodes[i].Data^).PagesReady := true;
                    if (thisPlanVersion  >= 8) then
                      TTreeViewpagestype(curnodes[i].Data^).PagesIllegal := true;
                  end;

                end;
              4:
                begin
                  editionid := Datam1.Querytree.FieldByName('editionid').AsInteger;

                  curnodes[i] := Ltree.Items.AddChildObject(curnodes[i - 1], tNames1.editionIDtoname(editionid), trdat);

                  EdImidx := 11;

                  TTreeViewpagestype(curnodes[i].Data^) :=TTreeViewpagestype(curnodes[i - 1].Data^);
                  TTreeViewpagestype(curnodes[i].Data^).editionid := editionid;
                  TTreeViewpagestype(curnodes[i].Data^).kind := Sellevelkinds[i];
                  TTreeViewpagestype(curnodes[i].Data^).ProductionID := thisProductionID;
                  TTreeViewpagestype(curnodes[i].Data^).StateIndex := -1;
                  if (TimedEdPossible) then
                  begin
                    TTreeViewpagestype(curnodes[i].Data^).TimedTo := Datam1.Querytree.FieldByName('TimedEditionTo').AsInteger;
                    TTreeViewpagestype(curnodes[i].Data^).TimedFrom := Datam1.Querytree.FieldByName('TimedEditionFrom').AsInteger;
                    TTreeViewpagestype(curnodes[i].Data^).timedState := Datam1.Querytree.FieldByName('TimedEditionState').AsInteger;

                    if TTreeViewpagestype(curnodes[i].Data^).TimedFrom > 0 then
                    begin
                      case TTreeViewpagestype(curnodes[i].Data^).timedState OF
                        0:
                          begin
                            EdImidx := 243;
                          end;
                        1 .. 2:
                          begin
                            EdImidx := 227;
                          end;
                        10:
                          begin
                            EdImidx := 229;
                          end;

                      end;
                    end
                    else
                    begin
                      if TTreeViewpagestype(curnodes[i].Data^).timedState = 10
                      then
                      begin
                        EdImidx := 229;
                      end;

                    end;
                  end;

                  TTreeViewpagestype(curnodes[i].Data^).PagesReady := false;
                  TTreeViewpagestype(curnodes[i].Data^).PagesIllegal := false;
                  if (PressRunIDPlanVersionPossible) then
                  begin
                    if (thisPlanVersion > 1) and (thisPlanVersion < 8) then
                      TTreeViewpagestype(curnodes[i].Data^).PagesReady := true;
                    if (thisPlanVersion >= 8) then
                      TTreeViewpagestype(curnodes[i].Data^).PagesIllegal := true;
                  end;

                  curnodes[i].ImageIndex := EdImidx;
                  curnodes[i].selectedIndex := EdImidx;
                  curnodes[i].StateIndex := astaste;
                  if (Prefs.TreeExtraEditionText[0]) and
                    (Datam1.Querytree.Fields[13].AsString <> '') then
                    curnodes[i].text := curnodes[i].text + ' / ' +
                      Datam1.Querytree.Fields[13].AsString;
                  if (Prefs.TreeExtraEditionText[1]) and
                    (Datam1.Querytree.Fields[14].AsString <> '') then
                    curnodes[i].text := curnodes[i].text + ' / ' +
                      Datam1.Querytree.Fields[14].AsString;
                  if (Prefs.TreeExtraEditionText[2]) and
                    (Datam1.Querytree.Fields[8].AsString <> '') then
                    curnodes[i].text := curnodes[i].text + ' / ' +
                      Datam1.Querytree.Fields[8].AsString;

                  if (Prefs.TreeExtraEditionText[3]) and
                    (YearOf(Datam1.Querytree.FieldByName('Prtid').AsDateTime) >
                    2000) then
                    curnodes[i].text := curnodes[i].text + ' / ' +
                      FormaTDateTime('dd-hh:mm',
                      Datam1.Querytree.FieldByName('Prtid').AsDateTime);

                end;
              5:
                begin
                  Sectionid := Datam1.Querytree.FieldByName('sectionid').AsInteger;

                  Secnodename := tNames1.sectionidtoname(Sectionid);
                  if (Prefs.SectionText[0]) then
                    Secnodename := Secnodename + ' / ' + Datam1.Querytree.Fields[14].AsString;
                  if (Prefs.SectionText[4]) then
                  begin
                    if (Datam1.Querytree.FieldByName('pcomment').AsString <> '')
                    then
                      Secnodename := Secnodename + ' (' +
                        Datam1.Querytree.FieldByName('pcomment').AsString + ')';
                  end;

                  curnodes[i] := Ltree.Items.AddChildObject(curnodes[i - 1],
                    Secnodename, trdat);
                  curnodes[i].ImageIndex := 0;
                  curnodes[i].selectedIndex := 0;
                  curnodes[i].StateIndex := astaste;
                  TTreeViewpagestype(curnodes[i].Data^) :=
                    TTreeViewpagestype(curnodes[i - 1].Data^);
                  TTreeViewpagestype(curnodes[i].Data^).Sectionid := Sectionid;
                  TTreeViewpagestype(curnodes[i].Data^).kind :=
                    Sellevelkinds[i];
                  TTreeViewpagestype(curnodes[i].Data^).ProductionID :=  thisProductionID;

                  TTreeViewpagestype(curnodes[i].Data^).StateIndex := -1;
                  TTreeViewpagestype(curnodes[i].Data^).pressrunid :=
                    Datam1.Querytree.FieldByName('pressrunid').AsInteger;
                  TTreeViewpagestype(curnodes[i].Data^).Publicationid :=
                    Datam1.Querytree.FieldByName('publicationid').AsInteger;
                  TTreeViewpagestype(curnodes[i].Data^).editionid :=
                    Datam1.Querytree.FieldByName('editionid').AsInteger;
                  TTreeViewpagestype(curnodes[i].Data^).Sectionid :=
                    Datam1.Querytree.FieldByName('sectionid').AsInteger;

                  TTreeViewpagestype(curnodes[i].Data^).PagesReady := false;
                  TTreeViewpagestype(curnodes[i].Data^).PagesIllegal := false;
                  if (PressRunIDPlanVersionPossible) then
                  begin
                    if (thisPlanVersion > 1) and (thisPlanVersion < 8) then
                      TTreeViewpagestype(curnodes[i].Data^).PagesReady := true;
                    if (thisPlanVersion >= 8) then
                      TTreeViewpagestype(curnodes[i].Data^).PagesIllegal := true;
                  end;
                  // TTreeViewpagestype(curnodes[i].data^).PublItree := curnodes[i].Parent.Parent.AbsoluteIndex;
                  // TTreeViewpagestype(curnodes[i].data^).EdItree := curnodes[i].Parent.AbsoluteIndex;
                end;
            end;
          end;
        end;

        Publicationid := Datam1.Querytree.FieldByName('publicationid').AsInteger;
        aktpubdate := Datam1.Querytree.FieldByName('pubdate').AsDateTime;
        ReplaceTime(aktpubdate, EncodeTime(0, 0, 0, 0));

        if tNames1.issuenames.Count > 1 then
        begin
          issueid := 1;
          // Datam1.Querytree.FieldByName('issueid').AsInteger;
        end;

        if tNames1.editionnames.Count > 1 then
        begin
          editionid := Datam1.Querytree.FieldByName('editionid').AsInteger;
        end;

        if tNames1.sectionnames.Count > 1 then
        begin
          Sectionid := Datam1.Querytree.FieldByName('sectionid').AsInteger;
        end;

        Datam1.Querytree.Next;
      end;
      Datam1.Querytree.Close;

      i := MilliSecondsBetween(NOW, DebugTiming);
      DebugTiming := NOW;

      if (Prefs.ShowNewProductSign) then
      begin
        Datam1.Querytree.SQL.Clear;
        Datam1.Querytree.SQL.Add
          ('Select Count (Distinct Pressrunid) from pressrunid (NOLOCK)');
        Datam1.Querytree.Open;
        if not Datam1.Querytree.Eof then
          checkfiltercount := Datam1.Querytree.Fields[0].AsInteger;
        Datam1.Querytree.Close;
        Actionnewprods.Visible := false;
        Resetfilterrefreshsign;
      end;

      If (not Prefs.ShowWeekNumberInTree) then
        setlamps(LocationID, false, SuperPubdatefilter)
      else
        setlamps(LocationID, false, StrToDate('26-12-2015'));

      if not Prefs.KeepTreeExpansion then
      begin
        for i := 0 to Ltree.Items.Count - 1 do
        begin
          if (Ltree.Items[i].Level < Prefs.SeparationMinTreeLevel) then
            Ltree.Items[i].Expand(false);
        end;
      End
      else
      begin

      end;
    Finally
      i := MilliSecondsBetween(NOW, DebugTiming);

      DebugTiming := NOW;

      Loadkeeptrees(Location, Ltree);
      Resetfilterrefreshsign;
      TreeViewPlateview.Visible := true;
      Ltree.Items.EndUpdate;
      Ltree.Visible := true;
      TreeStopit := false;
      MainUpdateing := false;
      keeptreesLoading := false;
      try
        begin
          case PageControlMain.ActivePageIndex of
            VIEW_SEPARATIONS:
              begin
                if TreeViewpagelist.Selected <> nil then
                begin
                  GSelpubdate := 0;
                  GSelpubid := -1;
                  N := TreeViewpagelist.Selected;
                  while N.Level > 0 do
                  begin
                    case TTreeViewpagestype(N.Data^).kind of
                      // 0=all,1=location,2=publication,pubdate,3=issue,4=edition,5=section
                      1:
                        GSelpubdate := TTreeViewpagestype(N.Data^).Pubdate;
                      2:
                        GSelpubid := TTreeViewpagestype(N.Data^).Publicationid;
                    end;
                    N := N.Parent;
                  end;
                end;
                Actionrefreshpages.Execute;
              end;
            VIEW_THUMBNAILS:
              ActionThumbnailrefresh.Execute;
            VIEW_PRODUCTIONS:
              ActionProgressrefresh.Execute;
            VIEW_EDITIONS:
              ActionEditionrefresh.Execute;
            // VIEW_LOGS : ActionLogrefresh.Execute;
            // VIEW_REPORTS : Actionreportrefresh.Execute;
          end;
        end;
      Except
        ;
      end;
      Ltree.SetFocus;

      screen.Cursor := Aktcursor;
      i := MilliSecondsBetween(NOW, DebugTiming);
      DebugTiming := NOW;

    end;
    TreeStopit := false;
  end;
end;

procedure TFormMain.getallarkdate;
(*
  function chkthename(filename : String):Boolean;
  Var
  I : Integer;
  T : String;
  begin
  try
  result := true;
  if Length(filename) = 10 then
  begin
  t := Copy(filename,1,4);
  I := StrToInt(t);
  t := Copy(filename,6,2);
  I := StrToInt(t);
  t := Copy(filename,9,2);
  I := StrToInt(t);
  end
  else
  result := false;
  except
  result := false;
  end;
  end;
*)
Var
  f: TSearchRec;
  fres: Integer;
  i: Integer;
  aktsel: String;
begin
  try
    if (Prefs.EnableArchive) then
    begin

      aktsel := '';
      if ComboBoxArkdate.text <> '' then
        aktsel := ComboBoxArkdate.text;
      ComboBoxArkdate.Items.Clear;
      ComboBoxArkdate.Items.Add('All');

      fres := FindFirst(PDFarchivepath + '\*.*', faDirectory, f);
      while fres = 0 do
      begin
        if (f.Name <> '.') and (f.Name <> '..') then
        begin
          // if Chkthename(f.Name) then
          ComboBoxArkdate.Items.Add(f.Name);
        end;
        fres := findnext(f);
      end;
      FindClose(f);

      if aktsel <> '' then
      begin
        i := ComboBoxArkdate.Items.IndexOf(aktsel);
        if i > -1 then
          ComboBoxArkdate.ItemIndex := i
        else
          ComboBoxArkdate.ItemIndex := 0;
      end
      else
      begin
        ComboBoxArkdate.ItemIndex := 0;
      end;
    end;
  Except
  end;
end;

procedure TFormMain.getArktree;
Var
  f: TSearchRec;
  fres: Integer;
  i: Integer;
  aktsel, dstr: String;
  anode, Dnode, Pnode: TTreeNode;

begin
  try
    TreeViewArk.Items.BeginUpdate;
    try
      if (Prefs.EnableArchive) then
      begin

        TreeViewArk.Items.Clear;

        aktsel := '';
        if ComboBoxArkdate.text <> '' then
          aktsel := ComboBoxArkdate.text;

        // and (f.Attr <> faDirectory)
        anode := TreeViewArk.Items.AddChildObject(nil, 'none', nil);
        TreeViewArk.Items[0].ImageIndex := 64;
        TreeViewArk.Items[0].selectedIndex := 64;

        if ComboBoxArkdate.ItemIndex > 0 then
        begin
          i := ComboBoxArkdate.ItemIndex;
          dstr := ComboBoxArkdate.Items[i];

          Dnode := TreeViewArk.Items.AddChildObject(anode,
            ComboBoxArkdate.Items[i], nil);
          Dnode.ImageIndex := 40;
          Dnode.selectedIndex := 40;

          aktsel := '\' + ComboBoxArkdate.Items[i];
          fres := FindFirst(PDFarchivepath + aktsel + '\*.*', faDirectory, f);
          Dnode.Expand(false);
          while fres = 0 do
          begin
            if (f.Name <> '.') and (f.Name <> '..') and (f.Attr = faDirectory)
              and (Uppercase(f.Name) <> 'LOGS') and
              (Uppercase(f.Name) <> 'WEB.CONFIG') then
            begin

              Pnode := TreeViewArk.Items.AddChildObject(Dnode, f.Name, nil);
              Pnode.ImageIndex := 16;
              Pnode.selectedIndex := 16;
            end;
            fres := findnext(f);
          end;
          FindClose(f);

        end
        else
        begin
          for i := 1 to ComboBoxArkdate.Items.Count - 1 do
          begin
            // New(trdat);
            dstr := ComboBoxArkdate.Items[i];
            // 2013-08-01
            Dnode := TreeViewArk.Items.AddChildObject(anode,
              ComboBoxArkdate.Items[i], nil);
            Dnode.ImageIndex := 40;
            Dnode.selectedIndex := 40;
            Dnode.Expand(false);

            aktsel := '\' + ComboBoxArkdate.Items[i];
            fres := FindFirst(PDFarchivepath + aktsel + '\*.*', faDirectory, f);
            while fres = 0 do
            begin
              if (f.Name <> '.') and (f.Name <> '..') and (f.Attr = faDirectory)
                and (Uppercase(f.Name) <> 'LOGS') and
                (Uppercase(f.Name) <> 'WEB.CONFIG') then
              begin
                Pnode := TreeViewArk.Items.AddChildObject(Dnode, f.Name, nil);
                Pnode.ImageIndex := 16;
                Pnode.selectedIndex := 16;

              end;
              fres := findnext(f);
            end;
            FindClose(f);

          end;
        end;
        TreeViewArk.Items[0].ImageIndex := 64;
        TreeViewArk.Items[0].selectedIndex := 64;
        TreeViewArk.Items[0].Expand(false);

      end;
    Except
    end;
  Finally
    TreeViewArk.Items.EndUpdate;
  end;
end;

procedure TFormMain.ActionArkfilterExecute(Sender: TObject);
begin
  getallarkdate;
  getArktree;
end;

procedure TFormMain.ComboBoxArkdateChange(Sender: TObject);
begin
  // Edit1.Text := ComboBoxArkdate.Text;         DEBUG purpose
end;

procedure TFormMain.PageControlfilesChange(Sender: TObject);
begin
  case PageControlfiles.ActivePageIndex of
    0:
      begin
        Actionmontorrefresh.Execute;
      end;
    1:
      begin
        ActionunPDFrefresh.Execute;

      end;
    2:
      begin
        getallarkdate;
        getArktree;
      end;
  end;
end;

procedure TFormMain.getArkFiles;
Var
  f: TSearchRec;
  fres: Integer;
  aktsel, InputFolder: string;
  L: TListItem;
  logFile: TIniFile;
  excludeFile: Boolean;

begin
  Try
    excludeFile := false;
    ListViewArk.Items.BeginUpdate;
    ListViewArk.Items.Clear;
    if TreeViewArk.Selected.Level > 0 then
    begin
      if TreeViewArk.Selected.Level > 1 then
        aktsel := PDFarchivepath + '\' + TreeViewArk.Selected.Parent.text + '\'
          + TreeViewArk.Selected.text
      else
        aktsel := PDFarchivepath + '\' + TreeViewArk.Selected.text;

      fres := FindFirst(aktsel + '\*.*', faAnyFile, f);

      while (fres = 0) do
      begin
        excludeFile := false;
        if (Prefs.ExcludeArchiveFilter <> '') then
        begin
          if (ExecRegExpr(Prefs.ExcludeArchiveFilter, f.Name)) then
            excludeFile := true;
        end;

        if (f.Name <> '.') and (f.Name <> '..') and (f.Attr <> faDirectory) and
          (excludeFile = false) then
        begin
          L := ListViewArk.Items.Add;
          L.caption := f.Name;
          logFile := TIniFile.Create(aktsel + '\logs\' + f.Name + '.txt');
          InputFolder := logFile.ReadString('LogFile', 'InputFolder', '');
          if InputFolder <> '' then
          begin
            L.SubItems.Add(InputFolder);
            L.SubItems.Add(logFile.ReadString('LogFile', 'Time', ''));
            L.SubItems.Add(aktsel + '\' + f.Name);
            L.SubItems.Add(aktsel + '\logs\' + f.Name + '.txt');
            if TreeViewArk.Selected.Level > 1 then
            begin
              L.SubItems.Add('1');
              L.SubItems.Add(TreeViewArk.Selected.Parent.text);
              L.SubItems.Add(TreeViewArk.Selected.text);

            End
            else
            begin
              L.SubItems.Add('0');
            end;
          end
          else
          begin
            L.SubItems.Add('Log missing');
            L.SubItems.Add('');
            L.SubItems.Add(aktsel + f.Name);
            L.SubItems.Add(aktsel + '\logs\' + f.Name + '.txt');
          end;
          logFile.free;
        end;
        fres := findnext(f);
      end;
      FindClose(f);

    end;

    ListViewArk.Items.EndUpdate;
  Except
  end;
end;

procedure TFormMain.ActionArktreedeleteExecute(Sender: TObject);
  procedure DeleteDirectory(const DirName: string);
  var
    FileOp: TSHFileOpStruct;
  begin
    FillChar(FileOp, SizeOf(FileOp), 0);
    FileOp.wFunc := FO_DELETE;
    FileOp.pFrom := PChar(DirName + #0); // double zero-terminated
    FileOp.fFlags := FOF_SILENT or FOF_NOERRORUI or FOF_NOCONFIRMATION;
    SHFileOperation(FileOp);
  end;

var
  fname, messtxt: String;
begin
  if TreeViewArk.Selected <> nil then
  begin
    if TreeViewArk.Selected.Level > 0 then
    begin
      if TreeViewArk.Selected.Level > 1 then
      begin
        fname := TreeViewArk.Selected.Parent.text + '\' +
          TreeViewArk.Selected.text;
        messtxt := 'Delete Archive ' + fname + ' with all its files ?';
      End
      else
      begin
        fname := TreeViewArk.Selected.text;
        messtxt := 'Delete all Archives under ' + fname + ' ?';
      end;
      if MessageDlg(messtxt, mtConfirmation, [mbYes, mbNo], 0) = mryes then
      begin
        DeleteDirectory(PDFarchivepath + '\' + fname);
      end;
    end;
  end;
end;

procedure TFormMain.TreeViewArkChange(Sender: TObject; Node: TTreeNode);
begin
  getArkFiles;
end;

procedure TFormMain.ActionArkretryfileExecute(Sender: TObject);
Var
  i { ,i2 } : Integer;
  fromfile { ,t,tofile } , errorpath, publstr, PubDateStr: String;
  someerror: Boolean;
  treeitem1, treeitem2: TTreeNode;
begin
  if ListViewArk.Items.Count > 0 then
  begin
    someerror := false;
    errorpath := '';
    publstr := '';
    PubDateStr := '';
    for i := 0 to ListViewArk.Items.Count - 1 do
    begin
      if ListViewArk.Items[i].Selected then
      begin

        treeitem2 := TreeViewArk.Selected;
        treeitem1 := treeitem2.Parent;
        if Uppercase(treeitem2.text) = 'UNKNOWN' then
        begin
          publstr := treeitem2.text;
          PubDateStr := '';
        end
        else
        begin
          publstr := treeitem2.text;
          PubDateStr := treeitem1.text;
        end;
        fromfile := ListViewArk.Items[i].caption;
        Datam1.Query3.SQL.Clear;
        Datam1.Query3.SQL.Add('DECLARE @TimeStamp datetime');
        Datam1.Query3.SQL.Add('SET @TimeStamp=GETDATE()');
        Datam1.Query3.SQL.Add('Insert FileCenterRetryQueueFileName values (');
        Datam1.Query3.SQL.Add('''' + PubDateStr + '''' + ',');
        Datam1.Query3.SQL.Add('''' + publstr + '''' + ',');
        Datam1.Query3.SQL.Add('''' + fromfile + '''' + ',');
        Datam1.Query3.SQL.Add('@TimeStamp)');
        if Prefs.Debug then
          Datam1.Query3.SQL.SaveToFile
            (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
            'sqllogs\' + 'FileCenterretryQueueFileName.SQL');
        Datam1.Query3.ExecSQL;
      end;
    end;
  end;
end;

procedure TFormMain.ActionArkpreviewExecute(Sender: TObject);
begin
  if ListViewArk.Items.Count > 0 then
  begin
    if ListViewArk.Selected <> nil then
    begin
      PrevAsinglefilePdfOrtif(ListViewArk.Selected.SubItems[2]);
    end;
  end;

end;

procedure TFormMain.PrevAsinglefilePdfOrtif(filename: String);

Var
  filetoview: String;
begin
  try
    filetoview := filename;

    if IsPDFFile(PChar(filetoview)) > 0 then
    begin
      TUtils.ShowPDFFile(PChar(filetoview), Prefs.ExternalPDFEditorPath);
    end
    else
    begin
      Formfilepreview.Nfiles := 1;

      Formfilepreview.Files[1].Name := filetoview;
      Formfilepreview.Files[1].Color := 'K';
      Formfilepreview.JustLoadTif := true;

      if Formfilepreview.makexmls
        (IncludeTrailingBackSlash(TUtils.GetTempDirectory()) +
        'PrevTemp\aprev.XML', IncludeTrailingBackSlash(TUtils.GetTempDirectory()
        ) + 'PrevTemp\aprev.jpg') then
      begin
        if Formfilepreview.Genprevfiles then
        begin
          Formfilepreview.ImageEn1.IO.LoadFromFileJpeg
            (IncludeTrailingBackSlash(TUtils.GetTempDirectory()) +
            'Prevtemp\aprev.jpg');
          Formfilepreview.ShowModal;
        End
      end;
    end;

  Except
  end;
end;

procedure TFormMain.ActionArkSelectAllExecute(Sender: TObject);
begin
  ListViewArk.SelectAll;
end;

procedure TFormMain.ActionunPDFdelExecute(Sender: TObject);
Var
  Afilename: String;
  i: Integer;
begin
  Afilename := '';
  if ListViewUnPdfOK.Focused then
  begin
    for i := 0 to ListViewUnPdfOK.Items.Count - 1 do
    begin
      if ListViewUnPdfOK.Items[i].Selected then
      begin
        Afilename := ListViewUnPdfOK.Items[i].SubItems[2];
        DeleteFile(Afilename);
      end;
    end;

  end
  else
  begin
    if ListViewunPdfNotOK.Focused then
    begin
      for i := 0 to ListViewunPdfNotOK.Items.Count - 1 do
      begin
        if ListViewunPdfNotOK.Items[i].Selected then
        begin
          Afilename := ListViewunPdfNotOK.Items[i].SubItems[2];
          DeleteFile(Afilename);
        end;
      end;

    end;

  end;
  ActionunPDFrefreshExecute(Self);
end;

procedure TFormMain.ActionunPDFrefreshExecute(Sender: TObject);
Var
  // F: TSearchRec;
  // fres : Integer;
  i: Integer;
  aktsel,
  // InputFolder,
  T
  // messagestr,Timestr
    : string;
  // l : Tlistitem;
  // Logfile : Tinifile;
  // t1,t2,t3 : String;
  // i2,i3 : Integer;
  i1: Integer;
begin
  Try

    (*
      DF_STO_T_290114-1_1-1-1-15.pdf
    *)
    ComboBoxunknownfilt.Items.Add('All');
    ListViewUnPdfOK.Items.Clear;
    ListViewunPdfNotOK.Items.Clear;

    aktsel := PDFUnknownpath;
    FileListBoxPDFunknown.Items.BeginUpdate;
    FileListBoxPDFunknown.Directory := aktsel;
    FileListBoxPDFunknown.Mask := '*.*';
    FileListBoxPDFunknown.Update;
    FileListBoxPDFunknown.Items.EndUpdate;
    for i := 0 to FileListBoxPDFunknown.Items.Count - 1 do
    begin
      T := FileListBoxPDFunknown.Items[i];
      i1 := pos('-', T);
      Delete(T, i1, 100);
      if i1 <> 0 then
      begin
        if ComboBoxunknownfilt.Items.IndexOf(T) < 0 then
          ComboBoxunknownfilt.Items.Add(T);
      end;
    end;
    ComboBoxunknownfilt.ItemIndex := ComboBoxunknownfilt.Items.Count - 1;

  Except
  end;
end;

procedure TFormMain.ActionunpdfprevExecute(Sender: TObject);
Var
  Afilename: String;
begin
  Afilename := '';
  if ListViewUnPdfOK.Focused then
  begin
    if ListViewUnPdfOK.Selected <> nil then
      Afilename := ListViewUnPdfOK.Selected.SubItems[2];
  end
  else
  begin
    if ListViewunPdfNotOK.Focused then
    begin
      if ListViewunPdfNotOK.Selected <> nil then
        Afilename := ListViewunPdfNotOK.Selected.SubItems[2];
    end;

  end;
  if Afilename <> '' then
    PrevAsinglefilePdfOrtif(Afilename);
end;

procedure TFormMain.ActionunpdfretryExecute(Sender: TObject);
Var
  i, D, m, Y, th, tm, ts, IP: Integer;
  fromfile, InputFolder, T, tofile, errorpath, filetime: String;
  someerror: Boolean;
  ftime: TDateTime;
begin
  try

    someerror := false;
    errorpath := '';
    if ListViewUnPdfOK.Focused then
    begin
      if ListViewUnPdfOK.Items.Count > 0 then
      begin
        for i := 0 to ListViewUnPdfOK.Items.Count - 1 do
        begin
          if ListViewUnPdfOK.Items[i].Selected then
          begin
            fromfile := ListViewUnPdfOK.Items[i].SubItems[2];
            tofile := IncludeTrailingBackSlash(ListViewUnPdfOK.Items[i].SubItems
              [0]) + ListViewUnPdfOK.Items[i].caption;
            errorpath := ExtractFilePath(ListViewUnPdfOK.Items[i].SubItems[2]);
            InputFolder := ListViewUnPdfOK.Items[i].SubItems[0];
            filetime := ListViewUnPdfOK.Items[i].SubItems[1];

            IP := pos('-', filetime);
            T := Copy(filetime, 1, IP - 1);
            D := StrToInt(T);
            Delete(filetime, 1, IP);

            IP := pos('-', filetime);
            T := Copy(filetime, 1, IP - 1);
            m := StrToInt(T);
            Delete(filetime, 1, IP);

            IP := pos(' ', filetime);
            T := Copy(filetime, 1, IP - 1);
            Y := StrToInt(T);
            Delete(filetime, 1, IP);

            IP := pos(':', filetime);
            T := Copy(filetime, 1, IP - 1);
            th := StrToInt(T);
            Delete(filetime, 1, IP);

            IP := pos(':', filetime);
            T := Copy(filetime, 1, IP - 1);
            tm := StrToInt(T);
            Delete(filetime, 1, IP);
            ts := StrToInt(T);

            ftime := EncodeDateTime(Y, m, D, th, tm, ts, 0);

            Datam1.Query3.SQL.Clear;
            Datam1.Query3.SQL.Add('DECLARE @TimeStamp datetime');
            Datam1.Query3.SQL.Add('DECLARE @Afiletime datetime');
            Datam1.Query3.SQL.Add('SET @Afiletime= :Afiletimeparm');

            Datam1.Query3.SQL.Add('SET @TimeStamp=GETDATE()');
            Datam1.Query3.SQL.Add('Insert UnknownFiles values (');
            Datam1.Query3.SQL.Add('''' + fromfile + '''' + ',');
            Datam1.Query3.SQL.Add('''' + errorpath + '''' + ',');
            Datam1.Query3.SQL.Add('''' + InputFolder + '''' + ',');
            Datam1.Query3.SQL.Add('@Afiletime,0,');
            Datam1.Query3.SQL.Add('@TimeStamp,1)');

            Datam1.Query3.parambyname('Afiletimeparm').AsDateTime := ftime;
            if Prefs.Debug then
              Datam1.Query3.SQL.SaveToFile
                (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
                'sqllogs\' + 'FileCenterRetryUnknownpdf.SQL');
            Datam1.Query3.ExecSQL;
          end;
        end;
      end;
    End
    else
    begin
      if ListViewunPdfNotOK.Focused then
      begin
        for i := 0 to ListViewunPdfNotOK.Items.Count - 1 do
        begin
          if ListViewunPdfNotOK.Items[i].Selected then
          begin
            fromfile := ListViewunPdfNotOK.Items[i].SubItems[2];
            tofile := IncludeTrailingBackSlash
              (ListViewunPdfNotOK.Items[i].SubItems[0]) +
              ListViewunPdfNotOK.Items[i].caption;
            if not CopyFile(PChar(fromfile), PChar(tofile), true) then
            begin
              someerror := true;
              errorpath := ListViewunPdfNotOK.Items[i].SubItems[0];
            end
            else
            begin
              DeleteFile(ListViewunPdfNotOK.Items[i].SubItems[2]);
              DeleteFile(ListViewunPdfNotOK.Items[i].SubItems[3]);
            end;
          end;
        end;

      end;
    end;
    if someerror then
    begin
      MessageDlg
        ('Some files could not be copied. Check access to Inputpath for selected files',
        mtError, [mbOk], 0);
    end;
    ActionunPDFrefresh.Execute;
  Except
  end;

end;

procedure TFormMain.ActionArkrefreshExecute(Sender: TObject);
begin
  getArkFiles;
end;

procedure TFormMain.RefresshAllpressgrpnames;
Var
  T: string;
  i, idx: Integer;
  ini: TIniFile;
  akttext, Aktprgrp: string;
  HasUserPresses, HasUserPressGroups: Boolean;
  pressid: Integer;
  NoPressesVisible: Boolean;
begin
  try
    ini := TIniFile.Create(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory
      ()) + 'LastUser.ini');
    // Save current setting..
    akttext := FormMain.ComboBoxPressGrp.text;
    if (akttext <> '') then
      ini.WriteString('system', 'PressGroup', akttext);
    (* HasUserPresses := false;
      if (UserPressesPossible) then
      begin
      Datam1.Query3.SQL.Clear;
      Datam1.Query3.SQL.Add('select TOP 1 PressID from UserPresses');
      Datam1.Query3.SQL.Add('Where UserName='''+Prefs.Username+'''');
      Datam1.Query3.Open;
      if not Datam1.Query3.Eof then
      HasUserPresses := true;
      Datam1.Query3.Close;
      end;

      HasUserPressGroups := false;
      if (UserPressGroupsPossible) and (PressGroupNamesPossible) then
      begin
      Datam1.Query3.SQL.Clear;
      Datam1.Query3.SQL.Add('select TOP 1 PressGroupID from UserPressGroups');
      Datam1.Query3.SQL.Add('Where UserName='''+Prefs.Username+'''');
      Datam1.Query3.Open;
      if not Datam1.Query3.Eof then
      HasUserPressGroups := true;
      Datam1.Query3.Close;
      end;
    *)

    // NAN ### DISABLED NOW
    HasUserPresses := false;
    HasUserPressGroups := false;

    PressvisibilyIN := '(-99';

    // Initialize filter (above tree)
    ComboBoxPressGrp.Items.Clear;

    // If no filter shown - make sure it is set to 'all'
    if (Prefs.AllowLocationPressAllSelection) then
    // OR (Prefs.LocationPressFilterMode = LOCATIONPRESSSFILTERMODE_NONE) then
    begin
      ComboBoxPressGrp.Items.Add('All');
      ComboBoxPressGrp.ItemIndex := 0;
    end;

    // old
    (* if not PressGroupNamesPossible then
      Prefs.PressGroupSystem := 0;

      // old
      case Prefs.PressGroupSystem of
      0 : GroupBoxprgp.Caption := 'Press';
      1 : GroupBoxprgp.Caption := 'Press Group';
      end;
    *)

    if (not PressGroupNamesPossible) and
      (Prefs.LocationPressFilterMode = LOCATIONPRESSSFILTERMODE_PRESSGROUP) then
      Prefs.LocationPressFilterMode := LOCATIONPRESSSFILTERMODE_PRESS;

    GroupBoxprgp.Visible := Prefs.LocationPressFilterMode <>
      LOCATIONPRESSSFILTERMODE_NONE;

    case Prefs.LocationPressFilterMode of
      LOCATIONPRESSSFILTERMODE_PRESS:
        GroupBoxprgp.caption := 'Press';
      LOCATIONPRESSSFILTERMODE_PRESSGROUP:
        GroupBoxprgp.caption := 'Press Group';
      LOCATIONPRESSSFILTERMODE_LOCATION:
        GroupBoxprgp.caption := 'Location';
    end;

    // Adjust to user rights if set
    if (HasUserPresses) AND
      (Prefs.LocationPressFilterMode = LOCATIONPRESSSFILTERMODE_PRESS) then
    // PRESSES - not GROUPS!
    begin

      // reset restrictions and set according to user press rights..
      for i := 0 to tNames1.pressnames.Count - 1 do
        Prefs.VisiblePressesConfig[i].Visible := false;
      // FoxrmSettings.CheckListBoxvisiblepressesConfig.checked[i] := false;

      Datam1.Query3.SQL.Clear;
      Datam1.Query3.SQL.Add('SELECT PressID FROM UserPresses');
      Datam1.Query3.SQL.Add('WHERE UserName=''' + Prefs.Username + '''');
      Datam1.Query3.Open;
      while not Datam1.Query3.Eof do
      begin
        T := tNames1.pressnameIDtoname(Datam1.Query3.Fields[0].AsInteger);
        for i := 0 to tNames1.pressnames.Count - 1 do
        begin
          if (Prefs.VisiblePressesConfig[i].press = T) then
          begin
            Prefs.VisiblePressesConfig[i].Visible := true;
            break;
          end;
        end;
        Datam1.Query3.Next;
      end;
      Datam1.Query3.Close;
    end;

    // Adjust to user rights if set
    if (HasUserPressGroups) AND
      (Prefs.LocationPressFilterMode = LOCATIONPRESSSFILTERMODE_PRESSGROUP) then
    begin
      for i := 0 to tNames1.pressnames.Count - 1 do
        Prefs.VisiblePressesConfig[i].Visible := false;
      // FoxrmSettings.CheckListBoxvisiblepressesConfig.checked[i] := false;

      Datam1.Query3.SQL.Clear;
      Datam1.Query3.SQL.Add
        ('SELECT PG.PressID FROM UserPressGroups UPG INNER JOIN PressGroupNames PG ON PG.PressGroupID=UPG.PressGroupID');
      Datam1.Query3.SQL.Add('WHERE UPG.UserName=''' +
        Prefs.Username + '''');
      Datam1.Query3.Open;
      while not Datam1.Query3.Eof do
      begin
        T := tNames1.pressnameIDtoname(Datam1.Query3.Fields[0].AsInteger);

        for i := 0 to tNames1.pressnames.Count - 1 do
        begin
          if (Prefs.VisiblePressesConfig[i].press = T) then
          begin
            Prefs.VisiblePressesConfig[i].Visible := true;
            break;
          end;
        end;

        Datam1.Query3.Next;
      end;
      Datam1.Query3.Close;
    end;

    PressvisibilyIN := '(-99';
    NoPressesVisible := Prefs.ISadministrator;
    for i := 0 to tNames1.pressnames.Count - 1 do
    begin
      if (Prefs.VisiblePressesConfig[i].Visible) then
      begin
        PressvisibilyIN := PressvisibilyIN + ',' +
          IntToStr(tNames1.pressnametoid(Prefs.VisiblePressesConfig[i].press));

        if (Prefs.LocationPressFilterMode <> LOCATIONPRESSSFILTERMODE_PRESSGROUP)
        then
          ComboBoxPressGrp.Items.Add(Prefs.VisiblePressesConfig[i].press);

        NoPressesVisible := false;
      end;
    end;
    PressvisibilyIN := PressvisibilyIN + ')';

    // catch if no presses set (error) - default to all presses visible
    if (NoPressesVisible) then
    begin
      PressvisibilyIN := '(-99';
      for i := 0 to tNames1.pressnames.Count - 1 do
      begin
        Prefs.VisiblePressesConfig[i].Visible := true;
        PressvisibilyIN := PressvisibilyIN + ',' +
          IntToStr(tNames1.pressnametoid(Prefs.VisiblePressesConfig[i].press));
      end;
      PressvisibilyIN := PressvisibilyIN + ')';
    end;

    // Final setup of press group -> combobox
    if (Prefs.LocationPressFilterMode = LOCATIONPRESSSFILTERMODE_PRESSGROUP)
    then
    begin
      Datam1.Query3.SQL.Clear;
      Datam1.Query3.SQL.Add
        ('SELECT DISTINCT PressGroupName,PressID FROM PressGroupNames');
      Datam1.Query3.SQL.Add('WHERE PressID IN ' + PressvisibilyIN);
      Datam1.Query3.SQL.Add('ORDER BY PressGroupName,PressID');
      Datam1.Query3.Open;
      while not Datam1.Query3.Eof do
      begin
        T := Datam1.Query3.Fields[0].AsString;
        if ComboBoxPressGrp.Items.IndexOf(T) < 0 then
          ComboBoxPressGrp.Items.Add(T);
        Datam1.Query3.Next;
      end;
      Datam1.Query3.Close;
    end;

    // NAN 20150122
    (* if (Prefs.AlwaysShowAllPresses) then
      begin
      ComboBoxPressGrp.ItemIndex := 0;
      ComboBoxPressGrp.Enabled := false;
      end;
    *)
    Aktprgrp := ini.ReadString('system', 'PressGroup', 'All');
    if (Aktprgrp <> '') AND (Prefs.DefaultPress = '') then
    begin
      if (ComboBoxPressGrp.Items.IndexOf(Aktprgrp) >= 0) then
        ComboBoxPressGrp.ItemIndex := ComboBoxPressGrp.Items.IndexOf(Aktprgrp);
    end
    else if (Prefs.DefaultPress <> '') then
    begin
      if (ComboBoxPressGrp.Items.IndexOf(Prefs.DefaultPress) >= 0) then
        ComboBoxPressGrp.ItemIndex := ComboBoxPressGrp.Items.IndexOf
          (Prefs.DefaultPress);
    end;

    if (ComboBoxPressGrp.ItemIndex < 0) then
      ComboBoxPressGrp.ItemIndex := 0;

    SetLocationPressModeGUIVisibility();

    ini.free;

  Except

  end;
end;

// Forms PressvisibilyIN string used for selection
procedure TFormMain.CreatePressvisibilyINstring;
Var
  ini: TIniFile;
  T: String;
  i, pressid: Integer;
  NoPressesVisible: Boolean;
  // aktpressgrpids : string;
begin

  if (ComboBoxPressGrp.text = 'All') or
    (Prefs.LocationPressFilterMode = LOCATIONPRESSSFILTERMODE_LOCATION)
  (* or (not Prefs.LimitPresses) *) then // Filter on ALL
    Pressvisibilylimited := false
  else
  begin // Filter on specific Press/PressGroup
    Pressvisibilylimited := true;

    // Use PRESSES
    // if (Prefs.PressGroupSystem = 0) then

    if (Prefs.LocationPressFilterMode = LOCATIONPRESSSFILTERMODE_PRESS) then
      PressvisibilyIN := '(' +
        IntToStr(tNames1.pressnametoid(ComboBoxPressGrp.text)) + ')'
    else
    begin
      if (Prefs.LocationPressFilterMode = LOCATIONPRESSSFILTERMODE_PRESSGROUP)
      then
      begin

        Datam1.Query3.SQL.Clear;
        Datam1.Query3.SQL.Add
          ('select PressGroupID,PressGroupName,PressID from PressGroupNames');
        Datam1.Query3.SQL.Add('where PressGroupName = ' + '''' +
          FormMain.ComboBoxPressGrp.text + '''');
        Datam1.Query3.SQL.Add('order by PressID');

        Datam1.Query3.Open;
        PressvisibilyIN := '(-99';
        NoPressesVisible := Prefs.ISadministrator;

        for i := 0 to Length(Prefs.VisiblePressesConfig) - 1 do
        begin
          if (Prefs.VisiblePressesConfig[i].Visible) and
            (not Prefs.ISadministrator) then
          begin
            NoPressesVisible := false;
            break;
          end;
        end;

        while not Datam1.Query3.Eof do
        begin
          pressid := Datam1.Query3.Fields[2].AsInteger;
          T := tNames1.pressnameIDtoname(pressid);

          if (Prefs.VisiblePressConfigNameVisible(T)) OR (NoPressesVisible) then
            PressvisibilyIN := PressvisibilyIN + ',' + IntToStr(pressid);

          Datam1.Query3.Next;
        end;
        Datam1.Query3.Close;
        PressvisibilyIN := PressvisibilyIN + ')';

      end;
    end;
  end;

  if (ComboBoxPressGrp.text <> '') then
  begin
    try
      ini := TIniFile.Create
        (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
        'LastUser.ini');
      ini.WriteString('system', 'PressGroup', FormMain.ComboBoxPressGrp.text);
      ini.free;
    except

    end;
  end;
end;

procedure TFormMain.ActionpagedeviceExecute(Sender: TObject);
Var
  aktset { ,igr,i3,idr } , Devgroupeoffset: Integer;
  tmpl, T: string;
  flatseparationset: string;
  tmpllistnum, i: Integer;
  //devicelist: Tstrings;
  Newdevid: Integer;
  settinggrp { ,found } : Boolean;
begin
  tmpllistnum := 0;
  Formselectfromlist.Caption := 'Select new device';
  getpreselHS;
  //devicelist := Tstrings.Create;
  tmpl := '';
  for i := 1 to StringGridHS.RowCount do
  begin
    if SuperHSdata[i - 1].Selected then
    begin
      tmpllistnum := SuperHSdata[i - 1].TemplateID;
      tmpllistnum := inittypes.gettemplatenumberfromID(tmpllistnum);
      tmpl := PlatetemplateArray[tmpllistnum].TemplateName;
      flatseparationset := IntToStr(SuperHSdata[i - 1].flatseparationset);
      break;
    end;
  end;
  Devgroupeoffset := -1;
  if tmpl <> '' then
  begin
    // tmpllistnum := inittypes.gettemplatelistnumberfromname(tmpl);

    // Fills  Aktdevicelist string list of devices in template   (aktdeviceidlist items)
    inittypes.getdevicelistfromtemplate(tmpllistnum);
    inittypes.getdeviceGrplistfromtemplate(tmpllistnum);

    Formselectfromlist.ListBox1.Items.Clear;

    inittypes.getdevicelistfromtemplateNogrp(tmpllistnum);

    Formselectfromlist.ListBox1.Items := Aktdevicelist;
    if (NaktdeviceGRPidlist > 0) And (DeviceGroupNamesPossible) then
    begin

      Devgroupeoffset := Formselectfromlist.ListBox1.Items.Count;
      for i := 0 to Aktdevicegrplist.Count - 1 do
      begin
        Formselectfromlist.ListBox1.Items.Add(Aktdevicegrplist[i]);
      end;

    end;
    (* else
      begin
      Formselectfromlist.ListBox1.Items := Aktdevicelist;
      end; *)
    Formselectfromlist.CheckBox1.caption :=
      'Lock all copies to same device in settings';
    Formselectfromlist.PanelAllcopies.Visible := not(Prefs.ForceSameDevice);
    Formselectfromlist.CheckBox1.Visible := true;
    Formselectfromlist.caption := 'Change device';
    Formselectfromlist.CheckBox1.Checked := (Prefs.ForceSameDevice);
    if Formselectfromlist.ShowModal = mrOK then
    begin

      if Formselectfromlist.ListBox1.ItemIndex = Formselectfromlist.ListBox1.
        Items.Count - 1 then
      begin
        // Reset device..
        Newdevid := 0;
        T := 'set deviceid = 0,miscint4=0';
      End
      else
      begin
        settinggrp := false;
        if (NaktdeviceGRPidlist > 0) And (DeviceGroupNamesPossible) and (Devgroupeoffset > -1) then
        begin
          if Formselectfromlist.ListBox1.ItemIndex >= Devgroupeoffset then
          begin
            settinggrp := true;
          end;
        end;

        if settinggrp then
        begin
          Newdevid := 0;
          if DeviceGroupNamesPossible then
            T := 'set deviceid = 0,miscint4=0,DeviceGroupID=' +
              IntToStr(inittypes.DeviceGroupnametoID
              (Formselectfromlist.ListBox1.Items
              [Formselectfromlist.ListBox1.ItemIndex]))
          else
            T := 'set deviceid = 0,miscint4=0';
        end
        else
        begin
          Newdevid := tNames1.devicenametoid(Formselectfromlist.ListBox1.Items[Formselectfromlist.ListBox1.ItemIndex]);
          T := 'set miscint4=0,deviceid = ' + IntToStr(Newdevid);
          if DeviceGroupNamesPossible then
            T := T + ',DeviceGroupID=0';
        end;
      end;

      aktset := -999;
      for i := 1 to StringGridHS.RowCount do
      begin
        if SuperHSdata[i - 1].Selected then
        begin
          if aktset <> SuperHSdata[i - 1].flatseparationset then
          begin
            aktset := SuperHSdata[i - 1].flatseparationset;
            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add('Update pagetable');
            Datam1.Query1.SQL.Add(T);

            Datam1.Query1.SQL.Add('where active <> -999');
            Datam1.Query1.SQL.Add(' and ' + pagetreeselstr);

            if (Prefs.ForceSameDevice) then
            begin
              Datam1.Query1.SQL.Add('and Copyflatseparationset = ' +
                IntToStr(SuperHSdata[i - 1].copyflatseparationset))
            end
            else
            begin
              Datam1.Query1.SQL.Add('and flatseparationset = ' +
                IntToStr(SuperHSdata[i - 1].flatseparationset));
            end;

            Datam1.Query1.SQL.Add(WeditionStr);
            Datam1.Query1.SQL.Add(WpublicationStr);

            if Prefs.Debug then
              Datam1.Query1.SQL.SaveToFile(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' + 'SetpageNewdev.SQL');
            trysql(Datam1.Query1);
          end;
        end;
      end;

      aktset := -999;
      if (Prefs.AutoReImageOnDeviceChange) then
      begin
        for i := 1 to StringGridHS.RowCount do
        begin
          if SuperHSdata[i - 1].Selected then
          begin
            if Newdevid <> SuperHSdata[i - 1].deviceid then
            begin
              Datam1.Query1.SQL.Clear;
              Datam1.Query1.SQL.Add('Update pagetable');
              Datam1.Query1.SQL.Add('set status = 30, miscint4 = 0,inkstatus = 0, outputtime = 0, ImagingProcessID = 0 ');
              Datam1.Query1.SQL.Add('where active <> -999 and status > 30 ');
              Datam1.Query1.SQL.Add(' and ' + pagetreeselstr);
              if (Prefs.ForceSameDevice) then
              begin
                Datam1.Query1.SQL.Add('and Copyflatseparationset = ' +
                  IntToStr(SuperHSdata[i - 1].copyflatseparationset))
              end
              else
              begin
                Datam1.Query1.SQL.Add('and flatseparationset = ' +
                  IntToStr(SuperHSdata[i - 1].flatseparationset));
              end;

              Datam1.Query1.SQL.Add(WeditionStr);
              Datam1.Query1.SQL.Add(WpublicationStr);
              if Prefs.Debug then
                Datam1.Query1.SQL.SaveToFile
                  (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
                  'sqllogs\' + 'SetStatuspageNewdev.SQL');
              trysql(Datam1.Query1);
              Datam1.SetNewtreeprodid;
            end;
          end;
        end;
        Datam1.UpdateTreeStateOnProduction(false);
      end;

      loadSuperHSDB2(false);
      resetpreselHS;

    end;
  end;
  Formselectfromlist.caption := '';
end;

procedure TFormMain.ActionproddeviceExecute(Sender: TObject);

  function specialfordevcopy(Astring: string): string;
  Var
    i { ,i2 } : Integer;
    wherestr: string;
    // INcopies,INpressrunids : String;
  begin
    if TreeViewprodcontrol.Selected = nil then
      exit;
    if TreeViewprodcontrol.Selected.Level < 0 then
      exit;

    wherestr := '(';
    for i := 1 to StringGridprods.RowCount do
    begin
      if StringGridprodsdata[i].Selected then
      begin
        if Length(wherestr) > 1 then
          wherestr := wherestr + ' OR ';
        wherestr := wherestr + '(pressrunid = ' +
          IntToStr(StringGridprodsdata[i].pressrunid) + ')';

      end;
    end;

    if Length(wherestr) > 1 then
      wherestr := wherestr + ')'
    else
      wherestr := '';

    result := wherestr;
  end;

  function findtemplatewithID(tmlpID: Integer): Integer;
  var
    i: Integer;
  begin
    result := -1;
    for i := 1 to NPlatetemplateArray do
    begin
      if PlatetemplateArray[i].TemplateID = tmlpID then
      begin
        result := i;
        break;
      end;
    end;
  end;

// procedure TFormMain.ActionproddeviceExecute(Sender: TObject) body..
var
  i, i2: Integer;
  // l : tlistitem;
  wherestr, devt, enat, devtwhere: string;
  T, T2: string;
  resetit { ,found, } , settinggrp: Boolean;
  LocationID { ,tmpllistID } : Integer;
  aktdeviceid: Integer;
  i3, loca { ,idr } , press { ,tmpllistnum,igr } : Integer;
  hasDeviceGroups: Boolean;
begin
  aktdeviceid := 0;
  if TreeViewprodcontrol.Selected = nil then
    exit;

  loca := -1;
  press := -1;

  if (Prefs.ForceSameDevice) then
    wherestr := specialfordevcopy('')
  else
    wherestr := makeprogwherestr('');

  for i := 1 to StringGridprods.RowCount do
  begin
    if StringGridprodsdata[i].Selected then
    begin
      press := StringGridprodsdata[i].pressid;
      loca := StringGridprodsdata[i].LocationID;
      break;
    end;
  end;

  if (loca = -1) OR (press = -1) then
    exit;

  LocationID := loca;

  // Find valid devices for this template
  Formselectfromlist.ListBox1.Items.Clear;
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('select distinct devicelist,deviceenablelist,pressid from templateconfigurations ');
  Datam1.Query1.SQL.Add('where pressid = ' + IntToStr(press));
  Datam1.Query1.Open;

  devtwhere := '';
  while not Datam1.Query1.Eof do
  begin
    Aktdevicelist.Clear;
    T2 := Datam1.Query1.Fields[1].AsString + ',';
    T := Datam1.Query1.Fields[0].AsString + ',';

    while (Length(T) > 1) and (Length(T2) > 1) do
    begin
      devt := '';
      enat := '';

      i2 := 1;
      for i2 := 1 to 100 do
      begin
        if T2[i2] <> ',' then
        begin
          enat := enat + T2[i2];
        end
        else
        begin
          Delete(T2, 1, i2);
          break;
        end;
      end;

      i2 := 1;
      for i2 := 1 to 100 do
      begin
        if T[i2] <> ',' then
        begin
          devt := devt + T[i2];
        end
        else
        begin
          Delete(T, 1, i2);
          break;
        end;
      end;

      if enat[1] = '1' then
      begin

        i3 := StrToInt(devt);
        if devtwhere <> '' then
          devtwhere := devtwhere + ',';
        devtwhere := devtwhere + devt;

        devt := tNames1.deviceIDtoname(i3);
        if Formselectfromlist.ListBox1.Items.IndexOf(devt) < 0 then
          Formselectfromlist.ListBox1.Items.Add(tNames1.deviceIDtoname(i3));
      end;
    end;

    Datam1.Query1.Next;
  end;
  Datam1.Query1.Close;

  i3 := -1;
  if (DeviceGroupNamesPossible) then
  begin

    // i3 is first device group in list
    i3 := -1;
    devtwhere := '(' + devtwhere + ')';
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select distinct DeviceGroupName,DeviceID from DeviceGroupNames ');
    Datam1.Query1.SQL.Add('where DeviceID in ' + devtwhere);
    Datam1.Query1.Open;
    while not Datam1.Query1.Eof do
    begin
      devt := Datam1.Query1.Fields[0].AsString;
      if Formselectfromlist.ListBox1.Items.IndexOf(devt) < 0 then
      begin
        Formselectfromlist.ListBox1.Items.Add(devt);
        if i3 = -1 then
          i3 := Formselectfromlist.ListBox1.Items.Count - 1;
      end;
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;
  end;

  hasDeviceGroups := false;
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('select distinct DeviceGroupName,DeviceID from DeviceGroupNames ');
  Datam1.Query1.Open;
  if not Datam1.Query1.Eof then
    hasDeviceGroups := true;
  Datam1.Query1.Close;

  if Formselectfromlist.ShowModal = mrOK then
  begin
    resetit := false;
    T := Formselectfromlist.ListBox1.Items
      [Formselectfromlist.ListBox1.ItemIndex];

    // Last intex 'Reset device' ?
    if Formselectfromlist.ListBox1.ItemIndex = Formselectfromlist.ListBox1.
      Items.Count - 1 then
      resetit := true;

    // ### 20161011 NAN ..fix
    settinggrp := (Formselectfromlist.ListBox1.ItemIndex >= i3) AND
      (resetit = false);

    if resetit then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      if (DeviceGroupNamesPossible) then
        Datam1.Query1.SQL.Add('set miscint4=0,DeviceGroupID=0,deviceid = ' +
          IntToStr(aktdeviceid))
      else
        Datam1.Query1.SQL.Add('set miscint4=0,deviceid = ' +
          IntToStr(aktdeviceid));
      Datam1.Query1.SQL.Add('where active > -99 and ' + wherestr);
      Datam1.Query1.SQL.Add(WeditionStr);
      trysql(Datam1.Query1);

    end
    else
    begin
      if settinggrp and hasDeviceGroups then
      begin
        if (DeviceGroupNamesPossible) then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          Datam1.Query1.SQL.Add('set miscint4=0,deviceid = 0, DeviceGroupID=' +
            IntToStr(inittypes.DeviceGroupnametoID
            (Formselectfromlist.ListBox1.Items
            [Formselectfromlist.ListBox1.ItemIndex])));
          Datam1.Query1.SQL.Add('where active > -99 and ' + wherestr);
          Datam1.Query1.SQL.Add(WeditionStr);
          trysql(Datam1.Query1);
        end;
      end
      else
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('select TOP 1 deviceid from DeviceConfigurations');
        Datam1.Query1.SQL.Add('where locationid = ' + IntToStr(LocationID));
        Datam1.Query1.SQL.Add('and devicename = ' + '''' +
          Formselectfromlist.ListBox1.Items
          [Formselectfromlist.ListBox1.ItemIndex] + '''');
        aktdeviceid := -1;
        Datam1.Query1.Open;
        if not Datam1.Query1.Eof then
        begin
          aktdeviceid := Datam1.Query1.Fields[0].AsInteger;
        end;
        Datam1.Query1.Close;

        if aktdeviceid = -1 then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          if (DeviceGroupNamesPossible) then
            Datam1.Query1.SQL.Add('set miscint4=0,deviceid = 0,DeviceGroupID=0')
          else
            Datam1.Query1.SQL.Add('set miscint4=0,deviceid = 0');
          Datam1.Query1.SQL.Add('where active > -99 and ' + wherestr);
          Datam1.Query1.SQL.Add(WeditionStr);
          trysql(Datam1.Query1);

        end
        else
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add('update pagetable');
          if (DeviceGroupNamesPossible) then
            Datam1.Query1.SQL.Add('set miscint4=0,DeviceGroupID=0,deviceid = ' +
              IntToStr(aktdeviceid))
          else
            Datam1.Query1.SQL.Add('set miscint4=0,deviceid = ' +
              IntToStr(aktdeviceid));
          Datam1.Query1.SQL.Add('where active > -99 and ' + wherestr);
          Datam1.Query1.SQL.Add(WeditionStr);
          trysql(Datam1.Query1);

        end;
      end;
    end;
    ActionProgressrefresh.Execute;
  end;
end;

procedure TFormMain.ComboBoxunknownfiltSelect(Sender: TObject);
Var
  // F: TSearchRec;
  // fres : Integer;
  i: Integer;
  aktsel, InputFolder, T, messagestr, Timestr: string;
  L: TListItem;
  logFile: TIniFile;
  /// t1,t2,t3 : String;
  // i1,i2,i3 : Integer;
begin

  (*
    DF_STO_T_290114-1_1-1-1-15.pdf
  *)
  try
    ListViewUnPdfOK.Items.BeginUpdate;
    ListViewunPdfNotOK.Items.BeginUpdate;
    ListViewUnPdfOK.Items.Clear;
    ListViewunPdfNotOK.Items.Clear;

    aktsel := PDFUnknownpath;

    FileListBoxPDFunknown.Items.BeginUpdate;
    FileListBoxPDFunknown.Items.Clear;
    FileListBoxPDFunknown.Directory := aktsel;
    FileListBoxPDFunknown.Mask := ComboBoxunknownfilt.Items
      [ComboBoxunknownfilt.ItemIndex] + '-*.*';
    FileListBoxPDFunknown.Update;
    FileListBoxPDFunknown.Items.EndUpdate;

    // DF_STO_T_290114-1_1-1-1-15.pdf

    for i := 0 to FileListBoxPDFunknown.Items.Count - 1 do
    begin
      logFile := TIniFile.Create(aktsel + '\logs\' + FileListBoxPDFunknown.Items
        [i] + '.txt');
      InputFolder := logFile.ReadString('LogFile', 'InputFolder', 'No log');
      messagestr := logFile.ReadString('LogFile', 'Message', 'No log');
      Timestr := logFile.ReadString('LogFile', 'Time', 'No log');
      logFile.free;

      T := Uppercase(messagestr);
      if pos('JOB not FOUND', T) > 0 then
      begin
        L := ListViewUnPdfOK.Items.Add;
      end
      else
      begin
        L := ListViewunPdfNotOK.Items.Add;
      end;

      L.caption := FileListBoxPDFunknown.Items[i];
      L.SubItems.Add(InputFolder);
      L.SubItems.Add(Timestr);
      L.SubItems.Add(aktsel + '\' + FileListBoxPDFunknown.Items[i]);
      L.SubItems.Add(aktsel + '\logs\' + FileListBoxPDFunknown.Items[i]
        + '.txt');

    end;

    ListViewUnPdfOK.Items.EndUpdate;
    ListViewunPdfNotOK.Items.EndUpdate;
    ListViewUnPdfOK.Visible := true;
    ListViewunPdfNotOK.Visible := true;
  except
  end;

end;

(* Replaced by NAN version below
  procedure TFormMain.ActionRenameArkfileExecute(Sender: TObject);
  Var
  i : Integer;
  Fromfile,t,tofile,errorpath,publstr,pubdatestr : String;
  someerror : Boolean;
  treeitem1,treeitem2 : Ttreenode;
  begin
  if ListViewArk.Items.Count > 0 then
  begin

  someerror := false;
  errorpath := '';
  publstr  := '';
  pubdatestr := '';



  for i := 0 to ListViewArk.Items.Count-1 do
  begin
  if ListViewArk.Items[i].Selected then
  begin
  treeitem2 := TreeViewArk.Selected;
  treeitem1 := treeitem2.Parent;
  if Uppercase(treeitem2.Text) = 'UNKNOWN' then
  begin
  publstr  := treeitem2.Text;
  pubdatestr := '';
  end
  else
  begin
  publstr  := treeitem2.Text;
  pubdatestr := treeitem1.Text;
  end;

  fromfile := ListViewArk.Items[i].SubItems[2];
  tofile := IncludeTrailingBackSlash(ListViewArk.Items[i].SubItems[0]) + ListViewArk.Items[i].Caption;

  Formrenamenknown.EditNew.Text := extractfilename(fromfile);
  Formrenamenknown.EditCurrent.Text :=extractfilename(fromfile);

  if Formrenamenknown.showmodal = mrok then
  begin
  fromfile := Formrenamenknown.EditCurrent.Text;
  tofile := Formrenamenknown.EditNew.Text;
  Datam1.Query3.SQL.Clear;
  Datam1.Query3.SQL.Add('DECLARE @TimeStamp datetime');
  Datam1.Query3.SQL.Add('SET @TimeStamp=GETDATE()');
  Datam1.Query3.SQL.Add('Insert FileCenterRetryQueueFileName values (');

  t :=fromfile+';'+tofile;
  Datam1.Query3.SQL.Add(''''+pubdatestr+''''+',');
  Datam1.Query3.SQL.Add(''''+publstr+''''+',');
  Datam1.Query3.SQL.Add(''''+t+''''+',');
  Datam1.Query3.SQL.Add('@TimeStamp)' );
  if Prefs.Debug then Datam1.Query3.SQL.SaveToFile(IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\'+'FileCenterrenameQueueFileName.SQL');

  Datam1.Query3.ExecSQL;

  // NAN
  getArkFiles;

  end;

  Break;
  end;
  end;
  end;
  end;
*)

// NAN version...
procedure TFormMain.ActionRenameArkfileExecute(Sender: TObject);
var
  i, j, resultat: Integer;
  fromfile, T, tofile, errorpath, publstr, PubDateStr: String;
  someerror: Boolean;
  treeitem1, treeitem2: TTreeNode;

  arrFileNamesIn: array [0 .. 255] of array [0 .. 255] of Char;
  arrFileNamesOut: array [0 .. 255] of array [0 .. 255] of Char;

  // arrString : array[0..255] of Char;

  // arrFileNamesInPtr : Pointer;
  // arrFileNamesOutPtr : Pointer;
  str: string;

begin
  str := '[Files]' + chr(13) + chr(10);
  if ListViewArk.Items.Count > 0 then
  begin

    someerror := false;
    errorpath := '';
    publstr := '';
    PubDateStr := '';

    j := 0;

    for i := 0 to ListViewArk.Items.Count - 1 do
    begin
      if ListViewArk.Items[i].Selected then
      begin
        treeitem2 := TreeViewArk.Selected;
        treeitem1 := treeitem2.Parent;
        if Uppercase(treeitem2.text) = 'UNKNOWN' then
        begin
          publstr := treeitem2.text;
          PubDateStr := '';
        end
        else
        begin
          publstr := treeitem2.text;
          PubDateStr := treeitem1.text;
        end;

        fromfile := ListViewArk.Items[i].SubItems[2];
        tofile := IncludeTrailingBackSlash(ListViewArk.Items[i].SubItems[0]) +
          ListViewArk.Items[i].caption;

        StrCopy(PChar(@arrFileNamesIn[j][0]), PChar(extractfilename(fromfile)));
        str := str + 'FileIn' + IntToStr(j + 1) + '=' +
          extractfilename(fromfile) + chr(13) + chr(10);
        str := str + 'FileOut' + IntToStr(j + 1) + '=' +
          extractfilename(fromfile) + chr(13) + chr(10);
        StrCopy(PChar(@arrFileNamesIn[j][0]), PChar(''));
        // StrPCopy(arrFileNamesIn[j], extractfilename(fromfile));
        // StrPCopy(arrFileNamesOut[j], '');
        Inc(j);
      end;
    end;
    str := str + 'NumberOfFiles=' + IntToStr(j) + chr(13) + chr(10);

    if (j = 1) OR (RenameFileDialogPossible = false) then
    begin
      Formrenamenknown.EditNew.text := extractfilename(fromfile);
      Formrenamenknown.EditCurrent.text := extractfilename(fromfile);
      Formrenamenknown.EditCurrent.readonly := true;
      if Formrenamenknown.ShowModal = mrOK then
      begin

        fromfile := Formrenamenknown.EditCurrent.text;
        tofile := Formrenamenknown.EditNew.text;

        if (tofile <> '') AND (fromfile <> tofile) then
        begin
          T := fromfile + ';' + tofile;
          Datam1.Query3.SQL.Clear;
          Datam1.Query3.SQL.Add('DECLARE @TimeStamp datetime');
          Datam1.Query3.SQL.Add('SET @TimeStamp=GETDATE()');
          Datam1.Query3.SQL.Add('Insert FileCenterRetryQueueFileName values (');
          Datam1.Query3.SQL.Add('''' + PubDateStr + '''' + ',');
          Datam1.Query3.SQL.Add('''' + publstr + '''' + ',');
          Datam1.Query3.SQL.Add('''' + T + '''' + ',');
          Datam1.Query3.SQL.Add('@TimeStamp)');
          if Prefs.Debug then
            Datam1.Query3.SQL.SaveToFile
              (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
              'sqllogs\' + 'FileCenterrenameQueueFileName.SQL');
          Datam1.Query3.ExecSQL;

          getArkFiles;
        end;
      end;
    end
    else
    begin
      // arrFileNamesInPtr := Pointer(arrFileNamesIn);
      // arrFileNamesOutPtr := Pointer(arrFileNamesOut);
      resultat := RenameFileDialog(@arrFileNamesIn, @arrFileNamesOut, j);
      if (resultat > 0) then
      begin
        for i := 0 to j do
        begin
          fromfile := string(arrFileNamesIn[i]);
          tofile := string(arrFileNamesOut[i]);
          if (tofile <> '') AND (fromfile <> tofile) then
          begin
            T := fromfile + ';' + tofile;
            Datam1.Query3.SQL.Clear;
            Datam1.Query3.SQL.Add('DECLARE @TimeStamp datetime');
            Datam1.Query3.SQL.Add('SET @TimeStamp=GETDATE()');
            Datam1.Query3.SQL.Add
              ('Insert FileCenterRetryQueueFileName values (');
            Datam1.Query3.SQL.Add('''' + PubDateStr + '''' + ',');
            Datam1.Query3.SQL.Add('''' + publstr + '''' + ',');
            Datam1.Query3.SQL.Add('''' + T + '''' + ',');
            Datam1.Query3.SQL.Add('@TimeStamp)');
            Datam1.Query3.ExecSQL;
          end;
        end;
      end;
      getArkFiles;
    end;
  end;
end;

function TFormMain.Publextratextonproduction(ProductionID: Integer;
  akttext: String): String;
var
  // I : Integer;
  pressid, Publicationid, pressrunid, miscint2, customerid: Integer;
  Comment, T: String;
begin
  result := akttext;
  Datam1.Query3.SQL.Clear;
  Datam1.Query3.SQL.Add
    ('Select TOP 1 publicationid,pressid,pressrunid,miscint2,Comment,customerid from pagetable (NOLOCK) where productionid = '
    + IntToStr(ProductionID));
  Datam1.Query3.Open;
  if not Datam1.Query3.Eof then
  begin
    Publicationid := Datam1.Query3.Fields[0].AsInteger;
    pressid := Datam1.Query3.Fields[1].AsInteger;
    pressrunid := Datam1.Query3.Fields[2].AsInteger;
    customerid := Datam1.Query3.Fields[5].AsInteger;

    miscint2 := Datam1.Query3.Fields[3].AsInteger;
    Comment := Datam1.Query3.Fields[4].AsString;
    Datam1.Query3.Close;
  end
  else
  begin
    Datam1.Query3.Close;
    exit;
  end;

  if (Prefs.TreeExtraPublicationText[6]) then
  begin
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add
      ('Select TOP 1 ShortName from InkAliases where LongName = ' + '''' +
      tNames1.publicationIDtoname(Publicationid) + '''');
    Datam1.Query3.SQL.Add('and pressid = ' + IntToStr(pressid));
    Datam1.Query3.Open;
    if not Datam1.Query3.Eof then
    begin
      if Datam1.Query3.FieldByName('shortname').AsString <> '' then
        result := Datam1.Query3.FieldByName('shortname').AsString +
          ' / ' + result;
    end;
    Datam1.Query3.Close;
  end;

  if (Prefs.TreeExtraPublicationText[5]) then
  begin
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add
      ('Select TOP 1 InkComment from pressrunid where pressrunid = ' +
      IntToStr(pressrunid));
    Datam1.Query3.Open;
    if not Datam1.Query3.Eof then
    begin
      if Datam1.Query3.FieldByName('InkComment').AsString <> '' then
        result := result + ' / ' + Datam1.Query3.FieldByName
          ('InkComment').AsString;
    end;
    Datam1.Query3.Close;
  end;

  if (Prefs.TreeExtraPublicationText[0]) then
  begin
    if miscint2 > 0 then
      result := result + ' / ' + IntToStr(miscint2);
  end;

  if (Prefs.TreeExtraPublicationText[1]) then
  begin
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add
      ('Select TOP 1 OrderNumber from pressrunid where pressrunid = ' +
      IntToStr(pressrunid));
    Datam1.Query3.Open;
    if not Datam1.Query3.Eof then
    begin
      if Datam1.Query3.FieldByName('OrderNumber').AsString <> '' then
        result := result + ' / ' + Datam1.Query3.FieldByName
          ('OrderNumber').AsString;
    end;
    Datam1.Query3.Close;
  end;

  if (Prefs.TreeExtraPublicationText[2]) then
  begin
    if Comment <> '' then
      result := result + ' / ' + Comment;
  end;

  if (customerid > 0) and (Prefs.TreeExtraPublicationText[3]) then
  begin
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add
      ('Select TOP 1 CustomerName from customernames where customerid = ' +
      IntToStr(customerid));
    Datam1.Query3.Open;
    if not Datam1.Query3.Eof then
    begin
      if Datam1.Query3.FieldByName('CustomerName').AsString <> '' then
        result := result + ' / ' + Datam1.Query3.FieldByName
          ('CustomerName').AsString;
    end;
    Datam1.Query3.Close;

    if (Prefs.TreeExtraPublicationText[4]) then
    begin
      T := '';
      T := getTreePublInputalais(Publicationid);
      if T <> '' then
        result := result + ' / ' + T;
    end;

  end;

end;

procedure TFormMain.QuickApplyExecute(Sender: TObject);
var
  ProductionID: Integer;
  pressid: Integer;
begin
  pressid := 0;
  ProductionID := 0;
  if (PageControlMain.ActivePageIndex = VIEW_THUMBNAILS) then
  begin
    if (TreeViewThumbs.Selected = nil) then
      exit;
    if (TreeViewThumbs.Selected.Level < 2) then
      exit;
    ProductionID := TTreeViewpagestype(TreeViewThumbs.Selected.Data^).ProductionID;
  end;

  if (PageControlMain.ActivePageIndex = VIEW_SEPARATIONS) then
  begin
    if (TreeViewpagelist.Selected = nil) then
      exit;
    if (TreeViewpagelist.Selected.Level < 2) then
      exit;
    ProductionID := TTreeViewpagestype(TreeViewpagelist.Selected.Data^).ProductionID;
  end;

  if (ProductionID <= 0) then
    exit;

  try
    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('SELECT TOP 1 PressID from PageTable WITH (NOLOCK) where ProductionID = ' + IntToStr(ProductionID));
    Datam1.Query3.Open;
    if not Datam1.Query3.Eof then
    begin
      pressid := Datam1.Query3.Fields[0].AsInteger;
    end;
    Datam1.Query3.Close;

    SelectDevice.InitFormData(pressid);
    SelectDevice.TemplateID := 0;

    SelectDevice.ShowModal();

    if (SelectDevice.TemplateID = 0) then
      exit;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add('UPDATE PageTable SET TemplateID=' +
      IntToStr(SelectDevice.TemplateID) + ' WHERE ProductionID=' +
      IntToStr(ProductionID));
    Datam1.Query3.ExecSQL;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add
      ('UPDATE ProductionNames SET PlanType=1 WHERE ProductionID=' +
      IntToStr(ProductionID));
    Datam1.Query3.ExecSQL;

    Datam1.Query3.SQL.Clear;
    Datam1.Query3.SQL.Add
      ('UPDATE PressRunID SET PlanType=1 WHERE PressRunID IN (SELECT DISTINCT PressRunID FROM PageTable WITH (NOLOCK) WHERE ProductionID='
      + IntToStr(ProductionID) + ')');
    Datam1.Query3.ExecSQL;

    if (PageControlMain.ActivePageIndex = VIEW_THUMBNAILS) then
      ActionThumbnailrefresh.Execute
    else
      Actionrefreshpages.Execute;
  except
  end;

end;

procedure TFormMain.Getplateviewpagetable(ProductionID: Integer;
  pressid: Longint);
// var
// i,i2,y : Integer;
// yf : real;
// Catlist,actlist : TStrings;

begin
  pagetableloadstatus := false;

  SetLength(Pagetabeldb, 12);
  towerfilter := '';
  if (FormMain.GroupBoxtowerfilter.Visible) and
    (FormMain.ComboBoxplatetowersfilter.ItemIndex > 0) then
  begin
    towerfilter := Formtowerfilter.gettowINstring
      (FormMain.ComboBoxplatetowersfilter.text);
  end;
  Datam1.SQLQuerypagetable.SQL.Clear;


  //Datam1.SQLQuerypagetable.SQL.Add('Select * from pagetable (NOLOCK) ');

    Datam1.SQLQuerypagetable.SQL.Add('SELECT CopySeparationSet');
    Datam1.SQLQuerypagetable.SQL.Add(',SeparationSet');
    Datam1.SQLQuerypagetable.SQL.Add(',Separation');
    Datam1.SQLQuerypagetable.SQL.Add(',CopyFlatSeparationSet');
    Datam1.SQLQuerypagetable.SQL.Add(',FlatSeparationSet');
    Datam1.SQLQuerypagetable.SQL.Add(',FlatSeparation');
    Datam1.SQLQuerypagetable.SQL.Add(',Status');
    Datam1.SQLQuerypagetable.SQL.Add(',ExternalStatus');
    Datam1.SQLQuerypagetable.SQL.Add(',PublicationID');
    Datam1.SQLQuerypagetable.SQL.Add(',SectionID');
    Datam1.SQLQuerypagetable.SQL.Add(',EditionID');
    Datam1.SQLQuerypagetable.SQL.Add(',IssueID');
    Datam1.SQLQuerypagetable.SQL.Add(',PubDate');
    Datam1.SQLQuerypagetable.SQL.Add(',PageName');
    Datam1.SQLQuerypagetable.SQL.Add(',ColorID');
    Datam1.SQLQuerypagetable.SQL.Add(',TemplateID');
    Datam1.SQLQuerypagetable.SQL.Add(',ProofID');
    Datam1.SQLQuerypagetable.SQL.Add(',DeviceID');
    Datam1.SQLQuerypagetable.SQL.Add(',Version');
    Datam1.SQLQuerypagetable.SQL.Add(',Layer');
    Datam1.SQLQuerypagetable.SQL.Add(',CopyNumber');
    Datam1.SQLQuerypagetable.SQL.Add(',Pagination');
    Datam1.SQLQuerypagetable.SQL.Add(',Approved');
    Datam1.SQLQuerypagetable.SQL.Add(',Hold');
    Datam1.SQLQuerypagetable.SQL.Add(',Active');
    Datam1.SQLQuerypagetable.SQL.Add(',Priority');
    Datam1.SQLQuerypagetable.SQL.Add(',PagePosition');
    Datam1.SQLQuerypagetable.SQL.Add(',PageType');
    Datam1.SQLQuerypagetable.SQL.Add(',PagesOnPlate');
    Datam1.SQLQuerypagetable.SQL.Add(',SheetNumber');
    Datam1.SQLQuerypagetable.SQL.Add(',SheetSide');
    Datam1.SQLQuerypagetable.SQL.Add(',PressID');
    Datam1.SQLQuerypagetable.SQL.Add(',PressSectionNumber');
    Datam1.SQLQuerypagetable.SQL.Add(',SortingPosition');
    Datam1.SQLQuerypagetable.SQL.Add(',PressTower');
    Datam1.SQLQuerypagetable.SQL.Add(',PressCylinder');
    Datam1.SQLQuerypagetable.SQL.Add(',PressZone');
    Datam1.SQLQuerypagetable.SQL.Add(',PressHighLow');
    Datam1.SQLQuerypagetable.SQL.Add(',ProductionID');
    Datam1.SQLQuerypagetable.SQL.Add(',PressRunID');
    Datam1.SQLQuerypagetable.SQL.Add(',ProofStatus');
    Datam1.SQLQuerypagetable.SQL.Add(',InkStatus');
    Datam1.SQLQuerypagetable.SQL.Add(',PlanPageName');
    Datam1.SQLQuerypagetable.SQL.Add(',IssueSequenceNumber');
    Datam1.SQLQuerypagetable.SQL.Add(',MasterCopySeparationSet');
    Datam1.SQLQuerypagetable.SQL.Add(',UniquePage');
    Datam1.SQLQuerypagetable.SQL.Add(',LocationID');
    Datam1.SQLQuerypagetable.SQL.Add(',FlatProofConfigurationID');
    Datam1.SQLQuerypagetable.SQL.Add(',FlatProofStatus');
    Datam1.SQLQuerypagetable.SQL.Add(',Creep');
    Datam1.SQLQuerypagetable.SQL.Add(',MarkGroups');
    Datam1.SQLQuerypagetable.SQL.Add(',PageIndex');
    Datam1.SQLQuerypagetable.SQL.Add(',GutterImage');
    Datam1.SQLQuerypagetable.SQL.Add(',Outputversion');
    Datam1.SQLQuerypagetable.SQL.Add(',HardProofConfigurationID');
    Datam1.SQLQuerypagetable.SQL.Add(',HardProofStatus');
    Datam1.SQLQuerypagetable.SQL.Add(',FileServer');
    Datam1.SQLQuerypagetable.SQL.Add(',Dirty');
    Datam1.SQLQuerypagetable.SQL.Add(',InputTime');
    Datam1.SQLQuerypagetable.SQL.Add(',ApproveTime');
    Datam1.SQLQuerypagetable.SQL.Add(',ReadyTime');
    Datam1.SQLQuerypagetable.SQL.Add(',OutputTime');
    Datam1.SQLQuerypagetable.SQL.Add(',VerifyTime');
    Datam1.SQLQuerypagetable.SQL.Add(',ApproveUser');
    Datam1.SQLQuerypagetable.SQL.Add(',FileName');
    Datam1.SQLQuerypagetable.SQL.Add(',LastError');
    Datam1.SQLQuerypagetable.SQL.Add(',Comment');
    Datam1.SQLQuerypagetable.SQL.Add(',DeadLine');
    Datam1.SQLQuerypagetable.SQL.Add(',InputID');
    Datam1.SQLQuerypagetable.SQL.Add(',PagePositions');
    Datam1.SQLQuerypagetable.SQL.Add(',InputProcessID');
    Datam1.SQLQuerypagetable.SQL.Add(',SoftProofProcessID');
    Datam1.SQLQuerypagetable.SQL.Add(',HardProofProcessID');
    Datam1.SQLQuerypagetable.SQL.Add(',TransmitProcessID');
    Datam1.SQLQuerypagetable.SQL.Add(',ImagingProcessID');
    Datam1.SQLQuerypagetable.SQL.Add(',InkProcessID');
    Datam1.SQLQuerypagetable.SQL.Add(',OutputPriority');
    Datam1.SQLQuerypagetable.SQL.Add(',PressTime');
    Datam1.SQLQuerypagetable.SQL.Add(',CustomerID');
    if (PageTableFieldCount >= 80) then
    begin
      Datam1.SQLQuerypagetable.SQL.Add(',EmailStatus');
      Datam1.SQLQuerypagetable.SQL.Add(',Miscint1');
      Datam1.SQLQuerypagetable.SQL.Add(',Miscint2');
      Datam1.SQLQuerypagetable.SQL.Add(',Miscint3');
      Datam1.SQLQuerypagetable.SQL.Add(',Miscint4');
      Datam1.SQLQuerypagetable.SQL.Add(',Miscstring1');
      Datam1.SQLQuerypagetable.SQL.Add(',Miscstring2');
      Datam1.SQLQuerypagetable.SQL.Add(',Miscstring3');
      Datam1.SQLQuerypagetable.SQL.Add(',Miscdate');
      if (PageTableFieldCount >= 89) then
      begin
        Datam1.SQLQuerypagetable.SQL.Add(',PdfMaster');
        Datam1.SQLQuerypagetable.SQL.Add(',FlatMaster');
        Datam1.SQLQuerypagetable.SQL.Add(',PageFormatID');
        Datam1.SQLQuerypagetable.SQL.Add(',RipSetupID');
        Datam1.SQLQuerypagetable.SQL.Add(',FanoutID');
        Datam1.SQLQuerypagetable.SQL.Add(',PageCategoryID');
        if (PageTableFieldCount >= 95) then
        begin
          Datam1.SQLQuerypagetable.SQL.Add(',DeviceGroupID');
          Datam1.SQLQuerypagetable.SQL.Add(',PlateStatus');
          Datam1.SQLQuerypagetable.SQL.Add(',PostOutputVersion');
        end;
      end;
    end;
    Datam1.SQLQuerypagetable.SQL.Add('FROM  PageTable WITH (NOLOCK) ');

    Datam1.SQLQuerypagetable.SQL.Add('WHERE (Dirty = 0) AND (PressID = ' + IntToStr(pressid) + ')' + ' AND (ProductionID =  ' + IntToStr(ProductionID) + ')');
  if towerfilter <> '' then
  begin
    Datam1.SQLQuerypagetable.SQL.Add('AND PressTower IN (' + towerfilter + ')');
  end;

  // Datam1.Query2.SQL.Add('and locationid = '+IntToStr(locationid));
  case PlatesortType of
    0:
      begin
        Datam1.SQLQuerypagetable.SQL.Add
          ('ORDER BY editionid,PressSectionNumber,pressrunid,sheetnumber,sheetside,copyflatseparationset,flatseparationset,colorid,pagepositions');
      end;
    1:
      begin
        Datam1.SQLQuerypagetable.SQL.Add
          ('ORDER BY editionid,PressSectionNumber,pressrunid,sheetside,sheetnumber,copyflatseparationset,flatseparationset,colorid,pagepositions');
      end;
    2:
      begin
        Datam1.SQLQuerypagetable.SQL.Add
          ('ORDER BY editionid,PressSectionNumber,pressrunid,PressTower,sheetnumber,sheetside,copyflatseparationset,flatseparationset,colorid,pagepositions');
      end;
  else
    begin
      Datam1.SQLQuerypagetable.SQL.Add
        ('ORDER BY editionid,PressSectionNumber,pressrunid,sheetnumber,sheetside,copyflatseparationset,flatseparationset,colorid,pagepositions');
    end;
  end;

  NPagetabeldb := 0;
  SetLength(Pagetabeldb, 12);

  Datam1.loadAllPlateSQL(true);

end;

procedure TFormMain.planloadingSTB(partial: Boolean);

var
  N: TTreeNode;
  Loadtype: Integer;
  // I,ipr : Integer;
  ididarun, oktorun: Boolean;
  existingPlanOverwrite: Boolean;
begin
  try
    existingPlanOverwrite := false;
    Formprodplan.planningaction := 0;
    // 0 load,1 edit,2 create,3 copy, 4 move, 5 apply
    FormMain.planlogging('ActionnewplanLoadExecute');
    LoadIDs('planloading', false);
    if partial then
    begin
      FormLoadstbplan.CheckBoxusecurprod.Visible := true;
      FormLoadstbplan.CheckBoxusecurprod.Checked := true;
      FormLoadstbplan.Changeoffset1.Visible := true;
      // FormLoadstbplan.defaultpublid := 1;
      plateframesPublicationid := 1;
      plateframesPubdate := NOW;
      FormLoadstbplan.Itspartial := true;
      FormLoadstbplan.Applytodate := plateframesPubdate;
      FormLoadstbplan.Applytopublid := plateframesPublicationid;
      FormLoadstbplan.Applytopprodname := tNames1.productionrunIDtoname
        (Tplantreedata(TreeViewplan.Selected.Data^).ProductionID);
    end
    else
    begin
      FormLoadstbplan.CheckBoxusecurprod.Visible := false;
      FormLoadstbplan.CheckBoxusecurprod.Checked := false;
      FormLoadstbplan.Changeoffset1.Visible := false;
      FormLoadstbplan.Itspartial := false;
    end;
    Loadtype := -1;
    if TreeViewplan.Selected.Level > 0 then
    begin
      Loadtype := 2;
    end;

    if Loadtype = 2 then
    begin

      N := TreeViewplan.Selected;
      while N.Level > 1 do
        N := N.Parent;
      try
        Formprodplan.Editmode := PLANADDMODE_LOAD;
        FormLoadstbplan.editionlist := '';
        FormLoadstbplan.sectionlist := '';
        FormLoadstbplan.Maxpages := 0;
        FormLoadstbplan.defaultpublid := -1;
        FormLoadstbplan.Applytopublid := -1;
        FormLoadstbplan.Applytopprodname := '';

        plateframespressid := Tplantreedata(N.Data^).pressid;
        plateframeslocationid := Tplantreedata(N.Data^).LocationID;

        if partial then
        begin
          FormLoadstbplan.Applytodate :=
            Tplantreedata(TreeViewplan.Selected.Data^).Pubdate;
          FormLoadstbplan.Applytopublid :=
            Tplantreedata(TreeViewplan.Selected.Data^).Publicationid;
          FormLoadstbplan.defaultpublid :=
            Tplantreedata(TreeViewplan.Selected.Data^).Publicationid;
          FormLoadstbplan.Applytopprodname := tNames1.productionrunIDtoname
            (Tplantreedata(TreeViewplan.Selected.Data^).ProductionID);
        end;

        if Formprodplan.loadpressplanstb(ScrollBoxplanmain, true,
          ActionnewplanSmallimages.Checked, false, false) then
        begin
          //FormApplyproduction.GroupBoxdevice.Visible := true;

          FormApplyproduction.initialize(false);
          if FormApplyproduction.ShowModal = mrOK then
          begin
            if (Prefs.PlanningUseImportCenter) then
            begin
              Formprodplan.copyplantoplanpages;
              XMLPressID := plateframespressid;
              DataModuleXML.TransferplantoAXML(true);
              DataModuleXML.maketransxmls();
              exit;
            end
            else
            begin

              Formprodplan.productionidckeckup;
              Formprodplan.setpressrunids;
              oktorun := true;
              if FormApplyproduction.RadioGroupApplymode.ItemIndex = 0 then
              begin
                if Formprodplan.publanddateexists then
                begin
                  if MessageDlg
                    (InfraLanguage1.Translate('Overwrite existing plan ?'),
                    mtConfirmation, [mbYes, mbNo], 0) = mrNo then
                  begin
                    ididarun := false;
                    oktorun := false;
                  end;
                  existingPlanOverwrite := true;
                end;
              end;
              if oktorun then
              begin
                Formprodplan.Incrementpresssections;

                if Formprodplan.runproduction(true) then
                begin

                  //FormApplyproduction.GroupBoxdevice.Visible := true;
                  if FormApplyproduction.ComboBoxdevice.ItemIndex > 0 then
                  begin

                    SpecificDeviceID :=
                      tNames1.devicenametoid
                      (FormApplyproduction.ComboBoxdevice.text);
                    if (SpecificDeviceID <= 0) then
                    begin
                      SpecificDeviceID := inittypes.DeviceGroupnametoID
                        (FormApplyproduction.ComboBoxdevice.text);
                      if (SpecificDeviceID > 0) then
                        SpecificDeviceID := SpecificDeviceID + 100;
                    end;
                    applysepecifikdeviceid(SpecificDeviceID,
                      plateframesproductionid);
                  end;

                  if (RipSetupIDInPageTable) AND
                    (FormApplyproduction.ComboBoxRipSetupname.ItemIndex >= 0)
                    and (FormApplyproduction.ComboBoxPreflightSetup.ItemIndex >=
                    0) and (FormApplyproduction.ComboBoxInksaveSetup.ItemIndex
                    >= 0) then
                  ApplyRipSetups(plateframesproductionid,
                      FormApplyproduction.ComboBoxRipSetupname.text,
                      FormApplyproduction.ComboBoxPreflightSetup.text,
                      FormApplyproduction.ComboBoxInksaveSetup.text);

                    if (FormApplyproduction.ComboBoxPageFormat.ItemIndex > 0) then
                      ApplySpecificPageFormat( FormApplyproduction.ComboBoxPageFormat.Text, plateframesproductionid);

                  postapplyplan(plateframeslocationid, plateframespressid,
                    plateframesproductionid, plateframesPublicationid,
                    plateframesPubdate, Formprodplan.Editmode,
                    existingPlanOverwrite);

                end;
              end;

            end;
          end;
        end;

        Makeplantree(-1);
        findplantreenode;

      finally
        Setplanlock(false);
        screen.Cursor := crdefault;
        GroupBoxworking.Visible := false;
      end;
    end;

    Formprodplan.Editmode := PLANADDMODE_EDIT;

  finally
    Setplanlock(false);

  end;

end;

procedure TFormMain.Action1Execute(Sender: TObject);
var
  i: Integer;
  OutputPriority: Integer;
begin
  try
    begin
      for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
      begin
        if PBExListviewthumbnail.Items[i].Selected then
        begin
          OutputPriority := 0;

          Datam1.Query2.SQL.Clear;
          Datam1.Query2.SQL.Add
            ('Select TOP 1 OutputPriority from pagetable (NOLOCK) ');
          Datam1.Query2.SQL.Add('Where mastercopyseparationset = ' +
            IntToStr(Showthubms[PBExListviewthumbnail.Items[i].Index]
            .mastercopyseparationset));
          Datam1.Query2.Open;
          if not Datam1.Query2.Eof then
            OutputPriority := Datam1.Query2.Fields[0].AsInteger;
          Datam1.Query2.Close;

          Datam1.Query1.SQL.Clear;
          // Toggle flag
          if (OutputPriority >= 0) then
            OutputPriority := -1
          else
            OutputPriority := 0;
          Datam1.Query1.SQL.Add('UPDATE PageTable SET OutputPriority=' +
            IntToStr(OutputPriority) + ' WHERE MasterCopySeparationSet=' +
            IntToStr(Showthubms[PBExListviewthumbnail.Items[i].Index]
            .mastercopyseparationset));
          // Datam1.Query1.ExecSQL;
          trysql(Datam1.Query1);
          // Datam1.Query1.Close;
        end;
      end;
    end;

    ActionThumbnailrefresh.Execute;
  except
  end;
end;

procedure TFormMain.Action2Execute(Sender: TObject);
Var
  i: Integer;
  LI: TListItem;
  APageOnFlat, p, StartPos: Integer;
  SPageOnFlatName, copyflatseparationset, MiscStringData, ColName: String;
begin
  If (Prefs.PlanningPageNameIn = 0) then
    ColName := 'MiscString1'
  else
    ColName := 'MiscString3';

  FormReNumberPlate.Edit2.text := '1';
  FormReNumberPlate.Edit2.text := IntToStr(Views[Viewselected].LPV.Items.Count);
  FormReNumberPlate.AFlat := Views[Viewselected].LPV.Items.Count;

  FormReNumberPlate.ListView1.Items.Clear;

  for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
  // Høvler alle igennem
  begin
    APageOnFlat := Views[Viewselected].platesData[i].Npages;
    SPageOnFlatName := '';
    for p := 1 to APageOnFlat do
    begin
      If pos('Dinkey', Views[Viewselected].platesData[i].pages[p].pagename) = 0
      then
        SPageOnFlatName := SPageOnFlatName + ' ' + Views[Viewselected].platesData[i].pages[p].pagename;
    end;

    LI := FormReNumberPlate.ListView1.Items.Add;
    LI.caption := Views[Viewselected].platesData[i].MiscString1;
    LI.SubItems.Add(SPageOnFlatName);
    LI.SubItems.Add(IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
  end;

  If FormReNumberPlate.ShowModal = mrOK then
  Begin
    For i := 0 to FormReNumberPlate.ListView1.Items.Count - 1 do
    // Høvler alle igennem
    begin
      StartPos := StrToInt(FormReNumberPlate.edit1.text);
      copyflatseparationset := FormReNumberPlate.ListView1.Items[i].SubItems[1];
      if FormReNumberPlate.CheckBox1.Checked then
        MiscStringData := FormReNumberPlate.ListView1.Items[i].caption
      else
        MiscStringData := TUtils.LeadingZeroes(i + StartPos, 2);
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Update pagetable');
      if (Prefs.PlanningPageNameIn = 0) then
        Datam1.Query1.SQL.Add('Set MiscString1 = ''' + MiscStringData + '''')
      else if (Prefs.PlanningPageNameIn = 1) then
        Datam1.Query1.SQL.Add('Set MiscString3 = ''' + MiscStringData + '''')
      else
        Datam1.Query1.SQL.Add('Set MiscString1 = ''' + MiscStringData +
          ''', MiscString3 = ''' + MiscStringData + '''');
      // Datam1.Query1.SQL.Add('Set ' + ColName + ' = ''' + MiscStringData + '''');
      Datam1.Query1.SQL.Add('where CopyFlatSeparationSet = ''' +
        copyflatseparationset + '''');
      trysql(Datam1.Query1);
    end;
    ActionplaterefreshExecute(Sender);
  End;
end;

procedure TFormMain.ActionLinkToMasterPageExecute(Sender: TObject);
var
  i, copyseparationset, mastercopyseparationset, pdfmaster, editionid,
    pressid: Integer;
begin
  pdfmaster := 0;
  copyseparationset := 0;
  mastercopyseparationset := 0;
  editionid := 0;
  for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
  begin
    if (PBExListviewthumbnail.Items[i].Selected) then
    begin
      mastercopyseparationset := Showthubms[i].mastercopyseparationset;
      pdfmaster := Showthubms[i].pdfmaster;
      editionid := Showthubms[i].edition;
      break;
    end;
  end;

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('Select top 1 copyseparationset from pagetable (NOLOCK)');
  Datam1.Query1.SQL.Add('Where MasterCopySeparationSet = ' +
    IntToStr(mastercopyseparationset));
  Datam1.Query1.SQL.Add('AND PDFMaster = ' + IntToStr(pdfmaster));
  Datam1.Query1.SQL.Add('AND EditionID = ' + IntToStr(editionid));
  Datam1.Query1.SQL.Add('AND ProductionID = ' +
    IntToStr(Global_SelectedProductionID));
  // if (Pressvisibilylimited) AND (PressvisibilyIN<>'') then
  // Datam1.Query1.SQL.Add('AND Pressid IN ' + PressvisibilyIN);

  Datam1.Query1.SQL.Add('AND Active = 1');
  Datam1.Query1.SQL.Add('AND PageType <> 3');
  Datam1.Query1.SQL.Add('And Dirty=0');
  Datam1.Query1.Open;
  if not Datam1.Query1.Eof then
    copyseparationset := Datam1.Query1.Fields[0].AsInteger;
  Datam1.Query1.Close;

  // FormLinkToMaster.CopySeparationSet := CopySeparationSet;
  FormLinkToMaster.InitFormData(copyseparationset);
  FormLinkToMaster.ShowModal;

  ActionThumbnailrefresh.Execute;

end;

// Reset status
procedure TFormMain.Action3Execute(Sender: TObject);
var
  i: Integer;
  approved: Integer;
begin

  if MessageDlg
    ('This action will delete the selected page and the status. Do you want to continue ? ',
    mtwarning, [mbYes, mbNo], 0) = mryes then
  begin

    for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
    begin
      if (PBExListviewthumbnail.Items[i].Selected) then
      begin
        approved := -1;
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('SELECT Top 1 Approved FROM PageTable WITH (NOLOCK)');
        Datam1.Query1.SQL.Add('WHERE Dirty=0 AND mastercopyseparationset = ' +
          IntToStr(Showthubms[i].mastercopyseparationset));
        Datam1.Query1.SQL.Add(WeditionStr);
        Datam1.Query1.SQL.Add(WpublicationStr);
        Datam1.Query1.Open;
        if not Datam1.Query1.Eof then
          approved := Datam1.Query1.Fields[0].AsInteger;
        Datam1.Query1.Close;

        if (approved = 1) or (approved = 2) then
          approved := 0;

        Datam1.Query1.SQL.Add
          ('update pagetable set inkstatus = 0, proofstatus = 0, version = 0, status = 0, approveuser='''', approved = '
          + IntToStr(approved));
        Datam1.Query1.SQL.Add('where mastercopyseparationset = ' +
          IntToStr(Showthubms[i].mastercopyseparationset));
        Datam1.Query1.SQL.Add(WeditionStr);
        Datam1.Query1.SQL.Add(WpublicationStr);
        trysql(Datam1.Query1);

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('Delete PrepollPageTable');
        Datam1.Query1.SQL.Add('where (mastercopyseparationset = ' +
          IntToStr(Showthubms[i].mastercopyseparationset) + ')');
        Datam1.Query1.SQL.Add('and (Event not in (130,136,137))');
        trysql(Datam1.Query1);

      end;
    end;

    ActionThumbnailrefresh.Execute;
  End;

end;

procedure TFormMain.Action4Execute(Sender: TObject);
Type
  TPageData = Record
    Name: String;
    MiscString1: String;
    MiscString3: Integer;
    PlateNr: Integer;
    SectionID: Integer;
  End;
Var
  PageData: Array [0 .. 100] of TPageData;
  pressrunid, iAntalPagina,
  // iToValue,
  ProCount, p, PN, iAntalPlates: Integer;
  iaMinPagina: Array of Integer;
  LI: TListItem;
  SLInkComment, SLPubDate, SLPagina: Tstringlist;
  i, j: Integer;
  sMiscString1, sMiscString3, sInkComment: String;
  // hasData      : Boolean;
  MiscString3: string;
  MiscString1: string;
  Pubdate: TDateTime;

  // aPaginaOld   : Array of String;
  // aPaginaNew   : Array of String;
begin
  { Todo
    Hvis ikke Min så prøv at finde hvor det er korrekt.
  }
  PN := 0;

  FormInkPreeSet.ListView1.Items.Clear;
  FormInkPreeSet.ComboBoxAllPub.Items.Clear;

  pressrunid := Views[Viewselected].platesData[0].runid;
  p := Views[Viewselected].Nplates;

  // Hent alle produktioner
  Datam1.Query1.SQL.Clear;

  Datam1.Query1.SQL.Add
    ('Select distinct InputAliases.ShortName from PageTable With (NOLOCK)');
  Datam1.Query1.SQL.Add
    ('Inner join PublicationNames ON PageTable.PublicationID = PublicationNames.PublicationID');
  Datam1.Query1.SQL.Add
    ('Inner join InputAliases ON PublicationNames.Name = InputAliases.LongName');
  Datam1.Query1.SQL.Add('Where Dirty = 0 order by InputAliases.ShortName');
  Datam1.Query1.Open;
  while not Datam1.Query1.Eof do
  begin
    // FormInkPreeSet.ComboBoxAllPub.AddItem(Datam1.Query1.FieldByName('ShortName').AsString, TObject(Datam1.Query1.FieldByName('PressrunID').AsInteger));
    FormInkPreeSet.ComboBoxAllPub.Items.Add
      (Datam1.Query1.FieldByName('ShortName').AsString);
    Datam1.Query1.Next;
  End;
  Datam1.Query1.Close;

  // Hvor mange Plates?
  Datam1.Query1.SQL.Clear;
  // 20221201 NAN  Changed from MiscString3 to MiscString1 (plate number) ??
  //Datam1.Query1.SQL.Add('Select Count(Distinct MiscString3) from PageTable with (NOLOCK) where Dirty=0 AND PressRunID = '''
   // + IntToStr(pressrunid) + '''');
      Datam1.Query1.SQL.Add('Select Count(Distinct MiscString1) from PageTable with (NOLOCK) where Dirty=0 AND PressRunID = ' + IntToStr(pressrunid));
  Datam1.Query1.Open;
  If not Datam1.Query1.Eof then
    iAntalPlates := Datam1.Query1.Fields[0].AsInteger;
  Datam1.Query1.Close;

  // Hvor mange og hvilke Pages
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('Select Distinct PageName, MiscString3, Miscstring1,SectionID from PageTable with (NOLOCK) where Dirty=0 AND PressRunID = ' + IntToStr(pressrunid) );
  Datam1.Query1.Open;
  i := 0;

  while not Datam1.Query1.Eof do
  begin
    PageData[i].Name := Datam1.Query1.Fields[0].AsString;

    MiscString3 := Datam1.Query1.Fields[1].AsString;
    PageData[i].SectionID := Datam1.Query1.Fields[3].AsInteger;
    if pos(',', MiscString3) > 0 then // Er det en komma sep string
      PageData[i].MiscString3 :=
        StrToIntDef(Copy(MiscString3, 1, pos(',', MiscString3) - 1), 0)
    else
      PageData[i].MiscString3 := StrToIntDef(MiscString3, 0);
    Inc(i);
    Datam1.Query1.Next;
  End;
  Datam1.Query1.Close;
  iAntalPagina := i;

  // Hvad er minimum?
  { Datam1.Query1.close;
    Datam1.Query1.SQL.clear;
    //Datam1.Query1.SQL.Add('Select MIN(CAST(MiscString3 as int)) as MiscString3, Count(Distinct MiscString3) AS Antal from PageTable with (NOLOCK) where PressRunID = ''' + IntToStr(PressRunID) + '''');
    Datam1.Query1.SQL.Add('Select MIN(CAST(MiscString3 as int)) as MiscString3, Count(Distinct MiscString3) AS Antal from PageTable with (NOLOCK) where PressRunID = ''' + IntToStr(PressRunID) + '''');
    Datam1.Query1.open;
    If NOT Datam1.Query1.eof then
    begin
    iMinPagina   := Datam1.Query1.FieldByName('MiscString3').AsInteger;
    End; }

  MiscString1 := '';
  sInkComment := '';

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('select TOP 1 InkComment, MiscString1 from Pressrunid With (NOLOCK) where PressRunID =' + IntToStr(pressrunid));
  Datam1.Query1.Open;
  If NOT Datam1.Query1.Eof Then
  begin
    sInkComment := Trim(Datam1.Query1.Fields[0].AsString);
    MiscString1 := Trim(Datam1.Query1.Fields[1].AsString);
  end;
  Datam1.Query1.Close;

  if (sInkComment <> '') and (MiscString1 = '') then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('select TOP 1 PubDate from PageTable WITH (NOLOCK) where PressRunID =' + IntToStr(pressrunid));
    Datam1.Query1.Open;
    If not Datam1.Query1.Eof then
      MiscString1 := FormaTDateTime('yyyymmdd', Datam1.Query1.Fields[0].AsDateTime);
    Datam1.Query1.Close;
  end;

  if (sInkComment <> '') and (MiscString1 <> '') then
  begin
    SLInkComment := Tstringlist.Create;
    SLInkComment.Clear;
    SLInkComment.Delimiter := ',';
    SLInkComment.StrictDelimiter := true;
    SLInkComment.DelimitedText := sInkComment;

    SLPubDate := Tstringlist.Create;
    SLPubDate.Clear;
    SLPubDate.Delimiter := ',';
    SLPubDate.StrictDelimiter := true;
    SLPubDate.DelimitedText := MiscString1;

    ProCount := SLInkComment.Count;
    SetLength(iaMinPagina, ProCount);

    SLPagina := Tstringlist.Create;

    for i := 0 to SLInkComment.Count - 1 do
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Select DISTINCT MiscString3 from PageTable with (NOLOCK) where PressRunID = ' + IntToStr(pressrunid));
      Datam1.Query1.Open;
      iaMinPagina[i] := 10000;
      while not Datam1.Query1.Eof do
      begin
        SLPagina.Clear;
        SLPagina.Delimiter := ',';
        SLPagina.StrictDelimiter := true;
        SLPagina.DelimitedText := Datam1.Query1.Fields[0].AsString + ',,,,,';
        if StrToIntDef(SLPagina[i], 1) < iaMinPagina[i] Then
          iaMinPagina[i] := StrToIntDef(SLPagina[i], 1);
        Datam1.Query1.Next;
      end;
      Datam1.Query1.Close;

      LI := FormInkPreeSet.ListView1.Items.Add;
      LI.caption := SLInkComment[i];
      LI.SubItems.Add(SLPubDate[i]);
      LI.SubItems.Add(TUtils.LeadingZeroes(iaMinPagina[i], 2));
    end;

    SLInkComment.free;
    SLPubDate.free;
    SLPagina.free;
  end;

  If FormInkPreeSet.ShowModal = mrOK then
  begin
    sInkComment := '';
    sMiscString1 := '';
    for i := 0 to FormInkPreeSet.ListView1.Items.Count - 1 do
    begin
      if i <> 0 then
      begin
        sInkComment := sInkComment + ',';
        sMiscString1 := sMiscString1 + ',';
      End;
      sInkComment := sInkComment + FormInkPreeSet.ListView1.Items[i].caption;
      sMiscString1 := sMiscString1 + FormInkPreeSet.ListView1.Items[i]
        .SubItems[0];
    End;
    If Length(sInkComment) > 200 then
      ShowMessage
        ('Too many names in pressrunID table. It is limited to 200 characters. Please contact Infralogic.');

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('Update Pressrunid Set InkComment = ''' + sInkComment
      + ''', MiscString1 = ''' + sMiscString1 + ''' where PressRunID=' + IntToStr(pressrunid));
    trysql(Datam1.Query1);

    { Datam1.Query1.close;
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Update pageTable Set MiscString3 = Cast((Cast(MiscString3 as Int) + 100) as VarChar(50)) where PressRunID=' + IntToStr(PressRunID));
      TrySql(Datam1.Query1); }

    For j := 0 to iAntalPagina - 1 do
    begin
      sMiscString3 := '';
      for i := 0 to FormInkPreeSet.ListView1.Items.Count - 1 do
      begin
        if i <> 0 then
          sMiscString3 := sMiscString3 + ',';
        // sMiscString3 := sMiscString3 + IntToStr(StrToInt(FormInkPreeSet.ListView1.Items[i].SubItems[1]) + (PageData[j].MiscString3 - 1));

        // Find plade nr
        Datam1.Query1.SQL.Clear;
        // 20221201 NAN Added + ' AND SectionID=' + IntToStr( PageData[j].SectionID))
        Datam1.Query1.SQL.Add
          ('Select TOP 1 MiscString1 from PageTable where PageName = ''' +
          PageData[j].Name + ''' AND PressRunID = ' + IntToStr(pressrunid) + ' AND SectionID=' + IntToStr( PageData[j].SectionID));
        Datam1.Query1.Open;
        if not Datam1.Query1.Eof then
          PN := StrToInt(Datam1.Query1.Fields[0].AsString);
        Datam1.Query1.Close;

        sMiscString3 := sMiscString3 +
          IntToStr(StrToInt(FormInkPreeSet.ListView1.Items[i].SubItems[1])
          + PN - 1);
      End;

      Datam1.Query1.SQL.Clear;
       // 20221201 NAN Added + ' AND SectionID=' + IntToStr( PageData[j].SectionID))
      Datam1.Query1.SQL.Add('Update pageTable Set MiscString3 = ''' +
        sMiscString3 + ''' where PageName = ''' + PageData[j].Name +
        ''' AND PressRunID = ' + IntToStr(pressrunid) + ' AND SectionID=' + IntToStr( PageData[j].SectionID));
      trysql(Datam1.Query1);
    End;
    { For x := 0 to iAntalPagina - 1 do
      begin
      iToValue := StrToInt(FormInkPreeSet.ListView1.Items[i].Subitems[1]) + x;
      Datam1.Query1.close;
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('Update pageTable Set MiscString3 = ''' + LeadingZeroes(iToValue, 2) + ''' where MiscString3 = ''' + IntToStr(iaMinPagina[i] + 100) + ''' AND PressRunID = ' + IntToStr(PressRunID));
      //Datam1.Query1.SQL.savetofile('004.sql');
      TrySql(Datam1.Query1);
      End; }
  End;
end;

procedure TFormMain.Action5Execute(Sender: TObject);
  function Makeprodrealwherestr: String;
  var
    i: Integer;
    wherestr: string;
  begin
    if TreeViewprodcontrol.Selected = nil then
      exit;
    if TreeViewprodcontrol.Selected.Level < 0 then
      exit;

    wherestr := '(';
    for i := 1 to StringGridprods.RowCount do
    begin
      if StringGridprodsdata[i].Selected then
      begin
        if Length(wherestr) > 1 then
          wherestr := wherestr + ' OR ';
        wherestr := wherestr + '(pressrunid = ' +
          IntToStr(StringGridprodsdata[i].pressrunid) + ')';
      end;
    end;

    if Length(wherestr) > 1 then
      wherestr := wherestr + ')'
    else
      wherestr := '';

    result := wherestr;
  end;

Var
  wherestr: String;
  pressrunid: Integer;
  hasRun: Boolean;
begin
  try
    pressrunid := 0;
    hasRun := false;

    if TreeViewprodcontrol.Selected = nil then
      exit;

    wherestr := Makeprodrealwherestr();

    Datam1.SQLQuerySJO1.SQL.Clear;
    Datam1.SQLQuerySJO1.SQL.Add
      ('SELECT TOP 1 pressrunid FROM PageTable (NOLOCK)');
    Datam1.SQLQuerySJO1.SQL.Add('WHERE ' + wherestr);
    Datam1.SQLQuerySJO1.SQL.Add('AND active = 1 AND pagetype <> 3');
    Datam1.SQLQuerySJO1.Open;
    if not Datam1.SQLQuerySJO1.Eof then
      pressrunid := Datam1.SQLQuerySJO1.Fields[0].AsInteger;
    Datam1.SQLQuerySJO1.Close;

    FormSelectDefinition.caption := 'Select Output Method';
    FormSelectDefinition.ComboBox1.Clear;

    Datam1.SQLQuerySJO1.SQL.Clear;
    Datam1.SQLQuerySJO1.SQL.Add
      ('Select OutputMethodID, OutputMethodName from OutputMethodNames Order by OutputMethodID');
    Datam1.SQLQuerySJO1.Open;
    while NOT Datam1.SQLQuerySJO1.Eof do
    begin
      FormSelectDefinition.ComboBox1.Items.Add
        (Datam1.SQLQuerySJO1.Fields[1].AsString);
      Datam1.SQLQuerySJO1.Next;
    End;
    Datam1.SQLQuerySJO1.Close;

    // Er den sat i forvejen
    Datam1.SQLQuerySJO1.SQL.Clear;
    Datam1.SQLQuerySJO1.SQL.Add
      ('Select TOP 1 OutputMethodName from PressRunOutputMethod');
    Datam1.SQLQuerySJO1.SQL.Add('Where PressRunID = ' + IntToStr(pressrunid));
    Datam1.SQLQuerySJO1.Open;

    If NOT Datam1.SQLQuerySJO1.Eof then
      FormSelectDefinition.ComboBox1.ItemIndex :=
        FormSelectDefinition.ComboBox1.Items.IndexOf
        (Datam1.SQLQuerySJO1.Fields[0].AsString)

      // FormSelectDefinition.ComboBox1.Text := Datam1.SQLQuerySJO1.FieldByName['OutputMethodName'].AsString
    else
      FormSelectDefinition.ComboBox1.ItemIndex := 0;

    Datam1.SQLQuerySJO1.Close;

    if FormSelectDefinition.ShowModal = mrOK then
    begin
      Datam1.SQLQuerySJO1.SQL.Clear;
      Datam1.SQLQuerySJO1.SQL.Add('Select TOP 1 * from PressRunOutputMethod ');
      Datam1.SQLQuerySJO1.SQL.Add('Where PressRunID = ' + IntToStr(pressrunid));
      Datam1.SQLQuerySJO1.Open;
      If NOT Datam1.SQLQuerySJO1.Eof then
        hasRun := true;
      Datam1.SQLQuerySJO1.Close;

      if (hasRun) then
      begin
        Datam1.SQLQuerySJO1.SQL.Clear;
        Datam1.SQLQuerySJO1.SQL.Add
          ('Update PressRunOutputMethod SET OutputMethodName = ''' +
          FormSelectDefinition.ComboBox1.text + '''');
        Datam1.SQLQuerySJO1.SQL.Add('Where PressRunID = ' +
          IntToStr(pressrunid));
        Datam1.SQLQuerySJO1.ExecSQL(false);
        Datam1.SQLQuerySJO1.Close;
      End
      else
      begin
        Datam1.SQLQuerySJO1.SQL.Clear;
        Datam1.SQLQuerySJO1.SQL.Add('Insert into PressRunOutputMethod ');
        Datam1.SQLQuerySJO1.SQL.Add('(OutputMethodName, PressRunID)');
        Datam1.SQLQuerySJO1.SQL.Add('Values');
        Datam1.SQLQuerySJO1.SQL.Add
          ('(''' + FormSelectDefinition.ComboBox1.text + '''');
        Datam1.SQLQuerySJO1.SQL.Add(',' + IntToStr(pressrunid) + ')');
        Datam1.SQLQuerySJO1.ExecSQL(false);
        Datam1.SQLQuerySJO1.Close;
      End;

      // Newrefreshprogress;
      Datam1.SQLQuerySJO1.SQL.Clear;
      Datam1.SQLQuerySJO1.SQL.Add('exec spPlanCenterSetOutputMethod');
      Datam1.SQLQuerySJO1.SQL.Add('@PressRunID = ' + IntToStr(pressrunid));
      Datam1.SQLQuerySJO1.ExecSQL(false);
      Datam1.SQLQuerySJO1.Close;
    end;

  Except
  end;
  ActionProgressrefreshExecute(Sender);
end;

procedure TFormMain.ActionBestFittExecute(Sender: TObject);
begin
  // Steen 020315
  ActionBestFitt.Checked := not ActionBestFitt.Checked;
  ActionThumbnailrefreshExecute(Sender);
end;

procedure TFormMain.CheckBoxNounplannedClick(Sender: TObject);
Var
  ini: TIniFile;
begin
  ActionPlaterefreshtreeExecute(FormMain);

  Prefs.DefaultHidePagePlans := CheckBoxNounplanned.Checked;
  try
    ini := TIniFile.Create(TUtils.GetPlanCenterIniFilePath(Prefs.PlanCenterConfigFileName));
    ini.Writebool('system', 'CheckBoxDefaultHidePagePlans',
      Prefs.DefaultHidePagePlans);
    ini.free;
  except

  end;
end;

procedure TFormMain.CheckBoxolreadyplatesClick(Sender: TObject);
begin
  ActionPlaterefreshtreeExecute(FormMain);
end;

procedure TFormMain.ActionUpperHalfScreenExecute(Sender: TObject);
begin
  Self.width := screen.width;
  Self.Height := screen.Height div 2;
  Self.Top := 0;
  Self.left := 0;
end;

procedure TFormMain.ActionLowerHalfScreenExecute(Sender: TObject);
begin
  Self.width := screen.width;
  Self.Height := screen.Height div 2;
  Self.Top := screen.Height div 2;
  Self.left := 0;
end;

procedure TFormMain.ActionRemakeTileExecute(Sender: TObject);
var
  i, thisMasterCopySeparationSet: Integer;
  FirstItem: Boolean;
  PreviewGUID, PreviewPath, T { ,T1 } : String;
  Publicationid: Integer;
  Pubdate: TDateTime;
begin
Pubdate := Now;
  FirstItem := true;
  Nselectedmasters := 0;
  Publicationid := 0;
  for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
  begin
    if (PBExListviewthumbnail.Items[i].Selected) then
    begin
      thisMasterCopySeparationSet := Showthubms[i].mastercopyseparationset;

      if (thisMasterCopySeparationSet > 0) AND (FirstItem) then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('SELECT TOP 1 PublicationID,PubDate FROM PageTable WITH (NOLOCK) WHERE ');
        Datam1.Query1.SQL.Add('MasterCopySeparationSet=' +
          IntToStr(thisMasterCopySeparationSet) +
          ' AND Dirty=0 AND UniquePage=1');

        Datam1.Query1.Open;
        if not Datam1.Query1.Eof then
        begin
          Publicationid := Datam1.Query1.Fields[0].AsInteger;
          Pubdate := Datam1.Query1.Fields[1].AsDateTime;
        end;
        Datam1.Query1.Close;

        PreviewGUID := inittypes.GeneratePreviewGUID(Publicationid, Pubdate);
        FirstItem := false;
      end;

      PreviewPath := FormMain.getfileserverpath(PATHTYPE_CCPREVIEWS,
        Showthubms[i].fileserver);

      T := IntToStr(thisMasterCopySeparationSet) + '.jpg';

      if (Prefs.NewPreviewNames) then
      begin
        T := PreviewGUID + '====' +
          IntToStr(thisMasterCopySeparationSet) + '.jpg';

        if not FileExists(Includetrailingpathdelimiter(PreviewPath) + T) then
          T := IntToStr(thisMasterCopySeparationSet) + '.jpg';
      end;

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('INSERT INTO FlashPreviewQueue (FileName,EventTime) VALUES (''' + T +
        ''',GETDATE())');
      trysql(Datam1.Query1);

    end;
  end;

end;

procedure TFormMain.ActionRemoteControlExecute(Sender: TObject);
begin
  TUtils.ExecNewProcess('CCRemote.exe', PDFOutputfilename);
end;

procedure TFormMain.ActionPlateSetImagedExecute(Sender: TObject);
var
  i: Integer;
begin
  if not AnyPlatesselected then
    exit;

  for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
  begin
    if Views[Viewselected].LPV.Items[i].Selected then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable');
      Datam1.Query1.SQL.Add('set Status=50');
      // Datam1.Query1.SQL.Add('where (Status=49) OR (Status=46) OR (Status=30 AND OutputVersion>0)');
      Datam1.Query1.SQL.Add('where Copyflatseparationset = ' +
        IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
      trysql(Datam1.Query1);
      Datam1.SetNewtreeprodid;
    end;
  end;
  Datam1.UpdateTreeStateOnProduction(false);
  ActionplaterefreshExecute(FormMain);
end;

procedure TFormMain.ActionProgressautorefreshExecute(Sender: TObject);
{ var
  i : Integer; }
begin
  ActionProgressautorefresh.Checked := not ActionProgressautorefresh.Checked;
  Timerautorefreshcount := 1;
  ActionProgressautorefresh.ImageIndex := 149;
end;

procedure TFormMain.ActionReversePageNumbersExecute(Sender: TObject);
var
  i, lownumber, highnumber: Integer;
  pagenamelist: Tstringlist;
  PageIndexList: Tstringlist;
  MasterCopySeparationSetList: Tstringlist;
begin
  MasterCopySeparationSetList := Tstringlist.Create;
  pagenamelist := Tstringlist.Create;
  PageIndexList := Tstringlist.Create;

  lownumber := 9999;
  highnumber := 0;
  For i := 0 to PBExListviewthumbnail.Items.Count - 1 do
  begin
    if (PBExListviewthumbnail.Items[i].Selected) then
    begin
      MasterCopySeparationSetList.Add
        (IntToStr(Showthubms[i].mastercopyseparationset));
      pagenamelist.Add(Showthubms[i].pagename);
      PageIndexList.Add(IntToStr(Showthubms[i].pageindex));
      if (StrToInt(Showthubms[i].pagename) > highnumber) then
        highnumber := StrToInt(Showthubms[i].pagename);
      if (StrToInt(Showthubms[i].pagename) < lownumber) then
        lownumber := StrToInt(Showthubms[i].pagename);

    end;
  end;

  if (pagenamelist.Count <= 1) then
  begin
    ShowMessage('Please select at least two pages to change');
    exit;
  end;

  if (pagenamelist.Count mod 2) = 1 then
  begin
    ShowMessage('Please select an even number of pages to change');
    exit;
  end;

  FormReversePageNumbers.LabelPageRange.caption := IntToStr(highnumber) + ' to '
    + IntToStr(lownumber);
  FormReversePageNumbers.CheckBoxRotateSelectedPages.Checked := true;

  if (FormReversePageNumbers.ShowModal <> mrOK) then
    exit;

  for i := 0 to MasterCopySeparationSetList.Count - 1 do
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('UPDATE PageTable ');
    Datam1.Query1.SQL.Add('SET PageName=' + pagenamelist[pagenamelist.Count
      - i - 1]);
    if (FormReversePageNumbers.CheckBoxRotateSelectedPages.Checked) then
    begin
      Datam1.Query1.SQL.Add(', FanoutID=' + IntToStr(2 * 256));
      Datam1.Query1.SQL.Add(', Status=0, ProofStatus=0, Version=0');
    end;
    Datam1.Query1.SQL.Add('WHERE MasterCopySeparationSet = ' +
      MasterCopySeparationSetList[i]);
    trysql(Datam1.Query1);

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('DELETE FROM Prepollpagetable');
    Datam1.Query1.SQL.Add('WHERE MasterCopySeparationSet = ' +     MasterCopySeparationSetList[i]);
    Datam1.Query1.SQL.Add('AND Event IN (120,126,127,110,116,117,210,216,217)');
    trysql(Datam1.Query1);

    if (FormReversePageNumbers.CheckBoxReprocessNow.Checked) then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('INSERT FileCenterRetryQueue VALUES (' +
        MasterCopySeparationSetList[i] + ',GETDATE())');
      trysql(Datam1.Query1);
    end;
  end;

  MasterCopySeparationSetList.free;
  pagenamelist.free;
  PageIndexList.free;

  ActionThumbnailrefreshExecute(FormMain);
end;

procedure TFormMain.TreeViewProductionCustomDrawItem(Sender: TCustomTreeView;
  Node: TTreeNode; State: TCustomDrawState; var DefaultDraw: Boolean);

begin
  if (Node.Level <> 2) then
    exit;
  if (TTreeViewpagestype(Node.Data^).PagesReady) AND
    (Prefs.TreeShowPagesReadyFlag) then
  begin
    (Sender as TCustomTreeView).Canvas.Brush.Color := RGB(144, 238, 144);
  end;
  if (TTreeViewpagestype(Node.Data^).PagesIllegal) AND
    (Prefs.TreeShowPagesOutOfRange) then
  begin
    (Sender as TCustomTreeView).Canvas.Brush.Color := clWebRed;
  end;

  if (TTreeViewpagestype(Node.Data^).PagesIllegal) AND
    (Prefs.TreeShowPagesOutOfRange) then
    TabSheetThumbnails.ImageIndex := 18
  else
    TabSheetThumbnails.ImageIndex := 1;

end;

procedure TFormMain.TreeViewpagelistCustomDrawItem(Sender: TCustomTreeView;
  Node: TTreeNode; State: TCustomDrawState; var DefaultDraw: Boolean);
begin
  if (Node.Level = 2) then
  begin
    if (Prefs.TreeShowPagesReadyFlag) then
    begin
      if (TTreeViewpagestype(Node.Data^).PagesReady) then
      begin
        (Sender as TCustomTreeView).Canvas.Brush.Color := RGB(144, 238, 144);
      end;
    end;
    if (Prefs.TreeShowPagesOutOfRange) then
    begin
      if (TTreeViewpagestype(Node.Data^).PagesIllegal)  then
      begin
        (Sender as TCustomTreeView).Canvas.Brush.Color := clWebRed;
      end;
    end;
  end;
  if (Prefs.TreeShowPagesOutOfRange) then
  begin
    if (TTreeViewpagestype(Node.Data^).PagesIllegal) then
      TabSheetThumbnails.ImageIndex := 18
    else
      TabSheetThumbnails.ImageIndex := 1;
  end
  else
    TabSheetThumbnails.ImageIndex := 1;

end;

procedure TFormMain.TreeViewThumbsCustomDrawItem(Sender: TCustomTreeView;
  Node: TTreeNode; State: TCustomDrawState; var DefaultDraw: Boolean);
begin
  if (Node.Level = 2) then
  begin
    if (TTreeViewpagestype(Node.Data^).PagesReady) AND
      (Prefs.TreeShowPagesReadyFlag) then
    begin
      (Sender as TCustomTreeView).Canvas.Brush.Color := RGB(144, 238, 144);
    end;
    if (TTreeViewpagestype(Node.Data^).PagesIllegal) AND (Prefs.TreeShowPagesOutOfRange) then
    begin
      (Sender as TCustomTreeView).Canvas.Brush.Color := clWebRed;
    end;
  end;
  if (Prefs.TreeShowPagesOutOfRange) then
  begin
    if (TTreeViewpagestype(Node.Data^).PagesIllegal) then
      TabSheetThumbnails.ImageIndex := 18
    else
      TabSheetThumbnails.ImageIndex := 1;
  end
  else
    TabSheetThumbnails.ImageIndex := 1;
end;

procedure TFormMain.TreeViewPlateviewCustomDrawItem(Sender: TCustomTreeView;
  Node: TTreeNode; State: TCustomDrawState; var DefaultDraw: Boolean);
begin
  if (Node.Level = 2) then
  begin
    if  (TTreeViewpagestype(Node.Data^).PagesReady) AND (Prefs.TreeShowPagesReadyFlag) then
    begin
      (Sender as TCustomTreeView).Canvas.Brush.Color := RGB(144, 238, 144);
    end;
    if  (TTreeViewpagestype(Node.Data^).PagesIllegal) AND (Prefs.TreeShowPagesOutOfRange) then
    begin
      (Sender as TCustomTreeView).Canvas.Brush.Color := clWebRed;
    end;
  end;
  if (Prefs.TreeShowPagesOutOfRange) then
  begin
    if (TTreeViewpagestype(Node.Data^).PagesIllegal) then
      TabSheetThumbnails.ImageIndex := 18
    else
      TabSheetThumbnails.ImageIndex := 1;
  end
  else
     TabSheetThumbnails.ImageIndex := 1;
end;

procedure TFormMain.TreeViewNeweddtreeCustomDrawItem(Sender: TCustomTreeView;
  Node: TTreeNode; State: TCustomDrawState; var DefaultDraw: Boolean);
begin
 if (Node.Level = 2) then
 begin
    if (TTreeViewpagestype(Node.Data^).PagesReady) AND (Prefs.TreeShowPagesReadyFlag) then
    begin
      (Sender as TCustomTreeView).Canvas.Brush.Color := RGB(144, 238, 144);
    end;
    if (TTreeViewpagestype(Node.Data^).PagesIllegal) AND (Prefs.TreeShowPagesOutOfRange) then
    begin
      (Sender as TCustomTreeView).Canvas.Brush.Color := clWebRed;
    end;
  end;
  if (Prefs.TreeShowPagesOutOfRange)  then
  begin
    if (TTreeViewpagestype(Node.Data^).PagesIllegal) AND (Prefs.TreeShowPagesOutOfRange) then
      TabSheetThumbnails.ImageIndex := 18
    else
      TabSheetThumbnails.ImageIndex := 1;
  end
  else
      TabSheetThumbnails.ImageIndex := 1;
end;

procedure TFormMain.TreeViewLogfilterCustomDrawItem(Sender: TCustomTreeView;
  Node: TTreeNode; State: TCustomDrawState; var DefaultDraw: Boolean);
begin
  if (Node.Level = 2) AND (TTreeViewpagestype(Node.Data^).PagesReady) AND
    (Prefs.TreeShowPagesReadyFlag) then
  begin
    (Sender as TCustomTreeView).Canvas.Brush.Color := RGB(144, 238, 144);
  end;
  if (Node.Level = 2) AND (TTreeViewpagestype(Node.Data^).PagesIllegal) AND
    (Prefs.TreeShowPagesOutOfRange) then
  begin
    (Sender as TCustomTreeView).Canvas.Brush.Color := clWebRed;
  end;
  if (Prefs.TreeShowPagesOutOfRange) then
  begin
    if (TTreeViewpagestype(Node.Data^).PagesIllegal) then
      TabSheetThumbnails.ImageIndex := 18
    else
      TabSheetThumbnails.ImageIndex := 1;
  end
  else
      TabSheetThumbnails.ImageIndex := 1;
end;

procedure TFormMain.ActionProgressTowerReleaseExecute(Sender: TObject);
var
  i: Integer;
  PressRunIDList: string;
  PressTowerList: string;
  mkres: Integer;
  TemplateID: Integer;
  deviceid: Integer;
begin
  try

    if TreeViewprodcontrol.Selected = nil then
      exit;

    PressRunIDList := '(-99';
    PressTowerList := '(''x''';
    TemplateID := 0;
    for i := 1 to StringGridprods.RowCount do
    begin
      if StringGridprodsdata[i].Selected then
      begin
        PressRunIDList := PressRunIDList + ',' +
          IntToStr(StringGridprodsdata[i].pressrunid);
      end;
    end;

    FormreleaseTo.checklistbox1.Items.Clear;
    FormreleaseTo.RadioGroup1.Items.Clear;
    FormreleaseTo.caption := 'Release for selected towers';

    PressRunIDList := PressRunIDList + ')';

    i := 0;
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('SELECT DISTINCT PressTower,TemplateID FROM PageTable WITH (NOLOCK)');
    Datam1.Query1.SQL.Add('WHERE PressRunID IN ' + PressRunIDList);
    Datam1.Query1.SQL.Add('AND Active = 1 AND pagetype <> 3');
    Datam1.Query1.Open;
    while not Datam1.Query1.Eof do
    begin
      FormreleaseTo.checklistbox1.Items.Add(Datam1.Query1.Fields[0].AsString);
      FormreleaseTo.checklistbox1.Checked[i] := false;
      TemplateID := Datam1.Query1.Fields[1].AsInteger;
      Inc(i);
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;

    inittypes.getdevicelistfromtemplate
      (inittypes.gettemplatenumberfromID(TemplateID));
    FormreleaseTo.RadioGroup1.Items := Aktdevicelist;
    FormreleaseTo.RadioGroup1.Items.Add('Workload');
    FormreleaseTo.RadioGroup1.Items.Add('Unchanged');
    FormreleaseTo.RadioGroup1.ItemIndex :=
      FormreleaseTo.RadioGroup1.Items.Count - 1;

    mkres := FormreleaseTo.ShowModal;
    if (mkres = mrOK) or (mkres = mrall) then
    begin

      deviceid := 0;
      if (FormreleaseTo.RadioGroup1.Items[FormreleaseTo.RadioGroup1.ItemIndex]
        <> 'Workload') AND
        (FormreleaseTo.RadioGroup1.Items[FormreleaseTo.RadioGroup1.ItemIndex] <>
        'Unchanged') then
        deviceid := tNames1.devicenametoid(FormreleaseTo.RadioGroup1.Items
          [FormreleaseTo.RadioGroup1.ItemIndex]);

      PressTowerList := '(''x''';
      for i := 0 to FormreleaseTo.checklistbox1.Items.Count - 1 do
      begin
        if FormreleaseTo.checklistbox1.Checked[i] then
          PressTowerList := PressTowerList + ',''' +
            FormreleaseTo.checklistbox1.Items[i] + '''';
      end;
      PressTowerList := PressTowerList + ')';

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('UPDATE PageTable SET Hold=0   ');

      if (FormreleaseTo.RadioGroup1.Items[FormreleaseTo.RadioGroup1.ItemIndex]
        <> 'Unchanged') then

        Datam1.Query1.SQL.Add(',DeviceID=' + IntToStr(deviceid));

      Datam1.Query1.SQL.Add('WHERE PressRunID IN ' + PressRunIDList);
      if (mkres <> mrall) then
        Datam1.Query1.SQL.Add('AND PressTower IN ' + PressTowerList);

      Datam1.Query1.ExecSQL(false);
      Datam1.Query1.Close;
    end;

  Except
  end;
  ActionProgressrefreshExecute(Sender);

end;

procedure TFormMain.ActionSavePlatePositionSetupProductionExecute
  (Sender: TObject);
var
  i: Integer;
  ProductionID: Integer;
  EditionFromID: Integer;
begin
  ProductionID := 0;
  EditionFromID := 0;

  if spPlanCenterSavePressSettingsPossible = false then
    exit;
  if TreeViewprodcontrol.Selected = nil then
    exit;

  for i := 1 to StringGridprods.RowCount do
  begin
    if StringGridprodsdata[i].Selected then
    begin
      ProductionID := StringGridprodsdata[i].ProductionID;
      EditionFromID := StringGridprodsdata[i].editionid;
      break;
    end;
  end;

  if (ProductionID > 0) AND (EditionFromID > 0) then
    SavePlatePositionSetup(ProductionID, EditionFromID);

end;

procedure TFormMain.ActionLoadPlatePositionSetupProductionExecute
  (Sender: TObject);
var
  i: Integer;
  ProductionID: Integer;
  EditionFromID: Integer;
begin
  ProductionID := 0;
  EditionFromID := 0;

  if TreeViewprodcontrol.Selected = nil then
    exit;

  for i := 1 to StringGridprods.RowCount do
  begin
    if StringGridprodsdata[i].Selected then
    begin
      ProductionID := StringGridprodsdata[i].ProductionID;
      EditionFromID := StringGridprodsdata[i].editionid;
      break;
    end;
  end;

  if (ProductionID > 0) and (EditionFromID > 0) then
  begin
    LoadPlatePositionSetup(ProductionID, EditionFromID);
    ActionProgressrefreshExecute(Sender);
  end;

end;

procedure TFormMain.SavePlatePositionSetup(ProductionID: Integer;
  EditionFromID: Longint);
var
  // EditionToID : Integer;
  // tPubDate : TDateTime;
  // PressID : Integer;
  // PublicationID : Integer;
  hasPressData: Boolean;
  doubleProduction: Boolean;
begin

  // Qualify that source has press data
  hasPressData := false;
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('SELECT TOP 1 PressTower, PressCylinder, PressZone, PressHighLow FROM PageTable WITH (NOLOCK)');
  Datam1.Query1.SQL.Add('WHERE ProductionID = ' + IntToStr(ProductionID));
  Datam1.Query1.SQL.Add('AND EditionID = ' + IntToStr(EditionFromID));
  Datam1.Query1.Open;
  if not Datam1.Query1.Eof then
  begin
    if (Datam1.Query1.Fields[0].AsString <> '') AND
      (Datam1.Query1.Fields[1].AsString <> '') AND
      (Datam1.Query1.Fields[2].AsString <> '') AND
      (Datam1.Query1.Fields[3].AsString <> '') then
      hasPressData := true;
  end;
  Datam1.Query1.Close;

  if (hasPressData = false) then
  begin
    MessageDlg(FormMain.InfraLanguage1.Translate
      ('Source edition has no press position data..'), mtError, [mbOk], 0);
    exit;
  end;

  doubleProduction := false;
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('SELECT TOP 1 MAX(CopyNumber),COUNT (DISTINCT PageName) FROM PageTable WITH (NOLOCK)');
  Datam1.Query1.SQL.Add('WHERE ProductionID = ' + IntToStr(ProductionID));
  Datam1.Query1.SQL.Add('AND EditionID = ' + IntToStr(EditionFromID));
  Datam1.Query1.SQL.Add('AND PageType<3');
  Datam1.Query1.Open;
  if not Datam1.Query1.Eof then
  begin
    FormSaveStackerSetup.LabelNumberOfPages.caption :=
      IntToStr(Datam1.Query1.Fields[1].AsInteger);
    if (Datam1.Query1.Fields[0].AsInteger > 1) then
    begin
      FormSaveStackerSetup.LabelProductionType.caption := 'Double production ('
        + IntToStr(Datam1.Query1.Fields[0].AsInteger) + ' plate copies';
      doubleProduction := true;
    end
    else
      FormSaveStackerSetup.LabelProductionType.caption :=
        'Collect (one plate copy)';
  end;
  Datam1.Query1.Close;

  if (doubleProduction) then
    FormSaveStackerSetup.EditSaveName.text :=
      FormSaveStackerSetup.LabelNumberOfPages.caption +
      ' pages - double production'
  else
    FormSaveStackerSetup.EditSaveName.text :=
      FormSaveStackerSetup.LabelNumberOfPages.caption +
      ' pages - single production';
  
  if FormSaveStackerSetup.ShowModal = mrOK then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('EXEC spPlanCenterSavePressSettings');
    Datam1.Query1.SQL.Add('@ProductionID = ' + IntToStr(ProductionID));
    Datam1.Query1.SQL.Add(',@EditionID = ' + IntToStr(EditionFromID));
    Datam1.Query1.SQL.Add(',@SetupName = ''' +
      FormSaveStackerSetup.EditSaveName.text + '''');
    Datam1.Query1.ExecSQL(false);

  end;
end;

procedure TFormMain.LoadPlatePositionSetup(ProductionID: Integer;
  EditionFromID: Longint);
// var
// EditionToID : Integer;
// tPubDate : TDateTime;
// PressID : Integer;
// PublicationID : Integer;
// hasPressData : Boolean;
// doubleProduction : Boolean;
begin
  Formlistselect.caption := 'Load plate positions';
  Formlistselect.ComboBox1.Items.Clear;

  Formlistselect.ComboBox1.Style := csDropDownList;

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('SELECT DISTINCT ConfigName FROM PressPlatePositionDefaults ORDER BY ConfigName');
  Datam1.Query1.Open;
  while not Datam1.Query1.Eof do
  begin
    Formlistselect.ComboBox1.Items.Add(Datam1.Query1.Fields[0].AsString);
    Datam1.Query1.Next;
  end;
  Datam1.Query1.Close;

  if (Formlistselect.ComboBox1.Items.Count > 0) then
    Formlistselect.ComboBox1.ItemIndex := 0;

  if Formlistselect.ShowModal = mrOK then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('EXEC spPlanCenterLoadPressSettings');
    Datam1.Query1.SQL.Add('@ProductionID = ' + IntToStr(ProductionID));
    Datam1.Query1.SQL.Add(',@EditionID = ' + IntToStr(EditionFromID));
    Datam1.Query1.SQL.Add(',@SetupName = ''' +
      Formlistselect.ComboBox1.text + '''');
    Datam1.Query1.ExecSQL(false);
  end;
  Formlistselect.ComboBox1.Style := csDropDown;
end;

procedure TFormMain.CopyStackerSetupToOtherEdition(ProductionID: Integer;
  EditionFromID: Longint);
var
  EditionToID: Integer;
  tPubDate: TDateTime;
  pressid: Integer;
  Publicationid: Integer;
  hasPressData: Boolean;
begin
  EditionToID := 0;
  pressid := 0;
  Publicationid := 0;
  tPubDate := Now;

  FormCopyStackerSetup.CheckBoxApplyToAllPresses.Checked := true;
  FormCopyStackerSetup.ComboBoxToEdition.Items.Clear;

  // Qualify that source has press data
  hasPressData := false;
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add('SELECT TOP 1 PressTower, SortingPosition FROM PageTable WITH (NOLOCK)');
  Datam1.Query1.SQL.Add('WHERE ProductionID = ' + IntToStr(ProductionID));
  Datam1.Query1.SQL.Add('AND EditionID = ' + IntToStr(EditionFromID));
  Datam1.Query1.Open;
  if not Datam1.Query1.Eof then
  begin
    if (Datam1.Query1.Fields[0].AsString <> '') AND
      (Datam1.Query1.Fields[1].AsString <> '') then
      hasPressData := true;
  end;
  Datam1.Query1.Close;

  if (hasPressData = false) then
  begin
    MessageDlg(FormMain.InfraLanguage1.Translate
      ('Source edition has no press/stacker data..'), mtError, [mbOk], 0);
    exit;
  end;

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('SELECT DISTINCT PressID,PublicationID,PubDate,EditionID FROM PageTable WITH (NOLOCK)');
  Datam1.Query1.SQL.Add('WHERE ProductionID = ' + IntToStr(ProductionID));
  Datam1.Query1.Open;
  while not Datam1.Query1.Eof do
  begin
    pressid := Datam1.Query1.Fields[0].AsInteger;
    Publicationid := Datam1.Query1.Fields[1].AsInteger;
    tPubDate := Datam1.Query1.Fields[2].AsDateTime;
    EditionToID := Datam1.Query1.Fields[3].AsInteger;
    if (EditionToID <> EditionFromID) then
      FormCopyStackerSetup.ComboBoxToEdition.Items.Add
        (tNames1.editionIDtoname(EditionToID));

    Datam1.Query1.Next;
  end;
  Datam1.Query1.Close;

  FormCopyStackerSetup.EditCopyFromName.text := 'Pub: ' +
    tNames1.publicationIDtoname(Publicationid) + ' Date: ' +
    FormaTDateTime('dd/mm', tPubDate) + ' Ed: ' + tNames1.editionIDtoname
    (EditionFromID) + ' Press: ' + tNames1.pressnameIDtoname(pressid);

  if (FormCopyStackerSetup.ComboBoxToEdition.Items.Count > 0) then
    FormCopyStackerSetup.ComboBoxToEdition.ItemIndex := 0;

  if FormCopyStackerSetup.ShowModal = mrOK then
  begin
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('EXEC spPlanCenterCopyPressSettings');
    Datam1.Query1.SQL.Add('@ProductionID = ' + IntToStr(ProductionID));
    Datam1.Query1.SQL.Add(',@EditionFromID = ' + IntToStr(EditionFromID));
    Datam1.Query1.SQL.Add(',@EditionToID = ' + IntToStr(EditionToID));
    if (FormCopyStackerSetup.CheckBoxApplyToAllPresses.Checked) then
      Datam1.Query1.SQL.Add(',@ApplyToAllPresses = 1')
    else
      Datam1.Query1.SQL.Add(',@ApplyToAllPresses = 0');

    Datam1.Query1.ExecSQL(false);
  end;
end;

procedure TFormMain.ActionTreeCopyStackerSetupExecute(Sender: TObject);
var
  ProductionID: Integer;
  EditionFromID: Integer;
begin

  if spPlanCenterCopyPressSettingsPossible = false then
    exit;
  if TreeViewPlateview.Selected = nil then
    exit;
  if TreeViewPlateview.Selected.Level < 3 then
    exit;

  EditionFromID := TTreeViewpagestype(TreeViewPlateview.Selected.Data^)
    .editionid;
  ProductionID := TTreeViewpagestype(TreeViewPlateview.Selected.Data^)
    .ProductionID;

  if (ProductionID > 0) AND (EditionFromID > 0) then
  begin
    CopyStackerSetupToOtherEdition(ProductionID, EditionFromID);
    ActionProgressrefreshExecute(Sender);
  end;

end;

procedure TFormMain.ActionCopyStackerSetupProductionExecute(Sender: TObject);
var
  i: Integer;
  ProductionID: Integer;
  EditionFromID: Integer;
begin
  ProductionID := 0;
  EditionFromID := 0;
  if spPlanCenterCopyPressSettingsPossible = false then
    exit;
  if TreeViewprodcontrol.Selected = nil then
    exit;

  for i := 1 to StringGridprods.RowCount do
  begin
    if StringGridprodsdata[i].Selected then
    begin
      ProductionID := StringGridprodsdata[i].ProductionID;
      EditionFromID := StringGridprodsdata[i].editionid;
      break;
    end;
  end;

  if (ProductionID > 0) AND (EditionFromID > 0) then
  begin
    CopyStackerSetupToOtherEdition(ProductionID, EditionFromID);
    ActionProgressrefreshExecute(Sender);
  end;
end;

procedure TFormMain.ActionManageStackerSetupsExecute(Sender: TObject);
Var
  // skaldeklarerespgadll : Integer;
  resulttat: Integer;
begin
  if Configallowed then
  begin
    MainUpdateing := true;
    TreeStopit := true;
    Runningdll := true;

    try
      resulttat := ReConnectDB(DLLErrormessage);
      resulttat := StackingBinSetup(DLLErrormessage);
    Except
      TreeStopit := false;
    end;
    try
      // loadids('ActionConfigStackingBinSetup');
      MainUpdateing := false;
      Runningdll := false;
    Except
      TreeStopit := false;
    end;
    TreeStopit := false;
  end;
end;

procedure TFormMain.ActionChangeStackerExecute(Sender: TObject);
Var
  i: Integer;
  PressRunIDList: string;
  PressRunIDStringList: Tstrings;
  CopyFlatSeparationSetList: Tstrings;
  S: String;
  inkcomment: String;
  buttonSelected: Integer;
  hasPressInfo: Boolean;
  editionid: Integer;
  ProductionID: Integer;
  UseDefaultStackerSettings: Boolean;
  pressrunid: Integer;
begin
  editionid := 0;
  ProductionID := 0;
  PressRunIDList := '';
  ProductionID := 0;
  inkcomment := '';
  S := '';
  UseDefaultStackerSettings := false;

  if not StackerNamesPossible then
    exit;

  if (PageControlMain.ActivePageIndex <> VIEW_PRODUCTIONS) AND
    (PageControlMain.ActivePageIndex <> VIEW_PLATES) then
    exit;

  if (PageControlMain.ActivePageIndex = VIEW_PRODUCTIONS) then
  begin
    if TreeViewprodcontrol.Selected = nil then
      exit;
    if TreeViewprodcontrol.Selected.Level < 0 then
      exit;
  end;

  if (PageControlMain.ActivePageIndex = VIEW_PLATES) then
  begin
    if TreeViewPlateview.Selected = nil then
      exit;
    if TreeViewPlateview.Selected.Level < 0 then
      exit;
  end;

  PressRunIDStringList := Tstringlist.Create;
  CopyFlatSeparationSetList := Tstringlist.Create;

  // Production view - find PressRunID for selected edition(s)
  if (PageControlMain.ActivePageIndex = VIEW_PRODUCTIONS) then
  begin
    for i := 1 to StringGridprods.RowCount do
    begin
      if StringGridprodsdata[i].Selected then
      begin
        ProductionID := StringGridprodsdata[i].ProductionID;
        editionid := StringGridprodsdata[i].editionid;
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('SELECT DISTINCT PressRunID FROM PageTable WITH (NOLOCK) WHERE ProductionID='
          + IntToStr(StringGridprodsdata[i].ProductionID));
        Datam1.Query1.SQL.Add(' AND EditionID=' +
          IntToStr(StringGridprodsdata[i].editionid));
        Datam1.Query1.Open;
        while not Datam1.Query1.Eof do
        begin
          pressrunid := Datam1.Query1.Fields[0].AsInteger;
          if (PressRunIDList <> '') then
            PressRunIDList := PressRunIDList + ',';
          PressRunIDList := PressRunIDList + IntToStr(pressrunid);

          PressRunIDStringList.Add(IntToStr(pressrunid));
          Datam1.Query1.Next;
        end;
        Datam1.Query1.Close;
      end;
    end;
  end;

  // Plateview - go by plate selected
  if (PageControlMain.ActivePageIndex = VIEW_PLATES) then
  begin
    for i := 0 to Views[Viewselected].LPV.Items.Count - 1 do
    begin
      if Views[Viewselected].LPV.Items[i].Selected then
      begin
        CopyFlatSeparationSetList.Add
          (IntToStr(Views[Viewselected].platesData[i].copyflatseparationset));
        ProductionID := Views[Viewselected].platesData[i].ProductionID;
        editionid := Views[Viewselected].platesData[i].editionid;
      end;
    end;

    // Retrieve current edtions' pressruns in case selection should apply to all plates
    Datam1.Query1.SQL.Clear;
    // Datam1.Query1.SQL.Add('SELECT DISTINCT PressRunID FROM PageTable WITH (NOLOCK) WHERE ProductionID='+ IntToStr(TTreeViewpagestype(TreeViewPlateview.Selected.data^).ProductionID));
    Datam1.Query1.SQL.Add
      ('SELECT DISTINCT PressRunID FROM PageTable WITH (NOLOCK) WHERE ProductionID='
      + IntToStr(ProductionID));
    // if TTreeViewpagestype(TreeViewPlateview.Selected.data^).EditionID > 0 then
    if (editionid > 0) then
      Datam1.Query1.SQL.Add(' AND EditionID = ' + IntToStr(editionid));

    // Datam1.Query1.SQL.Add(' AND EditionID = ' + IntToStr( TTreeViewpagestype(TreeViewPlateview.Selected.data^).EditionID));
    Datam1.Query1.Open;
    while not Datam1.Query1.Eof do
    begin
      pressrunid := Datam1.Query1.Fields[0].AsInteger;
      if (PressRunIDList <> '') then
        PressRunIDList := PressRunIDList + ',';
      PressRunIDList := PressRunIDList + IntToStr(pressrunid);
      PressRunIDStringList.Add(IntToStr(pressrunid));
      Datam1.Query1.Next;
    end;
    Datam1.Query1.Close;
  end;

  if (PressRunIDStringList.Count = 0) then
  begin
    PressRunIDStringList.free;
    CopyFlatSeparationSetList.free;
    exit;
  end;

  hasPressInfo := false;
  Datam1.Query1.SQL.Clear;

  Datam1.Query1.SQL.Add
    ('SELECT TOP 1 PressTower FROM PageTable WITH (NOLOCK) WHERE PressTower<>'''' AND Active>0 AND Dirty=0 AND PageType<2 AND PressRunID='
    + PressRunIDStringList[0]);
  Datam1.Query1.Open;
  if not Datam1.Query1.Eof then
  begin
    if (Datam1.Query1.Fields[0].AsString <> '') then
    begin
      hasPressInfo := true;
    end;
  end;
  Datam1.Query1.Close;

  if (hasPressInfo = false) then
  begin
    buttonSelected :=
      MessageDlg
      ('WARNING: Production does not have press information - load default press setting now?',
      mtError, mbOKCancel, 0);
    if buttonSelected = mrcancel then
      exit;
    UseDefaultStackerSettings := true;
  end;

  // Select just for setting default GUI value..
  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('SELECT TOP 1 InkComment FROM PressRunID WITH (NOLOCK) WHERE PressRunID=' +
    PressRunIDStringList[0]);
  Datam1.Query1.Open;
  if not Datam1.Query1.Eof then
    inkcomment := Datam1.Query1.Fields[0].AsString;
  Datam1.Query1.Close;

  if (UseDefaultStackerSettings) then
  begin
    LoadPlatePositionSetup(ProductionID, editionid);
    // Re-check press data...
    hasPressInfo := false;
    Datam1.Query1.SQL.Clear;

    Datam1.Query1.SQL.Add
      ('SELECT TOP 1 PressTower FROM PageTable WITH (NOLOCK) WHERE PressTower<>'''' AND Active>0 AND Dirty=0 AND PageType<2 AND PressRunID='
      + PressRunIDStringList[0]);
    Datam1.Query1.Open;
    if not Datam1.Query1.Eof then
    begin
      if (Datam1.Query1.Fields[0].AsString <> '') then
      begin
        hasPressInfo := true;
      end;
    end;
    Datam1.Query1.Close;

  end;

  if (hasPressInfo = false) then
  begin
    MessageDlg('ERROR: Production does not have press information - aborting',
      mtError, [mbOk], 0);
    exit;
  end;

  if (PageControlMain.ActivePageIndex = VIEW_PLATES) then
  begin
    FormSelectDefinition.CheckBoxApplyToAllPresses.Checked := false;
    FormSelectDefinition.CheckBoxSelectAllPlates.Visible := true;
    FormSelectDefinition.CheckBoxSelectAllPlates.Checked := false;
  end
  else
  begin
    FormSelectDefinition.CheckBoxApplyToAllPresses.Checked := true;
    FormSelectDefinition.CheckBoxSelectAllPlates.Visible := false;
    FormSelectDefinition.CheckBoxSelectAllPlates.Checked := true;
  end;
  FormSelectDefinition.ComboBox1.Items.Clear;

  Datam1.Query1.SQL.Clear;
  Datam1.Query1.SQL.Add
    ('SELECT DISTINCT Stacker FROM StackerMapping ORDER BY Stacker');
  Datam1.Query1.Open;
  while not Datam1.Query1.Eof do
  begin
    FormSelectDefinition.ComboBox1.Items.Add(Datam1.Query1.Fields[0].AsString);
    Datam1.Query1.Next;
  end;
  Datam1.Query1.Close;

  if (FormSelectDefinition.ComboBox1.Items.IndexOf(inkcomment) >= 0) then
    FormSelectDefinition.ComboBox1.ItemIndex :=
      FormSelectDefinition.ComboBox1.Items.IndexOf(inkcomment)
  else
    FormSelectDefinition.ComboBox1.ItemIndex := 0;

  if FormSelectDefinition.ShowModal = mrOK then
  begin
    if (PageControlMain.ActivePageIndex = VIEW_PRODUCTIONS) OR
      (FormSelectDefinition.CheckBoxSelectAllPlates.Visible = false) OR
      (FormSelectDefinition.CheckBoxSelectAllPlates.Checked) then
    begin

      // Set so that
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('UPDATE PressRunID');
      Datam1.Query1.SQL.Add('SET InkComment = ''' +
        FormSelectDefinition.ComboBox1.text + '''');
      Datam1.Query1.SQL.Add('WHERE PressRunID IN (' + PressRunIDList + ')');
      trysql(Datam1.Query1);

      // Could be useful...
      (* Datam1.Query1.SQL.Clear;

        Datam1.Query1.SQL.Add('UPDATE PageTable ');
        Datam1.Query1.SQL.Add('SET MiscString3 = '''+Formselectdefinition.ComboBox1.Text+'''');
        Datam1.Query1.SQL.Add('WHERE PressRunID IN ('+PressRunIDList+')');
        trysql(Datam1.Query1);
      *)
    end;

    if (PageControlMain.ActivePageIndex = VIEW_PRODUCTIONS) OR
      (FormSelectDefinition.CheckBoxSelectAllPlates.Visible = false) OR
      (FormSelectDefinition.CheckBoxSelectAllPlates.Checked) then

    begin

      for i := 0 to PressRunIDStringList.Count - 1 do

      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('exec spPlanCenterSetStackerSetup');
        Datam1.Query1.SQL.Add('@PressRunID = ' + PressRunIDStringList[i]);
        Datam1.Query1.SQL.Add(',@StackerName = ''' +
          FormSelectDefinition.ComboBox1.text + '''');
        if (FormSelectDefinition.CheckBoxApplyToAllPresses.Checked) then
          Datam1.Query1.SQL.Add(',@ApplyToAllPresses = 1')
        else
          Datam1.Query1.SQL.Add(',@ApplyToAllPresses = 0');

        Datam1.Query1.ExecSQL(false);
        Datam1.Query1.Close;
      end;
    end
    else
    begin
      for i := 0 to CopyFlatSeparationSetList.Count - 1 do
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('exec spPlanCenterSetStackerSetupFlats');
        Datam1.Query1.SQL.Add('@CopyFlatSeparationSet = ' +
          CopyFlatSeparationSetList[i]);
        Datam1.Query1.SQL.Add(',@StackerName = ''' +
          FormSelectDefinition.ComboBox1.text + '''');
        Datam1.Query1.ExecSQL(false);
        Datam1.Query1.Close;
      end;
    end;
  end;

  PressRunIDStringList.free;
  CopyFlatSeparationSetList.free;

  if (PageControlMain.ActivePageIndex = VIEW_PRODUCTIONS) then
    ActionProgressrefreshExecute(Sender)
  else
    ActionplaterefreshExecute(Sender);

end;

procedure TFormMain.setpagetablethumbdata(Setstring: String;
  extrawhere: String);
var
  i: Integer;
begin
  Nselectedmasters := 0;

  for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
  begin
    if (PBExListviewthumbnail.Items[i].Selected) then
    begin
      // Formmain.SetMissingOnmaster(Showthubms[i].Mastercopyseparationset);
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add('update pagetable ' + Setstring);
      Datam1.Query1.SQL.Add('where mastercopyseparationset = ' +
        IntToStr(Showthubms[i].mastercopyseparationset));
      Datam1.Query1.SQL.Add(extrawhere);
      // datam1.Query1.SQL.Add(notinproofplans);
      Datam1.Query1.SQL.Add(WeditionStr);
      Datam1.Query1.SQL.Add(WpublicationStr);

      trysql(Datam1.Query1);

      if pos('set status = 0', Setstring) > 0 Then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('Delete PrepollPageTable');
        Datam1.Query1.SQL.Add('where (mastercopyseparationset = ' +
          IntToStr(Showthubms[i].mastercopyseparationset) + ')');
        Datam1.Query1.SQL.Add('and (Event not in (130,136,137))');
        trysql(Datam1.Query1);
      end;

      addtoselectedmasters(Showthubms[i].mastercopyseparationset);

    end;
  end;
end;

procedure TFormMain.DothumbnailCenterspreadExecute;
begin
  if PBExListviewthumbnail.Selected = nil then
    exit;
  changemastertocenterspread(Showthubms[PBExListviewthumbnail.Selected.Index]
    .mastercopyseparationset);
  loadthumbnails(true);
end;

procedure TFormMain.DothumbnailSinglespreadExecute;
begin
  if PBExListviewthumbnail.Selected = nil then
    exit;
  changemastertoSinglespread(Showthubms[PBExListviewthumbnail.Selected.Index]
    .mastercopyseparationset);
  loadthumbnails(true);
end;

procedure TFormMain.DoThumbnailapproveExecute;
var
  i: Integer;
  // n,c : ttreenode;
  // foundone : boolean;
  Inliste: String;
  eventtime: TDateTime;
  Dotheapproval: Boolean;
begin
  Inliste := 'and separation IN (';
  for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
  begin
    if PBExListviewthumbnail.Items[i].Selected then
    begin
      Dotheapproval := true;
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('Select TOP 1 P1.Approved,P1.Separation From pagetable P1 (NOLOCK)');
      Datam1.Query1.SQL.Add('where P1.active <> -999 AND P1.Dirty=0');

      if PDFMasterOK then
      begin
        // datam1.Query1.SQL.Add('and PDFMaster = '+IntToStr(Showthubms[PBExListviewthumbnail.items[i].Index].PDFMaster) );

        Datam1.Query1.SQL.Add
          ('and P1.MasterCopySeparationSet IN (SELECT DISTINCT P9.MasterCopySeparationSet FROM PageTable P9 WITH (NOLOCK) WHERE P9.PDFMaster =  '
          + IntToStr(Showthubms[PBExListviewthumbnail.Items[i].Index]
          .pdfmaster) + ')');
      end
      else
      begin
        Datam1.Query1.SQL.Add('and P1.Mastercopyseparationset = ' +
          IntToStr(Showthubms[PBExListviewthumbnail.Items[i].Index]
          .mastercopyseparationset));
      end;
      Datam1.Query1.SQL.Add('and P1.Approved <> 1');
      Datam1.Query1.Open;
      Dotheapproval := not Datam1.Query1.Eof;
      Datam1.Query1.Close;

      if Dotheapproval then
      begin
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('Update pagetable');
        Datam1.Query1.SQL.Add
          ('set approved = 1,approvetime = getdate(),approveuser=' + '''' +
          Prefs.Username + '''');
        Datam1.Query1.SQL.Add('where active <> -999 AND Dirty=0');
        if PDFMasterOK then
        begin
          Datam1.Query1.SQL.Add
            ('and MasterCopySeparationSet IN (SELECT DISTINCT P9.MasterCopySeparationSet FROM PageTable P9 WITH (NOLOCK) WHERE P9.PDFMaster =  '
            + IntToStr(Showthubms[PBExListviewthumbnail.Items[i].Index]
            .pdfmaster) + ')');
        end
        else
        begin
          Datam1.Query1.SQL.Add('and mastercopyseparationset = ' +
            IntToStr(Showthubms[PBExListviewthumbnail.Items[i].Index]
            .mastercopyseparationset));
        end;

        // datam1.Query1.SQL.Add(notinproofplans);
        Datam1.Query1.SQL.Add(WeditionStr);
        if Prefs.Debug then
          Datam1.Query1.SQL.SaveToFile
            (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
            'sqllogs\' + 'approve.sql');
        trysql(Datam1.Query1);

        if PDFMasterOK then
        begin
          afterapproval(-1, Showthubms[PBExListviewthumbnail.Items[i].Index]
            .pdfmaster);
        end
        Else
        begin
          afterapproval(Showthubms[PBExListviewthumbnail.Items[i].Index]
            .mastercopyseparationset, -1);
        end;
        eventtime := -1;
        if (Prefs.LogApproval) then
        begin
          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('Select filename,version,separation,productionid from pagetable (NOLOCK) where mastercopyseparationset = '
            + IntToStr(Showthubms[PBExListviewthumbnail.Items[i].Index]
            .mastercopyseparationset));

          Datam1.Query1.Open;
          while Not Datam1.Query1.Eof do
          begin
            FormMain.SaveEventlog(70, Datam1.Query1.Fields[2].AsInteger, 0, '',
              Datam1.Query1.Fields[0].AsString,
              Datam1.Query1.Fields[1].AsInteger,
              Datam1.Query1.Fields[3].AsInteger);
            Datam1.Query1.Next;
          end;
          Datam1.Query1.Close;

        end;
      end;
    end;
  end;

  ActionThumbnailrefresh.Execute;

end;

procedure TFormMain.DoThumbnaildisapproveExecute;
var
  i: Integer;
  // eventtime : Tdatetime;
begin
  setpagetablethumbdata('set approved = 2,approvetime = getdate(),approveuser='
    + '''' + Prefs.Username + '''', '');
  ActionrefreshpagesExecute(Self);
  if (Prefs.LogDisapproval) then
  begin
    for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
    begin
      if PBExListviewthumbnail.Items[i].Selected then
      begin

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('Select filename,version,separation,productionid from pagetable (NOLOCK) where mastercopyseparationset = '
          + IntToStr(Showthubms[PBExListviewthumbnail.Items[i].Index]
          .mastercopyseparationset));
        Datam1.Query1.Open;
        while Not Datam1.Query1.Eof do
        begin
          FormMain.SaveEventlog(71, Datam1.Query1.Fields[2].AsInteger, 0, '',
            Datam1.Query1.Fields[0].AsString, Datam1.Query1.Fields[1].AsInteger,
            Datam1.Query1.Fields[3].AsInteger);
          Datam1.Query1.Next;
        end;
        Datam1.Query1.Close;
      end;
    end;
  end;

  sendedisapprovemail(-1, 'Page disapproved', 0);

  ActionThumbnailrefresh.Execute;
end;

procedure TFormMain.DoThumbnailholdExecute;
var
  i: Integer;
  // eventtime : tdatetime;
begin
  try
    if (Prefs.ThumbnailsSingleEditionRelease) and
      (TreeViewThumbs.Selected.Level = 3) then
    begin
      setpagetablethumbdata('set hold = 1', 'and editionid = ' +
        IntToStr(tNames1.editionnametoid(TreeViewThumbs.Selected.text)));
    end
    else
      setpagetablethumbdata('set hold = 1', '');

    if (Prefs.LogHold) then
    begin
      for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
      begin
        if (PBExListviewthumbnail.Items[i].Selected) then
        begin

          Datam1.Query1.SQL.Clear;
          Datam1.Query1.SQL.Add
            ('Select filename,version,separation,productionid from pagetable (NOLOCK) where mastercopyseparationset = '
            + IntToStr(Showthubms[PBExListviewthumbnail.Items[i].Index]
            .mastercopyseparationset));
          Datam1.Query1.Open;
          while Not Datam1.Query1.Eof do
          begin
            FormMain.SaveEventlog(81, Datam1.Query1.Fields[2].AsInteger, 0, '',
              Datam1.Query1.Fields[0].AsString,
              Datam1.Query1.Fields[1].AsInteger,
              Datam1.Query1.Fields[3].AsInteger);
            Datam1.Query1.Next;
          end;
          Datam1.Query1.Close;
        end;
      end;
    end;

    ActionThumbnailrefresh.Execute;
  except
  end;
end;

procedure TFormMain.DothumbnailReleaseExecute(Monoonly: Boolean);
var
  i: Integer;
  // eventtime : TDateTime;
  andstr: String;

begin
  andstr := '';

  if (Prefs.ThumbnailsSingleEditionRelease) and
    (TreeViewThumbs.Selected.Level = 3) then
  begin
    if Monoonly then
      andstr := ' and colorid = 4 and editionid = ' +
        IntToStr(tNames1.editionnametoid(TreeViewThumbs.Selected.text))
    else
      andstr := ' and editionid = ' +
        IntToStr(tNames1.editionnametoid(TreeViewThumbs.Selected.text));
  end
  else
  begin
    if Monoonly then
      andstr := ' and colorid = 4 '
    else
      andstr := '';
  end;

  // NAN 20160115 Ensure empty where does not select anything
  // if (andstr = '') then
  // andstr := '(0=1)';

  if (Prefs.SetApproveTimeOnRelease) then
  begin
    setpagetablethumbdata('set hold = 0, approvetime = getdate(),approveuser=' +
      '''' + Prefs.Username + '''', andstr); // OK
  end
  Else
  begin
    setpagetablethumbdata('set hold = 0', andstr); // OK
  end;

  if (Prefs.LogRelease) then
  begin
    for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
    begin
      if PBExListviewthumbnail.Items[i].Selected then
      begin

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('Select filename,version,separation,productionid from pagetable (NOLOCK) where mastercopyseparationset = '
          + IntToStr(Showthubms[PBExListviewthumbnail.Items[i].Index]
          .mastercopyseparationset));
        Datam1.Query1.Open;
        while Not Datam1.Query1.Eof do
        begin
          FormMain.SaveEventlog(80, Datam1.Query1.Fields[2].AsInteger, 0, '',
            Datam1.Query1.Fields[0].AsString, Datam1.Query1.Fields[1].AsInteger,
            Datam1.Query1.Fields[3].AsInteger);
          Datam1.Query1.Next;
        end;
        Datam1.Query1.Close;
      end;
    end;

  end;

  ActionThumbnailrefresh.Execute;

end;

procedure TFormMain.DothumbnailReapproveExecute;
begin
  setpagetablethumbdata('set approved = 0, approvetime = 0,approveuser=' + ''''
    + '' + '''', '');
  ActionThumbnailrefresh.Execute; // ActionrefreshpagesExecute(self);
end;

procedure TFormMain.DothumbnailAutoapproveExecute;
begin
  setpagetablethumbdata('set approved = -1, approvetime = 0,approveuser=' + ''''
    + '' + '''', '');
  ActionThumbnailrefresh.Execute; // ActionrefreshpagesExecute(self);
end;

(*
*)

procedure TFormMain.DOActionthumbnaileditcolorsExecute;

  procedure createnewcolors;
  var
    i, Colorid, cp: Integer;
    copyseparationset, copyflatseparationset, Copies, hold, approved: Integer;
    mastercopyseparationset: Integer;
    hasColorAndCopy: Boolean;
  begin
    for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
    begin
      if (PBExListviewthumbnail.Items[i].Selected) then
      begin
        mastercopyseparationset := Showthubms[i].mastercopyseparationset;
        copyseparationset := 0;
        copyflatseparationset := 0;
        hold := 1;
        approved := -1;
        Copies := 1;
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('SELECT TOP 1  CopySeparationSet,CopyFlatSeparationSet,MAX(CopyNumber),Hold,Approved FROM PageTable (NOLOCK) ');
        Datam1.Query1.SQL.Add('WHERE Dirty=0 AND MasterCopySeparationSet = ' +
          IntToStr(mastercopyseparationset));
        Datam1.Query1.SQL.Add
          ('GROUP BY CopyFlatSeparationSet,CopySeparationSet,Hold,Approved');
        Datam1.Query1.Open;
        if not Datam1.Query1.Eof then
        begin
          copyseparationset := Datam1.Query1.Fields[0].AsInteger;
          copyflatseparationset := Datam1.Query1.Fields[1].AsInteger;
          Copies := Datam1.Query1.Fields[2].AsInteger;
          hold := Datam1.Query1.Fields[3].AsInteger;
          approved := Datam1.Query1.Fields[4].AsInteger;
        end;
        Datam1.Query1.Close;

        if (copyseparationset = 0) then
          continue;

        for Colorid := 1 to 4 do
        begin
          for cp := 1 to Copies do
          begin
            hasColorAndCopy := false;
            Datam1.Query1.SQL.Clear;
            Datam1.Query1.SQL.Add
              ('SELECT TOP 1 SeparationSet FROM PageTable (NOLOCK) ');
            Datam1.Query1.SQL.Add('WHERE MasterCopySeparationSet = ' +
              IntToStr(mastercopyseparationset));
            Datam1.Query1.SQL.Add('AND Dirty=0 AND ColorID=' +
              IntToStr(Colorid));
            Datam1.Query1.SQL.Add('AND CopyNumber=' + IntToStr(cp));
            Datam1.Query1.Open;
            hasColorAndCopy := not Datam1.Query1.Eof;
            Datam1.Query1.Close;

            if (hasColorAndCopy = false) then
            begin

              if (approved = -1) then
                approved := 0
              else
                approved := 1;
              Datam1.Query1.SQL.Clear;
              Datam1.Query1.SQL.Add('exec spInputInsertNewSeparation');

              Datam1.Query1.SQL.Add('@MasterCopySeparationSet=' +
                IntToStr(mastercopyseparationset));
              Datam1.Query1.SQL.Add(', @CopySeparationSet=' +
                IntToStr(copyseparationset));
              Datam1.Query1.SQL.Add(', @CopyFlatSeparationSet=' +
                IntToStr(copyflatseparationset));
              Datam1.Query1.SQL.Add(', @ColorID=' + IntToStr(Colorid));
              Datam1.Query1.SQL.Add(', @Copies=' + IntToStr(cp + 10));
              Datam1.Query1.SQL.Add(', @InsertMode=0');
              Datam1.Query1.SQL.Add(', @Status=0');
              Datam1.Query1.SQL.Add(', @ApprovalRequired=' +
                IntToStr(approved));
              Datam1.Query1.SQL.Add(', @HoldIncoming=' + IntToStr(hold));
              Datam1.Query1.SQL.Add(', @CopiesOnSameDevice=1');
              Datam1.Query1.SQL.Add(', @FileName=''''');
              Datam1.Query1.SQL.Add(', @Version=0');
              trysql(Datam1.Query1);
            end;
          end;
        end;
      end;
    end;
  end;

  procedure enablecolors;

  var
    i: Integer;
    Incopysets: String;

  begin
    Nselectedmasters := 0;

    for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
    begin
      if (PBExListviewthumbnail.Items[i].Selected) then
      begin
        Incopysets := 'IN (-999,';
        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add
          ('select distinct separationset from pagetable (NOLOCK) ');
        Datam1.Query1.SQL.Add('where mastercopyseparationset = ' +
          IntToStr(Showthubms[i].mastercopyseparationset));
        Datam1.Query1.SQL.Add('and active = 1');
        if Prefs.Debug then
          Datam1.Query1.SQL.SaveToFile
            (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
            'sqllogs\' + 'findaddcolors.SQL');
        Datam1.Query1.Open;
        while not Datam1.Query1.Eof do
        begin
          Incopysets := Incopysets + Datam1.Query1.Fields[0].AsString;
          Incopysets := Incopysets + ',';
          Datam1.Query1.Next;
        end;
        Incopysets := Incopysets + '-998)';

        Datam1.Query1.Close;

        Datam1.Query1.SQL.Clear;
        Datam1.Query1.SQL.Add('update pagetable set active = 1,proofstatus=0');
        Datam1.Query1.SQL.Add('where separationset ' + Incopysets);
        // datam1.Query1.SQL.Add(notinproofplans);

        Datam1.Query1.SQL.Add(' and ' + Formendiscolors.Enabledcolors);
        if Prefs.Debug then
          Datam1.Query1.SQL.SaveToFile
            (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
            'sqllogs\' + 'Setaddcolors.SQL');
        trysql(Datam1.Query1);
        addtoselectedmasters(Showthubms[i].mastercopyseparationset);
      end;
    end;
    // dodalim(1,-1,-1,false,-1);
  end;

var
  // foundany : boolean;
  // I : Integer;
  masterset: Integer;
begin
  if PBExListviewthumbnail.Selected <> nil then
  begin
    masterset := Showthubms[PBExListviewthumbnail.Selected.Index]
      .mastercopyseparationset;
    Formendiscolors.mastercopyseparationset := masterset;
    if Formendiscolors.ShowModal = mrOK then
    begin

      // Insæt separation-records for farver der er checkede men ikke i PageTable
      createnewcolors;

      // Enable farver der er checkede
      enablecolors;

      // Denne disabler farver der er ikke-checkede ..!
      setpagetablethumbdata('set active = 0,proofstatus=0',
        ' and ' + Formendiscolors.DisabledColors);

      loadthumbnails(true);
    end;
  end;
end;

procedure TFormMain.DothumbnailpreviewExecute(Modalview: Boolean;
  SpecificMaster: Longint);

  procedure readorderview;
  var
    masterL, masterR, Lidx, Ridx: Integer;
    aktpi, i: Integer;
    readordfilename: String;
  begin
    try
      if PBExListviewthumbnail.Selected <> nil then
      begin
        readordfilename := '';
        for i := 1 to formprev2.nReadordermasters do
        begin
          if (formprev2.Readordermasters[i].Ithumbl = PBExListviewthumbnail.
            Selected.Index) or
            (formprev2.Readordermasters[i].IthumbR = PBExListviewthumbnail.
            Selected.Index) then
          begin
            formprev2.AktReadorder := i;
            break;
          end;
        end;
        if PBExListviewthumbnail.Selected.Index mod 2 = 0 then
        begin
          Lidx := PBExListviewthumbnail.Selected.Index - 1;
        end
        else
        begin
          Lidx := PBExListviewthumbnail.Selected.Index;
        end;
        Ridx := Lidx + 1;

        strpcopy(MrgOutputFileName,
          IncludeTrailingBackSlash(TUtils.GetTempDirectory()) + 'merg1.jpg');
        strpcopy(MrgFileNameLeft, '');
        strpcopy(MrgFileNameRight, '');

        MrgPageTypeLeft := 3;
        MrgPageTypeRight := 3;
        MrgPagePositionLeft := 2;
        MrgPagePositionRight := 1;
        MrgSheetSide := 1;
        MrgProofID := 1;
        MrgTemplateID := 17;

        masterL := -99;
        masterR := -99;

        aktpi := Showthubms[1].Publication;

        readordfilename := '';

        if (Lidx > -1) and (Showthubms[Lidx].Anyproof > 0) then
        begin
          readordfilename := getfileserverpath(PATHTYPE_CCREADVIEWPREVIEWS,
            Showthubms[Lidx].fileserver);
          formprev2.Lowrespath := getfileserverpath(PATHTYPE_CCPREVIEWS,
            Showthubms[Lidx].fileserver);
          masterL := Showthubms[Lidx].mastercopyseparationset;
          readordfilename := readordfilename + IntToStr(masterL);
        end
        else
          readordfilename := '0';

        if (Ridx < PBExListviewthumbnail.Items.Count) and
          (Showthubms[Ridx].Anyproof > 0) then
        begin
          if readordfilename = '0' then
            readordfilename := getfileserverpath(PATHTYPE_CCREADVIEWPREVIEWS,
              Showthubms[Ridx].fileserver) + '\0';
          formprev2.Lowrespath := getfileserverpath(PATHTYPE_CCPREVIEWS,
            Showthubms[Ridx].fileserver);
          masterR := Showthubms[Ridx].mastercopyseparationset;
          readordfilename := readordfilename + '_' + IntToStr(masterR);
        end
        else
          readordfilename := readordfilename + '_0';

        formprev2.PrevmasterL := masterL;
        formprev2.prevmasterR := masterR;
        formprev2.Showasreadorder := true;

        if formprev2.Showing then
        begin
          formprev2.readpageorderspecific(masterL);
        end
        Else
        begin
          if (Prefs.AllowParalelView) then
            formprev2.Show
          Else
            formprev2.ShowModal;
        end;
      end;
    finally
      formprev2.Showasreadorder := false;
      formprev2.PageControl1.ActivePageIndex := 0;
    end;

  end;

var
  // th : PThumbdata;
  // Ncolors,i : Integer;
  // T,t2 : String;
  proofed: Boolean;
begin
  try

    // MemotestPrefs.Debug.Lines.Add('Start DothumbnailpreviewExecute '+IntToStr(Showthubms[PBExListviewthumbnail.Selected.Index].pdfmaster)+ ' '+IntToStr(PBExListviewthumbnail.Selected.Index));

    if (ActionCHKthumbreadorder.Checked) and (ActionCHKthumbreadorder.Enabled)
    then
    begin
      readorderview;
    end
    else
    begin
      if PBExListviewthumbnail.Selected <> nil then
      begin
        // th := PBExListviewthumbnail.Selected.data;

        Datam1.Query1.SQL.Clear;
        if PDFMasterOK then
        begin
          Datam1.Query1.SQL.Add
            ('select proofstatus,status from pagetable (NOLOCK) where mastercopyseparationset = '
            + IntToStr(Showthubms[PBExListviewthumbnail.Selected.Index]
            .mastercopyseparationset));
          // DataM1.Query1.SQL.Add('select proofstatus,status from pagetable (NOLOCK) where pdfmaster = '+IntToStr(Showthubms[PBExListviewthumbnail.Selected.Index].pdfmaster));
          // DataM1.Query1.SQL.Add('and mastercopyseparationset = pdfmaster');
        end
        else
          Datam1.Query1.SQL.Add
            ('select proofstatus,status from pagetable (NOLOCK) where mastercopyseparationset = '
            + IntToStr(Showthubms[PBExListviewthumbnail.Selected.Index]
            .mastercopyseparationset));

        if Prefs.Debug then
          Datam1.Query1.SQL.SaveToFile
            (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
            'sqllogs\' + 'Previewstat.sql');

        Tryopen(Datam1.Query1);
        proofed := false;
        while not Datam1.Query1.Eof do
        begin
          if (Datam1.Query1.Fields[0].AsInteger >= 10) and
            (Datam1.Query1.Fields[1].AsInteger > 0) then
          begin
            proofed := true;
            break;
          end;
          Datam1.Query1.Next;
        end;
        Datam1.Query1.Close;

        if proofed then
        begin
          formprev2.Lowrespath := getfileserverpath(PATHTYPE_CCPREVIEWS,
            Showthubms[PBExListviewthumbnail.Selected.Index].fileserver);

          { // ## NAN 20150204
            if (PDFMasterOK) AND (Showthubms[PBExListviewthumbnail.Selected.Index].pdfmaster > 0) then
            begin
            Formprev2.prevmaster := Showthubms[PBExListviewthumbnail.Selected.Index].pdfmaster;
            Formprev2.UsePDFMaster := true;
            end
            Else
            begin
            Formprev2.Prevmaster := Showthubms[PBExListviewthumbnail.Selected.Index].Mastercopyseparationset;
            Formprev2.UsePDFMaster := false;
            end; }
          // ## SJO 20151104
          formprev2.prevmaster := Showthubms[PBExListviewthumbnail.Selected.
            Index].mastercopyseparationset;
          formprev2.pdfmaster := Showthubms[PBExListviewthumbnail.Selected.
            Index].pdfmaster;
          if (PDFMasterOK) AND (Showthubms[PBExListviewthumbnail.Selected.Index]
            .pdfmaster > 0) then
            formprev2.UsePDFMaster := true
          Else
            formprev2.UsePDFMaster := false;

          if (formprev2.Showing) and (Prefs.AllowParalelView) then
          begin
            formprev2.gotospecific(formprev2.prevmaster);
          end
          else
          begin
            if (Prefs.AllowParalelView) then
              formprev2.Show
            else
              formprev2.ShowModal;
          end;
          // Formprev2.BringToFront;
        end
        Else
        begin
          // MessageDlg(InfraLanguage1.Translate('Not proofed'), mtInformation,[mbOk], 0);

        end;
      end
      Else
      begin
        if (SpecificMaster > 0) then
        begin
          formprev2.prevmaster := SpecificMaster;
          if (formprev2.Showing) then
            formprev2.gotospecific(formprev2.prevmaster)
          Else
            formprev2.ShowModal;

          // Formprev2.BringToFront;
        end;
        // else
        // MessageDlg(InfraLanguage1.Translate('No thumbnail selected'), mtInformation,[mbOk], 0);
      end;
    end;

  except
  end;
end;

procedure TFormMain.TreeViewExpandViewClick(Sender: TObject);
begin
  if not(Prefs.AlwaysFullTreeExpand) or // Skal vi lave expand?
    ((Sender as TTreeView).Selected = nil) or
    ((Sender as TTreeView).Selected.Level <> 2)
  // Er der valgt noget og er det publications?
  then // Næ
    exit;
  try
    (Sender as TTreeView).HotTrack := false;
    (Sender as TTreeView).Selected.Expand(true);
    (Sender as TTreeView).HotTrack := true;
  except
  end;
end;

procedure TFormMain.loadthumbnails(manulrefresh: Boolean);

  function newmasterinthumblist(Mast: Longint): Boolean;
  var
    i: Integer;
  begin
    result := true;
    if NShowthubms > 0 then
    begin
      for i := 0 to NShowthubms do
      begin
        if Showthubms[i].mastercopyseparationset = Mast then
        begin
          result := false;
          break;
        end;
      end;
    end;
  end;

var
  anyactive: Boolean;
  nothumb: Boolean;
  anynotactive, anyheld, anynotapproved: Boolean;
  hversion, Anyproof, ithumb, anynotproof: Integer;
  isaproved, isdisapproved: Boolean;
  Colorstatarray: colorstatusarray;
  cw, X, sx, icolor, Y: Integer;
  anylocked: Boolean;
  Lstat: Integer;
  Hstat: Integer;
  thisrow, thiscol, i: Integer;
  maxcols: Integer;
  sbuf, buf, ibuf, tmpplim: tbitmap;
  destim, dest, destbar, destnthumb, dbar, sbar, allrect: TRect;
  L: TListItem;
  Aktcopymasterseparationset, nextcopymasterseparationset,aktpdfmaster: Integer;

  Ipre: Integer;
  pt: TPoint;

  Ncolor: Integer;
  nep: PThumbdata;
  Colorst: String;

  aktpage: String;

  nextcolor: Boolean;
  wherestr, wherestr2: String;
  selpage: TListItem;
  N, fromsel, fromlevel, fromnode, STreeNode: TTreeNode;

  Wplanpagename: String;
  Wlocation, WMasterCopySeparationSet, WpublicationID, WissueID, WeditionID,
    WproductionID, WsectionID, Wpagetype, WOutputPriority: Integer;
  Wpagename: String;
  WComment: String;
  Mastereditionid: Integer;
  DataAktcopymasterseparationset, MasterCopySeparationSet: Integer;

  colorstat: String;

  r1616, r1818, sd, R1824: TRect;
  prex: Integer;
  recdone: Boolean;
  updting: Boolean;

  starttime, loadtime, imtime, listtime: TDateTime;
  colorexists: Boolean;

  T, t2: String;
  orderstr: String;
  W, h: Integer;
  ratio: Single;

  TMW, TMH, i1: Integer;

  isAutoaproved: Boolean;
  localok: Boolean;
  ServerThumbtime, Localthumbtime: TDateTime;
  LT: String;

  BH, BW: Integer;
  BDest, Bsource: TRect;
  Bim: tbitmap;
  Newbim: Boolean;
  SeditionID: Integer;
  SlocationID: Integer;
  Locationstr, editionstr, pressstr, aktcaption: String;

  aktthumbpubdate: TDateTime;
  thispair: Integer;
  awidth: Integer;
  aktpageindex, aktpagina, aktpageformatID: Integer;

  Cutpan: tbitmap;
  Thumbpresel: array of Integer;
  NThumbpresel: Integer;
  Fileservername: String;

  preimdx: Integer;
  Foundpre: Boolean;
  Thumbpath: String;
  AKTNShowthubms: Integer;
  Addingthumbs: Boolean;

  lasttopitemmaster, lastenditemmaster: Integer;
  prexCount, prevverttop: Integer;
  Visiblecap: String;
  ImageListthumbnailsHeight: Integer;

  JPGtagError: Boolean;
  Mainservername: String;
  Locid: Integer;

  itsachange: Boolean;
  r, lasty, Nchanges, changecaptionheight: Integer;

  Ncapchrs: Integer;
  Ipressid, firstpag: Integer;
  InsertDummy: Boolean;
  MustLoadMasterEditionName: Boolean;
  zoomfactor: double;
  spacingvertical: Integer;
  spacinghorizontal: Integer;
  TmpX: Integer;
  TmpS: String;
  sFileName: String;
  PreviewGUID: String;
  ScrollBarWidth: Integer;

  thisApprove: Integer;
  thisEditionID: Integer;
  thisLocationID: Integer;
  thisPressID: Integer;
  thisColorID: Integer;
  thisHold: Integer;
  thisActive: Integer;
  thisEvent: Integer;
  thisVersion: Integer;
  thisStatus: Integer;
  thisRotation: Integer;
  thisPlateStatus: Integer;
  thisUniquePage: Integer;
  thisProofStatus: Integer;
  InnerMargin : Integer;
begin
  InnerMargin := 4;
  Anyproof := 0;
  Ncolor := 0;
  isaproved := true;
  isAutoaproved := false;
  isdisapproved := false;
  nextcolor := false;
  anynotactive := false;
  anyheld := false;
  anynotapproved := false;
  hversion := 0;
  Colorst := '';
  anynotproof := 0;
  anyactive := false;
  Lstat := 0;
  Hstat := 0;

  // DETTE ER KUN FOR TEST HOS DAT
  { if Pos('10.0.10.132', T) = 0 then
    StatusBar1.Panels[6].Text := T; }
  // StatusBar1.Panels[6].Text := Pathes[1].path;
  hversion := 1;
  aktpageformatID := 0;
  zoomfactor := 1.0;
  // Steen 020315

  (*
    If (ActionBestFitt.Checked) then
    begin
    TmpX := 0;
    TmpS := ' 1 = 1 ';
    STreeNode := TreeViewThumbs.Selected;

    while STreenode.Level > 0 do
    begin
    Case TTreeViewpagestype(STreenode.data^).Kind of //0=all,1=location,2=publication,pubdate,3=issue,4=edition,5=section
    1 : begin
    LookForhonneypubldate := TTreeViewpagestype(STreenode.data^).pubdate;
    TmpS := TmpS + ' and PubDate = ''' + FormatDateTime('yyyy/mm/dd', TTreeViewpagestype(STreenode.data^).pubdate) + '''';
    end;
    2 : begin
    TmpS := TmpS + ' and PublicationID = ' + IntToStr(TTreeViewpagestype(STreenode.data^).publicationid);
    LookForhonneypublid := TTreeViewpagestype(STreenode.data^).publicationid;
    end;
    //     3 : begin
    //            TmpS := TmpS + ' and Issueid = ' + IntToStr(TTreeViewpagestype(STreenode.data^).issueid);
    //          end;
    4 : begin
    LookForhonneyeditionid := TTreeViewpagestype(STreenode.data^).editionid;
    TmpS := TmpS + ' and Editionid = ' + IntToStr(TTreeViewpagestype(STreenode.data^).editionid);
    end;
    5 : begin
    TmpS := TmpS + ' and Sectionid = ' + IntToStr(TTreeViewpagestype(STreenode.data^).sectionid);
    end;
    end;
    STreenode := STreenode.Parent;
    end;

    DataM1.Query1.SQL.Clear;
    DataM1.Query1.SQL.Add('Select COUNT(Distinct CopySeparationSet) FROM PageTable WITH (NOLOCK)');
    DataM1.Query1.SQL.Add('WHERE Dirty=0 AND PageType = 0 AND ' + TmpS);

    DataM1.Query1.Open;

    if not DataM1.Query1.Eof then
    TmpX :=   DataM1.Query1.Fields[0].AsInteger;

    DataM1.Query1.Close;

    zoomfactor := ( (Panel20.height / 40 )  * (Panel20.width / 30) ) / (TmpX * 20);
    //De må ikke være over 1
    If zoomfactor > 1.0 then
    zoomfactor := 1.0;
    end;
  *)
  Thumbcapheight := round(Prefs.ThumbnailCaptionHeight * zoomfactor);
  spacingvertical := round((Prefs.ThumbnailCaptionHeight + Prefs.ThumbnailGapVertical)* zoomfactor);
  spacinghorizontal := round(Prefs.ThumbnailGapHorizontal * zoomfactor);
  // round( 8.0 * zoomfactor);


  changecaptionheight := round(FormImage.Labelplatetext.Height * 2.0);
  writeMainlogfile('Load Thumbnails start');
  LookForProducerrorNow := true;

  if not manulrefresh then
    AKTNShowthubms := NShowthubms
  else
    AKTNShowthubms := -1;
  formprev2.AktReadorder := 0;
  NThumbpresel := 0;

  prevverttop := PBExListviewthumbnail.ViewOrigin.Y;
  lasttopitemmaster := -1;
  lastenditemmaster := -1;
  // edit1.text := IntToStr(prevverttop);   DEBUG purpose

  Ncapchrs := 1;
  MustLoadMasterEditionName := false;
  for i := 0 to Length(Prefs.ThumbnailCaptionText) - 1 do
  begin
    if pos('#', Prefs.ThumbnailCaptionText[i].Name) > 0 then
      Inc(Ncapchrs);
    if (Prefs.ThumbnailCaptionText[i].Enabled) AND (pos('Master edition', Prefs.ThumbnailCaptionText[i].Name) > 0) then
      MustLoadMasterEditionName := true;
  end;

  Nthumbprepos := 0;
  for i := 0 to 3 do
    thumbprepos[i].left := -1;

  if PBExListviewthumbnail.Items.Count > 0 then
  begin
    lasttopitemmaster := Showthubms[0].mastercopyseparationset;
    lastenditemmaster := Showthubms[PBExListviewthumbnail.Items.Count - 1].mastercopyseparationset;
    if PBExListviewthumbnail.Items[0].DisplayRect(drBounds).Top > -3 then
    begin
      Visiblecap := PBExListviewthumbnail.Items[0].caption;
    end
    else
    begin
      for i := PBExListviewthumbnail.Items.Count - 1 downto 0 do
      begin
        if PBExListviewthumbnail.Items[i].DisplayRect(drBounds).bottom <
          PBExListviewthumbnail.Height then
        begin
          Visiblecap := PBExListviewthumbnail.Items[i].caption;
          break;
        end;
      end;
    end;
  end;

  prexCount := 0;
  for i := 0 to Length(Prefs.ThumbnailEvents) - 1 do
  begin
    if (Prefs.ThumbnailEvents[i].Enabled) then
      Inc(prexCount);
  end;

  if TreeViewThumbs.Selected = nil then
    exit;
  if TreeViewThumbs.Selected.Level = 0 then
    exit;
  if (TreeViewThumbs.Selected.Level < Prefs.ThumbnailTreeMinimumLevel) then
    exit;

  if (Prefs.ReselectThumbnails) then
  begin

    for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
    begin
      if PBExListviewthumbnail.Items[i].Selected then
      begin
        Inc(NThumbpresel);
      end;
    end;

    SetLength(Thumbpresel, NThumbpresel + 10);

    NThumbpresel := 0;
    for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
    begin
      if PBExListviewthumbnail.Items[i].Selected then
      begin
        Inc(NThumbpresel);
        Thumbpresel[NThumbpresel - 1] :=
          Showthubms[PBExListviewthumbnail.Items[i].Index].mastercopyseparationset;
      end;
    end;
  end;

  anynotapprovedblink := false;
  anyDisapprovedblink := false;

  Bim := tbitmap.Create;
  buf := tbitmap.Create;
  sbuf := tbitmap.Create;
  ibuf := tbitmap.Create;
  Cutpan := tbitmap.Create;
  itsachange := false;

  Nchanges := 1;

  PBExListviewthumbnail.Items.BeginUpdate;

  // NAN 20161212
  Mainservername := tNames1.GetMainFileServer();

  tmpplim := tbitmap.Create;
  screen.Cursor := crhourglass;
  try
    Case (Prefs.ThumbnailSize) of
      0:
        begin
          TMW := 30;
          TMH := 50;
        end;
      1:
        begin
          TMW := 80;
          TMH := 100;
        end;
      2:
        begin
          TMW := round(100.0 * zoomfactor);
          TMH := round(120.0 * zoomfactor);
        end;
    end;

    BH := TMH;
    BH := TMW;
    Bim.width := BW;
    Bim.Height := BH;

    firstnotappr := -1;
    firstDisappr := -1;
    starttime := NOW;

    r1616.Top := 0;
    r1616.left := 0;
    r1616.bottom := round(16 * zoomfactor);
    r1616.right := round(16 * zoomfactor);

    r1818.Top := 0;
    r1818.left := 0;
    r1818.bottom := round(18 * zoomfactor);
    r1818.right := round(18 * zoomfactor);

    updting := false;
    LookForhonneyeditionid := -1;

    if (TreeViewThumbs.Selected <> nil) and (TreeViewThumbs.Items.Count > 0)
    then
    begin
      fromnode := TreeViewThumbs.Selected;
      fromsel := TreeViewThumbs.Selected;
      fromlevel := fromsel;
      while fromlevel.Level > 5 do
        fromlevel := fromlevel.Parent;

      if (ActionCHKthumbreadorder.Checked) And (ActionCHKthumbreadorder.Enabled)
      then
      begin
        wherestr := 'where p1.separation > -99 and p1.pagetype < 3 ';
        // dummy sider skal tælles med
      end
      else
      begin
        wherestr := 'where p1.separation > -99 and p1.pagetype < 2 ';
      end;

      Locid := GetSelectedLocationID();
      if (Locid > 0) then
        wherestr := wherestr + ' and p1.locationid = ' + IntToStr(Locid);

      if PDFMasterOK then
      begin
        if Pressvisibilylimited then
        begin
          wherestr := wherestr + ' and p1.pressid IN ' + PressvisibilyIN;
        end
        // else
        // begin
        // Prefs.Debug og en eller anden special
        // wherestr := wherestr + ' and p1.mastercopyseparationset  =  p1.pdfmaster ';
        // end;
      end;

      N := fromlevel;
      while N.Level > 0 do
      begin
        Case TTreeViewpagestype(N.Data^).kind of
          // 0=all,1=location,2=publication,pubdate,3=issue,4=edition,5=section
          1:
            begin
              LookForhonneypubldate := TTreeViewpagestype(N.Data^).Pubdate;
              wherestr := wherestr + ' and ' + Datam1.makedatastr('p1.',
                TTreeViewpagestype(N.Data^).Pubdate);
            end;
          2:
            begin
              wherestr := wherestr + ' and p1.publicationid = ' +
                IntToStr(TTreeViewpagestype(N.Data^).Publicationid);
              LookForhonneypublid := TTreeViewpagestype(N.Data^).Publicationid;
            end;
          // 3 : begin
          // wherestr := wherestr + ' and p1.issueid = ' + IntToStr(TTreeViewpagestype(n.data^).issueid);
          // end;
          4:
            begin
              LookForhonneyeditionid := TTreeViewpagestype(N.Data^).editionid;
              wherestr := wherestr + ' and p1.editionid = ' +
                IntToStr(TTreeViewpagestype(N.Data^).editionid);
            end;
          5:
            begin
              wherestr := wherestr + ' and p1.sectionid = ' +
                IntToStr(TTreeViewpagestype(N.Data^).Sectionid);
            end;
        end;
        N := N.Parent;
      end;
      wherestr := wherestr + ' and p1.copynumber = 1 ';

      if (ActionCHKthumbonlyunique.Checked) And
        (PageControlMain.ActivePageIndex = VIEW_THUMBNAILS) then
      begin
        if (Prefs.ThumbnailsShowAlsoForcedPages) then
          wherestr := wherestr + ' and (p1.uniquepage = 1 OR p1.uniquepage = 2) '
        else
          wherestr := wherestr + ' and p1.uniquepage = 1 ';
      end;

      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('select p1.pagetype,p1.locationid,p1.productionid,p1.publicationid,p1.issueid,p1.editionid,p1.sectionid,p1.pagination,p1.mastercopyseparationset,');
      Datam1.Query1.SQL.Add
        ('p1.pagename,p1.approved,p1.version,p1.PlanPageName,');
      Datam1.Query1.SQL.Add
        ('p1.colorid,p1.pubdate,p1.mastercopyseparationset,p1.uniquepage,p1.status,p1.active,p1.proofstatus,p1.hold,p1.pageindex,p1.FileServer,p1.externalstatus,p1.comment,p1.presssectionnumber,p1.pressid');
      Datam1.Query1.SQL.Add
        (',p1.Pagination,p1.active,p1.OutputPriority,P1.FileName');

      if PDFMasterOK then
        Datam1.Query1.SQL.Add(',p1.PdfMaster,p1.PageFormatID,P1.FanoutID');
      if (Global_HasPlateStatusField) then
        Datam1.Query1.SQL.Add(',P1.PlateStatus');

      if MustLoadMasterEditionName then
        Datam1.Query1.SQL.Add(',p3.EditionID AS MasterEdition');

      Datam1.Query1.SQL.Add('from pagetable p1 (NOLOCK)');

      if (MustLoadMasterEditionName) then
        Datam1.Query1.SQL.Add
          ('INNER JOIN PageTable p3 (NOLOCK) ON P1.MasterCopySeparationSet=P3.MasterCopySeparationSet AND P3.UniquePage=1 AND P3.Dirty=0 ');

      Datam1.Query1.SQL.Add(wherestr);
      Datam1.Query1.SQL.Add('and P1.dirty = 0');

      // if CheckBoxthumbapprovalfilter.checked then
      // Datam1.Query1.SQL.Add('and (P1.approved = 0 OR P1.Approved=2');

      if ActionCHKthumbonlyunique.Checked then
        formprev2.wherestr := wherestr + ' and p1.uniquepage = 1 '
      Else
        formprev2.wherestr := wherestr;

      AutoSelectionstrings[1] := wherestr;
      NAutoSelectionstrings := 1;

      orderstr := 'Order by ';

      if (ActionCHKthumbreadorder.Checked) And (ActionCHKthumbreadorder.Enabled)
      then
      begin
        orderstr := orderstr + 'p1.locationid,';
        orderstr := orderstr + 'p1.publicationid,';
        orderstr := orderstr + 'p1.editionid,';
        orderstr := orderstr + 'p1.pageindex,';
      end
      else
      begin
        for i := 0 to Length(Prefs.ThumbnailSortingOrder) - 1 do
        begin
          if Prefs.ThumbnailSortingOrder[i] = 'publication' then
            orderstr := orderstr + 'p1.publicationid,';
          if Prefs.ThumbnailSortingOrder[i] = 'edition' then
            orderstr := orderstr + 'p1.editionid,';
          if Prefs.ThumbnailSortingOrder[i] = 'section' then
            orderstr := orderstr + 'p1.sectionid,';
          if Prefs.ThumbnailSortingOrder[i] = 'pageindex' then
            orderstr := orderstr + 'p1.pageindex,';
          if Prefs.ThumbnailSortingOrder[i] = 'location' then
            orderstr := orderstr + 'p1.locationid,';
          if Prefs.ThumbnailSortingOrder[i] = 'PresssectionNumber' then
            orderstr := orderstr + 'p1.presssectionnumber,';
          if Prefs.ThumbnailSortingOrder[i] = 'Press' then
            orderstr := orderstr + 'p1.pressid,';
          if Prefs.ThumbnailSortingOrder[i] = 'Pagination' then
            orderstr := orderstr + 'p1.pagination,';
          if Prefs.ThumbnailSortingOrder[i] = 'PageName' then
            orderstr := orderstr + 'p1.pagename,';
        end;
      end;

      orderstr := orderstr + 'p1.mastercopyseparationset,p1.colorid';

      if CheckBoxthumbapprovalfilter.Checked then
      begin
        Datam1.Query1.SQL.Add
          ('and exists(select p2.pagename from pagetable p2 (NOLOCK) where');
        Datam1.Query1.SQL.Add
          ('p2.status >= 10 and p2.active = 1 and P2.approved = 0');
        Datam1.Query1.SQL.Add
          ('and p1.CopySeparationSet = p2.CopySeparationSet)');
      end;

      AutoOrderbystrings[1] := orderstr;
      NAutoOrderbystrings := 1;

      Datam1.Query1.SQL.Add(orderstr);

      if Prefs.Debug then
        Datam1.Query1.SQL.SaveToFile
          (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) + 'sqllogs\' + 'loadthumbdata.sql');
      InsertDummy := false;
      LookForhonneywherestr := wherestr;
      NShowthubms := -1;
      Tryopen(Datam1.Query1);

      if not Datam1.Query1.Eof then
      begin
        firstpag := Datam1.Query1.FieldByName('Pagination').AsInteger;
        if (ActionCHKthumbreadorder.Checked) and
           (ActionCHKthumbreadorder.Enabled) and (firstpag mod 2 = 0) then
          InsertDummy := true;
      end;

      Aktcopymasterseparationset := -1;
      nextcopymasterseparationset := -1;
      Wlocation := -1;

      while not Datam1.Query1.Eof do
      begin
        if (Aktcopymasterseparationset <> Datam1.Query1.FieldByName('mastercopyseparationset').AsInteger) then
        begin
          aktthumbpubdate := Datam1.Query1.FieldByName('pubdate').AsDateTime;
          Locationstr := tNames1.locationIDtoname(Datam1.Query1.FieldByName('Locationid').AsInteger) + ' ';
          editionstr := tNames1.editionIDtoname(Datam1.Query1.FieldByName('editionid').AsInteger) + ' ';
          Aktcopymasterseparationset := Datam1.Query1.FieldByName('mastercopyseparationset').AsInteger;
          if PDFMasterOK then
          begin
            aktpdfmaster := Datam1.Query1.FieldByName('pdfmaster').AsInteger;
            aktpageformatID := Datam1.Query1.FieldByName('PageFormatID').AsInteger;
            thisRotation := Datam1.Query1.FieldByName('FanoutID').AsInteger;
            if (Global_HasPlateStatusField) then
              thisPlateStatus := Datam1.Query1.FieldByName('PlateStatus').AsInteger
            else
              thisPlateStatus := 0;
          end
          else
          begin
            aktpdfmaster := Aktcopymasterseparationset;
            aktpageformatID := 0;
            thisRotation := 0;
            thisPlateStatus := 0;
          end;
          // ## NAN 20150204
          if aktpdfmaster = 0 then
            aktpdfmaster := Aktcopymasterseparationset;

          WComment := '';
          WMasterCopySeparationSet := Datam1.Query1.FieldByName('mastercopyseparationset').AsInteger;
          WpublicationID := Datam1.Query1.FieldByName('publicationid').AsInteger;
          WissueID := Datam1.Query1.FieldByName('issueid').AsInteger;
          Wlocation := Datam1.Query1.FieldByName('Locationid').AsInteger;
          WeditionID := Datam1.Query1.FieldByName('editionid').AsInteger;
          WproductionID := Datam1.Query1.FieldByName('productionid').AsInteger;
          WsectionID := Datam1.Query1.FieldByName('sectionid').AsInteger;
          Wpagename := Datam1.Query1.FieldByName('pagename').AsString;
          if Datam1.Query1.FieldByName('active').AsInteger = 1 then
            WComment := Datam1.Query1.FieldByName('Comment').AsString;
          Wpagetype := Datam1.Query1.FieldByName('pagetype').AsInteger;
          DataAktcopymasterseparationset := Aktcopymasterseparationset;
          SeditionID := Datam1.Query1.FieldByName('editionid').AsInteger;
          SlocationID := Datam1.Query1.FieldByName('locationid').AsInteger;
          aktpageindex := Datam1.Query1.FieldByName('pageindex').AsInteger;
          aktpagina := Datam1.Query1.FieldByName('Pagination').AsInteger;

          Fileservername := Datam1.Query1.FieldByName('FileServer').AsString;
          Wplanpagename := Datam1.Query1.FieldByName('planpagename').AsString;
          pressstr := tNames1.pressnameIDtoname
            (Datam1.Query1.FieldByName('pressid').AsInteger) + ' ';
          Ipressid := Datam1.Query1.FieldByName('pressid').AsInteger;

          if (MustLoadMasterEditionName) then
            Mastereditionid := Datam1.Query1.FieldByName('MasterEdition').AsInteger
          else
            Mastereditionid := WeditionID;

          WOutputPriority := Datam1.Query1.FieldByName('OutputPriority').AsInteger;
          sFileName := Datam1.Query1.FieldByName('FileName').AsString;
          Anyproof := 0;
          Ncolor := 0;
          isaproved := true;
          isAutoaproved := false;
          isdisapproved := false;
          nextcolor := false;
          anynotactive := false;
          anyheld := false;
          anynotapproved := false;
          hversion := 0;
          Colorst := '';
          anynotproof := 0;
          anyactive := false;

          while not Datam1.Query1.Eof do
          begin
            thisEditionID := Datam1.Query1.FieldByName('editionid').AsInteger;
            thisLocationID := Datam1.Query1.FieldByName('locationid').AsInteger;
            thisPressID := Datam1.Query1.FieldByName('pressid').AsInteger;
            thisColorID := Datam1.Query1.FieldByName('colorid').AsInteger;
            thisApprove := Datam1.Query1.FieldByName('approved').AsInteger;
            thisHold := Datam1.Query1.FieldByName('hold').AsInteger;
            thisActive := Datam1.Query1.FieldByName('active').AsInteger;
            thisVersion := Datam1.Query1.FieldByName('version').AsInteger;
            thisStatus := Datam1.Query1.FieldByName('status').AsInteger;
            thisUniquePage := Datam1.Query1.FieldByName('Uniquepage').AsInteger;
            thisProofStatus := Datam1.Query1.FieldByName('ProofStatus').AsInteger;

            if SeditionID <> thisEditionID then
            begin
              SeditionID := thisEditionID;
              editionstr := editionstr + tNames1.editionIDtoname(thisEditionID) + ' ';
            end;
            if SlocationID <> thisLocationID then
            begin
              SlocationID := thisLocationID;
              Locationstr := Locationstr + tNames1.locationIDtoname(thisLocationID) + ' ';
            end;
            if Ipressid <> thisPressID then
            begin
              pressstr := pressstr + tNames1.pressnameIDtoname(thisPressID) + ' ';
              Ipressid := thisPressID;
            end;

            if thisUniquePage = 1 then
            begin
              Wlocation := thisLocationID;
              WeditionID := thisEditionID;
            end;

            aktpage := Datam1.Query1.FieldByName('pagename').AsString;
            if thisActive = 1 then
            begin
              if Datam1.Query1.FieldByName('fileserver').AsString <> '' then
                Fileservername := Datam1.Query1.FieldByName('fileserver').AsString;
              if hversion < thisVersion then
                hversion := thisVersion;

              if (ActionCHKthumbreadorder.Checked) And
                (ActionCHKthumbreadorder.Enabled) then
              begin
                if (thisProofStatus <> 20) then
                  anynotproof := 1
                else
                  Anyproof := 1;
              end
              else
              begin
                if (thisProofStatus >= 10) then
                  Anyproof := 1
                Else
                  anynotproof := 1;
              end;

              if thisHold > 0 then
                anyheld := true;

              if (thisApprove = -1) then
                isAutoaproved := true;
              if (thisApprove = 2) then
              begin
                isaproved := false;
                isdisapproved := true;
              end;

              if ((thisApprove = 0) or (thisApprove = 2)) and (thisStatus >= 10)
              then
              begin
                anynotapprovedblink := true;
                if thisApprove = 2 then
                  anyDisapprovedblink := true;

                anynotapproved := true;
              end;

              if ((thisApprove = 0) or (thisApprove = 2)) then
                anynotapproved := true;

              if (thisActive = 1) then
              begin
                anynotactive := true;
                anyactive := true;
              end;
              if (thisHold = 1) then
                anyheld := true;
            end
            Else
              anynotactive := true;
            Lstat := 1000;
            Hstat := 0;
            if anynotproof = 1 then
              Anyproof := 0;

            if ((ActionCHKthumbreadorder.Checked) And
              (ActionCHKthumbreadorder.Enabled)) then
            begin
              anyactive := true;
            end;

            if thisActive = 1 then
            begin
              if WComment = '' then
                WComment := Datam1.Query1.FieldByName('Comment').AsString;
              colorexists := false;
              if Ncolor > 0 then
              begin
                for icolor := 1 to Ncolor do
                begin
                  if Colorstatarray[icolor].Colorid = thisColorID then
                  begin
                    colorexists := true;
                    break;
                  end;
                end;
              end;

              if not colorexists then
              begin
                Inc(Ncolor);
                Colorstatarray[Ncolor].status := thisStatus;
                Colorstatarray[Ncolor].externalstatus := Datam1.Query1.FieldByName('externalstatus').AsInteger;
                Colorstatarray[Ncolor].Active := thisActive;
                Colorstatarray[Ncolor].uniquepage := thisUniquePage;
                Colorstatarray[Ncolor].Color := Colorsnames[thisColorID].Colorlook;
                Colorstatarray[Ncolor].Version := thisVersion;
                Colorstatarray[Ncolor].Colorid := thisColorID;
                Colorst := Colorst + Colorsnames[thisColorID].Name + ',';
              end;

              if (Lstat > Colorstatarray[Ncolor].status) And
                (Colorstatarray[Ncolor].Active = 1) then
                Lstat := Colorstatarray[Ncolor].status;
              if (Hstat < Colorstatarray[Ncolor].status) And
                (Colorstatarray[Ncolor].Active = 1) then
                Hstat := Colorstatarray[Ncolor].status;

              if (ActionCHKthumbreadorder.Checked) And
                (ActionCHKthumbreadorder.Enabled) then
              begin
                if (thisProofStatus = 20) then
                  Anyproof := 1;
              end
              Else
              begin
                if (thisProofStatus >= 10) then
                  Anyproof := 1;
              end;

            end;

            Datam1.Query1.Next;
            if not Datam1.Query1.Eof then
            begin
              if Aktcopymasterseparationset <> Datam1.Query1.FieldByName('mastercopyseparationset').AsInteger then
              begin
                nextcolor := true;
                break;
              end;
            end;
          end;
        end;

        if ((anyactive) and
          (newmasterinthumblist(DataAktcopymasterseparationset))) then
        begin
          Inc(NShowthubms);
          Showthubms[NShowthubms].npre := 0;

          Showthubms[NShowthubms].changed := false;
          Showthubms[NShowthubms].fileserver := Fileservername;

          Showthubms[NShowthubms].pre[1].status := 0;
          Showthubms[NShowthubms].pre[2].status := 0;
          Showthubms[NShowthubms].pre[3].status := 0;
          Showthubms[NShowthubms].pre[4].status := 0;
          Showthubms[NShowthubms].pre[5].status := 0;

          Showthubms[NShowthubms].Locationstr := Locationstr;
          Showthubms[NShowthubms].pressstr := pressstr;
          Showthubms[NShowthubms].editionstr := editionstr;
          Showthubms[NShowthubms].pagename := Wpagename;
          Showthubms[NShowthubms].Comment := WComment;
          Showthubms[NShowthubms].Version := hversion;
          Showthubms[NShowthubms].pagetype := Wpagetype;
          Showthubms[NShowthubms].Publication := WpublicationID;
          Showthubms[NShowthubms].edition := WeditionID;
          Showthubms[NShowthubms].MasterEdition := Mastereditionid;
          Showthubms[NShowthubms].Issue := WissueID;
          Showthubms[NShowthubms].section := WsectionID;
          Showthubms[NShowthubms].Location := Wlocation;
          Showthubms[NShowthubms].planpagename := Wplanpagename;
          Showthubms[NShowthubms].mastercopyseparationset := DataAktcopymasterseparationset;
          Showthubms[NShowthubms].pdfmaster := aktpdfmaster;
          Showthubms[NShowthubms].pageFormatID := aktpageformatID;

          Showthubms[NShowthubms].Lstat := Lstat;
          Showthubms[NShowthubms].Hstat := Hstat;

          Showthubms[NShowthubms].Anyproof := Anyproof;
          Showthubms[NShowthubms].anyheld := anyheld;
          Showthubms[NShowthubms].anynotapproved := anynotapproved;
          Showthubms[NShowthubms].ISautoappr := isAutoaproved;
          Showthubms[NShowthubms].isdisapproved := isdisapproved;
          Showthubms[NShowthubms].Colorstatarray := Colorstatarray;
          Showthubms[NShowthubms].Ncolor := Ncolor;
          if (anyactive) then
            Showthubms[NShowthubms].SpecialNoAciveEd := 0
          else
            Showthubms[NShowthubms].SpecialNoAciveEd := 1;
          Showthubms[NShowthubms].pageindex := aktpageindex;
          Showthubms[NShowthubms].pagina := aktpagina;
          Showthubms[NShowthubms].Lock := WOutputPriority;
          Showthubms[NShowthubms].filename := sFileName;
          Showthubms[NShowthubms].rotation := thisRotation;
          Showthubms[NShowthubms].PDFsent := thisPlateStatus;
          Showthubms[NShowthubms].uniquepage := thisUniquePage;
          // ### 20190501 NAN

        end;
        anyactive := false;

        if Not nextcolor then
          Datam1.Query1.Next;

        if NShowthubms > 1998 then
          break;
      end; // while not DataM1.Query1.eof do
      Datam1.Query1.Close;




      StatusBar1.Panels[1].text := 'ProductionID ' + IntToStr(WproductionID);
      if (WproductionID > 0) then
        Global_SelectedProductionID := WproductionID;

      if (NShowthubms > 0) and (prexCount > 0) then
      begin

        Datam1.Query2.SQL.Clear;
        // 0                    1              2          3              4                 5
        Datam1.Query2.SQL.Add
          ('select distinct pre.MasterCopySeparationSet,pre.ProcessType,pre.Event,pre.Message,pre.EventTime,p1.mastercopyseparationset from PrepollPageTable pre (NOLOCK) , pagetable p1 (NOLOCK)');
        Datam1.Query2.SQL.Add(wherestr);
        Datam1.Query2.SQL.Add
          ('And pre.mastercopyseparationset = p1.mastercopyseparationset');
        Datam1.Query2.SQL.Add('order by pre.eventtime');

        if Prefs.Debug then
          Datam1.Query2.SQL.SaveToFile
            (IncludeTrailingBackSlash(TUtils.GetCommonAppDirectory()) +
            'sqllogs\' + 'Thumbprelog.sql');

        Datam1.Query2.Open;

        while not Datam1.Query2.Eof do
        begin
          for ithumb := 0 to NShowthubms do
          begin
            if Showthubms[ithumb].mastercopyseparationset = Datam1.Query2.Fields[0].AsInteger then
            begin
              Ipre := -1;
              thisEvent := Datam1.Query2.Fields[2].AsInteger;
              Case (thisEvent) of // Event
                130 .. 139:
                  begin
                    Ipre := 1;
                  end;
                110 .. 119:
                  begin
                    Ipre := 2;
                  end;
                120 .. 129:
                  begin
                    Ipre := 3;
                  end;
                140 .. 149:
                  begin
                    Ipre := 4;
                  end;
                210 .. 249:
                  begin
                    Ipre := 5;
                  end;

              end;

              if Ipre > 0 then
              begin
                T := IntToStr(thisEvent);

                Case T[Length(T)] of
                  '7':
                    Showthubms[ithumb].pre[Ipre].status := 1;
                  '0':
                    Showthubms[ithumb].pre[Ipre].status := 2;
                  '6':
                    Showthubms[ithumb].pre[Ipre].status := 3;
                end;

                Showthubms[ithumb].pre[Ipre].PreEvent := thisEvent;
                Showthubms[ithumb].pre[Ipre].PreMessage := Datam1.Query2.Fields[3].AsString;
                Showthubms[ithumb].pre[Ipre].PreEventTime := Datam1.Query2.Fields[4].AsDateTime;
              end;
              break;

            end;
          end;
          Datam1.Query2.Next;
        end;
        Datam1.Query2.Close;

        if (Prefs.ThumbnailsShowMonoPDFIndicator) then
        begin
          Datam1.Query2.SQL.Clear; // 0
          Datam1.Query2.SQL.Add('select distinct p1.MasterCopySeparationSet,p1.miscString2 from pagetable p1 (NOLOCK)');
          Datam1.Query2.SQL.Add(wherestr);
          Datam1.Query2.Open;
          while not Datam1.Query2.Eof do
          begin
            for ithumb := 0 to NShowthubms do
            begin
              if Showthubms[ithumb].mastercopyseparationset = Datam1.Query2.Fields[0].AsInteger then
              begin
                if Datam1.Query2.Fields[1].AsString = 'CMYK' then
                  Showthubms[ithumb].pre[4].status := 2
                Else
                  Showthubms[ithumb].pre[4].status := 0;
                break;
              end;
            end;

            Datam1.Query2.Next;
          end;

        end;

      end;
      // end of load

      // der cleares og lægges nye images op enten fordi der er en ny selection
      // eller antalet af thumbnails har ændret sig

      Addingthumbs := false;
      if (AKTNShowthubms <> NShowthubms) or (Changingthumborder) or (manulrefresh) then
      begin
        Addingthumbs := true;
        PBExListviewthumbnail.Items.Clear;
        // NAN 20151220
        // PBExListviewthumbnail.refresh;
        FormImage.ImageListthumbnails.Clear;
      end;

      // start på readorder init
      // forberedelse på pagetype 2ere som er sluppet igennem på grund af readorder
      if NShowthubms > 0 then
      begin
        for ithumb := 1 to NShowthubms do
        begin
          if Showthubms[ithumb].pagetype = 2 then
          begin
            Case Showthubms[ithumb - 1].pagetype of
              0:
                begin
                  Showthubms[ithumb] := Showthubms[NShowthubms - ithumb];
                  Showthubms[ithumb].pagetype := 2;
                end;
              1:
                begin
                  Showthubms[ithumb] := Showthubms[ithumb - 1];
                  Showthubms[ithumb].pagetype := 2;
                end;
              2:
                begin // det her er lidt underligt der mere end 1 panorama side
                  Showthubms[ithumb] := Showthubms[NShowthubms - ithumb];
                  Showthubms[ithumb].pagetype := 2;
                end;
            end;
          end;

        end;
      end;

      formprev2.nReadordermasters := 0;
      for ithumb := 1 to 1000 do
      begin
        formprev2.Readordermasters[ithumb].pagetypel := 3;
        formprev2.Readordermasters[ithumb].pagetyper := 3;
        formprev2.Readordermasters[ithumb].masterL := -921;
        formprev2.Readordermasters[ithumb].masterR := -921;
      end;

      if NShowthubms > 0 then
      begin
        if (ActionCHKthumbreadorder.Checked) And
          (ActionCHKthumbreadorder.Enabled) then
        begin
          formprev2.nReadordermasters := 1;
          for ithumb := 0 to NShowthubms do
          begin
            if (ithumb mod 2 = 1) then
              Inc(formprev2.nReadordermasters);

            if ithumb mod 2 = 1 then
            begin
              formprev2.Readordermasters[formprev2.nReadordermasters].Ithumbl := ithumb;
              formprev2.Readordermasters[formprev2.nReadordermasters].pagetypel := Showthubms[ithumb].pagetype;
              formprev2.Readordermasters[formprev2.nReadordermasters].masterL := Showthubms[ithumb].mastercopyseparationset;
            end
            else
            begin
              formprev2.Readordermasters[formprev2.nReadordermasters].IthumbR := ithumb;
              formprev2.Readordermasters[formprev2.nReadordermasters].pagetyper := Showthubms[ithumb].pagetype;
              formprev2.Readordermasters[formprev2.nReadordermasters].masterR := Showthubms[ithumb].mastercopyseparationset;
            end;
          end;
        end;
      end;

      // end readorder init

      // start på initialisering af thumb generering

      loadtime := NOW;

      thisrow := 0;
      thiscol := 0;
      tmpplim.width := round(16.0 * zoomfactor);
      tmpplim.Height := round(16.0 * zoomfactor); // ??
      aktPBExListviewthumbnailvertpos := 0;

      if (Prefs.ThumbnailSize > 1) then
      begin
        ImageListthumbnailsHeight := TMH + spacingvertical;
        // Her kan der lægges til så der er plads til mere data
      end
      else
      begin
        ImageListthumbnailsHeight := TMH + spacingvertical;
      end;

      FormImage.ImageListthumbnails.width := TMW + spacinghorizontal;

      // Make room for prepoll (external) event buttons
      if prexCount > 0 then
      begin
        ImageListthumbnailsHeight := ImageListthumbnailsHeight + round(16 * zoomfactor);
      end;

      BH := TMH;
      BW := TMW;

      ScrollBarWidth := GetSystemMetrics(SM_CXVSCROLL);
      i := -1;
      // maxcols := PBExListviewthumbnail.Width div (FormImage.ImageListthumbnails.width+round(12.0*zoomfactor));
      maxcols := PBExListviewthumbnail.width div
        (FormImage.ImageListthumbnails.width + round(2.0 + (Prefs.ThumbnailGapHorizontal * zoomfactor)));
      // maxcols := (PBExListviewthumbnail.Width - 2 * spacinghorizontal - ScrollBarWidth)  div (FormImage.ImageListthumbnails.width);

      if (ActionCHKthumbreadorder.Checked) And (ActionCHKthumbreadorder.Enabled)
      then
      begin
        if maxcols mod 2 = 1 then
          Dec(maxcols);
      end;
      if (FormImage.ImageListthumbnails.Height <> ImageListthumbnailsHeight) And
        (Not Addingthumbs) then
      begin
        Addingthumbs := true;
        Addingthumbs := true;
        PBExListviewthumbnail.Items.Clear;
        // NAN 20151220
        // PBExListviewthumbnail.refresh;
        FormImage.ImageListthumbnails.Clear;
      end;

      FormImage.ImageListthumbnails.Height := ImageListthumbnailsHeight;
      buf.width := FormImage.ImageListthumbnails.width;
      buf.Height := FormImage.ImageListthumbnails.Height;

      if (CurThumbsw <> BH) or (CurThumbsw <> BW) then
      begin
        NCurThumbs := 0;
      end;

      Bim.width := BW;
      Bim.Height := BH;
      // ImageListthload.Height := buf.Height;
      // ;

      recdone := false;
      sbuf.width := FormImage.ImageListthumbnails.width - round(3.0 * zoomfactor);
      sbuf.Height := round(24.0 * zoomfactor);

      destbar.Top := 0;
      destbar.left := 0;
      destbar.bottom := sbuf.Height;
      destbar.right := sbuf.width;

      (* dbar.Top  := round(3.0* zoomfactor);
        dbar.left := round(3.0* zoomfactor);
        dbar.bottom := round(19.0 * zoomfactor);
        dbar.right := round(19.0 * zoomfactor);

        sbar.Top  := 0;
        Sbar.left := 0;
        Sbar.bottom := round(16.0 * zoomfactor);
        Sbar.right :=  round(16.0 * zoomfactor);
      *)
      ibuf.width := 18;
      ibuf.Height := 18;

      // end på initialisering af draw
      // start load af curthumb dvs load af thumbnails

      InnerMargin := round(Prefs.ThumbnailInnerMargin * zoomfactor);

      PreviewGUID := inittypes.GeneratePreviewGUID(WpublicationID, aktthumbpubdate);

      if NShowthubms > -1 then
      begin
        for ithumb := 0 to NShowthubms do
        begin
          nothumb := false;
          Newbim := true;
          Showthubms[ithumb].ThumbOK := false;

          if Showthubms[ithumb].Anyproof = 1 then
          begin
            MasterCopySeparationSet := Showthubms[ithumb].mastercopyseparationset;
            Showthubms[ithumb].fileserver := Mainservername;
            { if Showthubms[ithumb].Fileserver = '' then
              writeMainlogfile('Load Thumbnails end');
            }

            Thumbpath := getfileserverpath(PATHTYPE_CCTHUMBNAILS, Showthubms[ithumb].fileserver);
            t := '';
            if (Prefs.UsePreviewCache) then
              t := Includetrailingpathdelimiter(Prefs.PreviewCacheShare) + 'CCThumbnails\' + IntToStr(MasterCopySeparationSet) + '.jpg';
            if ((not Prefs.UsePreviewCache) or (Prefs.UsePreviewCache and FileExists(t))) then
              t := Includetrailingpathdelimiter(Thumbpath) + IntToStr(MasterCopySeparationSet) + '.jpg';

            if (Prefs.NewPreviewNames) then
            begin
              t2 := t;
              t := '';
              if (Prefs.UsePreviewCache) then
                 t := Includetrailingpathdelimiter(Prefs.PreviewCacheShare) + 'CCThumbnails\' +  PreviewGUID + '====' + IntToStr(MasterCopySeparationSet) + '.jpg';
              if ((not Prefs.UsePreviewCache) or (Prefs.UsePreviewCache and FileExists(t))) then
                t := Includetrailingpathdelimiter(Thumbpath) + PreviewGUID + '====' + IntToStr(MasterCopySeparationSet) + '.jpg';
              if (not FileExists(t)) then
                t := t2;

            end;


        {    if Not FileExists(t) then
            begin
              Thumbpath := FormMain.getfileserverpath(PATHTYPE_CCTHUMBNAILS,
                Mainservername);
              T := Includetrailingpathdelimiter(Thumbpath) +
                IntToStr(Showthubms[ithumb].mastercopyseparationset) + '.jpg';

              if (Prefs.NewPreviewNames) then
              begin
                T := Includetrailingpathdelimiter(Thumbpath) + PreviewGUID +
                  '====' + IntToStr
                  (Showthubms[ithumb].mastercopyseparationset) + '.jpg';
                if Not FileExists(T) then
                  T := Includetrailingpathdelimiter(Thumbpath) +
                    IntToStr(Showthubms[ithumb]
                    .mastercopyseparationset) + '.jpg';
              end;
              // if Not fileexists(T) then
              // FormMain.logontopaths;

            end;    }

            JPGtagError := false;
            if (Prefs.CheckJpegTag) then
            begin
              if FileExists(T) then
              begin
                if CompareJpgIds(T, aktthumbpubdate,
                  Showthubms[ithumb].Publication, Showthubms[ithumb].section,
                  Showthubms[ithumb].pagename) = 2 then
                begin
                  JPGtagError := true;
                  // overvej at reproofe
                end;
              end;
            end;

            writeMainlogfile('Thumbnails path: T=' + T);
            if (FileExists(T)) And (not JPGtagError) then
            begin
              Showthubms[ithumb].ThumbOK := true;

              ServerThumbtime := GetFileLastAccessTime(T, 2);
              if (Changingthumborder) or
              // (Showthubms[ithumb].lock = -1)     or
                (ServerThumbtime <> CurThumbs[ithumb].filetime) or
                (Showthubms[ithumb].mastercopyseparationset <> CurThumbs[ithumb].masterset) or
                (Showthubms[ithumb].Lock <> CurThumbs[ithumb].Lock) then
              begin
                if (ActionCHKthumbreadorder.Checked) And
                  (ActionCHKthumbreadorder.Enabled) then
                begin
                  Case Showthubms[ithumb].pagetype of
                    0:
                      begin
                        try
                          Imageload.Picture.LoadFromFile(T);
                        Except
                        end;
                      end;
                    1:
                      begin
                        Imageload.Picture.LoadFromFile(T);
                        Cutpan.width := Imageload.width;
                        Cutpan.Height := Imageload.Height;
                        BDest.Top := 0;
                        BDest.bottom := Cutpan.Height;
                        BDest.left := 0;
                        BDest.right := Cutpan.width;
                        Cutpan.Canvas.stretchdraw(BDest,
                          TJPEGImage(Imageload.Picture.Graphic));
                        Cutpan.width := Cutpan.width div 2;
                        Imageload.Picture.Bitmap := Cutpan;
                      end;
                    2:
                      begin
                        Imageload.Picture.LoadFromFile(T);
                        Cutpan.width := Imageload.width;
                        Cutpan.Height := Imageload.Height;
                        BDest.Top := 0;
                        BDest.bottom := Cutpan.Height;
                        BDest.left := 0;
                        BDest.right := Cutpan.width;
                        Cutpan.Canvas.stretchdraw(BDest,
                          TJPEGImage(Imageload.Picture.Graphic));
                        BDest.left := 0;
                        BDest.right := Cutpan.width div 2;
                        Bsource := BDest;
                        Bsource.left := Cutpan.width div 2;
                        Bsource.right := Cutpan.width;
                        Cutpan.Canvas.CopyRect(BDest, Cutpan.Canvas, Bsource);
                        Cutpan.width := Cutpan.width div 2;
                        Imageload.Picture.Bitmap := Cutpan;
                      end;
                  end;
                end
                Else
                  try
                    Imageload.Picture.LoadFromFile(T);
                  except
                    writeMainlogfile
                      ('Thumbnails fail. Except fanget den. TEST: T=' + T);
                    Imageload.Picture :=
                      FormImage.Imagenothumbsinglemissingnofile.Picture;
                  end;

                if (Showthubms[ithumb].Lock = -1) then
                  Imageload.Picture := FormImage.Imagepagepending.Picture;
              end
              Else
              begin
                Newbim := false;
                if (Showthubms[ithumb].Lock = -1) then
                  Imageload.Picture := FormImage.Imagepagepending.Picture;
              end;
            end
            else
            begin
              CurThumbs[ithumb].filetime := 0;
              if (ActionCHKthumbreadorder.Checked) then
              begin
                if Showthubms[ithumb].Hstat < 10 then
                begin
                  Case Showthubms[ithumb].pagetype of
                    0:
                      begin
                        if (Showthubms[ithumb].rotation > 0) then
                          Imageload.Picture :=
                            FormImage.Imagenothumbsinglerot.Picture
                        else
                          Imageload.Picture :=
                            FormImage.Imagenothumbsingle.Picture;
                      end;
                    1:
                      begin
                        if (Showthubms[ithumb].rotation > 0) then
                          Imageload.Picture :=
                            FormImage.Imagenothumbcentersamle1rot.Picture
                        else
                          Imageload.Picture :=
                            FormImage.Imagenothumbcentersamle1.Picture;
                      end;
                    2:
                      begin
                        if (Showthubms[ithumb].rotation > 0) then
                          Imageload.Picture :=
                            FormImage.Imagenothumbcentersamle2rot.Picture
                        else
                          Imageload.Picture :=
                            FormImage.Imagenothumbcentersamle2.Picture;
                      end;
                  end;
                end
                Else
                begin
                  if Showthubms[ithumb].Anyproof > 0 then
                  begin
                    Case Showthubms[ithumb].pagetype of
                      0:
                        Imageload.Picture :=
                          FormImage.Imagenothumbsinglemissingnofile.Picture;
                      1:
                        Imageload.Picture :=
                          FormImage.
                          Imagenothumbcentersamle1missingnofile.Picture;
                      2:
                        Imageload.Picture :=
                          FormImage.
                          Imagenothumbcentersamle2missingnofile.Picture;
                    end;
                  end
                  Else
                  begin
                    Case Showthubms[ithumb].pagetype of
                      0:
                        Imageload.Picture :=
                          FormImage.Imagenothumbsinglemissing.Picture;
                      1:
                        Imageload.Picture :=
                          FormImage.Imagenothumbcentersamle1missing.Picture;
                      2:
                        Imageload.Picture :=
                          FormImage.Imagenothumbcentersamle2missing.Picture;
                    end;
                  end;
                end;
              end
              else
              begin
                if Showthubms[ithumb].pagetype = 1 then
                begin
                  if Showthubms[ithumb].Hstat < 10 then
                  begin
                    if (Showthubms[ithumb].rotation > 0) then
                      Imageload.Picture :=
                        FormImage.Imagenothumbcenterrot.Picture
                    else
                      Imageload.Picture := FormImage.Imagenothumbcenter.Picture;
                  end
                  else
                  begin
                    if Showthubms[ithumb].Anyproof > 0 then
                      Imageload.Picture :=
                        FormImage.Imagenothumbcentermissingnofile.Picture
                    Else
                      Imageload.Picture :=
                        FormImage.Imagenothumbcentermissing.Picture;
                  end;
                end
                else
                begin
                  if Showthubms[ithumb].Hstat < 10 then
                  begin
                    if (Showthubms[ithumb].rotation > 0) then
                      Imageload.Picture :=
                        FormImage.Imagenothumbsinglerot.Picture
                    else
                      Imageload.Picture := FormImage.Imagenothumbsingle.Picture;
                  end
                  Else
                  begin
                    if Showthubms[ithumb].Anyproof > 0 then
                      Imageload.Picture :=
                        FormImage.Imagenothumbsinglemissingnofile.Picture
                    else
                      Imageload.Picture :=
                        FormImage.Imagenothumbsinglemissing.Picture;
                  end;
                end;
              end;

              nothumb := true;
            end;
          end
          else
          begin
            CurThumbs[ithumb].filetime := 0;
            if (ActionCHKthumbreadorder.Checked) And
              (ActionCHKthumbreadorder.Enabled) then
            begin
              if Showthubms[ithumb].Hstat < 10 then
              begin
                Case Showthubms[ithumb].pagetype of
                  0:
                    begin
                      if (Showthubms[ithumb].rotation > 0) then
                        Imageload.Picture :=
                          FormImage.Imagenothumbsinglerot.Picture
                      else
                        Imageload.Picture :=
                          FormImage.Imagenothumbsingle.Picture;
                    end;
                  1:
                    begin
                      if (Showthubms[ithumb].rotation > 0) then
                        Imageload.Picture :=
                          FormImage.Imagenothumbcentersamle1rot.Picture
                      else
                        Imageload.Picture :=
                          FormImage.Imagenothumbcentersamle1.Picture;
                    end;
                  2:
                    begin
                      if (Showthubms[ithumb].rotation > 0) then
                        Imageload.Picture :=
                          FormImage.Imagenothumbcentersamle2rot.Picture
                      else
                        Imageload.Picture :=
                          FormImage.Imagenothumbcentersamle2.Picture;
                    end;
                end;
              end
              Else
              begin
                if Showthubms[ithumb].Anyproof > 0 then
                begin
                  Case Showthubms[ithumb].pagetype of
                    0:
                      Imageload.Picture :=
                        FormImage.Imagenothumbsinglemissingnofile.Picture;
                    1:
                      Imageload.Picture :=
                        FormImage.Imagenothumbcentersamle1missingnofile.Picture;
                    2:
                      Imageload.Picture :=
                        FormImage.Imagenothumbcentersamle2missingnofile.Picture;
                  end;
                end
                else
                begin
                  Case Showthubms[ithumb].pagetype of
                    0:
                      Imageload.Picture :=
                        FormImage.Imagenothumbsinglemissing.Picture;
                    1:
                      Imageload.Picture :=
                        FormImage.Imagenothumbcentersamle1missing.Picture;
                    2:
                      Imageload.Picture :=
                        FormImage.Imagenothumbcentersamle2missing.Picture;
                  end;
                end;

              end;
            end
            else
            begin
              if Showthubms[ithumb].pagetype = 1 then
              begin
                if Showthubms[ithumb].Hstat < 10 then
                begin
                  if (Showthubms[ithumb].rotation > 0) then
                    Imageload.Picture := FormImage.Imagenothumbcenterrot.Picture
                  else
                    Imageload.Picture := FormImage.Imagenothumbcenter.Picture;
                end
                else
                begin
                  if Showthubms[ithumb].Anyproof > 0 then
                    Imageload.Picture :=
                      FormImage.Imagenothumbcentermissingnofile.Picture
                  else
                    Imageload.Picture :=
                      FormImage.Imagenothumbcentermissing.Picture;
                end;
              end
              else
              begin
                if Showthubms[ithumb].Hstat < 10 then
                begin
                  if (Showthubms[ithumb].rotation > 0) then
                    Imageload.Picture := FormImage.Imagenothumbsinglerot.Picture
                  else
                    Imageload.Picture := FormImage.Imagenothumbsingle.Picture;
                end
                else
                begin
                  if Showthubms[ithumb].Anyproof > 0 then
                    Imageload.Picture :=
                      FormImage.Imagenothumbsinglemissingnofile.Picture
                  Else
                    Imageload.Picture :=
                      FormImage.Imagenothumbsinglemissing.Picture;
                end;
              end;
            end;
            nothumb := true;
          end;

          if Newbim then
          begin
            if (Imageload.Height > Imageload.width) then
            begin
              // Fit to fixed height - keep proportions
              W := round((Imageload.width / Imageload.Height) * TMW);
              h := TMH;
              dest.Top := InnerMargin;
              dest.bottom := TMH + InnerMargin;
              dest.left := ((TMW - W) div 2) + InnerMargin;
              dest.right := dest.left + W;
              BDest.Top := 0;
              BDest.bottom := TMH;
              BDest.left := ((TMW - W) div 2);
              BDest.right := dest.left + W;
            end
            else
            begin
              // Fit to fixed width - keep proportions
              h := round((Imageload.Height / Imageload.width) * TMH);
              W := TMW;
              dest.left := InnerMargin;
              dest.right := TMW + InnerMargin;
              dest.Top := ((TMH - h) div 2) + InnerMargin;
              dest.bottom := dest.Top + h;

              BDest.left := 0;
              BDest.right := TMW;
              BDest.Top := ((TMH - h) div 2);
              BDest.bottom := dest.Top + h;
            end;

            Bim.Canvas.pen.Color := clBtnFace;
            Bim.Canvas.Brush.Color := clBtnFace;
            Bim.Canvas.Rectangle(0, 0, Bim.width, Bim.Height);

            // Draw image to Bim canvas

            if (ActionCHKthumbreadorder.Checked) And
              (ActionCHKthumbreadorder.Enabled) then
            begin
              if ithumb mod 2 = 0 then
              begin
                awidth := BDest.right - BDest.left;
                BDest.left := 0;
                BDest.right := BDest.left + awidth;
              end
              else
              begin
                awidth := BDest.right - BDest.left;
                BDest.right := TMW;
                BDest.left := TMW - awidth;
              end;
              Bim.Canvas.StretchDraw(BDest,TJPEGImage(Imageload.Picture.Graphic));
            end
            else
            begin
              Bim.Canvas.StretchDraw(BDest,TJPEGImage(Imageload.Picture.Graphic));
            end;

            if CurThumbs[ithumb].Image.width <> Bim.width then
            begin
              CurThumbs[ithumb].Image.width := Bim.width;
              CurThumbs[ithumb].Image.Height := Bim.Height;
            end;
            BDest.Top := 0;
            BDest.left := 0;
            BDest.bottom := Bim.Height;
            BDest.right := Bim.width;
            CurThumbs[ithumb].Image.Canvas.CopyRect(BDest, Bim.Canvas, BDest);
            CurThumbs[ithumb].filetime := ServerThumbtime;
            CurThumbs[ithumb].masterset := Showthubms[ithumb].mastercopyseparationset;
            CurThumbs[ithumb].Lock := Showthubms[ithumb].Lock;
          end;
        end;
        // thumb - cur load



        // start på draw af images med status lås osv-

        for ithumb := 0 to NShowthubms do
        begin
          buf.Canvas.pen.Color := ClSilver;
          ibuf.Canvas.pen.Color := clWhite;
          ibuf.Canvas.Brush.Color := clWhite;
          ibuf.Canvas.Rectangle(0, 0, ibuf.width, ibuf.Height);
          Bim.width := CurThumbs[ithumb].Image.width;
          Bim.Height := CurThumbs[ithumb].Image.Height;
          BDest.Top := 0;
          BDest.left := 0;
          BDest.bottom := Bim.Height;
          BDest.right := Bim.width;
          // her copieres fra cur til det billiede som skal lægges på imagelist
          Bim.Canvas.CopyRect(BDest, CurThumbs[ithumb].Image.Canvas, BDest);

          if Showthubms[ithumb].anyheld then
          begin
            FormImage.ImageListStatus.GetBitmap(24, ibuf);
          end
          else
          begin
            FormImage.ImageListStatus.GetBitmap(23, ibuf);
          end;

          buf.Canvas.Brush.Color := ClSilver;
          buf.Canvas.Rectangle(0, 0, buf.width - 1, buf.Height - 1);
          buf.Canvas.pen.Color := clred;
          buf.Canvas.Brush.Color := clred;
          allrect.Top := 0;
          allrect.left := 0;
          allrect.bottom := buf.Height;
          allrect.right := buf.width;

          // Frame around full thumbnail image
          // Frame around full thumbnail image

          buf.Canvas.pen.Color := clGray;
          buf.Canvas.pen.width := 2;

          if Showthubms[ithumb].anynotapproved then
          begin
            if Showthubms[ithumb].isdisapproved then
            begin
              if (ActionCHKthumbreadorder.Checked) And
                (ActionCHKthumbreadorder.Enabled) and
                (Showthubms[ithumb].pagetype > 0) then
              begin

                buf.Canvas.Brush.Color := clred;
                if (Showthubms[ithumb].pagetype = 1) or
                  (Showthubms[ithumb].pagetype = 2) then
                begin
                  buf.Canvas.Brush.Color := clred;
                  buf.Canvas.Rectangle(allrect);
                end;

              end
              else
              begin
                buf.Canvas.Brush.Color := clred;
                buf.Canvas.FillRect(allrect);
              end;
              if firstDisappr = -1 then
                firstDisappr := ithumb;

            end
            else
            begin
              if (Showthubms[ithumb].ThumbOK) then
              begin
                if (ActionCHKthumbreadorder.Checked) And
                  (ActionCHKthumbreadorder.Enabled) and
                  (Showthubms[ithumb].pagetype > 0) then
                begin
                  if (Showthubms[ithumb].pagetype = 1) or
                    (Showthubms[ithumb].pagetype = 2) then
                  begin
                    buf.Canvas.Brush.Color := clYellow;
                    buf.Canvas.Rectangle(allrect);
                  end;
                end
                else
                begin
                  buf.Canvas.Brush.Color := clYellow;
                  buf.Canvas.Rectangle(allrect);
                end;
                if firstnotappr = -1 then
                  firstnotappr := ithumb;
              end
              else
              begin
                if (ActionCHKthumbreadorder.Checked) And
                  (ActionCHKthumbreadorder.Enabled) and
                  (Showthubms[ithumb].pagetype > 0) then
                begin
                  if (Showthubms[ithumb].pagetype = 1) or
                    (Showthubms[ithumb].pagetype = 2) then
                  begin
                    buf.Canvas.Brush.Color := clLtGray;
                    buf.Canvas.Rectangle(allrect);
                  end;
                end
                else
                begin
                  buf.Canvas.Brush.Color := clLtGray;
                  buf.Canvas.Rectangle(allrect);
                end;
              end;
            end;
          end
          else
          begin
            if (ActionCHKthumbreadorder.Checked) And
              (ActionCHKthumbreadorder.Enabled) and
              (Showthubms[ithumb].pagetype > 0) then
            begin
              // if (Prefs.Flatlook) then
              // begin
              if (Showthubms[ithumb].pagetype = 1) or
                (Showthubms[ithumb].pagetype = 2) then
              begin
                if Showthubms[ithumb].ISautoappr then
                  buf.Canvas.Brush.Color := clSkyBlue
                else
                  buf.Canvas.Brush.Color := cllime;
                buf.Canvas.Rectangle(allrect);
              end;
            end
            else
            begin
              if Showthubms[ithumb].ISautoappr then
                buf.Canvas.Brush.Color := clSkyBlue
              else
                buf.Canvas.Brush.Color := cllime;
              buf.Canvas.Rectangle(allrect);
            end;
          end;

          // Blit in jpeg
          if (ActionCHKthumbreadorder.Checked) And
            (ActionCHKthumbreadorder.Enabled) and
            (Showthubms[ithumb].pagetype > 0) then
          begin
            Case Showthubms[ithumb].pagetype of
              1:
                begin
                  dest.Top := InnerMargin;
                  dest.left := InnerMargin + InnerMargin;
                  dest.bottom := dest.Top + Bim.Height;
                  dest.right := dest.left + Bim.width;
                  buf.Canvas.stretchdraw(dest, Bim);
                end;
              2:
                begin
                  dest.Top := InnerMargin;
                  dest.left := 0;
                  dest.bottom := dest.Top + Bim.Height;
                  dest.right := dest.left + Bim.width;
                  buf.Canvas.stretchdraw(dest, Bim);
                end;
            end;
          end
          else
          begin
            dest.Top := InnerMargin;
            dest.left := InnerMargin;
            dest.bottom := dest.Top + Bim.Height;
            dest.right := dest.left + Bim.width;
            buf.Canvas.stretchdraw(dest, Bim);
          end;

          if Showthubms[ithumb].SpecialNoAciveEd > 0 then
          begin
            buf.Canvas.Brush.Color := clnone;
            buf.Canvas.pen.Color := clblack;
            buf.Canvas.pen.width := 3;
            buf.Canvas.Brush.Style := bsClear;
            buf.Canvas.Rectangle(0, 0, buf.width, buf.Height);
          end;

          buf.Canvas.Brush.Color := clWhite;
          buf.Canvas.pen.width := 1;

          sbuf.Canvas.Brush.Color := clWhite;
          sbuf.Canvas.pen.Color := clWhite;
          sbuf.Canvas.Brush.Style := bssolid;
          sbuf.Canvas.Rectangle(0, 0, sbuf.width, sbuf.Height);
          sbuf.Canvas.CopyMode := cmSrcAnd;
          sbuf.Canvas.CopyMode := cmSrcCopy;

          // x := round(10.0 * zoomfactor);

          buf.Canvas.CopyMode := cmSrcAnd;
          buf.Canvas.CopyMode := cmSrcCopy;

          // x := round(18.0 * zoomfactor);
          X := round(20.0 * zoomfactor);

          Lstat := 1000;

          colorstat := '';
          Colorst := '';
          for icolor := 0 to Showthubms[ithumb].Ncolor - 1 do
          begin
            if Lstat > Showthubms[ithumb].Colorstatarray[icolor + 1].status then
              Lstat := Showthubms[ithumb].Colorstatarray[icolor + 1].status;

            colorstat := colorstat +
              IntToStr(Showthubms[ithumb].Colorstatarray[icolor + 1]
              .status) + ',';
            Colorst := Colorst + Colorsnames
              [Showthubms[ithumb].Colorstatarray[icolor + 1].Colorid]
              .Name + ',';

            ibuf.Canvas.Brush.Color :=
              Colorsnames[Showthubms[ithumb].Colorstatarray[icolor + 1].Colorid]
              .Colorlook;
            ibuf.Canvas.pen.Color := Colorsnames
              [Showthubms[ithumb].Colorstatarray[icolor + 1].Colorid].Colorlook;

            if (Prefs.FlatLook) then
            begin
              ibuf.Canvas.pen.width := 1;
              ibuf.Canvas.pen.Color := clGray;
            end;

            ibuf.Canvas.Rectangle(0, 0, ibuf.width, ibuf.Height);

            if ibuf.Canvas.Brush.Color = clblack then
            begin
              // if Showthubms[ithumb].colorstatarray[icolor+1].status > 49 then
              ibuf.Canvas.Font.Color := clWhite;
              // else
              // ibuf.canvas.font.color := clgray;

              // ibuf.canvas.font.color := clred;
              ibuf.Canvas.CopyMode := cmSrcCopy;
              // if (Prefs.FlatLook) then
              // begin
              ibuf.Canvas.Brush.Color := clblack;
              ibuf.Canvas.pen.Color := clGray;
              ibuf.Canvas.pen.width := 1;
              ibuf.Canvas.Rectangle(r1818);
              // end
              // else
              // ibuf.Canvas.CopyRect(r1818, FormImage.ImageKcolor.Canvas,r1818);
            end
            else
            begin
              ibuf.Canvas.Font.Color := clblack;
              ibuf.Canvas.CopyMode := cmSrcAnd;
              // if (Prefs.FlatLook) then
              // begin
              // ibuf.canvas.Brush.color := Colorsnames[Showthubms[ithumb].colorstatarray[icolor+1].colorID].Colorlook;
              ibuf.Canvas.pen.Color := clGray;
              ibuf.Canvas.Rectangle(r1818);
              // end
              // else
              // ibuf.Canvas.CopyRect(r1818,FormImage.Imagecolorbrg.Canvas,r1818);
            end;

            ibuf.Canvas.Brush.Color := clWhite;
            ibuf.Canvas.pen.Color := clGray;

            Case Showthubms[ithumb].Colorstatarray[icolor + 1].status of
              0:
                begin
                  ibuf.Canvas.Rectangle(round(3.0 * zoomfactor),
                    round(2.0 * zoomfactor), round(14.0 * zoomfactor),
                    round(14.0 * zoomfactor));
                end;

              1 .. 49:
                begin
                  if (not Prefs.FlatLook) then
                    ibuf.Canvas.Rectangle(round(2.0 * zoomfactor),
                      round(2.0 * zoomfactor), round(14.0 * zoomfactor),
                      round(5.0 * zoomfactor));
                end;
            end;
            ibuf.Canvas.Brush.Style := bsClear;


            // Draw version number

            if Showthubms[ithumb].Colorstatarray[icolor + 1].Version > 0 then
              ibuf.Canvas.Textout(4, 1,IntToStr(Showthubms[ithumb].Colorstatarray[icolor + 1].Version));
            sd.left := 1;
            sd.Top := 1;
            sd.right := sd.left + round(16.0 * zoomfactor);
            sd.bottom := sd.Top + round(16.0 * zoomfactor);
            tmpplim.Canvas.CopyMode := cmSrcCopy;
            tmpplim.Canvas.CopyRect(r1616, ibuf.Canvas, sd);

            //

            if Prefs.SeparationsShowStatusIcons then
            begin
              FormImage.ImageListStatus.GetBitmap
                (statustoIMnumber[Showthubms[ithumb].Colorstatarray[icolor + 1]
                .status], tmpplim);
              ibuf.Canvas.CopyMode := cmSrcCopy;
              ibuf.Canvas.CopyRect(sd, tmpplim.Canvas, r1616);
            end;

            if (Prefs.ThumbnailSize > 1) then
            begin
              Y := buf.Height - round(27.0 * zoomfactor);
              if Not Prefs.ThumbnailsShowExternalStatus then
               Inc(Y, round(5.0 * zoomfactor));
              buf.Canvas.Draw(X, Y, ibuf);

              if Prefs.ThumbnailsShowExternalStatus then
              begin
                buf.Canvas.Brush.Color := externalstatusarray
                  [Showthubms[ithumb].Colorstatarray[icolor + 1]
                  .externalstatus].Color;
                buf.Canvas.pen.Color := clblack;
                // externalstatusarray[Showthubms[ithumb].colorstatarray[icolor+1].externalstatus].color;
                buf.Canvas.Ellipse(X + round(3.0 * zoomfactor),
                  Y + round(16.0 * zoomfactor), X + round(13.0 * zoomfactor),
                  Y + round(26.0 * zoomfactor));
              end;
            end;
            Inc(X, round(16.0 * zoomfactor));
          end;

          if (Prefs.ThumbnailSize > 1) and (Prefs.ThumnailsShowHold) then
          begin
            if Showthubms[ithumb].anyheld then
            begin
              sd.left := round(1.0 * zoomfactor);
              sd.Top := buf.Height - round(22.0 * zoomfactor);
              sd.right := sd.left + round(16.0 * zoomfactor);
              sd.bottom := sd.Top + round(16.0 * zoomfactor);

              tmpplim.Canvas.Brush.Color := buf.Canvas.Pixels[sd.left, sd.Top];
              // clwhite;
              tmpplim.Canvas.pen.Color := buf.Canvas.Pixels[sd.left, sd.Top];
              // clwhite;
              tmpplim.Canvas.Rectangle(0, 0, round(16.0 * zoomfactor),
                round(16 * zoomfactor));
              FormImage.ImageListStatus.GetBitmap(24, tmpplim);
              buf.Canvas.CopyMode := cmSrcCopy; // cmSrcand;
              buf.Canvas.CopyRect(sd, tmpplim.Canvas, r1616);
              buf.Canvas.CopyMode := cmSrcCopy;
            end
            else
            begin
              sd.left := 1;
              sd.Top := buf.Height - round(22.0 * zoomfactor);
              sd.right := sd.left + round(16.0 * zoomfactor);
              sd.bottom := sd.Top + round(16.0 * zoomfactor);
              tmpplim.Canvas.Brush.Color := buf.Canvas.Pixels[sd.left, sd.Top];
              // clwhite;
              tmpplim.Canvas.pen.Color := buf.Canvas.Pixels[sd.left, sd.Top];
              // clwhite;
              tmpplim.Canvas.Rectangle(0, 0, round(16 * zoomfactor),
                round(16.0 * zoomfactor));
              FormImage.ImageListStatus.GetBitmap(23, tmpplim);
              buf.Canvas.CopyMode := cmSrcCopy; // cmSrcand;
              buf.Canvas.CopyRect(sd, tmpplim.Canvas, r1616);
              buf.Canvas.CopyMode := cmSrcCopy;
            end;
          end;

          R1824.Top := 0;
          R1824.left := 0;
          R1824.bottom := round(18.0 * zoomfactor);
          R1824.right := round(24.0 * zoomfactor);

          prex := (FormImage.ImageListthumbnails.width - (prexCount * round(26.0 * zoomfactor))) div 2;

          for i := 0 to Length(Prefs.ThumbnailEvents) - 1 do
          begin
            if (Prefs.ThumbnailEvents[i].Enabled) then
            begin

              sd.left := prex;
              sd.Top := buf.Height - round(46.0 * zoomfactor) + 1;
              sd.right := sd.left + round(24.0 * zoomfactor);
              sd.bottom := sd.Top + round(18.0 * zoomfactor);

              // tmpplim.Canvas.Font := FormImage.Labeleventtext.Font;
              tmpplim.Canvas.Brush.Color := clWhite;
              tmpplim.Canvas.pen.Color := clWhite;
              preimdx := Showthubms[ithumb].pre[i + 1].status;

              // if (Prefs.Flatlook) then
              // begin
              tmpplim.width := 24;
              tmpplim.Height := 18;
              tmpplim.Canvas.pen.Color := clGray;
              tmpplim.Canvas.pen.width := 1;

              if (preimdx = 1) then
                tmpplim.Canvas.Brush.Color := clYellow
              else if (preimdx = 2) then
                tmpplim.Canvas.Brush.Color := cllime
              else if (preimdx = 3) then
                tmpplim.Canvas.Brush.Color := clred;
              // end;

              tmpplim.Canvas.Rectangle(0, 0, round(24.0 * zoomfactor), round(18.0 * zoomfactor));

              // if (not Prefs.Flatlook) then
              // FormImage.ImageListprepoll.GetBitmap(preimdx, tmpplim);

              tmpplim.Canvas.Brush.Style := bsClear;

              preimdx := (round(24 * zoomfactor) - tmpplim.Canvas.TextWidth(Prefs.PrePollEventNames[i])) div 2;
              if preimdx < 0 then
                preimdx := 1;

              Y := (round(18 * zoomfactor) - tmpplim.Canvas.TextHeight(Prefs.PrePollEventNames[i])) div 2;
              if (Y < 0) then
                Y := 0;

              // Write out pre-poll texts
              if (i = 3) and (Prefs.ThumbnailsShowMonoPDFIndicator) then
              begin
                if Showthubms[ithumb].pre[i + 1].status = 2 then
                begin
                  preimdx :=(round(24 * zoomfactor) - tmpplim.Canvas.TextWidth('COL')) div 2;
                  // #### 20230512 tmpplim.Canvas.Textout(preimdx + 1, Y, 'COL');
                  tmpplim.Canvas.Textout(preimdx , Y, 'COL');
                end
                else
                begin
                  preimdx :=(round(24 * zoomfactor) - tmpplim.Canvas.TextWidth('K')) div 2;
                  tmpplim.Canvas.Textout(preimdx + 1, Y, 'K');
                end;
              end
              else
                // tmpplim.Canvas.TextOut(preimdx+1,2, Prefs.PrePollEventNames[i]);
                // #### 20230512 tmpplim.Canvas.Textout(preimdx + 1, Y, Prefs.PrePollEventNames[i]);
                 tmpplim.Canvas.Textout(preimdx, Y, Prefs.PrePollEventNames[i]);

              // Copy pre-rectable to thumbnail
              thumbprepos[i] := sd;
              buf.Canvas.CopyMode := cmSrcCopy; // cmSrcand;
              buf.Canvas.CopyRect(sd, tmpplim.Canvas, R1824);
              buf.Canvas.CopyMode := cmSrcCopy;
              Inc(prex, round(26.0 * zoomfactor));
            end;

          end;

          buf.Canvas.CopyMode := cmSrcCopy;

          if Length(colorstat) > 0 then
          begin
            if colorstat[Length(colorstat)] = ',' then
              Delete(colorstat, Length(colorstat), 1);
          end;

          if Length(Colorst) > 0 then
          begin
            if Colorst[Length(Colorst)] = ',' then
              Delete(Colorst, Length(Colorst), 1);
          end;

          if Addingthumbs then
          begin

            i := FormImage.ImageListthumbnails.AddMasked(buf, clnone);
            Showthubms[ithumb].ImageIndex := i;
            // buf.savetofile('c:\bufs\app\'+IntToStr(Showthubms[ithumb].Imageindex)+'.bmp');
          end
          else
          begin
            // buf.savetofile('c:\bufs\repl\'+IntToStr(Showthubms[ithumb].Imageindex)+'.bmp');
            FormImage.ImageListthumbnails.ReplaceMasked
              (Showthubms[ithumb].ImageIndex, buf, clnone);
          end;
        end;
        imtime := NOW;
        // start på at add ImageListthumbnails til PBExListviewthumbnail

        if Addingthumbs then
        begin
          thispair := 0;
          for ithumb := 0 to NShowthubms do
          begin

            if (ithumb > 0) And (Prefs.ShowThumbnailGroups) then
            begin
              itsachange :=((Showthubms[ithumb].Location <> Showthubms[ithumb - 1].Location)
                 and (Prefs.ThumbnailGroupCaptionText[0].Enabled)) or
                ((Showthubms[ithumb].section <> Showthubms[ithumb - 1].section)
                and (Prefs.ThumbnailGroupCaptionText[2].Enabled)) or
                ((Showthubms[ithumb].edition <> Showthubms[ithumb - 1].edition)
                and (Prefs.ThumbnailGroupCaptionText[1].Enabled));

            end;

            if itsachange then
              Inc(Nchanges);

            L := PBExListviewthumbnail.Items.Add;
            L.Checked := false;

            if not((ActionCHKthumbreadorder.Checked) And (ActionCHKthumbreadorder.Enabled)) then
            begin
              Inc(thiscol);
              if (thiscol > maxcols) OR (itsachange) then
              begin
                thiscol := 1;
                Inc(thisrow);
              end;

              // Caption position
              pt.X := (thiscol - 1) * (FormImage.ImageListthumbnails.width + spacinghorizontal) + (spacinghorizontal div 2); // - spacinghorizontal;
              pt.Y := ((thisrow) * (FormImage.ImageListthumbnails.Height + Thumbcapheight)) + (Prefs.ThumbnailGapVertical div 2);
              L.Position := pt;
            end
            Else
            begin
              if (ithumb = 0) then
              begin
                Inc(thiscol);
              end;
              Inc(thiscol);

              if (thiscol > maxcols) OR (itsachange) then
              begin
                thispair := 0;
                thiscol := 1;
                Inc(thisrow);
              end;

              if (ithumb = 0) or (thiscol mod 2 = 1) then
              begin
                Inc(thispair);
              end;
              pt.X := (thiscol - 1) *(FormImage.ImageListthumbnails.width ) - spacinghorizontal + (thispair * round(20 * zoomfactor));
              pt.Y := (thisrow) * (FormImage.ImageListthumbnails.Height +  Thumbcapheight) + (Prefs.ThumbnailGapHorizontal div 2);
              L.Position := pt;
            end;

            L.ImageIndex := Showthubms[ithumb].ImageIndex;

            L.caption := '';
            if ithumb = 1 then
            begin
              Thumbcapheight := PBExListviewthumbnail.Items[0]
                .DisplayRect(drLabel).bottom - PBExListviewthumbnail.Items[0]
                .DisplayRect(drLabel).Top;
              Thumbcapheight := Thumbcapheight +
                round(Prefs.ThumbnailGapVertical * zoomfactor);
              // +round(20.0*zoomfactor);
            end;

            for i := 0 to Length(Prefs.ThumbnailCaptionText) - 1 do
            begin
              if Prefs.ThumbnailCaptionText[i].Enabled then
              begin
                if pos('Pagename', Prefs.ThumbnailCaptionText[i].Name) > 0 then
                begin
                  L.caption := L.caption + ' ' + Showthubms[ithumb].pagename;
                end;
                if pos('Section', Prefs.ThumbnailCaptionText[i].Name) > 0 then
                begin
                  L.caption := L.caption + ' ' + tNames1.sectionidtoname(Showthubms[ithumb].section);
                end;
                if pos('Edition', Prefs.ThumbnailCaptionText[i].Name) > 0 then
                begin
                  L.caption := L.caption + ' ' + Showthubms[ithumb].editionstr;
                end;
                if pos('Location', Prefs.ThumbnailCaptionText[i].Name) > 0 then
                begin
                  L.caption := L.caption + ' ' + Showthubms[ithumb].Locationstr;
                end;
                if pos('version', Prefs.ThumbnailCaptionText[i].Name) > 0 then
                begin
                  L.caption := L.caption + ' ' +
                    IntToStr(Showthubms[ithumb].Version);
                end;
                if pos('PageIndex', Prefs.ThumbnailCaptionText[i].Name) > 0 then
                begin
                  L.caption := L.caption + ' ' +
                    IntToStr(Showthubms[ithumb].pageindex);
                end;
                if pos('Plannedname', Prefs.ThumbnailCaptionText[i].Name) > 0
                then
                begin
                  L.caption := L.caption + ' ' + Showthubms[ithumb]
                    .planpagename;
                end;
                if pos('Comment', Prefs.ThumbnailCaptionText[i].Name) > 0 then
                begin
                  L.caption := L.caption + ' ' + Showthubms[ithumb].Comment;
                end;
                if pos('Press', Prefs.ThumbnailCaptionText[i].Name) > 0 then
                begin
                  L.caption := L.caption + ' ' + Showthubms[ithumb].pressstr;
                end;
                if pos('Pagina', Prefs.ThumbnailCaptionText[i].Name) > 0 then
                begin
                  L.caption := L.caption + ' ' +
                    IntToStr(Showthubms[ithumb].pagina);
                end;
                if pos('#', Prefs.ThumbnailCaptionText[i].Name) > 0 then
                begin
                  L.caption := L.caption + #13;
                end;
                if pos('Master edition', Prefs.ThumbnailCaptionText[i].Name) > 0
                then
                begin
                  L.caption := L.caption + ' ' + tNames1.editionIDtoname
                    (Showthubms[ithumb].MasterEdition);
                end;
                if pos('Page format', Prefs.ThumbnailCaptionText[i].Name) > 0
                then
                begin
                  L.caption := L.caption + ' ' + tNames1.pageformatIDtoname
                    (Showthubms[ithumb].pageFormatID);
                end;
              end;
            end;
            If Prefs.Debug then
            begin
              L.caption := L.caption + #13;
              L.caption := L.caption + ' M=' +
                IntToStr(Showthubms[ithumb].mastercopyseparationset);
              L.caption := L.caption + ' P=' +
                IntToStr(Showthubms[ithumb].pdfmaster);
            end;

          end;
        end;
        listtime := NOW;

      end; // NShowthubms > -1

    end; // end på hele create af lav thumbnails for der var nogen

    if Prefs.ReselectThumbnails then
    begin
      if (PBExListviewthumbnail.Items.Count > 0) and (NThumbpresel > 0) then
      begin
        for i := 0 to PBExListviewthumbnail.Items.Count - 1 do
        begin
          for i1 := 0 to NThumbpresel - 1 do
          begin
            if Thumbpresel[i1] = Showthubms[PBExListviewthumbnail.Items[i].
              Index].mastercopyseparationset then
              PBExListviewthumbnail.Items[i].Selected := true;
          end;
        end;
      end;
    end;

    Nthumbprepos := 0;
    for i := 0 to 3 do
    begin
      if thumbprepos[i].left > -1 then
      begin
        Inc(Nthumbprepos);
      end;
    end;

  Finally
    if firstnotappr > -1 then
    begin
      ActionCHKthumbnextnotapproved.Enabled := true;
    end
    else
    begin
      ActionCHKthumbnextnotapproved.Enabled := false;
    end;
    if firstDisappr > -1 then
    begin
      ActionCHKthumbnextdisapproved.Enabled := true;
    end
    else
    begin
      ActionCHKthumbnextdisapproved.Enabled := false;
    end;

    PBExListviewthumbnail.Visible := true;
    PBExListviewthumbnail.Items.EndUpdate;

    if (PBExListviewthumbnail.Items.Count > 0) and (lasttopitemmaster > -1) and
      (prevverttop > 20) then
    begin
      if (lasttopitemmaster = Showthubms[0].mastercopyseparationset) and
        (lastenditemmaster = Showthubms[PBExListviewthumbnail.Items.Count - 1]
        .mastercopyseparationset) then
      begin
        L := PBExListviewthumbnail.FindCaption(0, Visiblecap, false,
          false, true);
        if L <> nil then
        begin
          L.MakeVisible(true);
        end;
      end;
    end;

    TimerblinkNotapproved.Enabled := PBExListviewthumbnail.Items.Count > 0;

    screen.Cursor := crdefault;
    Cutpan.free;
    Bim.free;
    buf.free;
    sbuf.free;
    ibuf.free;
    tmpplim.free;

    if selpage <> nil then
    begin
      PBExListviewthumbnail.SetFocus;
      PBExListviewthumbnail.Selected := selpage;
    end;
  end;
  Changingthumborder := false;
  writeMainlogfile('Load Thumbnails end');

end;

procedure TFormMain.ActionBackupConfigurationExecute(Sender: TObject);
var
  Buffer: string;
  computerName: string;
  haserror: Boolean;
begin
  if (not BackupApplicationConfigFilesPossible) then
  begin
    MessageDlg('Database tables for backup/restore does not exists', mtError,
      [mbOk], 0);
    exit;
  end;

  computerName := TUtils.GetThisComputerName();

  haserror := false;

  Buffer := TFile.ReadAllText(TUtils.GetPlanCenterIniFilePath(Prefs.PlanCenterConfigFileName));
  if (Buffer <> '') then
  begin
    if (not SaveConfigFile('PlanCenter', computerName, Prefs.Username, 1,
      TUtils.GetPlanCenterIniFilePath(Prefs.PlanCenterConfigFileName), Buffer)) then

      MessageDlg('Error saving configuration file to database', mtError,
        [mbOk], 0)
    else
      MessageDlg('Configuration successfully saved to database', mtInformation,
        [mbOk], 0);
  end;

end;

function TFormMain.SaveConfigFile(ApplicationName: string; MachineName: string;
  Username: string; ConfigNumber: Integer; ConfigFileName: string;
  Buffer: string): Boolean;
var
  hasEntry: Boolean;
begin

  result := true;
  try

    hasEntry := false;
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('SELECT Application FROM BackupApplicationConfigFiles');
    Datam1.Query1.SQL.Add('WHERE Application=''' + ApplicationName + '''');
    Datam1.Query1.SQL.Add('AND MachineName=''' + MachineName + '''');
    Datam1.Query1.SQL.Add('AND (UserName=''' + Username +
      ''' OR UserName='''')');
    Datam1.Query1.Open;
    if (not Datam1.Query1.Eof) then
      hasEntry := true;
    Datam1.Query1.Close;

    if (not hasEntry) then
    begin
      Datam1.Query1.SQL.Clear;
      Datam1.Query1.SQL.Add
        ('INSERT INTO BackupApplicationConfigFiles (Application, MachineName, UserName) VALUES');
      Datam1.Query1.SQL.Add('(''' + ApplicationName + ''',''' + MachineName +
        ''',''' + Username + ''')');
      trysql(Datam1.Query1);
    end;

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('UPDATE BackupApplicationConfigFiles ');
    Datam1.Query1.SQL.Add('SET ConfigFileName' + IntToStr(ConfigNumber) + '='''
      + ConfigFileName + ''',');
    Datam1.Query1.SQL.Add('ConfigContents' + IntToStr(ConfigNumber) + '=''' +
      Buffer + '''');
    Datam1.Query1.SQL.Add('WHERE Application=''' + ApplicationName +
      ''' AND MachineName=''' + MachineName + '''');
    // AND UserName=''' + UserName + '''');
    trysql(Datam1.Query1);
  except
    result := false;
  end;
end;

procedure TFormMain.ActionRestoreConfigurationExecute(Sender: TObject);
var
  Buffer: string;
  computerName: string;
  haserror: Boolean;
  lastUpdateTime: TDateTime;
  Year, Month, Day: Word;
begin
  if (not BackupApplicationConfigFilesPossible) then
  begin
    MessageDlg('Database tables for backup/restore does not exists', mtError,
      [mbOk], 0);
    exit;
  end;

  computerName := TUtils.GetThisComputerName();
  lastUpdateTime := EncodeDateTime(1975, 1, 15, 0, 0, 0, 0);
  try

    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add
      ('SELECT LastUpdateTime FROM BackupApplicationConfigFiles');
    Datam1.Query1.SQL.Add('WHERE Application=''PlanCenter''');
    Datam1.Query1.SQL.Add('AND MachineName=''' + computerName + '''');
    // Datam1.Query1.SQL.Add('AND (UserName=''' + Prefs.Username + ''' OR UserName='''')');
    Datam1.Query1.Open;
    if (not Datam1.Query1.Eof) then
      lastUpdateTime := Datam1.Query1.Fields[0].AsDateTime;
    Datam1.Query1.Close;

    Decodedate(lastUpdateTime, Year, Month, Day);
    if (Year < 2000) then
    begin
      MessageDlg('No backed up configuation data found for this application',
        mtError, [mbOk], 0);
      exit;
    end;

    if (MessageDlg('Restore configuration from ' +
      FormaTDateTime('dd/mm/yy hh:mm:ss', lastUpdateTime) + ' ?',
      mtConfirmation, mbOKCancel, 0) = mrcancel) then
      exit;

    Buffer := '';
    Datam1.Query1.SQL.Clear;
    Datam1.Query1.SQL.Add('SELECT ConfigContents1 FROM BackupApplicationConfigFiles');
    Datam1.Query1.SQL.Add('WHERE Application=''PlanCenter''');
    Datam1.Query1.SQL.Add('AND MachineName=''' + computerName + '''');
    // Datam1.Query1.SQL.Add('AND (UserName=''' + Prefs.Username + ''' OR UserName='''')');
    Datam1.Query1.SQL.Add('AND ConfigFileName1=''' +
      TUtils.GetPlanCenterIniFilePath(Prefs.PlanCenterConfigFileName) + '''');
    Datam1.Query1.Open;
    if (not Datam1.Query1.Eof) then
      Buffer := Datam1.Query1.Fields[0].AsString;
    Datam1.Query1.Close;

    if (Buffer <> '') then
    begin
      TFile.WriteAllText(TUtils.GetPlanCenterIniFilePath(Prefs.PlanCenterConfigFileName), Buffer);
      MessageDlg
        ('Configuration restored successfully - PlanCenter will now exit. Restart to use new configuration.',
        mtInformation, [mbOk], 0);
      FormMain.Close;
    end;
  except
    MessageDlg('Error restoring configuration data', mtError, [mbOk], 0);
  end;
end;

end.
